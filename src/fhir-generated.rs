#[doc = " A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, "]
#[doc = " used to track charges for a patient, cost centers, etc."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Account {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The party(s) that are responsible for covering the payment of this account, and what order "]
    #[doc = " should they be applied to the account."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub coverage: Option<Vec<AccountCoverage>>,
    #[doc = " Provides additional information about what the account tracks and how it is used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The parties responsible for balancing the account if other payment options fall short."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub guarantor: Option<Vec<AccountGuarantor>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Unique identifier used to reference the account.  Might or might not be intended for human "]
    #[doc = " use (e.g. credit card number)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Name used for the account when displaying it to humans in reports, etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " Indicates the service area, hospital, department, etc. with responsibility for managing the "]
    #[doc = " Account."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub owner: Option<Reference>,
    #[doc = " Reference to a parent Account."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "partOf")]
    pub part_of: Option<Reference>,
    #[doc = " This is a Account resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The date range of services associated with this account."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "servicePeriod")]
    pub service_period: Option<Period>,
    #[doc = " Indicates whether the account is presently used/usable or not."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " Identifies the entity which incurs the expenses. While the immediate recipients of services "]
    #[doc = " or goods might be entities related to the subject, the expenses were ultimately incurred by "]
    #[doc = " the subject of the Account."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Vec<Reference>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " Categorizes the account for reporting and searching purposes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, "]
#[doc = " used to track charges for a patient, cost centers, etc."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Account_Coverage")]
#[serde(deny_unknown_fields)]
pub struct AccountCoverage {
    #[doc = " Extensions for priority"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _priority: Option<Element>,
    #[doc = " The party(s) that contribute to payment (or part of) of the charges applied to this account "]
    #[doc = " (including self-pay)."]
    #[doc = " "]
    #[doc = " A coverage may only be responsible for specific types of charges, and the sequence of the "]
    #[doc = " coverages in the account could be important when processing billing."]
    pub coverage: Reference,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The priority of the coverage in the context of this account."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub priority: Option<PositiveInt>,
}
#[doc = " A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, "]
#[doc = " used to track charges for a patient, cost centers, etc."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Account_Guarantor")]
#[serde(deny_unknown_fields)]
pub struct AccountGuarantor {
    #[doc = " Extensions for onHold"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_onHold")]
    pub _on_hold: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A guarantor may be placed on credit hold or otherwise have their role temporarily "]
    #[doc = " suspended."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onHold")]
    pub on_hold: Option<Boolean>,
    #[doc = " The entity who is responsible."]
    pub party: Reference,
    #[doc = " The timeframe during which the guarantor accepts responsibility for the account."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
}
#[doc = " This resource allows for the definition of some activity to be performed, independent of a "]
#[doc = " particular patient, practitioner, or other performance context."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ActivityDefinition {
    #[doc = " Extensions for approvalDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_approvalDate")]
    pub _approval_date: Option<Element>,
    #[doc = " Extensions for copyright"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _copyright: Option<Element>,
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for doNotPerform"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_doNotPerform")]
    pub _do_not_perform: Option<Element>,
    #[doc = " Extensions for experimental"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _experimental: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for intent"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _intent: Option<Element>,
    #[doc = " Extensions for kind"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _kind: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for lastReviewDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastReviewDate")]
    pub _last_review_date: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for priority"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _priority: Option<Element>,
    #[doc = " Extensions for publisher"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _publisher: Option<Element>,
    #[doc = " Extensions for purpose"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _purpose: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for subjectCanonical"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_subjectCanonical")]
    pub _subject_canonical: Option<Element>,
    #[doc = " Extensions for subtitle"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _subtitle: Option<Element>,
    #[doc = " Extensions for timingDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_timingDateTime")]
    pub _timing_date_time: Option<Element>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " Extensions for usage"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _usage: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " The date on which the resource content was approved by the publisher. Approval happens once "]
    #[doc = " when the content is officially approved for usage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "approvalDate")]
    pub approval_date: Option<Date>,
    #[doc = " An individiual or organization primarily involved in the creation and maintenance of the "]
    #[doc = " content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Vec<ContactDetail>>,
    #[doc = " Indicates the sites on the subject's body where the procedure should be performed (I.e. the "]
    #[doc = " target sites)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "bodySite")]
    pub body_site: Option<Vec<CodeableConcept>>,
    #[doc = " Detailed description of the type of activity; e.g. What lab test, what procedure, what kind "]
    #[doc = " of encounter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,
    #[doc = " Contact details to assist a user in finding and communicating with the publisher."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " A copyright statement relating to the activity definition and/or its contents. Copyright "]
    #[doc = " statements are generally legal restrictions on the use and publishing of the activity "]
    #[doc = " definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,
    #[doc = " The date  (and optionally time) when the activity definition was published. The date must "]
    #[doc = " change when the business version changes and it must change if the status code changes. In "]
    #[doc = " addition, it should change when the substantive content of the activity definition changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " A free text natural language description of the activity definition from a consumer's "]
    #[doc = " perspective."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " Set this to true if the definition is to indicate that a particular activity should NOT be "]
    #[doc = " performed. If true, this element should be interpreted to reinforce a negative coding. For "]
    #[doc = " example NPO as a code with a doNotPerform of true would still indicate to NOT perform the "]
    #[doc = " action."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "doNotPerform")]
    pub do_not_perform: Option<Boolean>,
    #[doc = " Provides detailed dosage instructions in the same way that they are described for "]
    #[doc = " MedicationRequest resources."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub dosage: Option<Vec<Dosage>>,
    #[doc = " Dynamic values that will be evaluated to produce values for elements of the resulting "]
    #[doc = " resource. For example, if the dosage of a medication must be computed based on the "]
    #[doc = " patient's weight, a dynamic value would be used to specify an expression that calculated "]
    #[doc = " the weight, and the path on the request resource that would contain the result."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dynamicValue")]
    pub dynamic_value: Option<Vec<ActivityDefinitionDynamicValue>>,
    #[doc = " An individual or organization primarily responsible for internal coherence of the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub editor: Option<Vec<ContactDetail>>,
    #[doc = " The period during which the activity definition content was or is planned to be in active "]
    #[doc = " use."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectivePeriod")]
    pub effective_period: Option<Period>,
    #[doc = " An individual or organization responsible for officially endorsing the content for use in "]
    #[doc = " some setting."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub endorser: Option<Vec<ContactDetail>>,
    #[doc = " A Boolean value to indicate that this activity definition is authored for testing purposes "]
    #[doc = " (or education/evaluation/marketing) and is not intended to be used for genuine usage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A formal identifier that is used to identify this activity definition when it is "]
    #[doc = " represented in other formats, or referenced in a specification, model, design or an "]
    #[doc = " instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " Indicates the level of authority/intentionality associated with the activity and where the "]
    #[doc = " request should fit into the workflow chain."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub intent: Option<Code>,
    #[doc = " A legal or geographic region in which the activity definition is intended to be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,
    #[doc = " A description of the kind of resource the activity definition is representing. For example, "]
    #[doc = " a MedicationRequest, a ServiceRequest, or a CommunicationRequest. Typically, but not "]
    #[doc = " always, this is a Request resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<Code>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The date on which the resource content was last reviewed. Review happens periodically after "]
    #[doc = " approval but does not change the original approval date."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastReviewDate")]
    pub last_review_date: Option<Date>,
    #[doc = " A reference to a Library resource containing any formal logic used by the activity "]
    #[doc = " definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub library: Option<Vec<Canonical>>,
    #[doc = " Identifies the facility where the activity will occur; e.g. home, hospital, specific "]
    #[doc = " clinic, etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<Reference>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A natural language name identifying the activity definition. This name should be usable as "]
    #[doc = " an identifier for the module by machine processing applications such as code generation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " Defines observation requirements for the action to be performed, such as body weight or "]
    #[doc = " surface area."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "observationRequirement")]
    pub observation_requirement: Option<Vec<Reference>>,
    #[doc = " Defines the observations that are expected to be produced by the action."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "observationResultRequirement")]
    pub observation_result_requirement: Option<Vec<Reference>>,
    #[doc = " Indicates who should participate in performing the action described."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub participant: Option<Vec<ActivityDefinitionParticipant>>,
    #[doc = " Indicates how quickly the activity  should be addressed with respect to other requests."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub priority: Option<Code>,
    #[doc = " Identifies the food, drug or other product being consumed or supplied in the activity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "productCodeableConcept")]
    pub product_codeable_concept: Option<CodeableConcept>,
    #[doc = " Identifies the food, drug or other product being consumed or supplied in the activity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "productReference")]
    pub product_reference: Option<Reference>,
    #[doc = " A profile to which the target of the activity definition is expected to conform."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub profile: Option<Canonical>,
    #[doc = " The name of the organization or individual that published the activity definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
    #[doc = " Explanation of why this activity definition is needed and why it has been designed as it "]
    #[doc = " has."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,
    #[doc = " Identifies the quantity expected to be consumed at once (per dose, per meal, etc.)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,
    #[doc = " Related artifacts such as additional documentation, justification, or bibliographic "]
    #[doc = " references."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatedArtifact")]
    pub related_artifact: Option<Vec<RelatedArtifact>>,
    #[doc = " This is a ActivityDefinition resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " An individual or organization primarily responsible for review of some aspect of the "]
    #[doc = " content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reviewer: Option<Vec<ContactDetail>>,
    #[doc = " Defines specimen requirements for the action to be performed, such as required specimens "]
    #[doc = " for a lab test."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "specimenRequirement")]
    pub specimen_requirement: Option<Vec<Reference>>,
    #[doc = " The status of this activity definition. Enables tracking the life-cycle of the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A code, group definition, or canonical reference that describes  or identifies the intended "]
    #[doc = " subject of the activity being defined.  Canonical references are allowed to support the "]
    #[doc = " definition of protocols for drug and substance quality specifications, and is allowed to "]
    #[doc = " reference a MedicinalProductDefinition, SubstanceDefinition, "]
    #[doc = " AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition "]
    #[doc = " resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectCanonical")]
    pub subject_canonical: Option<String>,
    #[doc = " A code, group definition, or canonical reference that describes  or identifies the intended "]
    #[doc = " subject of the activity being defined.  Canonical references are allowed to support the "]
    #[doc = " definition of protocols for drug and substance quality specifications, and is allowed to "]
    #[doc = " reference a MedicinalProductDefinition, SubstanceDefinition, "]
    #[doc = " AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition "]
    #[doc = " resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectCodeableConcept")]
    pub subject_codeable_concept: Option<CodeableConcept>,
    #[doc = " A code, group definition, or canonical reference that describes  or identifies the intended "]
    #[doc = " subject of the activity being defined.  Canonical references are allowed to support the "]
    #[doc = " definition of protocols for drug and substance quality specifications, and is allowed to "]
    #[doc = " reference a MedicinalProductDefinition, SubstanceDefinition, "]
    #[doc = " AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition "]
    #[doc = " resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectReference")]
    pub subject_reference: Option<Reference>,
    #[doc = " An explanatory or alternate title for the activity definition giving additional information "]
    #[doc = " about its content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subtitle: Option<String>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " The period, timing or frequency upon which the described activity is to occur."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingAge")]
    pub timing_age: Option<Age>,
    #[doc = " The period, timing or frequency upon which the described activity is to occur."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingDateTime")]
    pub timing_date_time: Option<String>,
    #[doc = " The period, timing or frequency upon which the described activity is to occur."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingDuration")]
    pub timing_duration: Option<Duration>,
    #[doc = " The period, timing or frequency upon which the described activity is to occur."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingPeriod")]
    pub timing_period: Option<Period>,
    #[doc = " The period, timing or frequency upon which the described activity is to occur."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingRange")]
    pub timing_range: Option<Range>,
    #[doc = " The period, timing or frequency upon which the described activity is to occur."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingTiming")]
    pub timing_timing: Option<Timing>,
    #[doc = " A short, descriptive, user-friendly title for the activity definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[doc = " Descriptive topics related to the content of the activity. Topics provide a high-level "]
    #[doc = " categorization of the activity that can be useful for filtering and searching."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub topic: Option<Vec<CodeableConcept>>,
    #[doc = " A reference to a StructureMap resource that defines a transform that can be executed to "]
    #[doc = " produce the intent resource using the ActivityDefinition instance as the input."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub transform: Option<Canonical>,
    #[doc = " An absolute URI that is used to identify this activity definition when it is referenced in "]
    #[doc = " a specification, model, design or an instance; also called its canonical identifier. This "]
    #[doc = " SHOULD be globally unique and SHOULD be a literal address at which at which an "]
    #[doc = " authoritative instance of this activity definition is (or will be) published. This URL can "]
    #[doc = " be the target of a canonical reference. It SHALL remain the same when the activity "]
    #[doc = " definition is stored on different servers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
    #[doc = " A detailed description of how the activity definition is used from a clinical perspective."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub usage: Option<String>,
    #[doc = " The content was developed with a focus and intent of supporting the contexts that are "]
    #[doc = " listed. These contexts may be general categories (gender, age, ...) or may be references to "]
    #[doc = " specific programs (insurance plans, studies, ...) and may be used to assist with indexing "]
    #[doc = " and searching for appropriate activity definition instances."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,
    #[doc = " The identifier that is used to identify this version of the activity definition when it is "]
    #[doc = " referenced in a specification, model, design or instance. This is an arbitrary value "]
    #[doc = " managed by the activity definition author and is not expected to be globally unique. For "]
    #[doc = " example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. "]
    #[doc = " There is also no expectation that versions can be placed in a lexicographical sequence. To "]
    #[doc = " provide a version consistent with the Decision Support Service specification, use the "]
    #[doc = " format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge "]
    #[doc = " assets, refer to the Decision Support Service specification. Note that a version is "]
    #[doc = " required for non-experimental active assets."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[doc = " This resource allows for the definition of some activity to be performed, independent of a "]
#[doc = " particular patient, practitioner, or other performance context."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ActivityDefinition_DynamicValue")]
#[serde(deny_unknown_fields)]
pub struct ActivityDefinitionDynamicValue {
    #[doc = " Extensions for path"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _path: Option<Element>,
    #[doc = " An expression specifying the value of the customized element."]
    pub expression: Expression,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The path to the element to be customized. This is the path on the resource that will hold "]
    #[doc = " the result of the calculation defined by the expression. The specified path SHALL be a "]
    #[doc = " FHIRPath resolveable on the specified target type of the ActivityDefinition, and SHALL "]
    #[doc = " consist only of identifiers, constant indexers, and a restricted subset of functions. The "]
    #[doc = " path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers "]
    #[doc = " ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath "]
    #[doc = " Profile](fhirpath.html#simple) for full details)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}
#[doc = " This resource allows for the definition of some activity to be performed, independent of a "]
#[doc = " particular patient, practitioner, or other performance context."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ActivityDefinition_Participant")]
#[serde(deny_unknown_fields)]
pub struct ActivityDefinitionParticipant {
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The role the participant should play in performing the described action."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub role: Option<CodeableConcept>,
    #[doc = " The type of participant in the action."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}
#[doc = " An address expressed using postal conventions (as opposed to GPS or other location definition "]
#[doc = " formats).  This data type may be used to convey addresses for use in delivering mail as well as "]
#[doc = " for visiting locations which might not be valid for mail delivery.  There are a variety of "]
#[doc = " postal address formats defined around the world."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Address {
    #[doc = " Extensions for city"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _city: Option<Element>,
    #[doc = " Extensions for country"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _country: Option<Element>,
    #[doc = " Extensions for district"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _district: Option<Element>,
    #[doc = " Extensions for line"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _line: Option<Vec<Element>>,
    #[doc = " Extensions for postalCode"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_postalCode")]
    pub _postal_code: Option<Element>,
    #[doc = " Extensions for state"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _state: Option<Element>,
    #[doc = " Extensions for text"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _text: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " Extensions for use"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _use: Option<Element>,
    #[doc = " The name of the city, town, suburb, village or other community or delivery center."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub city: Option<String>,
    #[doc = " Country - a nation as commonly understood or generally accepted."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,
    #[doc = " The name of the administrative area (county)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub district: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " This component contains the house number, apartment number, street name, street direction,  "]
    #[doc = " P.O. Box number, delivery hints, and similar address information."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub line: Option<Vec<String>>,
    #[doc = " Time period when address was/is in use."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
    #[doc = " A postal code designating a region defined by the postal service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "postalCode")]
    pub postal_code: Option<String>,
    #[doc = " Sub-unit of a country with limited sovereignty in a federally organized country. A code may "]
    #[doc = " be used if codes are in common use (e.g. US 2 letter state codes)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[doc = " Specifies the entire address as it should be displayed e.g. on a postal label. This may be "]
    #[doc = " provided instead of or as well as the specific parts."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    #[doc = " Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. "]
    #[doc = " PO Boxes and care-of addresses). Most addresses are both."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<serde_json::Value>,
    #[doc = " The purpose of this address."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "use")]
    pub use_: Option<serde_json::Value>,
}
#[doc = " A medicinal product in the final form which is suitable for administering to a patient (after "]
#[doc = " any mixing of multiple components, dissolution etc. has been performed)."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct AdministrableProductDefinition {
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " The dose form of the final product after necessary reconstitution or processing. Contrasts "]
    #[doc = " to the manufactured dose form (see ManufacturedItemDefinition). If the manufactured form "]
    #[doc = " was 'powder for solution for injection', the administrable dose form could be 'solution for "]
    #[doc = " injection' (once mixed with another item having manufactured form 'solvent for solution for "]
    #[doc = " injection')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "administrableDoseForm")]
    pub administrable_dose_form: Option<CodeableConcept>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " A device that is integral to the medicinal product, in effect being considered as an "]
    #[doc = " \"ingredient\" of the medicinal product. This is not intended for devices that are just "]
    #[doc = " co-packaged."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub device: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " References a product from which one or more of the constituent parts of that product can be "]
    #[doc = " prepared and used as described by this administrable product.  If this administrable "]
    #[doc = " product describes the administration of a crushed tablet, the 'formOf' would be the product "]
    #[doc = " representing a distribution containing tablets and possibly also a cream.  This is distinct "]
    #[doc = " from the 'producedFrom' which refers to the specific components of the product that are "]
    #[doc = " used in this preparation, rather than the product as a whole."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "formOf")]
    pub form_of: Option<Vec<Reference>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " An identifier for the administrable product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The ingredients of this administrable medicinal product. This is only needed if the "]
    #[doc = " ingredients are not specified either using ManufacturedItemDefiniton (via "]
    #[doc = " AdministrableProductDefinition.producedFrom) to state which component items are used to "]
    #[doc = " make this, or using by incoming references from the Ingredient resource, to state in detail "]
    #[doc = " which substances exist within this. This element allows a basic coded ingredient to be "]
    #[doc = " used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub ingredient: Option<Vec<CodeableConcept>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Indicates the specific manufactured items that are part of the 'formOf' product that are "]
    #[doc = " used in the preparation of this specific administrable form.  In some cases, an "]
    #[doc = " administrable form might use all of the items from the overall product (or there might only "]
    #[doc = " be one item), while in other cases, an administrable form might use only a subset of the "]
    #[doc = " items available in the overall product.  For example, an administrable form might involve "]
    #[doc = " combining a liquid and a powder available as part of an overall product, but not involve "]
    #[doc = " applying the also supplied cream."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "producedFrom")]
    pub produced_from: Option<Vec<Reference>>,
    #[doc = " Characteristics e.g. a product's onset of action."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub property: Option<Vec<AdministrableProductDefinitionProperty>>,
    #[doc = " This is a AdministrableProductDefinition resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The path by which the product is taken into or makes contact with the body. In some regions "]
    #[doc = " this is referred to as the licenced or approved route. RouteOfAdministration cannot be used "]
    #[doc = " when the 'formOf' product already uses MedicinalProductDefinition.route (and vice versa)."]
    #[serde(rename = "routeOfAdministration")]
    pub route_of_administration: Vec<AdministrableProductDefinitionRouteOfAdministration>,
    #[doc = " The status of this administrable product. Enables tracking the life-cycle of the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " The presentation type in which this item is given to a patient. e.g. for a spray - 'puff' "]
    #[doc = " (as in 'contains 100 mcg per puff'), or for a liquid - 'vial' (as in 'contains 5 ml per "]
    #[doc = " vial')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "unitOfPresentation")]
    pub unit_of_presentation: Option<CodeableConcept>,
}
#[doc = " A medicinal product in the final form which is suitable for administering to a patient (after "]
#[doc = " any mixing of multiple components, dissolution etc. has been performed)."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "AdministrableProductDefinition_Property")]
#[serde(deny_unknown_fields)]
pub struct AdministrableProductDefinitionProperty {
    #[doc = " Extensions for valueBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub _value_boolean: Option<Element>,
    #[doc = " Extensions for valueDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDate")]
    pub _value_date: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The status of characteristic e.g. assigned or pending."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<CodeableConcept>,
    #[doc = " A code expressing the type of characteristic."]
    #[serde(rename = "type")]
    pub type_: CodeableConcept,
    #[doc = " A value for the characteristic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAttachment")]
    pub value_attachment: Option<Attachment>,
    #[doc = " A value for the characteristic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,
    #[doc = " A value for the characteristic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,
    #[doc = " A value for the characteristic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDate")]
    pub value_date: Option<String>,
    #[doc = " A value for the characteristic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,
}
#[doc = " A medicinal product in the final form which is suitable for administering to a patient (after "]
#[doc = " any mixing of multiple components, dissolution etc. has been performed)."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "AdministrableProductDefinition_RouteOfAdministration")]
#[serde(deny_unknown_fields)]
pub struct AdministrableProductDefinitionRouteOfAdministration {
    #[doc = " Coded expression for the route."]
    pub code: CodeableConcept,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The first dose (dose quantity) administered can be specified for the product, using a "]
    #[doc = " numerical value and its unit of measurement."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "firstDose")]
    pub first_dose: Option<Quantity>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The maximum dose per day (maximum dose quantity to be administered in any one 24-h period) "]
    #[doc = " that can be administered."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxDosePerDay")]
    pub max_dose_per_day: Option<Quantity>,
    #[doc = " The maximum dose per treatment period that can be administered."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxDosePerTreatmentPeriod")]
    pub max_dose_per_treatment_period: Option<Ratio>,
    #[doc = " The maximum single dose that can be administered, specified using a numerical value and its "]
    #[doc = " unit of measurement."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxSingleDose")]
    pub max_single_dose: Option<Quantity>,
    #[doc = " The maximum treatment period during which the product can be administered."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxTreatmentPeriod")]
    pub max_treatment_period: Option<Duration>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A species for which this route applies."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetSpecies")]
    pub target_species: Option<Vec<AdministrableProductDefinitionTargetSpecies>>,
}
#[doc = " A medicinal product in the final form which is suitable for administering to a patient (after "]
#[doc = " any mixing of multiple components, dissolution etc. has been performed)."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "AdministrableProductDefinition_TargetSpecies")]
#[serde(deny_unknown_fields)]
pub struct AdministrableProductDefinitionTargetSpecies {
    #[doc = " Coded expression for the species."]
    pub code: CodeableConcept,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A species specific time during which consumption of animal product is not appropriate."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "withdrawalPeriod")]
    pub withdrawal_period: Option<Vec<AdministrableProductDefinitionWithdrawalPeriod>>,
}
#[doc = " A medicinal product in the final form which is suitable for administering to a patient (after "]
#[doc = " any mixing of multiple components, dissolution etc. has been performed)."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "AdministrableProductDefinition_WithdrawalPeriod")]
#[serde(deny_unknown_fields)]
pub struct AdministrableProductDefinitionWithdrawalPeriod {
    #[doc = " Extensions for supportingInformation"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_supportingInformation")]
    pub _supporting_information: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Extra information about the withdrawal period."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportingInformation")]
    pub supporting_information: Option<String>,
    #[doc = " Coded expression for the type of tissue for which the withdrawal period applies, e.g. meat, "]
    #[doc = " milk."]
    pub tissue: CodeableConcept,
    #[doc = " A value for the time."]
    pub value: Quantity,
}
#[doc = " Actual or  potential/avoided event causing unintended physical injury resulting from or "]
#[doc = " contributed to by medical care, a research study or other healthcare setting factors that "]
#[doc = " requires additional monitoring, treatment, or hospitalization, or that results in death."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct AdverseEvent {
    #[doc = " Extensions for actuality"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _actuality: Option<Element>,
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for detected"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _detected: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for recordedDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_recordedDate")]
    pub _recorded_date: Option<Element>,
    #[doc = " Whether the event actually happened, or just had the potential to. Note that this is "]
    #[doc = " independent of whether anyone was affected or harmed or how severely."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub actuality: Option<Code>,
    #[doc = " The overall type of event, intended for search and filtering purposes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " Parties that may or should contribute or have contributed information to the adverse event, "]
    #[doc = " which can consist of one or more activities.  Such information includes information leading "]
    #[doc = " to the decision to perform the activity and how to perform the activity (e.g. consultant), "]
    #[doc = " information that the activity itself seeks to reveal (e.g. informant of clinical history), "]
    #[doc = " or information about what activity was performed (e.g. informant witness)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contributor: Option<Vec<Reference>>,
    #[doc = " The date (and perhaps time) when the adverse event occurred."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " Estimated or actual date the AdverseEvent began, in the opinion of the reporter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub detected: Option<DateTime>,
    #[doc = " The Encounter during which AdverseEvent was created or to which the creation of this record "]
    #[doc = " is tightly associated."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,
    #[doc = " This element defines the specific type of event that occurred or that was prevented from "]
    #[doc = " occurring."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub event: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Business identifiers assigned to this adverse event by the performer or other systems which "]
    #[doc = " remain constant as the resource is updated and propagates from server to server."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The information about where the adverse event occurred."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<Reference>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Describes the type of outcome from the adverse event."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub outcome: Option<CodeableConcept>,
    #[doc = " The date on which the existence of the AdverseEvent was first recorded."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "recordedDate")]
    pub recorded_date: Option<DateTime>,
    #[doc = " Information on who recorded the adverse event.  May be the patient or a practitioner."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub recorder: Option<Reference>,
    #[doc = " AdverseEvent.referenceDocument."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "referenceDocument")]
    pub reference_document: Option<Vec<Reference>>,
    #[doc = " This is a AdverseEvent resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " Includes information about the reaction that occurred as a result of exposure to a "]
    #[doc = " substance (for example, a drug or a chemical)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "resultingCondition")]
    pub resulting_condition: Option<Vec<Reference>>,
    #[doc = " Assessment whether this event was of real importance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub seriousness: Option<CodeableConcept>,
    #[doc = " Describes the severity of the adverse event, in relation to the subject. Contrast to "]
    #[doc = " AdverseEvent.seriousness - a severe rash might not be serious, but a mild heart problem is."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub severity: Option<CodeableConcept>,
    #[doc = " AdverseEvent.study."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub study: Option<Vec<Reference>>,
    #[doc = " This subject or group impacted by the event."]
    pub subject: Reference,
    #[doc = " AdverseEvent.subjectMedicalHistory."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectMedicalHistory")]
    pub subject_medical_history: Option<Vec<Reference>>,
    #[doc = " Describes the entity that is suspected to have caused the adverse event."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "suspectEntity")]
    pub suspect_entity: Option<Vec<AdverseEventSuspectEntity>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " Actual or  potential/avoided event causing unintended physical injury resulting from or "]
#[doc = " contributed to by medical care, a research study or other healthcare setting factors that "]
#[doc = " requires additional monitoring, treatment, or hospitalization, or that results in death."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "AdverseEvent_Causality")]
#[serde(deny_unknown_fields)]
pub struct AdverseEventCausality {
    #[doc = " Extensions for productRelatedness"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_productRelatedness")]
    pub _product_relatedness: Option<Element>,
    #[doc = " Assessment of if the entity caused the event."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub assessment: Option<CodeableConcept>,
    #[doc = " AdverseEvent.suspectEntity.causalityAuthor."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " ProbabilityScale | Bayesian | Checklist."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub method: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " AdverseEvent.suspectEntity.causalityProductRelatedness."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "productRelatedness")]
    pub product_relatedness: Option<String>,
}
#[doc = " Actual or  potential/avoided event causing unintended physical injury resulting from or "]
#[doc = " contributed to by medical care, a research study or other healthcare setting factors that "]
#[doc = " requires additional monitoring, treatment, or hospitalization, or that results in death."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "AdverseEvent_SuspectEntity")]
#[serde(deny_unknown_fields)]
pub struct AdverseEventSuspectEntity {
    #[doc = " Information on the possible cause of the event."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub causality: Option<Vec<AdverseEventCausality>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Identifies the actual instance of what caused the adverse event.  May be a substance, "]
    #[doc = " medication, medication administration, medication statement or a device."]
    pub instance: Reference,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " A duration of time during which an organism (or a process) has existed."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Age {
    #[doc = " Extensions for code"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _code: Option<Element>,
    #[doc = " Extensions for comparator"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _comparator: Option<Element>,
    #[doc = " Extensions for system"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _system: Option<Element>,
    #[doc = " Extensions for unit"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _unit: Option<Element>,
    #[doc = " Extensions for value"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _value: Option<Element>,
    #[doc = " A computer processable form of the unit in some unit representation system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,
    #[doc = " How the value should be understood and represented - whether the actual value is greater or "]
    #[doc = " less than the stated value due to measurement issues; e.g. if the comparator is \"<\" , then "]
    #[doc = " the real value is < stated value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comparator: Option<serde_json::Value>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The identification of the system that provides the coded form of the unit."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub system: Option<Uri>,
    #[doc = " A human-readable form of the unit."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
    #[doc = " The value of the measured amount. The value includes an implicit precision in the "]
    #[doc = " presentation of the value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Decimal>,
}
#[doc = " Risk of harmful or undesirable, physiological response which is unique to an individual and "]
#[doc = " associated with exposure to a substance."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct AllergyIntolerance {
    #[doc = " Extensions for category"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _category: Option<Vec<Element>>,
    #[doc = " Extensions for criticality"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _criticality: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for lastOccurrence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastOccurrence")]
    pub _last_occurrence: Option<Element>,
    #[doc = " Extensions for onsetDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_onsetDateTime")]
    pub _onset_date_time: Option<Element>,
    #[doc = " Extensions for onsetString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_onsetString")]
    pub _onset_string: Option<Element>,
    #[doc = " Extensions for recordedDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_recordedDate")]
    pub _recorded_date: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " The source of the information about the allergy that is recorded."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub asserter: Option<Reference>,
    #[doc = " Category of the identified substance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<Code>>,
    #[doc = " The clinical status of the allergy or intolerance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "clinicalStatus")]
    pub clinical_status: Option<CodeableConcept>,
    #[doc = " Code for an allergy or intolerance statement (either a positive or a negated/excluded "]
    #[doc = " statement).  This may be a code for a substance or pharmaceutical product that is "]
    #[doc = " considered to be responsible for the adverse reaction risk (e.g., \"Latex\"), an allergy or "]
    #[doc = " intolerance condition (e.g., \"Latex allergy\"), or a negated/excluded code for a specific "]
    #[doc = " substance or class (e.g., \"No latex allergy\") or a general or categorical negated statement "]
    #[doc = " (e.g.,  \"No known allergy\", \"No known drug allergies\").  Note: the substance for a specific "]
    #[doc = " reaction may be different from the substance identified as the cause of the risk, but it "]
    #[doc = " must be consistent with it. For instance, it may be a more specific substance (e.g. a brand "]
    #[doc = " medication) or a composite product that includes the identified substance. It must be "]
    #[doc = " clinically safe to only process the 'code' and ignore the 'reaction.substance'.  If a "]
    #[doc = " receiving system is unable to confirm that AllergyIntolerance.reaction.substance falls "]
    #[doc = " within the semantic scope of AllergyIntolerance.code, then the receiving system should "]
    #[doc = " ignore AllergyIntolerance.reaction.substance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " Estimate of the potential clinical harm, or seriousness, of the reaction to the identified "]
    #[doc = " substance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub criticality: Option<Code>,
    #[doc = " The encounter when the allergy or intolerance was asserted."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Business identifiers assigned to this AllergyIntolerance by the performer or other systems "]
    #[doc = " which remain constant as the resource is updated and propagates from server to server."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " Represents the date and/or time of the last known occurrence of a reaction event."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastOccurrence")]
    pub last_occurrence: Option<DateTime>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Additional narrative about the propensity for the Adverse Reaction, not captured in other "]
    #[doc = " fields."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " Estimated or actual date,  date-time, or age when allergy or intolerance was identified."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onsetAge")]
    pub onset_age: Option<Age>,
    #[doc = " Estimated or actual date,  date-time, or age when allergy or intolerance was identified."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onsetDateTime")]
    pub onset_date_time: Option<String>,
    #[doc = " Estimated or actual date,  date-time, or age when allergy or intolerance was identified."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onsetPeriod")]
    pub onset_period: Option<Period>,
    #[doc = " Estimated or actual date,  date-time, or age when allergy or intolerance was identified."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onsetRange")]
    pub onset_range: Option<Range>,
    #[doc = " Estimated or actual date,  date-time, or age when allergy or intolerance was identified."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onsetString")]
    pub onset_string: Option<String>,
    #[doc = " The patient who has the allergy or intolerance."]
    pub patient: Reference,
    #[doc = " Details about each adverse reaction event linked to exposure to the identified substance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reaction: Option<Vec<AllergyIntoleranceReaction>>,
    #[doc = " The recordedDate represents when this particular AllergyIntolerance record was created in "]
    #[doc = " the system, which is often a system-generated date."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "recordedDate")]
    pub recorded_date: Option<DateTime>,
    #[doc = " Individual who recorded the record and takes responsibility for its content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub recorder: Option<Reference>,
    #[doc = " This is a AllergyIntolerance resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " Identification of the underlying physiological mechanism for the reaction risk."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
    #[doc = " Assertion about certainty associated with the propensity, or potential risk, of a reaction "]
    #[doc = " to the identified substance (including pharmaceutical product)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "verificationStatus")]
    pub verification_status: Option<CodeableConcept>,
}
#[doc = " Risk of harmful or undesirable, physiological response which is unique to an individual and "]
#[doc = " associated with exposure to a substance."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "AllergyIntolerance_Reaction")]
#[serde(deny_unknown_fields)]
pub struct AllergyIntoleranceReaction {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for onset"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _onset: Option<Element>,
    #[doc = " Extensions for severity"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _severity: Option<Element>,
    #[doc = " Text description about the reaction as a whole, including details of the manifestation if "]
    #[doc = " required."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " Identification of the route by which the subject was exposed to the substance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "exposureRoute")]
    pub exposure_route: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Clinical symptoms and/or signs that are observed or associated with the adverse reaction "]
    #[doc = " event."]
    pub manifestation: Vec<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Additional text about the adverse reaction event not captured in other fields."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " Record of the date and/or time of the onset of the Reaction."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub onset: Option<DateTime>,
    #[doc = " Clinical assessment of the severity of the reaction event as a whole, potentially "]
    #[doc = " considering multiple different manifestations."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub severity: Option<Code>,
    #[doc = " Identification of the specific substance (or pharmaceutical product) considered to be "]
    #[doc = " responsible for the Adverse Reaction event. Note: the substance for a specific reaction may "]
    #[doc = " be different from the substance identified as the cause of the risk, but it must be "]
    #[doc = " consistent with it. For instance, it may be a more specific substance (e.g. a brand "]
    #[doc = " medication) or a composite product that includes the identified substance. It must be "]
    #[doc = " clinically safe to only process the 'code' and ignore the 'reaction.substance'.  If a "]
    #[doc = " receiving system is unable to confirm that AllergyIntolerance.reaction.substance falls "]
    #[doc = " within the semantic scope of AllergyIntolerance.code, then the receiving system should "]
    #[doc = " ignore AllergyIntolerance.reaction.substance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub substance: Option<CodeableConcept>,
}
#[doc = " A  text note which also  contains information about who made the statement and when."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Annotation {
    #[doc = " Extensions for authorString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_authorString")]
    pub _author_string: Option<Element>,
    #[doc = " Extensions for text"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _text: Option<Element>,
    #[doc = " Extensions for time"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _time: Option<Element>,
    #[doc = " The individual responsible for making the annotation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "authorReference")]
    pub author_reference: Option<Reference>,
    #[doc = " The individual responsible for making the annotation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "authorString")]
    pub author_string: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The text of the annotation in markdown format."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Markdown>,
    #[doc = " Indicates when this particular annotation was made."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub time: Option<DateTime>,
}
#[doc = " A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or "]
#[doc = " device(s) for a specific date/time. This may result in one or more Encounter(s)."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Appointment {
    #[doc = " Extensions for comment"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _comment: Option<Element>,
    #[doc = " Extensions for created"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _created: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for end"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _end: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for minutesDuration"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_minutesDuration")]
    pub _minutes_duration: Option<Element>,
    #[doc = " Extensions for patientInstruction"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patientInstruction")]
    pub _patient_instruction: Option<Element>,
    #[doc = " Extensions for priority"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _priority: Option<Element>,
    #[doc = " Extensions for start"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _start: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " The style of appointment or patient that has been booked in the slot (not service type)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "appointmentType")]
    pub appointment_type: Option<CodeableConcept>,
    #[doc = " The service request this appointment is allocated to assess (e.g. incoming referral or "]
    #[doc = " procedure request)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Vec<Reference>>,
    #[doc = " The coded reason for the appointment being cancelled. This is often used in "]
    #[doc = " reporting/billing/futher processing to determine if further actions are required, or "]
    #[doc = " specific fees apply."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "cancelationReason")]
    pub cancelation_reason: Option<CodeableConcept>,
    #[doc = " Additional comments about the appointment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The date that this appointment was initially created. This could be different to the "]
    #[doc = " meta.lastModified value on the initial entry, as this could have been before the resource "]
    #[doc = " was created on the FHIR server, and should remain unchanged over the lifespan of the "]
    #[doc = " appointment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub created: Option<DateTime>,
    #[doc = " The brief description of the appointment as would be shown on a subject line in a meeting "]
    #[doc = " request, or appointment list. Detailed or expanded information should be put in the comment "]
    #[doc = " field."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " Date/Time that the appointment is to conclude."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub end: Option<Instant>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " This records identifiers associated with this appointment concern that are defined by "]
    #[doc = " business processes and/or used to refer to it when a direct URL reference to the resource "]
    #[doc = " itself is not appropriate (e.g. in CDA documents, or in written / printed documentation)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " Number of minutes that the appointment is to take. This can be less than the duration "]
    #[doc = " between the start and end times.  For example, where the actual time of appointment is only "]
    #[doc = " an estimate or if a 30 minute appointment is being requested, but any time would work.  "]
    #[doc = " Also, if there is, for example, a planned 15 minute break in the middle of a long "]
    #[doc = " appointment, the duration may be 15 minutes less than the difference between the start and "]
    #[doc = " end."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "minutesDuration")]
    pub minutes_duration: Option<PositiveInt>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " List of participants involved in the appointment."]
    pub participant: Vec<AppointmentParticipant>,
    #[doc = " While Appointment.comment contains information for internal use, "]
    #[doc = " Appointment.patientInstructions is used to capture patient facing information about the "]
    #[doc = " Appointment (e.g. please bring your referral or fast from 8pm night before)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patientInstruction")]
    pub patient_instruction: Option<String>,
    #[doc = " The priority of the appointment. Can be used to make informed decisions if needing to "]
    #[doc = " re-prioritize appointments. (The iCal Standard specifies 0 as undefined, 1 as highest, 9 as "]
    #[doc = " lowest priority)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub priority: Option<UnsignedInt>,
    #[doc = " The coded reason that this appointment is being scheduled. This is more clinical than "]
    #[doc = " administrative."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,
    #[doc = " Reason the appointment has been scheduled to take place, as specified using information "]
    #[doc = " from another resource. When the patient arrives and the encounter begins it may be used as "]
    #[doc = " the admission diagnosis. The indication will typically be a Condition (with other resources "]
    #[doc = " referenced in the evidence.detail), or a Procedure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,
    #[doc = " A set of date ranges (potentially including times) that the appointment is preferred to be "]
    #[doc = " scheduled within."]
    #[doc = " "]
    #[doc = " The duration (usually in minutes) could also be provided to indicate the length of the "]
    #[doc = " appointment to fill and populate the start/end times for the actual allocated time. "]
    #[doc = " However, in other situations the duration may be calculated by the scheduling system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "requestedPeriod")]
    pub requested_period: Option<Vec<Period>>,
    #[doc = " This is a Appointment resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " A broad categorization of the service that is to be performed during this appointment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "serviceCategory")]
    pub service_category: Option<Vec<CodeableConcept>>,
    #[doc = " The specific service that is to be performed during this appointment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "serviceType")]
    pub service_type: Option<Vec<CodeableConcept>>,
    #[doc = " The slots from the participants' schedules that will be filled by the appointment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub slot: Option<Vec<Reference>>,
    #[doc = " The specialty of a practitioner that would be required to perform the service requested in "]
    #[doc = " this appointment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub specialty: Option<Vec<CodeableConcept>>,
    #[doc = " Date/Time that the appointment is to take place."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub start: Option<Instant>,
    #[doc = " The overall status of the Appointment. Each of the participants has their own participation "]
    #[doc = " status which indicates their involvement in the process, however this status indicates the "]
    #[doc = " shared status."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " Additional information to support the appointment provided when making the appointment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportingInformation")]
    pub supporting_information: Option<Vec<Reference>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation "]
#[doc = " or rejection."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct AppointmentResponse {
    #[doc = " Extensions for comment"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _comment: Option<Element>,
    #[doc = " Extensions for end"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _end: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for participantStatus"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_participantStatus")]
    pub _participant_status: Option<Element>,
    #[doc = " Extensions for start"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _start: Option<Element>,
    #[doc = " A Person, Location, HealthcareService, or Device that is participating in the appointment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub actor: Option<Reference>,
    #[doc = " Appointment that this response is replying to."]
    pub appointment: Reference,
    #[doc = " Additional comments about the appointment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " This may be either the same as the appointment request to confirm the details of the "]
    #[doc = " appointment, or alternately a new time to request a re-negotiation of the end time."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub end: Option<Instant>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " This records identifiers associated with this appointment response concern that are defined "]
    #[doc = " by business processes and/ or used to refer to it when a direct URL reference to the "]
    #[doc = " resource itself is not appropriate."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Participation status of the participant. When the status is declined or tentative if the "]
    #[doc = " start/end times are different to the appointment, then these times should be interpreted as "]
    #[doc = " a requested time change. When the status is accepted, the times can either be the time of "]
    #[doc = " the appointment (as a confirmation of the time) or can be empty."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "participantStatus")]
    pub participant_status: Option<Code>,
    #[doc = " Role of participant in the appointment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "participantType")]
    pub participant_type: Option<Vec<CodeableConcept>>,
    #[doc = " This is a AppointmentResponse resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " Date/Time that the appointment is to take place, or requested new start time."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub start: Option<Instant>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or "]
#[doc = " device(s) for a specific date/time. This may result in one or more Encounter(s)."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Appointment_Participant")]
#[serde(deny_unknown_fields)]
pub struct AppointmentParticipant {
    #[doc = " Extensions for required"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _required: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " A Person, Location/HealthcareService or Device that is participating in the appointment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub actor: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Participation period of the actor."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
    #[doc = " Whether this participant is required to be present at the meeting. This covers a use-case "]
    #[doc = " where two doctors need to meet to discuss the results for a specific patient, and the "]
    #[doc = " patient is not required to be present."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub required: Option<Code>,
    #[doc = " Participation status of the actor."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " Role of participant in the appointment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Vec<CodeableConcept>>,
}
#[doc = " For referring to data content defined in other formats."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Attachment {
    #[doc = " Extensions for contentType"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_contentType")]
    pub _content_type: Option<Element>,
    #[doc = " Extensions for creation"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _creation: Option<Element>,
    #[doc = " Extensions for data"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _data: Option<Element>,
    #[doc = " Extensions for hash"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _hash: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for size"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _size: Option<Element>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " Identifies the type of the data in the attachment and allows a method to be chosen to "]
    #[doc = " interpret or render the data. Includes mime type parameters such as charset where "]
    #[doc = " appropriate."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contentType")]
    pub content_type: Option<Code>,
    #[doc = " The date that the attachment was first created."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub creation: Option<DateTime>,
    #[doc = " The actual data of the attachment - a sequence of bytes, base64 encoded."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub data: Option<Base64Binary>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The calculated hash of the data using SHA-1. Represented using base64."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub hash: Option<Base64Binary>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The human language of the content. The value can be any valid value according to BCP 47."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The number of bytes of data that make up this attachment (before base64 encoding, if that "]
    #[doc = " is done)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub size: Option<UnsignedInt>,
    #[doc = " A label or set of text to display in place of the data."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[doc = " A location where the data can be accessed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Url>,
}
#[doc = " A record of an event made for purposes of maintaining a security log. Typical uses include "]
#[doc = " detection of intrusion attempts and monitoring for inappropriate usage."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct AuditEvent {
    #[doc = " Extensions for action"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _action: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for outcome"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _outcome: Option<Element>,
    #[doc = " Extensions for outcomeDesc"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_outcomeDesc")]
    pub _outcome_desc: Option<Element>,
    #[doc = " Extensions for recorded"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _recorded: Option<Element>,
    #[doc = " Indicator for type of action performed during the event that generated the audit."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub action: Option<Code>,
    #[doc = " An actor taking an active role in the event or activity that is logged."]
    pub agent: Vec<AuditEventAgent>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " Specific instances of data or objects that have been accessed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub entity: Option<Vec<AuditEventEntity>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Indicates whether the event succeeded or failed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub outcome: Option<Code>,
    #[doc = " A free text description of the outcome of the event."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "outcomeDesc")]
    pub outcome_desc: Option<String>,
    #[doc = " The period during which the activity occurred."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
    #[doc = " The purposeOfUse (reason) that was used during the event being recorded."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "purposeOfEvent")]
    pub purpose_of_event: Option<Vec<CodeableConcept>>,
    #[doc = " The time when the event was recorded."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub recorded: Option<Instant>,
    #[doc = " This is a AuditEvent resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The system that is reporting the event."]
    pub source: AuditEventSource,
    #[doc = " Identifier for the category of event."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subtype: Option<Vec<Coding>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " Identifier for a family of the event.  For example, a menu item, program, rule, policy, "]
    #[doc = " function code, application name or URL. It identifies the performed function."]
    #[serde(rename = "type")]
    pub type_: Coding,
}
#[doc = " A record of an event made for purposes of maintaining a security log. Typical uses include "]
#[doc = " detection of intrusion attempts and monitoring for inappropriate usage."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "AuditEvent_Agent")]
#[serde(deny_unknown_fields)]
pub struct AuditEventAgent {
    #[doc = " Extensions for altId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_altId")]
    pub _alt_id: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for policy"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _policy: Option<Vec<Element>>,
    #[doc = " Extensions for requestor"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _requestor: Option<Element>,
    #[doc = " Alternative agent Identifier. For a human, this should be a user identifier text string "]
    #[doc = " from authentication system. This identifier would be one known to a common authentication "]
    #[doc = " system (e.g. single sign-on), if available."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "altId")]
    pub alt_id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Where the event occurred."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<Reference>,
    #[doc = " Type of media involved. Used when the event is about exporting/importing onto media."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub media: Option<Coding>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Human-meaningful name for the agent."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " Logical network location for application activity, if the activity has a network location."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub network: Option<AuditEventNetwork>,
    #[doc = " The policy or plan that authorized the activity being recorded. Typically, a single "]
    #[doc = " activity may have multiple applicable policies, such as patient consent, guarantor funding, "]
    #[doc = " etc. The policy would also indicate the security token used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub policy: Option<Vec<Uri>>,
    #[doc = " The reason (purpose of use), specific to this agent, that was used during the event being "]
    #[doc = " recorded."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "purposeOfUse")]
    pub purpose_of_use: Option<Vec<CodeableConcept>>,
    #[doc = " Indicator that the user is or is not the requestor, or initiator, for the event being "]
    #[doc = " audited."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub requestor: Option<Boolean>,
    #[doc = " The security role that the user was acting under, that come from local codes defined by the "]
    #[doc = " access control security system (e.g. RBAC, ABAC) used in the local context."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub role: Option<Vec<CodeableConcept>>,
    #[doc = " Specification of the participation type the user plays when performing the event."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
    #[doc = " Reference to who this agent is that was involved in the event."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub who: Option<Reference>,
}
#[doc = " A record of an event made for purposes of maintaining a security log. Typical uses include "]
#[doc = " detection of intrusion attempts and monitoring for inappropriate usage."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "AuditEvent_Detail")]
#[serde(deny_unknown_fields)]
pub struct AuditEventDetail {
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " Extensions for valueBase64Binary"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBase64Binary")]
    pub _value_base_64_binary: Option<Element>,
    #[doc = " Extensions for valueString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueString")]
    pub _value_string: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The type of extra detail provided in the value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<String>,
    #[doc = " The  value of the extra detail."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBase64Binary")]
    pub value_base_64_binary: Option<String>,
    #[doc = " The  value of the extra detail."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueString")]
    pub value_string: Option<String>,
}
#[doc = " A record of an event made for purposes of maintaining a security log. Typical uses include "]
#[doc = " detection of intrusion attempts and monitoring for inappropriate usage."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "AuditEvent_Entity")]
#[serde(deny_unknown_fields)]
pub struct AuditEventEntity {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for query"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _query: Option<Element>,
    #[doc = " Text that describes the entity in more detail."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " Tagged value pairs for conveying additional information about the entity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub detail: Option<Vec<AuditEventDetail>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Identifier for the data life-cycle stage for the entity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub lifecycle: Option<Coding>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A name of the entity in the audit event."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " The query parameters for a query-type entities."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub query: Option<Base64Binary>,
    #[doc = " Code representing the role the entity played in the event being audited."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub role: Option<Coding>,
    #[doc = " Security labels for the identified entity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "securityLabel")]
    pub security_label: Option<Vec<Coding>>,
    #[doc = " The type of the object that was involved in this audit event."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Coding>,
    #[doc = " Identifies a specific instance of the entity. The reference should be version specific."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub what: Option<Reference>,
}
#[doc = " A record of an event made for purposes of maintaining a security log. Typical uses include "]
#[doc = " detection of intrusion attempts and monitoring for inappropriate usage."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "AuditEvent_Network")]
#[serde(deny_unknown_fields)]
pub struct AuditEventNetwork {
    #[doc = " Extensions for address"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _address: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " An identifier for the network access point of the user device for the audit event."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " An identifier for the type of network access point that originated the audit event."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}
#[doc = " A record of an event made for purposes of maintaining a security log. Typical uses include "]
#[doc = " detection of intrusion attempts and monitoring for inappropriate usage."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "AuditEvent_Source")]
#[serde(deny_unknown_fields)]
pub struct AuditEventSource {
    #[doc = " Extensions for site"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _site: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Identifier of the source where the event was detected."]
    pub observer: Reference,
    #[doc = " Logical source location within the healthcare enterprise network.  For example, a hospital "]
    #[doc = " or other provider location within a multi-entity provider group."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub site: Option<String>,
    #[doc = " Code specifying the type of source where event originated."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Vec<Coding>>,
}
#[doc = " Basic is used for handling concepts not yet defined in FHIR, narrative-only resources that "]
#[doc = " don't map to an existing resource, and custom resources not appropriate for inclusion in the "]
#[doc = " FHIR specification."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Basic {
    #[doc = " Extensions for created"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _created: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Indicates who was responsible for creating the resource instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Reference>,
    #[doc = " Identifies the 'type' of resource - equivalent to the resource name for other resources."]
    pub code: CodeableConcept,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " Identifies when the resource was first created."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub created: Option<Date>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Identifier assigned to the resource for business purposes, outside the context of FHIR."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " This is a Basic resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " Identifies the patient, practitioner, device or any other resource that is the \"focus\" of "]
    #[doc = " this resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Reference>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " A resource that represents the data of a single raw artifact as digital content accessible in "]
#[doc = " its native format.  A Binary resource can contain any content, whether text, image, pdf, zip "]
#[doc = " archive, etc."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Binary {
    #[doc = " Extensions for contentType"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_contentType")]
    pub _content_type: Option<Element>,
    #[doc = " Extensions for data"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _data: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " MimeType of the binary content represented as a standard MimeType (BCP 13)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contentType")]
    pub content_type: Option<Code>,
    #[doc = " The actual content, base64 encoded."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub data: Option<Base64Binary>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " This is a Binary resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " This element identifies another resource that can be used as a proxy of the security "]
    #[doc = " sensitivity to use when deciding and enforcing access control rules for the Binary "]
    #[doc = " resource. Given that the Binary resource contains very few elements that can be used to "]
    #[doc = " determine the sensitivity of the data and relationships to individuals, the referenced "]
    #[doc = " resource stands in as a proxy equivalent for this purpose. This referenced resource may be "]
    #[doc = " related to the Binary (e.g. Media, DocumentReference), or may be some non-related Resource "]
    #[doc = " purely as a security proxy. E.g. to identify that the binary resource relates to a patient, "]
    #[doc = " and access should only be granted to applications that have access to the patient."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "securityContext")]
    pub security_context: Option<Reference>,
}
#[doc = " A material substance originating from a biological entity intended to be transplanted or "]
#[doc = " infused"]
#[doc = " into another (possibly the same) biological entity."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct BiologicallyDerivedProduct {
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for productCategory"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_productCategory")]
    pub _product_category: Option<Element>,
    #[doc = " Extensions for quantity"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _quantity: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " How this product was collected."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub collection: Option<BiologicallyDerivedProductCollection>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " This records identifiers associated with this biologically derived product instance that "]
    #[doc = " are defined by business processes and/or used to refer to it when a direct URL reference to "]
    #[doc = " the resource itself is not appropriate (e.g. in CDA documents, or in written / printed "]
    #[doc = " documentation)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " Any manipulation of product post-collection that is intended to alter the product.  For "]
    #[doc = " example a buffy-coat enrichment or CD8 reduction of Peripheral Blood Stem Cells to make it "]
    #[doc = " more suitable for infusion."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub manipulation: Option<BiologicallyDerivedProductManipulation>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Parent product (if any)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub parent: Option<Vec<Reference>>,
    #[doc = " Any processing of the product during collection that does not change the fundamental nature "]
    #[doc = " of the product. For example adding anti-coagulants during the collection of Peripheral "]
    #[doc = " Blood Stem Cells."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub processing: Option<Vec<BiologicallyDerivedProductProcessing>>,
    #[doc = " Broad category of this product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "productCategory")]
    pub product_category: Option<Code>,
    #[doc = " A code that identifies the kind of this biologically derived product (SNOMED Ctcode)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "productCode")]
    pub product_code: Option<CodeableConcept>,
    #[doc = " Number of discrete units within this product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Integer>,
    #[doc = " Procedure request to obtain this biologically derived product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub request: Option<Vec<Reference>>,
    #[doc = " This is a BiologicallyDerivedProduct resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " Whether the product is currently available."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " Product storage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub storage: Option<Vec<BiologicallyDerivedProductStorage>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " A material substance originating from a biological entity intended to be transplanted or "]
#[doc = " infused"]
#[doc = " into another (possibly the same) biological entity."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "BiologicallyDerivedProduct_Collection")]
#[serde(deny_unknown_fields)]
pub struct BiologicallyDerivedProductCollection {
    #[doc = " Extensions for collectedDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_collectedDateTime")]
    pub _collected_date_time: Option<Element>,
    #[doc = " Time of product collection."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "collectedDateTime")]
    pub collected_date_time: Option<String>,
    #[doc = " Time of product collection."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "collectedPeriod")]
    pub collected_period: Option<Period>,
    #[doc = " Healthcare professional who is performing the collection."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub collector: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The patient or entity, such as a hospital or vendor in the case of a "]
    #[doc = " processed/manipulated/manufactured product, providing the product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub source: Option<Reference>,
}
#[doc = " A material substance originating from a biological entity intended to be transplanted or "]
#[doc = " infused"]
#[doc = " into another (possibly the same) biological entity."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "BiologicallyDerivedProduct_Manipulation")]
#[serde(deny_unknown_fields)]
pub struct BiologicallyDerivedProductManipulation {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for timeDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_timeDateTime")]
    pub _time_date_time: Option<Element>,
    #[doc = " Description of manipulation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Time of manipulation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timeDateTime")]
    pub time_date_time: Option<String>,
    #[doc = " Time of manipulation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timePeriod")]
    pub time_period: Option<Period>,
}
#[doc = " A material substance originating from a biological entity intended to be transplanted or "]
#[doc = " infused"]
#[doc = " into another (possibly the same) biological entity."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "BiologicallyDerivedProduct_Processing")]
#[serde(deny_unknown_fields)]
pub struct BiologicallyDerivedProductProcessing {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for timeDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_timeDateTime")]
    pub _time_date_time: Option<Element>,
    #[doc = " Substance added during processing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub additive: Option<Reference>,
    #[doc = " Description of of processing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Procesing code."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub procedure: Option<CodeableConcept>,
    #[doc = " Time of processing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timeDateTime")]
    pub time_date_time: Option<String>,
    #[doc = " Time of processing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timePeriod")]
    pub time_period: Option<Period>,
}
#[doc = " A material substance originating from a biological entity intended to be transplanted or "]
#[doc = " infused"]
#[doc = " into another (possibly the same) biological entity."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "BiologicallyDerivedProduct_Storage")]
#[serde(deny_unknown_fields)]
pub struct BiologicallyDerivedProductStorage {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for scale"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _scale: Option<Element>,
    #[doc = " Extensions for temperature"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _temperature: Option<Element>,
    #[doc = " Description of storage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " Storage timeperiod."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub duration: Option<Period>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Temperature scale used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub scale: Option<Code>,
    #[doc = " Storage temperature."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub temperature: Option<Decimal>,
}
#[doc = " Record details about an anatomical structure.  This resource may be used when a coded concept "]
#[doc = " does not provide the necessary detail needed for the use case."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct BodyStructure {
    #[doc = " Extensions for active"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _active: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Whether this body site is in active use."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub active: Option<Boolean>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " A summary, characterization or explanation of the body structure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Identifier for this instance of the anatomical structure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " Image or images used to identify a location."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub image: Option<Vec<Attachment>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The anatomical location or region of the specimen, lesion, or body structure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<CodeableConcept>,
    #[doc = " Qualifier to refine the anatomical location.  These include qualifiers for laterality, "]
    #[doc = " relative location, directionality, number, and plane."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "locationQualifier")]
    pub location_qualifier: Option<Vec<CodeableConcept>>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The kind of structure being represented by the body structure at `BodyStructure.location`.  "]
    #[doc = " This can define both normal and abnormal morphologies."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub morphology: Option<CodeableConcept>,
    #[doc = " The person to which the body site belongs."]
    pub patient: Reference,
    #[doc = " This is a BodyStructure resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " A container for a collection of resources."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Bundle {
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for timestamp"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _timestamp: Option<Element>,
    #[doc = " Extensions for total"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _total: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " An entry in a bundle resource - will either contain a resource or information about a "]
    #[doc = " resource (transactions and history only)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub entry: Option<Vec<BundleEntry>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A persistent identifier for the bundle that won't change as a bundle is copied from server "]
    #[doc = " to server."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " A series of links that provide context to this bundle."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub link: Option<Vec<BundleLink>>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " This is a Bundle resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " Digital Signature - base64 encoded. XML-DSig or a JWT."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub signature: Option<Signature>,
    #[doc = " The date/time that the bundle was assembled - i.e. when the resources were placed in the "]
    #[doc = " bundle."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<Instant>,
    #[doc = " If a set of search matches, this is the total number of entries of type 'match' across all "]
    #[doc = " pages in the search.  It does not include search.mode = 'include' or 'outcome' entries and "]
    #[doc = " it does not provide a count of the number of entries in the Bundle."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub total: Option<UnsignedInt>,
    #[doc = " Indicates the purpose of this bundle - how it is intended to be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}
#[doc = " A container for a collection of resources."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Bundle_Entry")]
#[serde(deny_unknown_fields)]
pub struct BundleEntry {
    #[doc = " Extensions for fullUrl"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fullUrl")]
    pub _full_url: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The Absolute URL for the resource.  The fullUrl SHALL NOT disagree with the id in the "]
    #[doc = " resource - i.e. if the fullUrl is not a urn:uuid, the URL shall be version-independent URL "]
    #[doc = " consistent with the Resource.id. The fullUrl is a version independent reference to the "]
    #[doc = " resource. The fullUrl element SHALL have a value except that: "]
    #[doc = " * fullUrl can be empty on a POST (although it does not need to when specifying a temporary "]
    #[doc = " id for reference in the bundle)"]
    #[doc = " * Results from operations might involve resources that are not identified."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fullUrl")]
    pub full_url: Option<Uri>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A series of links that provide context to this entry."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub link: Option<Vec<BundleLink>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Additional information about how this entry should be processed as part of a transaction or "]
    #[doc = " batch.  For history, it shows how the entry was processed to create the version contained "]
    #[doc = " in the entry."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub request: Option<BundleRequest>,
    #[doc = " The Resource for the entry. The purpose/meaning of the resource is determined by the "]
    #[doc = " Bundle.type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource: Option<ResourceList>,
    #[doc = " Indicates the results of processing the corresponding 'request' entry in the batch or "]
    #[doc = " transaction being responded to or what the results of an operation where when returning "]
    #[doc = " history."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub response: Option<BundleResponse>,
    #[doc = " Information about the search process that lead to the creation of this entry."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub search: Option<BundleSearch>,
}
#[doc = " A container for a collection of resources."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Bundle_Link")]
#[serde(deny_unknown_fields)]
pub struct BundleLink {
    #[doc = " Extensions for relation"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _relation: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A name which details the functional use for this link - see "]
    #[doc = " [http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1](http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub relation: Option<String>,
    #[doc = " The reference details for the link."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
}
#[doc = " A container for a collection of resources."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Bundle_Request")]
#[serde(deny_unknown_fields)]
pub struct BundleRequest {
    #[doc = " Extensions for ifMatch"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_ifMatch")]
    pub _if_match: Option<Element>,
    #[doc = " Extensions for ifModifiedSince"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_ifModifiedSince")]
    pub _if_modified_since: Option<Element>,
    #[doc = " Extensions for ifNoneExist"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_ifNoneExist")]
    pub _if_none_exist: Option<Element>,
    #[doc = " Extensions for ifNoneMatch"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_ifNoneMatch")]
    pub _if_none_match: Option<Element>,
    #[doc = " Extensions for method"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _method: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Only perform the operation if the Etag value matches. For more information, see the API "]
    #[doc = " section [\"Managing Resource Contention\"](http.html#concurrency)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "ifMatch")]
    pub if_match: Option<String>,
    #[doc = " Only perform the operation if the last updated date matches. See the API documentation for "]
    #[doc = " [\"Conditional Read\"](http.html#cread)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "ifModifiedSince")]
    pub if_modified_since: Option<Instant>,
    #[doc = " Instruct the server not to perform the create if a specified resource already exists. For "]
    #[doc = " further information, see the API documentation for [\"Conditional "]
    #[doc = " Create\"](http.html#ccreate). This is just the query portion of the URL - what follows the "]
    #[doc = " \"?\" (not including the \"?\")."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "ifNoneExist")]
    pub if_none_exist: Option<String>,
    #[doc = " If the ETag values match, return a 304 Not Modified status. See the API documentation for "]
    #[doc = " [\"Conditional Read\"](http.html#cread)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "ifNoneMatch")]
    pub if_none_match: Option<String>,
    #[doc = " In a transaction or batch, this is the HTTP action to be executed for this entry. In a "]
    #[doc = " history bundle, this indicates the HTTP action that occurred."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub method: Option<Code>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The URL for this entry, relative to the root (the address to which the request is posted)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
}
#[doc = " A container for a collection of resources."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Bundle_Response")]
#[serde(deny_unknown_fields)]
pub struct BundleResponse {
    #[doc = " Extensions for etag"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _etag: Option<Element>,
    #[doc = " Extensions for lastModified"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastModified")]
    pub _last_modified: Option<Element>,
    #[doc = " Extensions for location"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _location: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " The Etag for the resource, if the operation for the entry produced a versioned resource "]
    #[doc = " (see [Resource Metadata and Versioning](http.html#versioning) and [Managing Resource "]
    #[doc = " Contention](http.html#concurrency))."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The date/time that the resource was modified on the server."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastModified")]
    pub last_modified: Option<Instant>,
    #[doc = " The location header created by processing this operation, populated if the operation "]
    #[doc = " returns a location."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<Uri>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " An OperationOutcome containing hints and warnings produced as part of processing this entry "]
    #[doc = " in a batch or transaction."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub outcome: Option<ResourceList>,
    #[doc = " The status code returned by processing this entry. The status SHALL start with a 3 digit "]
    #[doc = " HTTP code (e.g. 404) and may contain the standard HTTP description associated with the "]
    #[doc = " status code."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}
#[doc = " A container for a collection of resources."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Bundle_Search")]
#[serde(deny_unknown_fields)]
pub struct BundleSearch {
    #[doc = " Extensions for mode"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _mode: Option<Element>,
    #[doc = " Extensions for score"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _score: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Why this entry is in the result set - whether it's included as a match or because of an "]
    #[doc = " _include requirement, or to convey information or warning information about the search "]
    #[doc = " process."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub mode: Option<Code>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " When searching, the server's search ranking score for the entry."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub score: Option<Decimal>,
}
#[doc = " A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a "]
#[doc = " particular version of FHIR that may be used as a statement of actual server functionality or a "]
#[doc = " statement of required or desired server implementation."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct CapabilityStatement {
    #[doc = " Extensions for copyright"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _copyright: Option<Element>,
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for experimental"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _experimental: Option<Element>,
    #[doc = " Extensions for fhirVersion"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fhirVersion")]
    pub _fhir_version: Option<Element>,
    #[doc = " Extensions for format"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _format: Option<Vec<Element>>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for kind"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _kind: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for patchFormat"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patchFormat")]
    pub _patch_format: Option<Vec<Element>>,
    #[doc = " Extensions for publisher"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _publisher: Option<Element>,
    #[doc = " Extensions for purpose"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _purpose: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " Contact details to assist a user in finding and communicating with the publisher."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " A copyright statement relating to the capability statement and/or its contents. Copyright "]
    #[doc = " statements are generally legal restrictions on the use and publishing of the capability "]
    #[doc = " statement."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,
    #[doc = " The date  (and optionally time) when the capability statement was published. The date must "]
    #[doc = " change when the business version changes and it must change if the status code changes. In "]
    #[doc = " addition, it should change when the substantive content of the capability statement "]
    #[doc = " changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " A free text natural language description of the capability statement from a consumer's "]
    #[doc = " perspective. Typically, this is used when the capability statement describes a desired "]
    #[doc = " rather than an actual solution, for example as a formal expression of requirements as part "]
    #[doc = " of an RFP."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " A document definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub document: Option<Vec<CapabilityStatementDocument>>,
    #[doc = " A Boolean value to indicate that this capability statement is authored for testing purposes "]
    #[doc = " (or education/evaluation/marketing) and is not intended to be used for genuine usage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The version of the FHIR specification that this CapabilityStatement describes (which SHALL "]
    #[doc = " be the same as the FHIR version of the CapabilityStatement itself). There is no default "]
    #[doc = " value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fhirVersion")]
    pub fhir_version: Option<Code>,
    #[doc = " A list of the formats supported by this implementation using their content types."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub format: Option<Vec<Code>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Identifies a specific implementation instance that is described by the capability statement "]
    #[doc = " - i.e. a particular installation, rather than the capabilities of a software program."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub implementation: Option<CapabilityStatementImplementation>,
    #[doc = " A list of implementation guides that the server does (or should) support in their entirety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implementationGuide")]
    pub implementation_guide: Option<Vec<Canonical>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " Reference to a canonical URL of another CapabilityStatement that this software adds to. The "]
    #[doc = " capability statement automatically includes everything in the other statement, and it is "]
    #[doc = " not duplicated, though the server may repeat the same resources, interactions and "]
    #[doc = " operations to add additional details to them."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub imports: Option<Vec<Canonical>>,
    #[doc = " Reference to a canonical URL of another CapabilityStatement that this software implements. "]
    #[doc = " This capability statement is a published API description that corresponds to a business "]
    #[doc = " service. The server may actually implement a subset of the capability statement it claims "]
    #[doc = " to implement, so the capability statement must specify the full capability details."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub instantiates: Option<Vec<Canonical>>,
    #[doc = " A legal or geographic region in which the capability statement is intended to be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,
    #[doc = " The way that this statement is intended to be used, to describe an actual running instance "]
    #[doc = " of software, a particular product (kind, not instance of software) or a class of "]
    #[doc = " implementation (e.g. a desired purchase)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<Code>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " A description of the messaging capabilities of the solution."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub messaging: Option<Vec<CapabilityStatementMessaging>>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A natural language name identifying the capability statement. This name should be usable as "]
    #[doc = " an identifier for the module by machine processing applications such as code generation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " A list of the patch formats supported by this implementation using their content types."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patchFormat")]
    pub patch_format: Option<Vec<Code>>,
    #[doc = " The name of the organization or individual that published the capability statement."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
    #[doc = " Explanation of why this capability statement is needed and why it has been designed as it "]
    #[doc = " has."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,
    #[doc = " This is a CapabilityStatement resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " A definition of the restful capabilities of the solution, if any."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub rest: Option<Vec<CapabilityStatementRest>>,
    #[doc = " Software that is covered by this capability statement.  It is used when the capability "]
    #[doc = " statement describes the capabilities of a particular software version, independent of an "]
    #[doc = " installation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub software: Option<CapabilityStatementSoftware>,
    #[doc = " The status of this capability statement. Enables tracking the life-cycle of the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " A short, descriptive, user-friendly title for the capability statement."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[doc = " An absolute URI that is used to identify this capability statement when it is referenced in "]
    #[doc = " a specification, model, design or an instance; also called its canonical identifier. This "]
    #[doc = " SHOULD be globally unique and SHOULD be a literal address at which at which an "]
    #[doc = " authoritative instance of this capability statement is (or will be) published. This URL can "]
    #[doc = " be the target of a canonical reference. It SHALL remain the same when the capability "]
    #[doc = " statement is stored on different servers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
    #[doc = " The content was developed with a focus and intent of supporting the contexts that are "]
    #[doc = " listed. These contexts may be general categories (gender, age, ...) or may be references to "]
    #[doc = " specific programs (insurance plans, studies, ...) and may be used to assist with indexing "]
    #[doc = " and searching for appropriate capability statement instances."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,
    #[doc = " The identifier that is used to identify this version of the capability statement when it is "]
    #[doc = " referenced in a specification, model, design or instance. This is an arbitrary value "]
    #[doc = " managed by the capability statement author and is not expected to be globally unique. For "]
    #[doc = " example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. "]
    #[doc = " There is also no expectation that versions can be placed in a lexicographical sequence."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[doc = " A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a "]
#[doc = " particular version of FHIR that may be used as a statement of actual server functionality or a "]
#[doc = " statement of required or desired server implementation."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "CapabilityStatement_Document")]
#[serde(deny_unknown_fields)]
pub struct CapabilityStatementDocument {
    #[doc = " Extensions for documentation"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _documentation: Option<Element>,
    #[doc = " Extensions for mode"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _mode: Option<Element>,
    #[doc = " A description of how the application supports or uses the specified document profile.  For "]
    #[doc = " example, when documents are created, what action is taken with consumed documents, etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub documentation: Option<Markdown>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Mode of this document declaration - whether an application is a producer or consumer."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub mode: Option<Code>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A profile on the document Bundle that constrains which resources are present, and their "]
    #[doc = " contents."]
    pub profile: Canonical,
}
#[doc = " A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a "]
#[doc = " particular version of FHIR that may be used as a statement of actual server functionality or a "]
#[doc = " statement of required or desired server implementation."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "CapabilityStatement_Endpoint")]
#[serde(deny_unknown_fields)]
pub struct CapabilityStatementEndpoint {
    #[doc = " Extensions for address"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _address: Option<Element>,
    #[doc = " The network address of the endpoint. For solutions that do not use network addresses for "]
    #[doc = " routing, it can be just an identifier."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub address: Option<Url>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A list of the messaging transport protocol(s) identifiers, supported by this endpoint."]
    pub protocol: Coding,
}
#[doc = " A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a "]
#[doc = " particular version of FHIR that may be used as a statement of actual server functionality or a "]
#[doc = " statement of required or desired server implementation."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CapabilityStatement_Implementation")]
#[serde(deny_unknown_fields)]
pub struct CapabilityStatementImplementation {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " The organization responsible for the management of the instance and oversight of the data "]
    #[doc = " on the server at the specified URL."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub custodian: Option<Reference>,
    #[doc = " Information about the specific installation that this capability statement relates to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " An absolute base URL for the implementation.  This forms the base for REST interfaces as "]
    #[doc = " well as the mailbox and document interfaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Url>,
}
#[doc = " A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a "]
#[doc = " particular version of FHIR that may be used as a statement of actual server functionality or a "]
#[doc = " statement of required or desired server implementation."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CapabilityStatement_Interaction")]
#[serde(deny_unknown_fields)]
pub struct CapabilityStatementInteraction {
    #[doc = " Extensions for code"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _code: Option<Element>,
    #[doc = " Extensions for documentation"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _documentation: Option<Element>,
    #[doc = " Coded identifier of the operation, supported by the system resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,
    #[doc = " Guidance specific to the implementation of this operation, such as 'delete is a logical "]
    #[doc = " delete' or 'updates are only allowed with version id' or 'creates permitted from "]
    #[doc = " pre-authorized certificates only'."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub documentation: Option<Markdown>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a "]
#[doc = " particular version of FHIR that may be used as a statement of actual server functionality or a "]
#[doc = " statement of required or desired server implementation."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CapabilityStatement_Interaction1")]
#[serde(deny_unknown_fields)]
pub struct CapabilityStatementInteraction1 {
    #[doc = " Extensions for code"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _code: Option<Element>,
    #[doc = " Extensions for documentation"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _documentation: Option<Element>,
    #[doc = " A coded identifier of the operation, supported by the system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,
    #[doc = " Guidance specific to the implementation of this operation, such as limitations on the kind "]
    #[doc = " of transactions allowed, or information about system wide search is implemented."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub documentation: Option<Markdown>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a "]
#[doc = " particular version of FHIR that may be used as a statement of actual server functionality or a "]
#[doc = " statement of required or desired server implementation."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CapabilityStatement_Messaging")]
#[serde(deny_unknown_fields)]
pub struct CapabilityStatementMessaging {
    #[doc = " Extensions for documentation"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _documentation: Option<Element>,
    #[doc = " Extensions for reliableCache"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_reliableCache")]
    pub _reliable_cache: Option<Element>,
    #[doc = " Documentation about the system's messaging capabilities for this endpoint not otherwise "]
    #[doc = " documented by the capability statement.  For example, the process for becoming an "]
    #[doc = " authorized messaging exchange partner."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub documentation: Option<Markdown>,
    #[doc = " An endpoint (network accessible address) to which messages and/or replies are to be sent."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<Vec<CapabilityStatementEndpoint>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Length if the receiver's reliable messaging cache in minutes (if a receiver) or how long "]
    #[doc = " the cache length on the receiver should be (if a sender)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reliableCache")]
    pub reliable_cache: Option<UnsignedInt>,
    #[doc = " References to message definitions for messages this system can send or receive."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportedMessage")]
    pub supported_message: Option<Vec<CapabilityStatementSupportedMessage>>,
}
#[doc = " A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a "]
#[doc = " particular version of FHIR that may be used as a statement of actual server functionality or a "]
#[doc = " statement of required or desired server implementation."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "CapabilityStatement_Operation")]
#[serde(deny_unknown_fields)]
pub struct CapabilityStatementOperation {
    #[doc = " Extensions for documentation"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _documentation: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Where the formal definition can be found. If a server references the base definition of an "]
    #[doc = " Operation (i.e. from the specification itself such as "]
    #[doc = " ```http://hl7.org/fhir/OperationDefinition/ValueSet-expand```), that means it supports the "]
    #[doc = " full capabilities of the operation - e.g. both GET and POST invocation.  If it only "]
    #[doc = " supports a subset, it must define its own custom "]
    #[doc = " [OperationDefinition](operationdefinition.html#) with a 'base' of the original "]
    #[doc = " OperationDefinition.  The custom definition would describe the specific subset of "]
    #[doc = " functionality supported."]
    pub definition: Canonical,
    #[doc = " Documentation that describes anything special about the operation behavior, possibly "]
    #[doc = " detailing different behavior for system, type and instance-level invocation of the "]
    #[doc = " operation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub documentation: Option<Markdown>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The name of the operation or query. For an operation, this is the name  prefixed with $ and "]
    #[doc = " used in the URL. For a query, this is the name used in the _query parameter when the query "]
    #[doc = " is called."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[doc = " A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a "]
#[doc = " particular version of FHIR that may be used as a statement of actual server functionality or a "]
#[doc = " statement of required or desired server implementation."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CapabilityStatement_Resource")]
#[serde(deny_unknown_fields)]
pub struct CapabilityStatementResource {
    #[doc = " Extensions for conditionalCreate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_conditionalCreate")]
    pub _conditional_create: Option<Element>,
    #[doc = " Extensions for conditionalDelete"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_conditionalDelete")]
    pub _conditional_delete: Option<Element>,
    #[doc = " Extensions for conditionalRead"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_conditionalRead")]
    pub _conditional_read: Option<Element>,
    #[doc = " Extensions for conditionalUpdate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_conditionalUpdate")]
    pub _conditional_update: Option<Element>,
    #[doc = " Extensions for documentation"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _documentation: Option<Element>,
    #[doc = " Extensions for readHistory"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_readHistory")]
    pub _read_history: Option<Element>,
    #[doc = " Extensions for referencePolicy"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_referencePolicy")]
    pub _reference_policy: Option<Vec<Element>>,
    #[doc = " Extensions for searchInclude"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_searchInclude")]
    pub _search_include: Option<Vec<Element>>,
    #[doc = " Extensions for searchRevInclude"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_searchRevInclude")]
    pub _search_rev_include: Option<Vec<Element>>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " Extensions for updateCreate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_updateCreate")]
    pub _update_create: Option<Element>,
    #[doc = " Extensions for versioning"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _versioning: Option<Element>,
    #[doc = " A flag that indicates that the server supports conditional create."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "conditionalCreate")]
    pub conditional_create: Option<Boolean>,
    #[doc = " A code that indicates how the server supports conditional delete."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "conditionalDelete")]
    pub conditional_delete: Option<Code>,
    #[doc = " A code that indicates how the server supports conditional read."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "conditionalRead")]
    pub conditional_read: Option<Code>,
    #[doc = " A flag that indicates that the server supports conditional update."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "conditionalUpdate")]
    pub conditional_update: Option<Boolean>,
    #[doc = " Additional information about the resource type used by the system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub documentation: Option<Markdown>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Identifies a restful operation supported by the solution."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub interaction: Option<Vec<CapabilityStatementInteraction>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Definition of an operation or a named query together with its parameters and their meaning "]
    #[doc = " and type. Consult the definition of the operation for details about how to invoke the "]
    #[doc = " operation, and the parameters."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub operation: Option<Vec<CapabilityStatementOperation>>,
    #[doc = " A specification of the profile that describes the solution's overall support for the "]
    #[doc = " resource, including any constraints on cardinality, bindings, lengths or other limitations. "]
    #[doc = " See further discussion in [Using Profiles](profiling.html#profile-uses)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub profile: Option<Canonical>,
    #[doc = " A flag for whether the server is able to return past versions as part of the vRead "]
    #[doc = " operation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "readHistory")]
    pub read_history: Option<Boolean>,
    #[doc = " A set of flags that defines how references are supported."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "referencePolicy")]
    pub reference_policy: Option<Vec<Code>>,
    #[doc = " A list of _include values supported by the server."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "searchInclude")]
    pub search_include: Option<Vec<String>>,
    #[doc = " Search parameters for implementations to support and/or make use of - either references to "]
    #[doc = " ones defined in the specification, or additional ones defined for/by the implementation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "searchParam")]
    pub search_param: Option<Vec<CapabilityStatementSearchParam>>,
    #[doc = " A list of _revinclude (reverse include) values supported by the server."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "searchRevInclude")]
    pub search_rev_include: Option<Vec<String>>,
    #[doc = " A list of profiles that represent different use cases supported by the system. For a "]
    #[doc = " server, \"supported by the system\" means the system hosts/produces a set of resources that "]
    #[doc = " are conformant to a particular profile, and allows clients that use its services to search "]
    #[doc = " using this profile and to find appropriate data. For a client, it means the system will "]
    #[doc = " search by this profile and process data according to the guidance implicit in the profile. "]
    #[doc = " See further discussion in [Using Profiles](profiling.html#profile-uses)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportedProfile")]
    pub supported_profile: Option<Vec<Canonical>>,
    #[doc = " A type of resource exposed via the restful interface."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
    #[doc = " A flag to indicate that the server allows or needs to allow the client to create new "]
    #[doc = " identities on the server (that is, the client PUTs to a location where there is no existing "]
    #[doc = " resource). Allowing this operation means that the server allows the client to create new "]
    #[doc = " identities on the server."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "updateCreate")]
    pub update_create: Option<Boolean>,
    #[doc = " This field is set to no-version to specify that the system does not support (server) or use "]
    #[doc = " (client) versioning for this resource type. If this has some other value, the server must "]
    #[doc = " at least correctly track and populate the versionId meta-property on resources. If the "]
    #[doc = " value is 'versioned-update', then the server supports all the versioning features, "]
    #[doc = " including using e-tags for version integrity in the API."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub versioning: Option<Code>,
}
#[doc = " A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a "]
#[doc = " particular version of FHIR that may be used as a statement of actual server functionality or a "]
#[doc = " statement of required or desired server implementation."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CapabilityStatement_Rest")]
#[serde(deny_unknown_fields)]
pub struct CapabilityStatementRest {
    #[doc = " Extensions for documentation"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _documentation: Option<Element>,
    #[doc = " Extensions for mode"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _mode: Option<Element>,
    #[doc = " An absolute URI which is a reference to the definition of a compartment that the system "]
    #[doc = " supports. The reference is to a CompartmentDefinition resource by its canonical URL ."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub compartment: Option<Vec<Canonical>>,
    #[doc = " Information about the system's restful capabilities that apply across all applications, "]
    #[doc = " such as security."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub documentation: Option<Markdown>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A specification of restful operations supported by the system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub interaction: Option<Vec<CapabilityStatementInteraction1>>,
    #[doc = " Identifies whether this portion of the statement is describing the ability to initiate or "]
    #[doc = " receive restful operations."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub mode: Option<Code>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Definition of an operation or a named query together with its parameters and their meaning "]
    #[doc = " and type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub operation: Option<Vec<CapabilityStatementOperation>>,
    #[doc = " A specification of the restful capabilities of the solution for a specific resource type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource: Option<Vec<CapabilityStatementResource>>,
    #[doc = " Search parameters that are supported for searching all resources for implementations to "]
    #[doc = " support and/or make use of - either references to ones defined in the specification, or "]
    #[doc = " additional ones defined for/by the implementation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "searchParam")]
    pub search_param: Option<Vec<CapabilityStatementSearchParam>>,
    #[doc = " Information about security implementation from an interface perspective - what a client "]
    #[doc = " needs to know."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub security: Option<CapabilityStatementSecurity>,
}
#[doc = " A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a "]
#[doc = " particular version of FHIR that may be used as a statement of actual server functionality or a "]
#[doc = " statement of required or desired server implementation."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CapabilityStatement_SearchParam")]
#[serde(deny_unknown_fields)]
pub struct CapabilityStatementSearchParam {
    #[doc = " Extensions for documentation"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _documentation: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " An absolute URI that is a formal reference to where this parameter was first defined, so "]
    #[doc = " that a client can be confident of the meaning of the search parameter (a reference to "]
    #[doc = " [SearchParameter.url](searchparameter-definitions.html#SearchParameter.url)). This element "]
    #[doc = " SHALL be populated if the search parameter refers to a SearchParameter defined by the FHIR "]
    #[doc = " core specification or externally defined IGs."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub definition: Option<Canonical>,
    #[doc = " This allows documentation of any distinct behaviors about how the search parameter is used. "]
    #[doc = "  For example, text matching algorithms."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub documentation: Option<Markdown>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The name of the search parameter used in the interface."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " The type of value a search parameter refers to, and how the content is interpreted."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}
#[doc = " A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a "]
#[doc = " particular version of FHIR that may be used as a statement of actual server functionality or a "]
#[doc = " statement of required or desired server implementation."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CapabilityStatement_Security")]
#[serde(deny_unknown_fields)]
pub struct CapabilityStatementSecurity {
    #[doc = " Extensions for cors"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _cors: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Server adds CORS headers when responding to requests - this enables Javascript applications "]
    #[doc = " to use the server."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub cors: Option<Boolean>,
    #[doc = " General description of how security works."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Types of security services that are supported/required by the system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub service: Option<Vec<CodeableConcept>>,
}
#[doc = " A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a "]
#[doc = " particular version of FHIR that may be used as a statement of actual server functionality or a "]
#[doc = " statement of required or desired server implementation."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CapabilityStatement_Software")]
#[serde(deny_unknown_fields)]
pub struct CapabilityStatementSoftware {
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for releaseDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_releaseDate")]
    pub _release_date: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Name the software is known by."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " Date this version of the software was released."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "releaseDate")]
    pub release_date: Option<DateTime>,
    #[doc = " The version identifier for the software covered by this statement."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[doc = " A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a "]
#[doc = " particular version of FHIR that may be used as a statement of actual server functionality or a "]
#[doc = " statement of required or desired server implementation."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "CapabilityStatement_SupportedMessage")]
#[serde(deny_unknown_fields)]
pub struct CapabilityStatementSupportedMessage {
    #[doc = " Extensions for mode"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _mode: Option<Element>,
    #[doc = " Points to a message definition that identifies the messaging event, message structure, "]
    #[doc = " allowed responses, etc."]
    pub definition: Canonical,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The mode of this event declaration - whether application is sender or receiver."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub mode: Option<Code>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " Describes the intention of how one or more practitioners intend to deliver care for a "]
#[doc = " particular patient, group or community for a period of time, possibly limited to care for a "]
#[doc = " specific condition or set of conditions."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct CarePlan {
    #[doc = " Extensions for created"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _created: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for instantiatesUri"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_instantiatesUri")]
    pub _instantiates_uri: Option<Vec<Element>>,
    #[doc = " Extensions for intent"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _intent: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " Identifies a planned action to occur as part of the plan.  For example, a medication to be "]
    #[doc = " used, lab tests to perform, self-monitoring, education, etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub activity: Option<Vec<CarePlanActivity>>,
    #[doc = " Identifies the conditions/problems/concerns/diagnoses/etc. whose management and/or "]
    #[doc = " mitigation are handled by this plan."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub addresses: Option<Vec<Reference>>,
    #[doc = " When populated, the author is responsible for the care plan.  The care plan is attributed "]
    #[doc = " to the author."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Reference>,
    #[doc = " A care plan that is fulfilled in whole or in part by this care plan."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Vec<Reference>>,
    #[doc = " Identifies all people and organizations who are expected to be involved in the care "]
    #[doc = " envisioned by this plan."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "careTeam")]
    pub care_team: Option<Vec<Reference>>,
    #[doc = " Identifies what \"kind\" of plan this is to support differentiation between multiple "]
    #[doc = " co-existing plans; e.g. \"Home health\", \"psychiatric\", \"asthma\", \"disease management\", "]
    #[doc = " \"wellness plan\", etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " Identifies the individual(s) or organization who provided the contents of the care plan."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contributor: Option<Vec<Reference>>,
    #[doc = " Represents when this particular CarePlan record was created in the system, which is often a "]
    #[doc = " system-generated date."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub created: Option<DateTime>,
    #[doc = " A description of the scope and nature of the plan."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " The Encounter during which this CarePlan was created or to which the creation of this "]
    #[doc = " record is tightly associated."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Describes the intended objective(s) of carrying out the care plan."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub goal: Option<Vec<Reference>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Business identifiers assigned to this care plan by the performer or other systems which "]
    #[doc = " remain constant as the resource is updated and propagates from server to server."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The URL pointing to a FHIR-defined protocol, guideline, questionnaire or other definition "]
    #[doc = " that is adhered to in whole or in part by this CarePlan."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesCanonical")]
    pub instantiates_canonical: Option<Vec<Canonical>>,
    #[doc = " The URL pointing to an externally maintained protocol, guideline, questionnaire or other "]
    #[doc = " definition that is adhered to in whole or in part by this CarePlan."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesUri")]
    pub instantiates_uri: Option<Vec<Uri>>,
    #[doc = " Indicates the level of authority/intentionality associated with the care plan and where the "]
    #[doc = " care plan fits into the workflow chain."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub intent: Option<Code>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " General notes about the care plan not covered elsewhere."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " A larger care plan of which this particular care plan is a component or step."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "partOf")]
    pub part_of: Option<Vec<Reference>>,
    #[doc = " Indicates when the plan did (or is intended to) come into effect and end."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
    #[doc = " Completed or terminated care plan whose function is taken by this new care plan."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub replaces: Option<Vec<Reference>>,
    #[doc = " This is a CarePlan resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " Indicates whether the plan is currently being acted upon, represents future intentions or "]
    #[doc = " is now a historical record."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " Identifies the patient or group whose intended care is described by the plan."]
    pub subject: Reference,
    #[doc = " Identifies portions of the patient's record that specifically influenced the formation of "]
    #[doc = " the plan.  These might include comorbidities, recent procedures, limitations, recent "]
    #[doc = " assessments, etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportingInfo")]
    pub supporting_info: Option<Vec<Reference>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " Human-friendly name for the care plan."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}
#[doc = " Describes the intention of how one or more practitioners intend to deliver care for a "]
#[doc = " particular patient, group or community for a period of time, possibly limited to care for a "]
#[doc = " specific condition or set of conditions."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CarePlan_Activity")]
#[serde(deny_unknown_fields)]
pub struct CarePlanActivity {
    #[doc = " A simple summary of a planned activity suitable for a general care plan system (e.g. form "]
    #[doc = " driven) that doesn't know about specific resources such as procedure etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub detail: Option<CarePlanDetail>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Identifies the outcome at the point when the status of the activity is assessed.  For "]
    #[doc = " example, the outcome of an education activity could be patient understands (or not)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "outcomeCodeableConcept")]
    pub outcome_codeable_concept: Option<Vec<CodeableConcept>>,
    #[doc = " Details of the outcome or action resulting from the activity.  The reference to an \"event\" "]
    #[doc = " resource, such as Procedure or Encounter or Observation, is the result/outcome of the "]
    #[doc = " activity itself.  The activity can be conveyed using CarePlan.activity.detail OR using the "]
    #[doc = " CarePlan.activity.reference (a reference to a “request” resource)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "outcomeReference")]
    pub outcome_reference: Option<Vec<Reference>>,
    #[doc = " Notes about the adherence/status/progress of the activity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub progress: Option<Vec<Annotation>>,
    #[doc = " The details of the proposed activity represented in a specific resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reference: Option<Reference>,
}
#[doc = " Describes the intention of how one or more practitioners intend to deliver care for a "]
#[doc = " particular patient, group or community for a period of time, possibly limited to care for a "]
#[doc = " specific condition or set of conditions."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CarePlan_Detail")]
#[serde(deny_unknown_fields)]
pub struct CarePlanDetail {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for doNotPerform"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_doNotPerform")]
    pub _do_not_perform: Option<Element>,
    #[doc = " Extensions for instantiatesUri"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_instantiatesUri")]
    pub _instantiates_uri: Option<Vec<Element>>,
    #[doc = " Extensions for kind"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _kind: Option<Element>,
    #[doc = " Extensions for scheduledString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_scheduledString")]
    pub _scheduled_string: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Detailed description of the type of planned activity; e.g. what lab test, what procedure, "]
    #[doc = " what kind of encounter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,
    #[doc = " Identifies the quantity expected to be consumed in a given day."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dailyAmount")]
    pub daily_amount: Option<Quantity>,
    #[doc = " This provides a textual description of constraints on the intended activity occurrence, "]
    #[doc = " including relation to other activities.  It may also include objectives, pre-conditions and "]
    #[doc = " end-conditions.  Finally, it may convey specifics about the activity such as body site, "]
    #[doc = " method, route, etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " If true, indicates that the described activity is one that must NOT be engaged in when "]
    #[doc = " following the plan.  If false, or missing, indicates that the described activity is one "]
    #[doc = " that should be engaged in when following the plan."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "doNotPerform")]
    pub do_not_perform: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Internal reference that identifies the goals that this activity is intended to contribute "]
    #[doc = " towards meeting."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub goal: Option<Vec<Reference>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The URL pointing to a FHIR-defined protocol, guideline, questionnaire or other definition "]
    #[doc = " that is adhered to in whole or in part by this CarePlan activity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesCanonical")]
    pub instantiates_canonical: Option<Vec<Canonical>>,
    #[doc = " The URL pointing to an externally maintained protocol, guideline, questionnaire or other "]
    #[doc = " definition that is adhered to in whole or in part by this CarePlan activity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesUri")]
    pub instantiates_uri: Option<Vec<Uri>>,
    #[doc = " A description of the kind of resource the in-line definition of a care plan activity is "]
    #[doc = " representing.  The CarePlan.activity.detail is an in-line definition when a resource is not "]
    #[doc = " referenced using CarePlan.activity.reference.  For example, a MedicationRequest, a "]
    #[doc = " ServiceRequest, or a CommunicationRequest."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<Code>,
    #[doc = " Identifies the facility where the activity will occur; e.g. home, hospital, specific "]
    #[doc = " clinic, etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Identifies who's expected to be involved in the activity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub performer: Option<Vec<Reference>>,
    #[doc = " Identifies the food, drug or other product to be consumed or supplied in the activity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "productCodeableConcept")]
    pub product_codeable_concept: Option<CodeableConcept>,
    #[doc = " Identifies the food, drug or other product to be consumed or supplied in the activity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "productReference")]
    pub product_reference: Option<Reference>,
    #[doc = " Identifies the quantity expected to be supplied, administered or consumed by the subject."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,
    #[doc = " Provides the rationale that drove the inclusion of this particular activity as part of the "]
    #[doc = " plan or the reason why the activity was prohibited."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,
    #[doc = " Indicates another resource, such as the health condition(s), whose existence justifies this "]
    #[doc = " request and drove the inclusion of this particular activity as part of the plan."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,
    #[doc = " The period, timing or frequency upon which the described activity is to occur."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "scheduledPeriod")]
    pub scheduled_period: Option<Period>,
    #[doc = " The period, timing or frequency upon which the described activity is to occur."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "scheduledString")]
    pub scheduled_string: Option<String>,
    #[doc = " The period, timing or frequency upon which the described activity is to occur."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "scheduledTiming")]
    pub scheduled_timing: Option<Timing>,
    #[doc = " Identifies what progress is being made for the specific activity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " Provides reason why the activity isn't yet started, is on hold, was cancelled, etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusReason")]
    pub status_reason: Option<CodeableConcept>,
}
#[doc = " The Care Team includes all the people and organizations who plan to participate in the "]
#[doc = " coordination and delivery of care for a patient."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct CareTeam {
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Identifies what kind of team.  This is to support differentiation between multiple "]
    #[doc = " co-existing teams, such as care plan team, episode of care team, longitudinal care team."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The Encounter during which this CareTeam was created or to which the creation of this "]
    #[doc = " record is tightly associated."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Business identifiers assigned to this care team by the performer or other systems which "]
    #[doc = " remain constant as the resource is updated and propagates from server to server."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The organization responsible for the care team."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "managingOrganization")]
    pub managing_organization: Option<Vec<Reference>>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A label for human use intended to distinguish like teams.  E.g. the \"red\" vs. \"green\" "]
    #[doc = " trauma teams."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " Comments made about the CareTeam."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " Identifies all people and organizations who are expected to be involved in the care team."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub participant: Option<Vec<CareTeamParticipant>>,
    #[doc = " Indicates when the team did (or is intended to) come into effect and end."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
    #[doc = " Describes why the care team exists."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,
    #[doc = " Condition(s) that this care team addresses."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,
    #[doc = " This is a CareTeam resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " Indicates the current state of the care team."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " Identifies the patient or group whose intended care is handled by the team."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Reference>,
    #[doc = " A central contact detail for the care team (that applies to all members)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub telecom: Option<Vec<ContactPoint>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " The Care Team includes all the people and organizations who plan to participate in the "]
#[doc = " coordination and delivery of care for a patient."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CareTeam_Participant")]
#[serde(deny_unknown_fields)]
pub struct CareTeamParticipant {
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The specific person or organization who is participating/expected to participate in the "]
    #[doc = " care team."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub member: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The organization of the practitioner."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onBehalfOf")]
    pub on_behalf_of: Option<Reference>,
    #[doc = " Indicates when the specific member or organization did (or is intended to) come into effect "]
    #[doc = " and end."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
    #[doc = " Indicates specific responsibility of an individual within the care team, such as \"Primary "]
    #[doc = " care physician\", \"Trained social worker counselor\", \"Caregiver\", etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub role: Option<Vec<CodeableConcept>>,
}
#[doc = " Catalog entries are wrappers that contextualize items included in a catalog."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct CatalogEntry {
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for lastUpdated"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastUpdated")]
    pub _last_updated: Option<Element>,
    #[doc = " Extensions for orderable"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _orderable: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for validTo"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_validTo")]
    pub _valid_to: Option<Element>,
    #[doc = " Used for examplefor Out of Formulary, or any specifics."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "additionalCharacteristic")]
    pub additional_characteristic: Option<Vec<CodeableConcept>>,
    #[doc = " User for example for ATC classification, or."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "additionalClassification")]
    pub additional_classification: Option<Vec<CodeableConcept>>,
    #[doc = " Used in supporting related concepts, e.g. NDC to RxNorm."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "additionalIdentifier")]
    pub additional_identifier: Option<Vec<Identifier>>,
    #[doc = " Classes of devices, or ATC for medication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub classification: Option<Vec<CodeableConcept>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Used in supporting different identifiers for the same product, e.g. manufacturer code and "]
    #[doc = " retailer code."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " Typically date of issue is different from the beginning of the validity. This can be used "]
    #[doc = " to see when an item was last updated."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastUpdated")]
    pub last_updated: Option<DateTime>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Whether the entry represents an orderable item."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub orderable: Option<Boolean>,
    #[doc = " The item in a catalog or definition."]
    #[serde(rename = "referencedItem")]
    pub referenced_item: Reference,
    #[doc = " Used for example, to point to a substance, or to a device used to administer a medication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatedEntry")]
    pub related_entry: Option<Vec<CatalogEntryRelatedEntry>>,
    #[doc = " This is a CatalogEntry resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " Used to support catalog exchange even for unsupported products, e.g. getting list of "]
    #[doc = " medications even if not prescribable."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " The type of item - medication, device, service, protocol or other."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
    #[doc = " The date until which this catalog entry is expected to be active."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "validTo")]
    pub valid_to: Option<DateTime>,
    #[doc = " The time period in which this catalog entry is expected to be active."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "validityPeriod")]
    pub validity_period: Option<Period>,
}
#[doc = " Catalog entries are wrappers that contextualize items included in a catalog."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "CatalogEntry_RelatedEntry")]
#[serde(deny_unknown_fields)]
pub struct CatalogEntryRelatedEntry {
    #[doc = " Extensions for relationtype"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _relationtype: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The reference to the related item."]
    pub item: Reference,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The type of relation to the related item: child, parent, packageContent, containerPackage, "]
    #[doc = " usedIn, uses, requires, etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub relationtype: Option<Code>,
}
#[doc = " The resource ChargeItem describes the provision of healthcare provider products for a certain "]
#[doc = " patient, therefore referring not only to the product, but containing in addition details of the "]
#[doc = " provision, like date, time, amounts and participating organizations and persons. Main Usage of "]
#[doc = " the ChargeItem is to enable the billing process and internal cost allocation."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ChargeItem {
    #[doc = " Extensions for definitionUri"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_definitionUri")]
    pub _definition_uri: Option<Vec<Element>>,
    #[doc = " Extensions for enteredDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_enteredDate")]
    pub _entered_date: Option<Element>,
    #[doc = " Extensions for factorOverride"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_factorOverride")]
    pub _factor_override: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for occurrenceDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_occurrenceDateTime")]
    pub _occurrence_date_time: Option<Element>,
    #[doc = " Extensions for overrideReason"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_overrideReason")]
    pub _override_reason: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Account into which this ChargeItems belongs."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub account: Option<Vec<Reference>>,
    #[doc = " The anatomical location where the related service has been applied."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub bodysite: Option<Vec<CodeableConcept>>,
    #[doc = " A code that identifies the charge, like a billing code."]
    pub code: CodeableConcept,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The encounter or episode of care that establishes the context for this event."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub context: Option<Reference>,
    #[doc = " The financial cost center permits the tracking of charge attribution."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "costCenter")]
    pub cost_center: Option<Reference>,
    #[doc = " References the source of pricing information, rules of application for the code this "]
    #[doc = " ChargeItem uses."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "definitionCanonical")]
    pub definition_canonical: Option<Vec<Canonical>>,
    #[doc = " References the (external) source of pricing information, rules of application for the code "]
    #[doc = " this ChargeItem uses."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "definitionUri")]
    pub definition_uri: Option<Vec<Uri>>,
    #[doc = " Date the charge item was entered."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "enteredDate")]
    pub entered_date: Option<DateTime>,
    #[doc = " The device, practitioner, etc. who entered the charge item."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub enterer: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Factor overriding the factor determined by the rules associated with the code."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "factorOverride")]
    pub factor_override: Option<Decimal>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Identifiers assigned to this event performer or other systems."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Comments made about the event by the performer, subject or other participants."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " Date/time(s) or duration when the charged service was applied."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrenceDateTime")]
    pub occurrence_date_time: Option<String>,
    #[doc = " Date/time(s) or duration when the charged service was applied."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrencePeriod")]
    pub occurrence_period: Option<Period>,
    #[doc = " Date/time(s) or duration when the charged service was applied."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrenceTiming")]
    pub occurrence_timing: Option<Timing>,
    #[doc = " If the list price or the rule-based factor associated with the code is overridden, this "]
    #[doc = " attribute can capture a text to indicate the  reason for this action."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "overrideReason")]
    pub override_reason: Option<String>,
    #[doc = " ChargeItems can be grouped to larger ChargeItems covering the whole set."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "partOf")]
    pub part_of: Option<Vec<Reference>>,
    #[doc = " Indicates who or what performed or participated in the charged service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub performer: Option<Vec<ChargeItemPerformer>>,
    #[doc = " The organization requesting the service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "performingOrganization")]
    pub performing_organization: Option<Reference>,
    #[doc = " Total price of the charge overriding the list price associated with the code."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "priceOverride")]
    pub price_override: Option<Money>,
    #[doc = " Identifies the device, food, drug or other product being charged either by type code or "]
    #[doc = " reference to an instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "productCodeableConcept")]
    pub product_codeable_concept: Option<CodeableConcept>,
    #[doc = " Identifies the device, food, drug or other product being charged either by type code or "]
    #[doc = " reference to an instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "productReference")]
    pub product_reference: Option<Reference>,
    #[doc = " Quantity of which the charge item has been serviced."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,
    #[doc = " Describes why the event occurred in coded or textual form."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reason: Option<Vec<CodeableConcept>>,
    #[doc = " The organization performing the service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "requestingOrganization")]
    pub requesting_organization: Option<Reference>,
    #[doc = " This is a ChargeItem resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " Indicated the rendered service that caused this charge."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub service: Option<Vec<Reference>>,
    #[doc = " The current state of the ChargeItem."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " The individual or set of individuals the action is being or was performed on."]
    pub subject: Reference,
    #[doc = " Further information supporting this charge."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportingInformation")]
    pub supporting_information: Option<Vec<Reference>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " The ChargeItemDefinition resource provides the properties that apply to the (billing) codes "]
#[doc = " necessary to calculate costs and prices. The properties may differ largely depending on type "]
#[doc = " and realm, therefore this resource gives only a rough structure and requires profiling for each "]
#[doc = " type of billing code system."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ChargeItemDefinition {
    #[doc = " Extensions for approvalDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_approvalDate")]
    pub _approval_date: Option<Element>,
    #[doc = " Extensions for copyright"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _copyright: Option<Element>,
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for derivedFromUri"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_derivedFromUri")]
    pub _derived_from_uri: Option<Vec<Element>>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for experimental"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _experimental: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for lastReviewDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastReviewDate")]
    pub _last_review_date: Option<Element>,
    #[doc = " Extensions for publisher"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _publisher: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " Expressions that describe applicability criteria for the billing code."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub applicability: Option<Vec<ChargeItemDefinitionApplicability>>,
    #[doc = " The date on which the resource content was approved by the publisher. Approval happens once "]
    #[doc = " when the content is officially approved for usage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "approvalDate")]
    pub approval_date: Option<Date>,
    #[doc = " The defined billing details in this resource pertain to the given billing code."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,
    #[doc = " Contact details to assist a user in finding and communicating with the publisher."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " A copyright statement relating to the charge item definition and/or its contents. Copyright "]
    #[doc = " statements are generally legal restrictions on the use and publishing of the charge item "]
    #[doc = " definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,
    #[doc = " The date  (and optionally time) when the charge item definition was published. The date "]
    #[doc = " must change when the business version changes and it must change if the status code "]
    #[doc = " changes. In addition, it should change when the substantive content of the charge item "]
    #[doc = " definition changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " The URL pointing to an externally-defined charge item definition that is adhered to in "]
    #[doc = " whole or in part by this definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "derivedFromUri")]
    pub derived_from_uri: Option<Vec<Uri>>,
    #[doc = " A free text natural language description of the charge item definition from a consumer's "]
    #[doc = " perspective."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " The period during which the charge item definition content was or is planned to be in "]
    #[doc = " active use."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectivePeriod")]
    pub effective_period: Option<Period>,
    #[doc = " A Boolean value to indicate that this charge item definition is authored for testing "]
    #[doc = " purposes (or education/evaluation/marketing) and is not intended to be used for genuine "]
    #[doc = " usage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A formal identifier that is used to identify this charge item definition when it is "]
    #[doc = " represented in other formats, or referenced in a specification, model, design or an "]
    #[doc = " instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The defined billing details in this resource pertain to the given product instance(s)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub instance: Option<Vec<Reference>>,
    #[doc = " A legal or geographic region in which the charge item definition is intended to be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The date on which the resource content was last reviewed. Review happens periodically after "]
    #[doc = " approval but does not change the original approval date."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastReviewDate")]
    pub last_review_date: Option<Date>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A larger definition of which this particular definition is a component or step."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "partOf")]
    pub part_of: Option<Vec<Canonical>>,
    #[doc = " Group of properties which are applicable under the same conditions. If no applicability "]
    #[doc = " rules are established for the group, then all properties always apply."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "propertyGroup")]
    pub property_group: Option<Vec<ChargeItemDefinitionPropertyGroup>>,
    #[doc = " The name of the organization or individual that published the charge item definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
    #[doc = " As new versions of a protocol or guideline are defined, allows identification of what "]
    #[doc = " versions are replaced by a new instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub replaces: Option<Vec<Canonical>>,
    #[doc = " This is a ChargeItemDefinition resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The current state of the ChargeItemDefinition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " A short, descriptive, user-friendly title for the charge item definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[doc = " An absolute URI that is used to identify this charge item definition when it is referenced "]
    #[doc = " in a specification, model, design or an instance; also called its canonical identifier. "]
    #[doc = " This SHOULD be globally unique and SHOULD be a literal address at which at which an "]
    #[doc = " authoritative instance of this charge item definition is (or will be) published. This URL "]
    #[doc = " can be the target of a canonical reference. It SHALL remain the same when the charge item "]
    #[doc = " definition is stored on different servers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
    #[doc = " The content was developed with a focus and intent of supporting the contexts that are "]
    #[doc = " listed. These contexts may be general categories (gender, age, ...) or may be references to "]
    #[doc = " specific programs (insurance plans, studies, ...) and may be used to assist with indexing "]
    #[doc = " and searching for appropriate charge item definition instances."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,
    #[doc = " The identifier that is used to identify this version of the charge item definition when it "]
    #[doc = " is referenced in a specification, model, design or instance. This is an arbitrary value "]
    #[doc = " managed by the charge item definition author and is not expected to be globally unique. For "]
    #[doc = " example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. "]
    #[doc = " There is also no expectation that versions can be placed in a lexicographical sequence. To "]
    #[doc = " provide a version consistent with the Decision Support Service specification, use the "]
    #[doc = " format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge "]
    #[doc = " assets, refer to the Decision Support Service specification. Note that a version is "]
    #[doc = " required for non-experimental active assets."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[doc = " The ChargeItemDefinition resource provides the properties that apply to the (billing) codes "]
#[doc = " necessary to calculate costs and prices. The properties may differ largely depending on type "]
#[doc = " and realm, therefore this resource gives only a rough structure and requires profiling for each "]
#[doc = " type of billing code system."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ChargeItemDefinition_Applicability")]
#[serde(deny_unknown_fields)]
pub struct ChargeItemDefinitionApplicability {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for expression"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _expression: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " A brief, natural language description of the condition that effectively communicates the "]
    #[doc = " intended semantics."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " An expression that returns true or false, indicating whether the condition is satisfied. "]
    #[doc = " When using FHIRPath expressions, the %context environment variable must be replaced at "]
    #[doc = " runtime with the ChargeItem resource to which this definition is applied."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The media type of the language for the expression, e.g. \"text/cql\" for Clinical Query "]
    #[doc = " Language expressions or \"text/fhirpath\" for FHIRPath expressions."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " The ChargeItemDefinition resource provides the properties that apply to the (billing) codes "]
#[doc = " necessary to calculate costs and prices. The properties may differ largely depending on type "]
#[doc = " and realm, therefore this resource gives only a rough structure and requires profiling for each "]
#[doc = " type of billing code system."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ChargeItemDefinition_PriceComponent")]
#[serde(deny_unknown_fields)]
pub struct ChargeItemDefinitionPriceComponent {
    #[doc = " Extensions for factor"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _factor: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " The amount calculated for this component."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub amount: Option<Money>,
    #[doc = " A code that identifies the component. Codes may be used to differentiate between kinds of "]
    #[doc = " taxes, surcharges, discounts etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The factor that has been applied on the base price for calculating this component."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub factor: Option<Decimal>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " This code identifies the type of the component."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}
#[doc = " The ChargeItemDefinition resource provides the properties that apply to the (billing) codes "]
#[doc = " necessary to calculate costs and prices. The properties may differ largely depending on type "]
#[doc = " and realm, therefore this resource gives only a rough structure and requires profiling for each "]
#[doc = " type of billing code system."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ChargeItemDefinition_PropertyGroup")]
#[serde(deny_unknown_fields)]
pub struct ChargeItemDefinitionPropertyGroup {
    #[doc = " Expressions that describe applicability criteria for the priceComponent."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub applicability: Option<Vec<ChargeItemDefinitionApplicability>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The price for a ChargeItem may be calculated as a base price with surcharges/deductions "]
    #[doc = " that apply in certain conditions. A ChargeItemDefinition resource that defines the prices, "]
    #[doc = " factors and conditions that apply to a billing code is currently under development. The "]
    #[doc = " priceComponent element can be used to offer transparency to the recipient of the Invoice of "]
    #[doc = " how the prices have been calculated."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "priceComponent")]
    pub price_component: Option<Vec<ChargeItemDefinitionPriceComponent>>,
}
#[doc = " The resource ChargeItem describes the provision of healthcare provider products for a certain "]
#[doc = " patient, therefore referring not only to the product, but containing in addition details of the "]
#[doc = " provision, like date, time, amounts and participating organizations and persons. Main Usage of "]
#[doc = " the ChargeItem is to enable the billing process and internal cost allocation."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ChargeItem_Performer")]
#[serde(deny_unknown_fields)]
pub struct ChargeItemPerformer {
    #[doc = " The device, practitioner, etc. who performed or participated in the service."]
    pub actor: Reference,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Describes the type of performance or participation(e.g. primary surgeon, anesthesiologiest, "]
    #[doc = " etc.)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub function: Option<CodeableConcept>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " The Citation Resource enables reference to any knowledge artifact for purposes of "]
#[doc = " identification and attribution. The Citation Resource supports existing reference structures "]
#[doc = " and developing publication practices such as versioning, expressing complex contributorship "]
#[doc = " roles, and referencing computable resources."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Citation {
    #[doc = " Extensions for approvalDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_approvalDate")]
    pub _approval_date: Option<Element>,
    #[doc = " Extensions for copyright"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _copyright: Option<Element>,
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for experimental"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _experimental: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for lastReviewDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastReviewDate")]
    pub _last_review_date: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for publisher"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _publisher: Option<Element>,
    #[doc = " Extensions for purpose"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _purpose: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " The date on which the resource content was approved by the publisher. Approval happens once "]
    #[doc = " when the content is officially approved for usage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "approvalDate")]
    pub approval_date: Option<Date>,
    #[doc = " Who authored the Citation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Vec<ContactDetail>>,
    #[doc = " The article or artifact being described."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "citedArtifact")]
    pub cited_artifact: Option<CitationCitedArtifact>,
    #[doc = " The assignment to an organizing scheme."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub classification: Option<Vec<CitationClassification>>,
    #[doc = " Contact details to assist a user in finding and communicating with the publisher."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " Use and/or publishing restrictions for the Citation, not for the cited artifact."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,
    #[doc = " The status of the citation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "currentState")]
    pub current_state: Option<Vec<CodeableConcept>>,
    #[doc = " The date  (and optionally time) when the citation was published. The date must change when "]
    #[doc = " the business version changes and it must change if the status code changes. In addition, it "]
    #[doc = " should change when the substantive content of the citation changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " A free text natural language description of the citation from a consumer's perspective."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " Who edited the Citation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub editor: Option<Vec<ContactDetail>>,
    #[doc = " The period during which the citation content was or is planned to be in active use."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectivePeriod")]
    pub effective_period: Option<Period>,
    #[doc = " Who endorsed the Citation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub endorser: Option<Vec<ContactDetail>>,
    #[doc = " A Boolean value to indicate that this citation is authored for testing purposes (or "]
    #[doc = " education/evaluation/marketing) and is not intended to be used for genuine usage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A formal identifier that is used to identify this citation when it is represented in other "]
    #[doc = " formats, or referenced in a specification, model, design or an instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " A legal or geographic region in which the citation is intended to be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The date on which the resource content was last reviewed. Review happens periodically after "]
    #[doc = " approval but does not change the original approval date."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastReviewDate")]
    pub last_review_date: Option<Date>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A natural language name identifying the citation. This name should be usable as an "]
    #[doc = " identifier for the module by machine processing applications such as code generation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " Used for general notes and annotations not coded elsewhere."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " The name of the organization or individual that published the citation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
    #[doc = " Explanation of why this citation is needed and why it has been designed as it has."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,
    #[doc = " Artifact related to the Citation Resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatesTo")]
    pub relates_to: Option<Vec<CitationRelatesTo>>,
    #[doc = " This is a Citation resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " Who reviewed the Citation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reviewer: Option<Vec<ContactDetail>>,
    #[doc = " The status of this summary. Enables tracking the life-cycle of the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " An effective date or period for a status of the citation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusDate")]
    pub status_date: Option<Vec<CitationStatusDate>>,
    #[doc = " A human-readable display of the citation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub summary: Option<Vec<CitationSummary>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " A short, descriptive, user-friendly title for the citation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[doc = " An absolute URI that is used to identify this citation when it is referenced in a "]
    #[doc = " specification, model, design or an instance; also called its canonical identifier. This "]
    #[doc = " SHOULD be globally unique and SHOULD be a literal address at which at which an "]
    #[doc = " authoritative instance of this summary is (or will be) published. This URL can be the "]
    #[doc = " target of a canonical reference. It SHALL remain the same when the summary is stored on "]
    #[doc = " different servers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
    #[doc = " The content was developed with a focus and intent of supporting the contexts that are "]
    #[doc = " listed. These contexts may be general categories (gender, age, ...) or may be references to "]
    #[doc = " specific programs (insurance plans, studies, ...) and may be used to assist with indexing "]
    #[doc = " and searching for appropriate citation instances."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,
    #[doc = " The identifier that is used to identify this version of the citation when it is referenced "]
    #[doc = " in a specification, model, design or instance. This is an arbitrary value managed by the "]
    #[doc = " citation author and is not expected to be globally unique. For example, it might be a "]
    #[doc = " timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no "]
    #[doc = " expectation that versions can be placed in a lexicographical sequence."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[doc = " The Citation Resource enables reference to any knowledge artifact for purposes of "]
#[doc = " identification and attribution. The Citation Resource supports existing reference structures "]
#[doc = " and developing publication practices such as versioning, expressing complex contributorship "]
#[doc = " roles, and referencing computable resources."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Citation_Abstract")]
#[serde(deny_unknown_fields)]
pub struct CitationAbstract {
    #[doc = " Extensions for copyright"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _copyright: Option<Element>,
    #[doc = " Extensions for text"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _text: Option<Element>,
    #[doc = " Copyright notice for the abstract."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Used to express the specific language."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Abstract content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Markdown>,
    #[doc = " Used to express the reason or specific aspect for the abstract."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " The Citation Resource enables reference to any knowledge artifact for purposes of "]
#[doc = " identification and attribution. The Citation Resource supports existing reference structures "]
#[doc = " and developing publication practices such as versioning, expressing complex contributorship "]
#[doc = " roles, and referencing computable resources."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Citation_AffiliationInfo")]
#[serde(deny_unknown_fields)]
pub struct CitationAffiliationInfo {
    #[doc = " Extensions for affiliation"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _affiliation: Option<Element>,
    #[doc = " Extensions for role"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _role: Option<Element>,
    #[doc = " Display for the organization."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub affiliation: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Identifier for the organization."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Role within the organization, such as professional title."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
}
#[doc = " The Citation Resource enables reference to any knowledge artifact for purposes of "]
#[doc = " identification and attribution. The Citation Resource supports existing reference structures "]
#[doc = " and developing publication practices such as versioning, expressing complex contributorship "]
#[doc = " roles, and referencing computable resources."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Citation_CitedArtifact")]
#[serde(deny_unknown_fields)]
pub struct CitationCitedArtifact {
    #[doc = " Extensions for dateAccessed"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_dateAccessed")]
    pub _date_accessed: Option<Element>,
    #[doc = " Summary of the article or artifact."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "abstract")]
    pub abstract_: Option<Vec<CitationAbstract>>,
    #[doc = " The assignment to an organizing scheme."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub classification: Option<Vec<CitationClassification1>>,
    #[doc = " This element is used to list authors and other contributors, their contact information, "]
    #[doc = " specific contributions, and summary statements."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contributorship: Option<CitationContributorship>,
    #[doc = " The status of the cited artifact."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "currentState")]
    pub current_state: Option<Vec<CodeableConcept>>,
    #[doc = " When the cited artifact was accessed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dateAccessed")]
    pub date_accessed: Option<DateTime>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A formal identifier that is used to identify this citation when it is represented in other "]
    #[doc = " formats, or referenced in a specification, model, design or an instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Any additional information or content for the article or artifact."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " The component of the article or artifact."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub part: Option<CitationPart>,
    #[doc = " If multiple, used to represent alternative forms of the article that are not separate "]
    #[doc = " citations."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "publicationForm")]
    pub publication_form: Option<Vec<CitationPublicationForm>>,
    #[doc = " A formal identifier that is used to identify things closely related to this citation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatedIdentifier")]
    pub related_identifier: Option<Vec<Identifier>>,
    #[doc = " The artifact related to the cited artifact."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatesTo")]
    pub relates_to: Option<Vec<CitationRelatesTo1>>,
    #[doc = " An effective date or period for a status of the cited artifact."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusDate")]
    pub status_date: Option<Vec<CitationStatusDate1>>,
    #[doc = " The title details of the article or artifact."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<Vec<CitationTitle>>,
    #[doc = " The defined version of the cited artifact."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<CitationVersion>,
    #[doc = " Used for any URL for the article or artifact cited."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "webLocation")]
    pub web_location: Option<Vec<CitationWebLocation>>,
}
#[doc = " The Citation Resource enables reference to any knowledge artifact for purposes of "]
#[doc = " identification and attribution. The Citation Resource supports existing reference structures "]
#[doc = " and developing publication practices such as versioning, expressing complex contributorship "]
#[doc = " roles, and referencing computable resources."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Citation_Classification")]
#[serde(deny_unknown_fields)]
pub struct CitationClassification {
    #[doc = " The specific classification value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub classifier: Option<Vec<CodeableConcept>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The kind of classifier (e.g. publication type, keyword)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " The Citation Resource enables reference to any knowledge artifact for purposes of "]
#[doc = " identification and attribution. The Citation Resource supports existing reference structures "]
#[doc = " and developing publication practices such as versioning, expressing complex contributorship "]
#[doc = " roles, and referencing computable resources."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Citation_Classification1")]
#[serde(deny_unknown_fields)]
pub struct CitationClassification1 {
    #[doc = " The specific classification value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub classifier: Option<Vec<CodeableConcept>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The kind of classifier (e.g. publication type, keyword)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
    #[doc = " Provenance and copyright of classification."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "whoClassified")]
    pub who_classified: Option<CitationWhoClassified>,
}
#[doc = " The Citation Resource enables reference to any knowledge artifact for purposes of "]
#[doc = " identification and attribution. The Citation Resource supports existing reference structures "]
#[doc = " and developing publication practices such as versioning, expressing complex contributorship "]
#[doc = " roles, and referencing computable resources."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Citation_ContributionInstance")]
#[serde(deny_unknown_fields)]
pub struct CitationContributionInstance {
    #[doc = " Extensions for time"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _time: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The time that the contribution was made."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub time: Option<DateTime>,
    #[doc = " The specific contribution."]
    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}
#[doc = " The Citation Resource enables reference to any knowledge artifact for purposes of "]
#[doc = " identification and attribution. The Citation Resource supports existing reference structures "]
#[doc = " and developing publication practices such as versioning, expressing complex contributorship "]
#[doc = " roles, and referencing computable resources."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Citation_Contributorship")]
#[serde(deny_unknown_fields)]
pub struct CitationContributorship {
    #[doc = " Extensions for complete"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _complete: Option<Element>,
    #[doc = " Indicates if the list includes all authors and/or contributors."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub complete: Option<Boolean>,
    #[doc = " An individual entity named in the author list or contributor list."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub entry: Option<Vec<CitationEntry>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Used to record a display of the author/contributor list without separate coding for each "]
    #[doc = " list member."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub summary: Option<Vec<CitationSummary1>>,
}
#[doc = " The Citation Resource enables reference to any knowledge artifact for purposes of "]
#[doc = " identification and attribution. The Citation Resource supports existing reference structures "]
#[doc = " and developing publication practices such as versioning, expressing complex contributorship "]
#[doc = " roles, and referencing computable resources."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Citation_DateOfPublication")]
#[serde(deny_unknown_fields)]
pub struct CitationDateOfPublication {
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for day"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _day: Option<Element>,
    #[doc = " Extensions for month"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _month: Option<Element>,
    #[doc = " Extensions for season"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _season: Option<Element>,
    #[doc = " Extensions for text"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _text: Option<Element>,
    #[doc = " Extensions for year"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _year: Option<Element>,
    #[doc = " Date on which the issue of the journal was published."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<Date>,
    #[doc = " Day on which the issue of the journal was published."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub day: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Month on which the issue of the journal was published."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub month: Option<String>,
    #[doc = " Spring, Summer, Fall/Autumn, Winter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub season: Option<String>,
    #[doc = " Text representation of the date of which the issue of the journal was published."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    #[doc = " Year on which the issue of the journal was published."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub year: Option<String>,
}
#[doc = " The Citation Resource enables reference to any knowledge artifact for purposes of "]
#[doc = " identification and attribution. The Citation Resource supports existing reference structures "]
#[doc = " and developing publication practices such as versioning, expressing complex contributorship "]
#[doc = " roles, and referencing computable resources."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Citation_Entry")]
#[serde(deny_unknown_fields)]
pub struct CitationEntry {
    #[doc = " Extensions for collectiveName"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_collectiveName")]
    pub _collective_name: Option<Element>,
    #[doc = " Extensions for correspondingContact"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_correspondingContact")]
    pub _corresponding_contact: Option<Element>,
    #[doc = " Extensions for initials"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _initials: Option<Element>,
    #[doc = " Extensions for listOrder"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_listOrder")]
    pub _list_order: Option<Element>,
    #[doc = " Physical mailing address for the author or contributor."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub address: Option<Vec<Address>>,
    #[doc = " Organization affiliated with the entity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "affiliationInfo")]
    pub affiliation_info: Option<Vec<CitationAffiliationInfo>>,
    #[doc = " Used for collective or corporate name as an author."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "collectiveName")]
    pub collective_name: Option<String>,
    #[doc = " Contributions with accounting for time or number."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contributionInstance")]
    pub contribution_instance: Option<Vec<CitationContributionInstance>>,
    #[doc = " This element identifies the specific nature of an individual’s contribution with respect "]
    #[doc = " to the cited work."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contributionType")]
    pub contribution_type: Option<Vec<CodeableConcept>>,
    #[doc = " Indication of which contributor is the corresponding contributor for the role."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "correspondingContact")]
    pub corresponding_contact: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Unique person identifier."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " Initials for forename."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub initials: Option<String>,
    #[doc = " Used to code order of authors."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "listOrder")]
    pub list_order: Option<PositiveInt>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A name associated with the individual."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<HumanName>,
    #[doc = " The role of the contributor (e.g. author, editor, reviewer)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub role: Option<CodeableConcept>,
    #[doc = " Email or telephone contact methods for the author or contributor."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub telecom: Option<Vec<ContactPoint>>,
}
#[doc = " The Citation Resource enables reference to any knowledge artifact for purposes of "]
#[doc = " identification and attribution. The Citation Resource supports existing reference structures "]
#[doc = " and developing publication practices such as versioning, expressing complex contributorship "]
#[doc = " roles, and referencing computable resources."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Citation_Part")]
#[serde(deny_unknown_fields)]
pub struct CitationPart {
    #[doc = " Extensions for value"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _value: Option<Element>,
    #[doc = " The citation for the full article or artifact."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "baseCitation")]
    pub base_citation: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The kind of component."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
    #[doc = " The specification of the component."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[doc = " The Citation Resource enables reference to any knowledge artifact for purposes of "]
#[doc = " identification and attribution. The Citation Resource supports existing reference structures "]
#[doc = " and developing publication practices such as versioning, expressing complex contributorship "]
#[doc = " roles, and referencing computable resources."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Citation_PeriodicRelease")]
#[serde(deny_unknown_fields)]
pub struct CitationPeriodicRelease {
    #[doc = " Extensions for issue"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _issue: Option<Element>,
    #[doc = " Extensions for volume"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _volume: Option<Element>,
    #[doc = " Describes the form of the medium cited. Common codes are \"Internet\" or \"Print\"."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "citedMedium")]
    pub cited_medium: Option<CodeableConcept>,
    #[doc = " Defining the date on which the issue of the journal was published."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dateOfPublication")]
    pub date_of_publication: Option<CitationDateOfPublication>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Issue, part or supplement of journal in which the article is published."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub issue: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Volume number of journal in which the article is published."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub volume: Option<String>,
}
#[doc = " The Citation Resource enables reference to any knowledge artifact for purposes of "]
#[doc = " identification and attribution. The Citation Resource supports existing reference structures "]
#[doc = " and developing publication practices such as versioning, expressing complex contributorship "]
#[doc = " roles, and referencing computable resources."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Citation_PublicationForm")]
#[serde(deny_unknown_fields)]
pub struct CitationPublicationForm {
    #[doc = " Extensions for accessionNumber"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_accessionNumber")]
    pub _accession_number: Option<Element>,
    #[doc = " Extensions for articleDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_articleDate")]
    pub _article_date: Option<Element>,
    #[doc = " Extensions for copyright"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _copyright: Option<Element>,
    #[doc = " Extensions for firstPage"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_firstPage")]
    pub _first_page: Option<Element>,
    #[doc = " Extensions for lastPage"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastPage")]
    pub _last_page: Option<Element>,
    #[doc = " Extensions for lastRevisionDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastRevisionDate")]
    pub _last_revision_date: Option<Element>,
    #[doc = " Extensions for pageCount"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_pageCount")]
    pub _page_count: Option<Element>,
    #[doc = " Extensions for pageString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_pageString")]
    pub _page_string: Option<Element>,
    #[doc = " Entry number or identifier for inclusion in a database."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "accessionNumber")]
    pub accession_number: Option<String>,
    #[doc = " The date the article was added to the database, or the date the article was released (which "]
    #[doc = " may differ from the journal issue publication date)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "articleDate")]
    pub article_date: Option<DateTime>,
    #[doc = " Copyright notice for the full article or artifact."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Used for isolated representation of first page."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "firstPage")]
    pub first_page: Option<String>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Language in which this form of the article is published."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Vec<CodeableConcept>>,
    #[doc = " Used for isolated representation of last page."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastPage")]
    pub last_page: Option<String>,
    #[doc = " The date the article was last revised or updated in the database."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastRevisionDate")]
    pub last_revision_date: Option<DateTime>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Actual or approximate number of pages or screens."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "pageCount")]
    pub page_count: Option<String>,
    #[doc = " Used for full display of pagination."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "pageString")]
    pub page_string: Option<String>,
    #[doc = " The specific issue in which the cited article resides."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "periodicRelease")]
    pub periodic_release: Option<CitationPeriodicRelease>,
    #[doc = " The collection the cited article or artifact is published in."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "publishedIn")]
    pub published_in: Option<CitationPublishedIn>,
}
#[doc = " The Citation Resource enables reference to any knowledge artifact for purposes of "]
#[doc = " identification and attribution. The Citation Resource supports existing reference structures "]
#[doc = " and developing publication practices such as versioning, expressing complex contributorship "]
#[doc = " roles, and referencing computable resources."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Citation_PublishedIn")]
#[serde(deny_unknown_fields)]
pub struct CitationPublishedIn {
    #[doc = " Extensions for publisherLocation"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_publisherLocation")]
    pub _publisher_location: Option<Element>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Journal identifiers include ISSN, ISO Abbreviation and NLMuniqueID; Book identifiers "]
    #[doc = " include ISBN."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Name of the publisher."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<Reference>,
    #[doc = " Geographic location of the publisher."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "publisherLocation")]
    pub publisher_location: Option<String>,
    #[doc = " Name of the database or title of the book or journal."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[doc = " Kind of container (e.g. Periodical, database, or book)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " The Citation Resource enables reference to any knowledge artifact for purposes of "]
#[doc = " identification and attribution. The Citation Resource supports existing reference structures "]
#[doc = " and developing publication practices such as versioning, expressing complex contributorship "]
#[doc = " roles, and referencing computable resources."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Citation_RelatesTo")]
#[serde(deny_unknown_fields)]
pub struct CitationRelatesTo {
    #[doc = " Extensions for targetUri"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_targetUri")]
    pub _target_uri: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " How the Citation resource relates to the target artifact."]
    #[serde(rename = "relationshipType")]
    pub relationship_type: CodeableConcept,
    #[doc = " The article or artifact that the Citation Resource is related to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetAttachment")]
    pub target_attachment: Option<Attachment>,
    #[doc = " The clasification of the related artifact."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetClassifier")]
    pub target_classifier: Option<Vec<CodeableConcept>>,
    #[doc = " The article or artifact that the Citation Resource is related to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetIdentifier")]
    pub target_identifier: Option<Identifier>,
    #[doc = " The article or artifact that the Citation Resource is related to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetReference")]
    pub target_reference: Option<Reference>,
    #[doc = " The article or artifact that the Citation Resource is related to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetUri")]
    pub target_uri: Option<String>,
}
#[doc = " The Citation Resource enables reference to any knowledge artifact for purposes of "]
#[doc = " identification and attribution. The Citation Resource supports existing reference structures "]
#[doc = " and developing publication practices such as versioning, expressing complex contributorship "]
#[doc = " roles, and referencing computable resources."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Citation_RelatesTo1")]
#[serde(deny_unknown_fields)]
pub struct CitationRelatesTo1 {
    #[doc = " Extensions for targetUri"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_targetUri")]
    pub _target_uri: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " How the cited artifact relates to the target artifact."]
    #[serde(rename = "relationshipType")]
    pub relationship_type: CodeableConcept,
    #[doc = " The article or artifact that the cited artifact is related to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetAttachment")]
    pub target_attachment: Option<Attachment>,
    #[doc = " The clasification of the related artifact."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetClassifier")]
    pub target_classifier: Option<Vec<CodeableConcept>>,
    #[doc = " The article or artifact that the cited artifact is related to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetIdentifier")]
    pub target_identifier: Option<Identifier>,
    #[doc = " The article or artifact that the cited artifact is related to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetReference")]
    pub target_reference: Option<Reference>,
    #[doc = " The article or artifact that the cited artifact is related to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetUri")]
    pub target_uri: Option<String>,
}
#[doc = " The Citation Resource enables reference to any knowledge artifact for purposes of "]
#[doc = " identification and attribution. The Citation Resource supports existing reference structures "]
#[doc = " and developing publication practices such as versioning, expressing complex contributorship "]
#[doc = " roles, and referencing computable resources."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Citation_StatusDate")]
#[serde(deny_unknown_fields)]
pub struct CitationStatusDate {
    #[doc = " Extensions for actual"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _actual: Option<Element>,
    #[doc = " Classification of the status."]
    pub activity: CodeableConcept,
    #[doc = " Either occurred or expected."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub actual: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " When the status started and/or ended."]
    pub period: Period,
}
#[doc = " The Citation Resource enables reference to any knowledge artifact for purposes of "]
#[doc = " identification and attribution. The Citation Resource supports existing reference structures "]
#[doc = " and developing publication practices such as versioning, expressing complex contributorship "]
#[doc = " roles, and referencing computable resources."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Citation_StatusDate1")]
#[serde(deny_unknown_fields)]
pub struct CitationStatusDate1 {
    #[doc = " Extensions for actual"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _actual: Option<Element>,
    #[doc = " Classification of the status."]
    pub activity: CodeableConcept,
    #[doc = " Either occurred or expected."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub actual: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " When the status started and/or ended."]
    pub period: Period,
}
#[doc = " The Citation Resource enables reference to any knowledge artifact for purposes of "]
#[doc = " identification and attribution. The Citation Resource supports existing reference structures "]
#[doc = " and developing publication practices such as versioning, expressing complex contributorship "]
#[doc = " roles, and referencing computable resources."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Citation_Summary")]
#[serde(deny_unknown_fields)]
pub struct CitationSummary {
    #[doc = " Extensions for text"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _text: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Format for display of the citation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub style: Option<CodeableConcept>,
    #[doc = " The human-readable display of the citation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Markdown>,
}
#[doc = " The Citation Resource enables reference to any knowledge artifact for purposes of "]
#[doc = " identification and attribution. The Citation Resource supports existing reference structures "]
#[doc = " and developing publication practices such as versioning, expressing complex contributorship "]
#[doc = " roles, and referencing computable resources."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Citation_Summary1")]
#[serde(deny_unknown_fields)]
pub struct CitationSummary1 {
    #[doc = " Extensions for value"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _value: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Used to code the producer or rule for creating the display string."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub source: Option<CodeableConcept>,
    #[doc = " The format for the display string."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub style: Option<CodeableConcept>,
    #[doc = " Used most commonly to express an author list or a contributorship statement."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
    #[doc = " The display string for the author list, contributor list, or contributorship statement."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Markdown>,
}
#[doc = " The Citation Resource enables reference to any knowledge artifact for purposes of "]
#[doc = " identification and attribution. The Citation Resource supports existing reference structures "]
#[doc = " and developing publication practices such as versioning, expressing complex contributorship "]
#[doc = " roles, and referencing computable resources."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Citation_Title")]
#[serde(deny_unknown_fields)]
pub struct CitationTitle {
    #[doc = " Extensions for text"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _text: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Used to express the specific language."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The title of the article or artifact."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Markdown>,
    #[doc = " Used to express the reason or specific aspect for the title."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Vec<CodeableConcept>>,
}
#[doc = " The Citation Resource enables reference to any knowledge artifact for purposes of "]
#[doc = " identification and attribution. The Citation Resource supports existing reference structures "]
#[doc = " and developing publication practices such as versioning, expressing complex contributorship "]
#[doc = " roles, and referencing computable resources."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Citation_Version")]
#[serde(deny_unknown_fields)]
pub struct CitationVersion {
    #[doc = " Extensions for value"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _value: Option<Element>,
    #[doc = " Citation for the main version of the cited artifact."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "baseCitation")]
    pub base_citation: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The version number or other version identifier."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[doc = " The Citation Resource enables reference to any knowledge artifact for purposes of "]
#[doc = " identification and attribution. The Citation Resource supports existing reference structures "]
#[doc = " and developing publication practices such as versioning, expressing complex contributorship "]
#[doc = " roles, and referencing computable resources."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Citation_WebLocation")]
#[serde(deny_unknown_fields)]
pub struct CitationWebLocation {
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Code the reason for different URLs, e.g. abstract and full-text."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
    #[doc = " The specific URL."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
}
#[doc = " The Citation Resource enables reference to any knowledge artifact for purposes of "]
#[doc = " identification and attribution. The Citation Resource supports existing reference structures "]
#[doc = " and developing publication practices such as versioning, expressing complex contributorship "]
#[doc = " roles, and referencing computable resources."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Citation_WhoClassified")]
#[serde(deny_unknown_fields)]
pub struct CitationWhoClassified {
    #[doc = " Extensions for classifierCopyright"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_classifierCopyright")]
    pub _classifier_copyright: Option<Element>,
    #[doc = " Extensions for freeToShare"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_freeToShare")]
    pub _free_to_share: Option<Element>,
    #[doc = " Rights management statement for the classification."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "classifierCopyright")]
    pub classifier_copyright: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Acceptable to re-use the classification."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "freeToShare")]
    pub free_to_share: Option<Boolean>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Organization who created the classification."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub organization: Option<Reference>,
    #[doc = " Person who created the classification."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub person: Option<Reference>,
    #[doc = " The publisher of the classification, not the publisher of the article or artifact being "]
    #[doc = " cited."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<Reference>,
}
#[doc = " A provider issued list of professional services and products which have been provided, or are "]
#[doc = " to be provided, to a patient which is sent to an insurer for reimbursement."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Claim {
    #[doc = " Extensions for created"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _created: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for use"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _use: Option<Element>,
    #[doc = " Details of an accident which resulted in injuries which required the products and services "]
    #[doc = " listed in the claim."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub accident: Option<ClaimAccident>,
    #[doc = " The period for which charges are being submitted."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "billablePeriod")]
    pub billable_period: Option<Period>,
    #[doc = " The members of the team who provided the products and services."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "careTeam")]
    pub care_team: Option<Vec<ClaimCareTeam>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The date this resource was created."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub created: Option<DateTime>,
    #[doc = " Information about diagnoses relevant to the claim items."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub diagnosis: Option<Vec<ClaimDiagnosis>>,
    #[doc = " Individual who created the claim, predetermination or preauthorization."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub enterer: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Facility where the services were provided."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub facility: Option<Reference>,
    #[doc = " A code to indicate whether and for whom funds are to be reserved for future claims."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fundsReserve")]
    pub funds_reserve: Option<CodeableConcept>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A unique identifier assigned to this claim."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " Financial instruments for reimbursement for the health care products and services specified "]
    #[doc = " on the claim."]
    pub insurance: Vec<ClaimInsurance>,
    #[doc = " The Insurer who is target of the request."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub insurer: Option<Reference>,
    #[doc = " A claim line. Either a simple  product or service or a 'group' of details which can each be "]
    #[doc = " a simple items or groups of sub-details."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub item: Option<Vec<ClaimItem>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Original prescription which has been superseded by this prescription to support the "]
    #[doc = " dispensing of pharmacy services, medications or products."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "originalPrescription")]
    pub original_prescription: Option<Reference>,
    #[doc = " The party to whom the professional services and/or products have been supplied or are being "]
    #[doc = " considered and for whom actual or forecast reimbursement is sought."]
    pub patient: Reference,
    #[doc = " The party to be reimbursed for cost of the products and services according to the terms of "]
    #[doc = " the policy."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub payee: Option<ClaimPayee>,
    #[doc = " Prescription to support the dispensing of pharmacy, device or vision products."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub prescription: Option<Reference>,
    #[doc = " The provider-required urgency of processing the request. Typical values include: stat, "]
    #[doc = " routine deferred."]
    pub priority: CodeableConcept,
    #[doc = " Procedures performed on the patient relevant to the billing items with the claim."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub procedure: Option<Vec<ClaimProcedure>>,
    #[doc = " The provider which is responsible for the claim, predetermination or preauthorization."]
    pub provider: Reference,
    #[doc = " A reference to a referral resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub referral: Option<Reference>,
    #[doc = " Other claims which are related to this claim such as prior submissions or claims for "]
    #[doc = " related services or for the same event."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub related: Option<Vec<ClaimRelated>>,
    #[doc = " This is a Claim resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The status of the resource instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A finer grained suite of claim type codes which may convey additional information such as "]
    #[doc = " Inpatient vs Outpatient and/or a specialty service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subType")]
    pub sub_type: Option<CodeableConcept>,
    #[doc = " Additional information codes regarding exceptions, special considerations, the condition, "]
    #[doc = " situation, prior or concurrent issues."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportingInfo")]
    pub supporting_info: Option<Vec<ClaimSupportingInfo>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " The total value of the all the items in the claim."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub total: Option<Money>,
    #[doc = " The category of claim, e.g. oral, pharmacy, vision, institutional, professional."]
    #[serde(rename = "type")]
    pub type_: CodeableConcept,
    #[doc = " A code to indicate whether the nature of the request is: to request adjudication of "]
    #[doc = " products and services previously rendered; or requesting authorization and adjudication for "]
    #[doc = " provision in the future; or requesting the non-binding adjudication of the listed products "]
    #[doc = " and services which could be provided in the future."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "use")]
    pub use_: Option<Code>,
}
#[doc = " This resource provides the adjudication details from the processing of a Claim resource."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ClaimResponse {
    #[doc = " Extensions for created"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _created: Option<Element>,
    #[doc = " Extensions for disposition"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _disposition: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for outcome"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _outcome: Option<Element>,
    #[doc = " Extensions for preAuthRef"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_preAuthRef")]
    pub _pre_auth_ref: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for use"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _use: Option<Element>,
    #[doc = " The first-tier service adjudications for payor added product or service lines."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "addItem")]
    pub add_item: Option<Vec<ClaimResponseAddItem>>,
    #[doc = " The adjudication results which are presented at the header level rather than at the "]
    #[doc = " line-item or add-item levels."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub adjudication: Option<Vec<ClaimResponseAdjudication>>,
    #[doc = " Request for additional supporting or authorizing information."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "communicationRequest")]
    pub communication_request: Option<Vec<Reference>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The date this resource was created."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub created: Option<DateTime>,
    #[doc = " A human readable description of the status of the adjudication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub disposition: Option<String>,
    #[doc = " Errors encountered during the processing of the adjudication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<Vec<ClaimResponseError>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The actual form, by reference or inclusion, for printing the content or an EOB."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub form: Option<Attachment>,
    #[doc = " A code for the form to be used for printing the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "formCode")]
    pub form_code: Option<CodeableConcept>,
    #[doc = " A code, used only on a response to a preauthorization, to indicate whether the benefits "]
    #[doc = " payable have been reserved and for whom."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fundsReserve")]
    pub funds_reserve: Option<CodeableConcept>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A unique identifier assigned to this claim response."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " Financial instruments for reimbursement for the health care products and services specified "]
    #[doc = " on the claim."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub insurance: Option<Vec<ClaimResponseInsurance>>,
    #[doc = " The party responsible for authorization, adjudication and reimbursement."]
    pub insurer: Reference,
    #[doc = " A claim line. Either a simple (a product or service) or a 'group' of details which can also "]
    #[doc = " be a simple items or groups of sub-details."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub item: Option<Vec<ClaimResponseItem>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The outcome of the claim, predetermination, or preauthorization processing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub outcome: Option<Code>,
    #[doc = " The party to whom the professional services and/or products have been supplied or are being "]
    #[doc = " considered and for whom actual for facast reimbursement is sought."]
    pub patient: Reference,
    #[doc = " Type of Party to be reimbursed: subscriber, provider, other."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "payeeType")]
    pub payee_type: Option<CodeableConcept>,
    #[doc = " Payment details for the adjudication of the claim."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub payment: Option<ClaimResponsePayment>,
    #[doc = " The time frame during which this authorization is effective."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "preAuthPeriod")]
    pub pre_auth_period: Option<Period>,
    #[doc = " Reference from the Insurer which is used in later communications which refers to this "]
    #[doc = " adjudication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "preAuthRef")]
    pub pre_auth_ref: Option<String>,
    #[doc = " A note that describes or explains adjudication results in a human readable form."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "processNote")]
    pub process_note: Option<Vec<ClaimResponseProcessNote>>,
    #[doc = " Original request resource reference."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub request: Option<Reference>,
    #[doc = " The provider which is responsible for the claim, predetermination or preauthorization."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub requestor: Option<Reference>,
    #[doc = " This is a ClaimResponse resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The status of the resource instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A finer grained suite of claim type codes which may convey additional information such as "]
    #[doc = " Inpatient vs Outpatient and/or a specialty service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subType")]
    pub sub_type: Option<CodeableConcept>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " Categorized monetary totals for the adjudication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub total: Option<Vec<ClaimResponseTotal>>,
    #[doc = " A finer grained suite of claim type codes which may convey additional information such as "]
    #[doc = " Inpatient vs Outpatient and/or a specialty service."]
    #[serde(rename = "type")]
    pub type_: CodeableConcept,
    #[doc = " A code to indicate whether the nature of the request is: to request adjudication of "]
    #[doc = " products and services previously rendered; or requesting authorization and adjudication for "]
    #[doc = " provision in the future; or requesting the non-binding adjudication of the listed products "]
    #[doc = " and services which could be provided in the future."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "use")]
    pub use_: Option<Code>,
}
#[doc = " This resource provides the adjudication details from the processing of a Claim resource."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ClaimResponse_AddItem")]
#[serde(deny_unknown_fields)]
pub struct ClaimResponseAddItem {
    #[doc = " Extensions for detailSequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_detailSequence")]
    pub _detail_sequence: Option<Vec<Element>>,
    #[doc = " Extensions for factor"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _factor: Option<Element>,
    #[doc = " Extensions for itemSequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_itemSequence")]
    pub _item_sequence: Option<Vec<Element>>,
    #[doc = " Extensions for noteNumber"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_noteNumber")]
    pub _note_number: Option<Vec<Element>>,
    #[doc = " Extensions for servicedDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_servicedDate")]
    pub _serviced_date: Option<Element>,
    #[doc = " Extensions for subdetailSequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_subdetailSequence")]
    pub _subdetail_sequence: Option<Vec<Element>>,
    #[doc = " The adjudication results."]
    pub adjudication: Vec<ClaimResponseAdjudication>,
    #[doc = " Physical service site on the patient (limb, tooth, etc.)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "bodySite")]
    pub body_site: Option<CodeableConcept>,
    #[doc = " The second-tier service adjudications for payor added services."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub detail: Option<Vec<ClaimResponseDetail1>>,
    #[doc = " The sequence number of the details within the claim item which this line is intended to "]
    #[doc = " replace."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "detailSequence")]
    pub detail_sequence: Option<Vec<PositiveInt>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " A real number that represents a multiplier used in determining the overall value of "]
    #[doc = " services delivered and/or goods received. The concept of a Factor allows for a discount or "]
    #[doc = " surcharge multiplier to be applied to a monetary amount."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub factor: Option<Decimal>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Claim items which this service line is intended to replace."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "itemSequence")]
    pub item_sequence: Option<Vec<PositiveInt>>,
    #[doc = " Where the product or service was provided."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "locationAddress")]
    pub location_address: Option<Address>,
    #[doc = " Where the product or service was provided."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "locationCodeableConcept")]
    pub location_codeable_concept: Option<CodeableConcept>,
    #[doc = " Where the product or service was provided."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "locationReference")]
    pub location_reference: Option<Reference>,
    #[doc = " Item typification or modifiers codes to convey additional context for the product or "]
    #[doc = " service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub modifier: Option<Vec<CodeableConcept>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The quantity times the unit price for an additional service or product or charge."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub net: Option<Money>,
    #[doc = " The numbers associated with notes below which apply to the adjudication of this item."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "noteNumber")]
    pub note_number: Option<Vec<PositiveInt>>,
    #[doc = " When the value is a group code then this item collects a set of related claim details, "]
    #[doc = " otherwise this contains the product, service, drug or other billing code for the item."]
    #[serde(rename = "productOrService")]
    pub product_or_service: CodeableConcept,
    #[doc = " Identifies the program under which this may be recovered."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "programCode")]
    pub program_code: Option<Vec<CodeableConcept>>,
    #[doc = " The providers who are authorized for the services rendered to the patient."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub provider: Option<Vec<Reference>>,
    #[doc = " The number of repetitions of a service or product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,
    #[doc = " The date or dates when the service or product was supplied, performed or completed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "servicedDate")]
    pub serviced_date: Option<String>,
    #[doc = " The date or dates when the service or product was supplied, performed or completed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "servicedPeriod")]
    pub serviced_period: Option<Period>,
    #[doc = " A region or surface of the bodySite, e.g. limb region or tooth surface(s)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subSite")]
    pub sub_site: Option<Vec<CodeableConcept>>,
    #[doc = " The sequence number of the sub-details within the details within the claim item which this "]
    #[doc = " line is intended to replace."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subdetailSequence")]
    pub subdetail_sequence: Option<Vec<PositiveInt>>,
    #[doc = " If the item is not a group then this is the fee for the product or service, otherwise this "]
    #[doc = " is the total of the fees for the details of the group."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "unitPrice")]
    pub unit_price: Option<Money>,
}
#[doc = " This resource provides the adjudication details from the processing of a Claim resource."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ClaimResponse_Adjudication")]
#[serde(deny_unknown_fields)]
pub struct ClaimResponseAdjudication {
    #[doc = " Extensions for value"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _value: Option<Element>,
    #[doc = " Monetary amount associated with the category."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub amount: Option<Money>,
    #[doc = " A code to indicate the information type of this adjudication record. Information types may "]
    #[doc = " include the value submitted, maximum values or percentages allowed or payable under the "]
    #[doc = " plan, amounts that: the patient is responsible for in aggregate or pertaining to this item; "]
    #[doc = " amounts paid by other coverages; and, the benefit payable for this item."]
    pub category: CodeableConcept,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A code supporting the understanding of the adjudication result and explaining variance from "]
    #[doc = " expected amount."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reason: Option<CodeableConcept>,
    #[doc = " A non-monetary value associated with the category. Mutually exclusive to the amount element "]
    #[doc = " above."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Decimal>,
}
#[doc = " This resource provides the adjudication details from the processing of a Claim resource."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ClaimResponse_Detail")]
#[serde(deny_unknown_fields)]
pub struct ClaimResponseDetail {
    #[doc = " Extensions for detailSequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_detailSequence")]
    pub _detail_sequence: Option<Element>,
    #[doc = " Extensions for noteNumber"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_noteNumber")]
    pub _note_number: Option<Vec<Element>>,
    #[doc = " The adjudication results."]
    pub adjudication: Vec<ClaimResponseAdjudication>,
    #[doc = " A number to uniquely reference the claim detail entry."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "detailSequence")]
    pub detail_sequence: Option<PositiveInt>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The numbers associated with notes below which apply to the adjudication of this item."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "noteNumber")]
    pub note_number: Option<Vec<PositiveInt>>,
    #[doc = " A sub-detail adjudication of a simple product or service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subDetail")]
    pub sub_detail: Option<Vec<ClaimResponseSubDetail>>,
}
#[doc = " This resource provides the adjudication details from the processing of a Claim resource."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ClaimResponse_Detail1")]
#[serde(deny_unknown_fields)]
pub struct ClaimResponseDetail1 {
    #[doc = " Extensions for factor"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _factor: Option<Element>,
    #[doc = " Extensions for noteNumber"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_noteNumber")]
    pub _note_number: Option<Vec<Element>>,
    #[doc = " The adjudication results."]
    pub adjudication: Vec<ClaimResponseAdjudication>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " A real number that represents a multiplier used in determining the overall value of "]
    #[doc = " services delivered and/or goods received. The concept of a Factor allows for a discount or "]
    #[doc = " surcharge multiplier to be applied to a monetary amount."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub factor: Option<Decimal>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Item typification or modifiers codes to convey additional context for the product or "]
    #[doc = " service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub modifier: Option<Vec<CodeableConcept>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The quantity times the unit price for an additional service or product or charge."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub net: Option<Money>,
    #[doc = " The numbers associated with notes below which apply to the adjudication of this item."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "noteNumber")]
    pub note_number: Option<Vec<PositiveInt>>,
    #[doc = " When the value is a group code then this item collects a set of related claim details, "]
    #[doc = " otherwise this contains the product, service, drug or other billing code for the item."]
    #[serde(rename = "productOrService")]
    pub product_or_service: CodeableConcept,
    #[doc = " The number of repetitions of a service or product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,
    #[doc = " The third-tier service adjudications for payor added services."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subDetail")]
    pub sub_detail: Option<Vec<ClaimResponseSubDetail1>>,
    #[doc = " If the item is not a group then this is the fee for the product or service, otherwise this "]
    #[doc = " is the total of the fees for the details of the group."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "unitPrice")]
    pub unit_price: Option<Money>,
}
#[doc = " This resource provides the adjudication details from the processing of a Claim resource."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ClaimResponse_Error")]
#[serde(deny_unknown_fields)]
pub struct ClaimResponseError {
    #[doc = " Extensions for detailSequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_detailSequence")]
    pub _detail_sequence: Option<Element>,
    #[doc = " Extensions for itemSequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_itemSequence")]
    pub _item_sequence: Option<Element>,
    #[doc = " Extensions for subDetailSequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_subDetailSequence")]
    pub _sub_detail_sequence: Option<Element>,
    #[doc = " An error code, from a specified code system, which details why the claim could not be "]
    #[doc = " adjudicated."]
    pub code: CodeableConcept,
    #[doc = " The sequence number of the detail within the line item submitted which contains the error. "]
    #[doc = " This value is omitted when the error occurs outside of the item structure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "detailSequence")]
    pub detail_sequence: Option<PositiveInt>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The sequence number of the line item submitted which contains the error. This value is "]
    #[doc = " omitted when the error occurs outside of the item structure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "itemSequence")]
    pub item_sequence: Option<PositiveInt>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The sequence number of the sub-detail within the detail within the line item submitted "]
    #[doc = " which contains the error. This value is omitted when the error occurs outside of the item "]
    #[doc = " structure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subDetailSequence")]
    pub sub_detail_sequence: Option<PositiveInt>,
}
#[doc = " This resource provides the adjudication details from the processing of a Claim resource."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ClaimResponse_Insurance")]
#[serde(deny_unknown_fields)]
pub struct ClaimResponseInsurance {
    #[doc = " Extensions for businessArrangement"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_businessArrangement")]
    pub _business_arrangement: Option<Element>,
    #[doc = " Extensions for focal"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _focal: Option<Element>,
    #[doc = " Extensions for sequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _sequence: Option<Element>,
    #[doc = " A business agreement number established between the provider and the insurer for special "]
    #[doc = " business processing purposes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "businessArrangement")]
    pub business_arrangement: Option<String>,
    #[doc = " The result of the adjudication of the line items for the Coverage specified in this "]
    #[doc = " insurance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "claimResponse")]
    pub claim_response: Option<Reference>,
    #[doc = " Reference to the insurance card level information contained in the Coverage resource. The "]
    #[doc = " coverage issuing insurer will use these details to locate the patient's actual coverage "]
    #[doc = " within the insurer's information system."]
    pub coverage: Reference,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " A flag to indicate that this Coverage is to be used for adjudication of this claim when set "]
    #[doc = " to true."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub focal: Option<Boolean>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A number to uniquely identify insurance entries and provide a sequence of coverages to "]
    #[doc = " convey coordination of benefit order."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sequence: Option<PositiveInt>,
}
#[doc = " This resource provides the adjudication details from the processing of a Claim resource."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ClaimResponse_Item")]
#[serde(deny_unknown_fields)]
pub struct ClaimResponseItem {
    #[doc = " Extensions for itemSequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_itemSequence")]
    pub _item_sequence: Option<Element>,
    #[doc = " Extensions for noteNumber"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_noteNumber")]
    pub _note_number: Option<Vec<Element>>,
    #[doc = " If this item is a group then the values here are a summary of the adjudication of the "]
    #[doc = " detail items. If this item is a simple product or service then this is the result of the "]
    #[doc = " adjudication of this item."]
    pub adjudication: Vec<ClaimResponseAdjudication>,
    #[doc = " A claim detail. Either a simple (a product or service) or a 'group' of sub-details which "]
    #[doc = " are simple items."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub detail: Option<Vec<ClaimResponseDetail>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A number to uniquely reference the claim item entries."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "itemSequence")]
    pub item_sequence: Option<PositiveInt>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The numbers associated with notes below which apply to the adjudication of this item."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "noteNumber")]
    pub note_number: Option<Vec<PositiveInt>>,
}
#[doc = " This resource provides the adjudication details from the processing of a Claim resource."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ClaimResponse_Payment")]
#[serde(deny_unknown_fields)]
pub struct ClaimResponsePayment {
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Total amount of all adjustments to this payment included in this transaction which are not "]
    #[doc = " related to this claim's adjudication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub adjustment: Option<Money>,
    #[doc = " Reason for the payment adjustment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "adjustmentReason")]
    pub adjustment_reason: Option<CodeableConcept>,
    #[doc = " Benefits payable less any payment adjustment."]
    pub amount: Money,
    #[doc = " Estimated date the payment will be issued or the actual issue date of payment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<Date>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Issuer's unique identifier for the payment instrument."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Whether this represents partial or complete payment of the benefits payable."]
    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}
#[doc = " This resource provides the adjudication details from the processing of a Claim resource."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ClaimResponse_ProcessNote")]
#[serde(deny_unknown_fields)]
pub struct ClaimResponseProcessNote {
    #[doc = " Extensions for number"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _number: Option<Element>,
    #[doc = " Extensions for text"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _text: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A code to define the language used in the text of the note."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A number to uniquely identify a note entry."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub number: Option<PositiveInt>,
    #[doc = " The explanation or description associated with the processing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    #[doc = " The business purpose of the note text."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}
#[doc = " This resource provides the adjudication details from the processing of a Claim resource."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ClaimResponse_SubDetail")]
#[serde(deny_unknown_fields)]
pub struct ClaimResponseSubDetail {
    #[doc = " Extensions for noteNumber"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_noteNumber")]
    pub _note_number: Option<Vec<Element>>,
    #[doc = " Extensions for subDetailSequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_subDetailSequence")]
    pub _sub_detail_sequence: Option<Element>,
    #[doc = " The adjudication results."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub adjudication: Option<Vec<ClaimResponseAdjudication>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The numbers associated with notes below which apply to the adjudication of this item."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "noteNumber")]
    pub note_number: Option<Vec<PositiveInt>>,
    #[doc = " A number to uniquely reference the claim sub-detail entry."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subDetailSequence")]
    pub sub_detail_sequence: Option<PositiveInt>,
}
#[doc = " This resource provides the adjudication details from the processing of a Claim resource."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ClaimResponse_SubDetail1")]
#[serde(deny_unknown_fields)]
pub struct ClaimResponseSubDetail1 {
    #[doc = " Extensions for factor"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _factor: Option<Element>,
    #[doc = " Extensions for noteNumber"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_noteNumber")]
    pub _note_number: Option<Vec<Element>>,
    #[doc = " The adjudication results."]
    pub adjudication: Vec<ClaimResponseAdjudication>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " A real number that represents a multiplier used in determining the overall value of "]
    #[doc = " services delivered and/or goods received. The concept of a Factor allows for a discount or "]
    #[doc = " surcharge multiplier to be applied to a monetary amount."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub factor: Option<Decimal>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Item typification or modifiers codes to convey additional context for the product or "]
    #[doc = " service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub modifier: Option<Vec<CodeableConcept>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The quantity times the unit price for an additional service or product or charge."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub net: Option<Money>,
    #[doc = " The numbers associated with notes below which apply to the adjudication of this item."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "noteNumber")]
    pub note_number: Option<Vec<PositiveInt>>,
    #[doc = " When the value is a group code then this item collects a set of related claim details, "]
    #[doc = " otherwise this contains the product, service, drug or other billing code for the item."]
    #[serde(rename = "productOrService")]
    pub product_or_service: CodeableConcept,
    #[doc = " The number of repetitions of a service or product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,
    #[doc = " If the item is not a group then this is the fee for the product or service, otherwise this "]
    #[doc = " is the total of the fees for the details of the group."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "unitPrice")]
    pub unit_price: Option<Money>,
}
#[doc = " This resource provides the adjudication details from the processing of a Claim resource."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ClaimResponse_Total")]
#[serde(deny_unknown_fields)]
pub struct ClaimResponseTotal {
    #[doc = " Monetary total amount associated with the category."]
    pub amount: Money,
    #[doc = " A code to indicate the information type of this adjudication record. Information types may "]
    #[doc = " include: the value submitted, maximum values or percentages allowed or payable under the "]
    #[doc = " plan, amounts that the patient is responsible for in aggregate or pertaining to this item, "]
    #[doc = " amounts paid by other coverages, and the benefit payable for this item."]
    pub category: CodeableConcept,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " A provider issued list of professional services and products which have been provided, or are "]
#[doc = " to be provided, to a patient which is sent to an insurer for reimbursement."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Claim_Accident")]
#[serde(deny_unknown_fields)]
pub struct ClaimAccident {
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Date of an accident event  related to the products and services contained in the claim."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<Date>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The physical location of the accident event."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "locationAddress")]
    pub location_address: Option<Address>,
    #[doc = " The physical location of the accident event."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "locationReference")]
    pub location_reference: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The type or context of the accident event for the purposes of selection of potential "]
    #[doc = " insurance coverages and determination of coordination between insurers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " A provider issued list of professional services and products which have been provided, or are "]
#[doc = " to be provided, to a patient which is sent to an insurer for reimbursement."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Claim_CareTeam")]
#[serde(deny_unknown_fields)]
pub struct ClaimCareTeam {
    #[doc = " Extensions for responsible"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _responsible: Option<Element>,
    #[doc = " Extensions for sequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _sequence: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Member of the team who provided the product or service."]
    pub provider: Reference,
    #[doc = " The qualification of the practitioner which is applicable for this service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub qualification: Option<CodeableConcept>,
    #[doc = " The party who is billing and/or responsible for the claimed products or services."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub responsible: Option<Boolean>,
    #[doc = " The lead, assisting or supervising practitioner and their discipline if a multidisciplinary "]
    #[doc = " team."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub role: Option<CodeableConcept>,
    #[doc = " A number to uniquely identify care team entries."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sequence: Option<PositiveInt>,
}
#[doc = " A provider issued list of professional services and products which have been provided, or are "]
#[doc = " to be provided, to a patient which is sent to an insurer for reimbursement."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Claim_Detail")]
#[serde(deny_unknown_fields)]
pub struct ClaimDetail {
    #[doc = " Extensions for factor"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _factor: Option<Element>,
    #[doc = " Extensions for sequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _sequence: Option<Element>,
    #[doc = " Code to identify the general type of benefits under which products and services are "]
    #[doc = " provided."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " A real number that represents a multiplier used in determining the overall value of "]
    #[doc = " services delivered and/or goods received. The concept of a Factor allows for a discount or "]
    #[doc = " surcharge multiplier to be applied to a monetary amount."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub factor: Option<Decimal>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Item typification or modifiers codes to convey additional context for the product or "]
    #[doc = " service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub modifier: Option<Vec<CodeableConcept>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The quantity times the unit price for an additional service or product or charge."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub net: Option<Money>,
    #[doc = " When the value is a group code then this item collects a set of related claim details, "]
    #[doc = " otherwise this contains the product, service, drug or other billing code for the item."]
    #[serde(rename = "productOrService")]
    pub product_or_service: CodeableConcept,
    #[doc = " Identifies the program under which this may be recovered."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "programCode")]
    pub program_code: Option<Vec<CodeableConcept>>,
    #[doc = " The number of repetitions of a service or product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,
    #[doc = " The type of revenue or cost center providing the product and/or service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub revenue: Option<CodeableConcept>,
    #[doc = " A number to uniquely identify item entries."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sequence: Option<PositiveInt>,
    #[doc = " A claim detail line. Either a simple (a product or service) or a 'group' of sub-details "]
    #[doc = " which are simple items."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subDetail")]
    pub sub_detail: Option<Vec<ClaimSubDetail>>,
    #[doc = " Unique Device Identifiers associated with this line item."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub udi: Option<Vec<Reference>>,
    #[doc = " If the item is not a group then this is the fee for the product or service, otherwise this "]
    #[doc = " is the total of the fees for the details of the group."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "unitPrice")]
    pub unit_price: Option<Money>,
}
#[doc = " A provider issued list of professional services and products which have been provided, or are "]
#[doc = " to be provided, to a patient which is sent to an insurer for reimbursement."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Claim_Diagnosis")]
#[serde(deny_unknown_fields)]
pub struct ClaimDiagnosis {
    #[doc = " Extensions for sequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _sequence: Option<Element>,
    #[doc = " The nature of illness or problem in a coded form or as a reference to an external defined "]
    #[doc = " Condition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "diagnosisCodeableConcept")]
    pub diagnosis_codeable_concept: Option<CodeableConcept>,
    #[doc = " The nature of illness or problem in a coded form or as a reference to an external defined "]
    #[doc = " Condition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "diagnosisReference")]
    pub diagnosis_reference: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Indication of whether the diagnosis was present on admission to a facility."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onAdmission")]
    pub on_admission: Option<CodeableConcept>,
    #[doc = " A package billing code or bundle code used to group products and services to a particular "]
    #[doc = " health condition (such as heart attack) which is based on a predetermined grouping code "]
    #[doc = " system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "packageCode")]
    pub package_code: Option<CodeableConcept>,
    #[doc = " A number to uniquely identify diagnosis entries."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sequence: Option<PositiveInt>,
    #[doc = " When the condition was observed or the relative ranking."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Vec<CodeableConcept>>,
}
#[doc = " A provider issued list of professional services and products which have been provided, or are "]
#[doc = " to be provided, to a patient which is sent to an insurer for reimbursement."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Claim_Insurance")]
#[serde(deny_unknown_fields)]
pub struct ClaimInsurance {
    #[doc = " Extensions for businessArrangement"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_businessArrangement")]
    pub _business_arrangement: Option<Element>,
    #[doc = " Extensions for focal"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _focal: Option<Element>,
    #[doc = " Extensions for preAuthRef"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_preAuthRef")]
    pub _pre_auth_ref: Option<Vec<Element>>,
    #[doc = " Extensions for sequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _sequence: Option<Element>,
    #[doc = " A business agreement number established between the provider and the insurer for special "]
    #[doc = " business processing purposes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "businessArrangement")]
    pub business_arrangement: Option<String>,
    #[doc = " The result of the adjudication of the line items for the Coverage specified in this "]
    #[doc = " insurance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "claimResponse")]
    pub claim_response: Option<Reference>,
    #[doc = " Reference to the insurance card level information contained in the Coverage resource. The "]
    #[doc = " coverage issuing insurer will use these details to locate the patient's actual coverage "]
    #[doc = " within the insurer's information system."]
    pub coverage: Reference,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " A flag to indicate that this Coverage is to be used for adjudication of this claim when set "]
    #[doc = " to true."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub focal: Option<Boolean>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The business identifier to be used when the claim is sent for adjudication against this "]
    #[doc = " insurance policy."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Reference numbers previously provided by the insurer to the provider to be quoted on "]
    #[doc = " subsequent claims containing services or products related to the prior authorization."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "preAuthRef")]
    pub pre_auth_ref: Option<Vec<String>>,
    #[doc = " A number to uniquely identify insurance entries and provide a sequence of coverages to "]
    #[doc = " convey coordination of benefit order."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sequence: Option<PositiveInt>,
}
#[doc = " A provider issued list of professional services and products which have been provided, or are "]
#[doc = " to be provided, to a patient which is sent to an insurer for reimbursement."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Claim_Item")]
#[serde(deny_unknown_fields)]
pub struct ClaimItem {
    #[doc = " Extensions for careTeamSequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_careTeamSequence")]
    pub _care_team_sequence: Option<Vec<Element>>,
    #[doc = " Extensions for diagnosisSequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_diagnosisSequence")]
    pub _diagnosis_sequence: Option<Vec<Element>>,
    #[doc = " Extensions for factor"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _factor: Option<Element>,
    #[doc = " Extensions for informationSequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_informationSequence")]
    pub _information_sequence: Option<Vec<Element>>,
    #[doc = " Extensions for procedureSequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_procedureSequence")]
    pub _procedure_sequence: Option<Vec<Element>>,
    #[doc = " Extensions for sequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _sequence: Option<Element>,
    #[doc = " Extensions for servicedDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_servicedDate")]
    pub _serviced_date: Option<Element>,
    #[doc = " Physical service site on the patient (limb, tooth, etc.)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "bodySite")]
    pub body_site: Option<CodeableConcept>,
    #[doc = " CareTeam members related to this service or product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "careTeamSequence")]
    pub care_team_sequence: Option<Vec<PositiveInt>>,
    #[doc = " Code to identify the general type of benefits under which products and services are "]
    #[doc = " provided."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<CodeableConcept>,
    #[doc = " A claim detail line. Either a simple (a product or service) or a 'group' of sub-details "]
    #[doc = " which are simple items."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub detail: Option<Vec<ClaimDetail>>,
    #[doc = " Diagnosis applicable for this service or product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "diagnosisSequence")]
    pub diagnosis_sequence: Option<Vec<PositiveInt>>,
    #[doc = " The Encounters during which this Claim was created or to which the creation of this record "]
    #[doc = " is tightly associated."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Vec<Reference>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " A real number that represents a multiplier used in determining the overall value of "]
    #[doc = " services delivered and/or goods received. The concept of a Factor allows for a discount or "]
    #[doc = " surcharge multiplier to be applied to a monetary amount."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub factor: Option<Decimal>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Exceptions, special conditions and supporting information applicable for this service or "]
    #[doc = " product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "informationSequence")]
    pub information_sequence: Option<Vec<PositiveInt>>,
    #[doc = " Where the product or service was provided."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "locationAddress")]
    pub location_address: Option<Address>,
    #[doc = " Where the product or service was provided."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "locationCodeableConcept")]
    pub location_codeable_concept: Option<CodeableConcept>,
    #[doc = " Where the product or service was provided."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "locationReference")]
    pub location_reference: Option<Reference>,
    #[doc = " Item typification or modifiers codes to convey additional context for the product or "]
    #[doc = " service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub modifier: Option<Vec<CodeableConcept>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The quantity times the unit price for an additional service or product or charge."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub net: Option<Money>,
    #[doc = " Procedures applicable for this service or product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "procedureSequence")]
    pub procedure_sequence: Option<Vec<PositiveInt>>,
    #[doc = " When the value is a group code then this item collects a set of related claim details, "]
    #[doc = " otherwise this contains the product, service, drug or other billing code for the item."]
    #[serde(rename = "productOrService")]
    pub product_or_service: CodeableConcept,
    #[doc = " Identifies the program under which this may be recovered."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "programCode")]
    pub program_code: Option<Vec<CodeableConcept>>,
    #[doc = " The number of repetitions of a service or product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,
    #[doc = " The type of revenue or cost center providing the product and/or service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub revenue: Option<CodeableConcept>,
    #[doc = " A number to uniquely identify item entries."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sequence: Option<PositiveInt>,
    #[doc = " The date or dates when the service or product was supplied, performed or completed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "servicedDate")]
    pub serviced_date: Option<String>,
    #[doc = " The date or dates when the service or product was supplied, performed or completed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "servicedPeriod")]
    pub serviced_period: Option<Period>,
    #[doc = " A region or surface of the bodySite, e.g. limb region or tooth surface(s)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subSite")]
    pub sub_site: Option<Vec<CodeableConcept>>,
    #[doc = " Unique Device Identifiers associated with this line item."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub udi: Option<Vec<Reference>>,
    #[doc = " If the item is not a group then this is the fee for the product or service, otherwise this "]
    #[doc = " is the total of the fees for the details of the group."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "unitPrice")]
    pub unit_price: Option<Money>,
}
#[doc = " A provider issued list of professional services and products which have been provided, or are "]
#[doc = " to be provided, to a patient which is sent to an insurer for reimbursement."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Claim_Payee")]
#[serde(deny_unknown_fields)]
pub struct ClaimPayee {
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Reference to the individual or organization to whom any payment will be made."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub party: Option<Reference>,
    #[doc = " Type of Party to be reimbursed: subscriber, provider, other."]
    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}
#[doc = " A provider issued list of professional services and products which have been provided, or are "]
#[doc = " to be provided, to a patient which is sent to an insurer for reimbursement."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Claim_Procedure")]
#[serde(deny_unknown_fields)]
pub struct ClaimProcedure {
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for sequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _sequence: Option<Element>,
    #[doc = " Date and optionally time the procedure was performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The code or reference to a Procedure resource which identifies the clinical intervention "]
    #[doc = " performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "procedureCodeableConcept")]
    pub procedure_codeable_concept: Option<CodeableConcept>,
    #[doc = " The code or reference to a Procedure resource which identifies the clinical intervention "]
    #[doc = " performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "procedureReference")]
    pub procedure_reference: Option<Reference>,
    #[doc = " A number to uniquely identify procedure entries."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sequence: Option<PositiveInt>,
    #[doc = " When the condition was observed or the relative ranking."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Vec<CodeableConcept>>,
    #[doc = " Unique Device Identifiers associated with this line item."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub udi: Option<Vec<Reference>>,
}
#[doc = " A provider issued list of professional services and products which have been provided, or are "]
#[doc = " to be provided, to a patient which is sent to an insurer for reimbursement."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Claim_Related")]
#[serde(deny_unknown_fields)]
pub struct ClaimRelated {
    #[doc = " Reference to a related claim."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub claim: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " An alternate organizational reference to the case or file to which this particular claim "]
    #[doc = " pertains."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reference: Option<Identifier>,
    #[doc = " A code to convey how the claims are related."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub relationship: Option<CodeableConcept>,
}
#[doc = " A provider issued list of professional services and products which have been provided, or are "]
#[doc = " to be provided, to a patient which is sent to an insurer for reimbursement."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Claim_SubDetail")]
#[serde(deny_unknown_fields)]
pub struct ClaimSubDetail {
    #[doc = " Extensions for factor"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _factor: Option<Element>,
    #[doc = " Extensions for sequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _sequence: Option<Element>,
    #[doc = " Code to identify the general type of benefits under which products and services are "]
    #[doc = " provided."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " A real number that represents a multiplier used in determining the overall value of "]
    #[doc = " services delivered and/or goods received. The concept of a Factor allows for a discount or "]
    #[doc = " surcharge multiplier to be applied to a monetary amount."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub factor: Option<Decimal>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Item typification or modifiers codes to convey additional context for the product or "]
    #[doc = " service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub modifier: Option<Vec<CodeableConcept>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The quantity times the unit price for an additional service or product or charge."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub net: Option<Money>,
    #[doc = " When the value is a group code then this item collects a set of related claim details, "]
    #[doc = " otherwise this contains the product, service, drug or other billing code for the item."]
    #[serde(rename = "productOrService")]
    pub product_or_service: CodeableConcept,
    #[doc = " Identifies the program under which this may be recovered."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "programCode")]
    pub program_code: Option<Vec<CodeableConcept>>,
    #[doc = " The number of repetitions of a service or product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,
    #[doc = " The type of revenue or cost center providing the product and/or service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub revenue: Option<CodeableConcept>,
    #[doc = " A number to uniquely identify item entries."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sequence: Option<PositiveInt>,
    #[doc = " Unique Device Identifiers associated with this line item."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub udi: Option<Vec<Reference>>,
    #[doc = " If the item is not a group then this is the fee for the product or service, otherwise this "]
    #[doc = " is the total of the fees for the details of the group."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "unitPrice")]
    pub unit_price: Option<Money>,
}
#[doc = " A provider issued list of professional services and products which have been provided, or are "]
#[doc = " to be provided, to a patient which is sent to an insurer for reimbursement."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Claim_SupportingInfo")]
#[serde(deny_unknown_fields)]
pub struct ClaimSupportingInfo {
    #[doc = " Extensions for sequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _sequence: Option<Element>,
    #[doc = " Extensions for timingDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_timingDate")]
    pub _timing_date: Option<Element>,
    #[doc = " Extensions for valueBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub _value_boolean: Option<Element>,
    #[doc = " Extensions for valueString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueString")]
    pub _value_string: Option<Element>,
    #[doc = " The general class of the information supplied: information; exception; accident, "]
    #[doc = " employment; onset, etc."]
    pub category: CodeableConcept,
    #[doc = " System and code pertaining to the specific information regarding special conditions "]
    #[doc = " relating to the setting, treatment or patient  for which care is sought."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Provides the reason in the situation where a reason code is required in addition to the "]
    #[doc = " content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reason: Option<CodeableConcept>,
    #[doc = " A number to uniquely identify supporting information entries."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sequence: Option<PositiveInt>,
    #[doc = " The date when or period to which this information refers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingDate")]
    pub timing_date: Option<String>,
    #[doc = " The date when or period to which this information refers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingPeriod")]
    pub timing_period: Option<Period>,
    #[doc = " Additional data or information such as resources, documents, images etc. including "]
    #[doc = " references to the data or the actual inclusion of the data."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAttachment")]
    pub value_attachment: Option<Attachment>,
    #[doc = " Additional data or information such as resources, documents, images etc. including "]
    #[doc = " references to the data or the actual inclusion of the data."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,
    #[doc = " Additional data or information such as resources, documents, images etc. including "]
    #[doc = " references to the data or the actual inclusion of the data."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,
    #[doc = " Additional data or information such as resources, documents, images etc. including "]
    #[doc = " references to the data or the actual inclusion of the data."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueReference")]
    pub value_reference: Option<Reference>,
    #[doc = " Additional data or information such as resources, documents, images etc. including "]
    #[doc = " references to the data or the actual inclusion of the data."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueString")]
    pub value_string: Option<String>,
}
#[doc = " A record of a clinical assessment performed to determine what problem(s) may affect the patient "]
#[doc = " and before planning the treatments or management strategies that are best to manage a patient's "]
#[doc = " condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies "]
#[doc = " greatly depending on the clinical workflow. This resource is called \"ClinicalImpression\" rather "]
#[doc = " than \"ClinicalAssessment\" to avoid confusion with the recording of assessment tools such as "]
#[doc = " Apgar score."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ClinicalImpression {
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for effectiveDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_effectiveDateTime")]
    pub _effective_date_time: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for protocol"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _protocol: Option<Vec<Element>>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for summary"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _summary: Option<Element>,
    #[doc = " The clinician performing the assessment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub assessor: Option<Reference>,
    #[doc = " Categorizes the type of clinical assessment performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " Indicates when the documentation of the assessment was complete."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " A summary of the context and/or cause of the assessment - why / where it was performed, and "]
    #[doc = " what patient events/status prompted it."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " The point in time or period over which the subject was assessed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectiveDateTime")]
    pub effective_date_time: Option<String>,
    #[doc = " The point in time or period over which the subject was assessed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectivePeriod")]
    pub effective_period: Option<Period>,
    #[doc = " The Encounter during which this ClinicalImpression was created or to which the creation of "]
    #[doc = " this record is tightly associated."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Specific findings or diagnoses that were considered likely or relevant to ongoing "]
    #[doc = " treatment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub finding: Option<Vec<ClinicalImpressionFinding>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Business identifiers assigned to this clinical impression by the performer or other systems "]
    #[doc = " which remain constant as the resource is updated and propagates from server to server."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " One or more sets of investigations (signs, symptoms, etc.). The actual grouping of "]
    #[doc = " investigations varies greatly depending on the type and context of the assessment. These "]
    #[doc = " investigations may include data generated during the assessment process, or data previously "]
    #[doc = " generated and recorded that is pertinent to the outcomes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub investigation: Option<Vec<ClinicalImpressionInvestigation>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Commentary about the impression, typically recorded after the impression itself was made, "]
    #[doc = " though supplemental notes by the original author could also appear."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " A reference to the last assessment that was conducted on this patient. Assessments are "]
    #[doc = " often/usually ongoing in nature; a care provider (practitioner or team) will make new "]
    #[doc = " assessments on an ongoing basis as new data arises or the patient's conditions changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub previous: Option<Reference>,
    #[doc = " A list of the relevant problems/conditions for a patient."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub problem: Option<Vec<Reference>>,
    #[doc = " Estimate of likely outcome."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "prognosisCodeableConcept")]
    pub prognosis_codeable_concept: Option<Vec<CodeableConcept>>,
    #[doc = " RiskAssessment expressing likely outcome."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "prognosisReference")]
    pub prognosis_reference: Option<Vec<Reference>>,
    #[doc = " Reference to a specific published clinical protocol that was followed during this "]
    #[doc = " assessment, and/or that provides evidence in support of the diagnosis."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub protocol: Option<Vec<Uri>>,
    #[doc = " This is a ClinicalImpression resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " Identifies the workflow status of the assessment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " Captures the reason for the current state of the ClinicalImpression."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusReason")]
    pub status_reason: Option<CodeableConcept>,
    #[doc = " The patient or group of individuals assessed as part of this record."]
    pub subject: Reference,
    #[doc = " A text summary of the investigations and the diagnosis."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub summary: Option<String>,
    #[doc = " Information supporting the clinical impression."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportingInfo")]
    pub supporting_info: Option<Vec<Reference>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " A record of a clinical assessment performed to determine what problem(s) may affect the patient "]
#[doc = " and before planning the treatments or management strategies that are best to manage a patient's "]
#[doc = " condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies "]
#[doc = " greatly depending on the clinical workflow. This resource is called \"ClinicalImpression\" rather "]
#[doc = " than \"ClinicalAssessment\" to avoid confusion with the recording of assessment tools such as "]
#[doc = " Apgar score."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ClinicalImpression_Finding")]
#[serde(deny_unknown_fields)]
pub struct ClinicalImpressionFinding {
    #[doc = " Extensions for basis"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _basis: Option<Element>,
    #[doc = " Which investigations support finding or diagnosis."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub basis: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Specific text or code for finding or diagnosis, which may include ruled-out or resolved "]
    #[doc = " conditions."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "itemCodeableConcept")]
    pub item_codeable_concept: Option<CodeableConcept>,
    #[doc = " Specific reference for finding or diagnosis, which may include ruled-out or resolved "]
    #[doc = " conditions."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "itemReference")]
    pub item_reference: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " A record of a clinical assessment performed to determine what problem(s) may affect the patient "]
#[doc = " and before planning the treatments or management strategies that are best to manage a patient's "]
#[doc = " condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies "]
#[doc = " greatly depending on the clinical workflow. This resource is called \"ClinicalImpression\" rather "]
#[doc = " than \"ClinicalAssessment\" to avoid confusion with the recording of assessment tools such as "]
#[doc = " Apgar score."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ClinicalImpression_Investigation")]
#[serde(deny_unknown_fields)]
pub struct ClinicalImpressionInvestigation {
    #[doc = " A name/code for the group (\"set\") of investigations. Typically, this will be something like "]
    #[doc = " \"signs\", \"symptoms\", \"clinical\", \"diagnostic\", but the list is not constrained, and others "]
    #[doc = " such groups such as (exposure|family|travel|nutritional) history may be used."]
    pub code: CodeableConcept,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A record of a specific investigation that was undertaken."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub item: Option<Vec<Reference>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " A single issue - either an indication, contraindication, interaction or an undesirable effect "]
#[doc = " for a medicinal product, medication, device or procedure."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ClinicalUseDefinition {
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " A categorisation of the issue, primarily for dividing warnings into subject heading areas "]
    #[doc = " such as \"Pregnancy and Lactation\", \"Overdose\", \"Effects on Ability to Drive and Use "]
    #[doc = " Machines\"."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " Specifics for when this is a contraindication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contraindication: Option<ClinicalUseDefinitionContraindication>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Business identifier for this issue."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " Specifics for when this is an indication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub indication: Option<ClinicalUseDefinitionIndication>,
    #[doc = " Specifics for when this is an interaction."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub interaction: Option<ClinicalUseDefinitionInteraction>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The population group to which this applies."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub population: Option<Vec<Reference>>,
    #[doc = " This is a ClinicalUseDefinition resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " Whether this is a current issue or one that has been retired etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<CodeableConcept>,
    #[doc = " The medication or procedure for which this is an indication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Vec<Reference>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " indication | contraindication | interaction | undesirable-effect | warning."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
    #[doc = " Describe the possible undesirable effects (negative outcomes) from the use of the medicinal "]
    #[doc = " product as treatment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "undesirableEffect")]
    pub undesirable_effect: Option<ClinicalUseDefinitionUndesirableEffect>,
    #[doc = " A critical piece of information about environmental, health or physical risks or hazards "]
    #[doc = " that serve as caution to the user. For example 'Do not operate heavy machinery', 'May cause "]
    #[doc = " drowsiness', or 'Get medical advice/attention if you feel unwell'."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub warning: Option<ClinicalUseDefinitionWarning>,
}
#[doc = " A single issue - either an indication, contraindication, interaction or an undesirable effect "]
#[doc = " for a medicinal product, medication, device or procedure."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ClinicalUseDefinition_Contraindication")]
#[serde(deny_unknown_fields)]
pub struct ClinicalUseDefinitionContraindication {
    #[doc = " A comorbidity (concurrent condition) or coinfection."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comorbidity: Option<Vec<CodeableReference>>,
    #[doc = " The status of the disease or symptom for the contraindication, for example \"chronic\" or "]
    #[doc = " \"metastatic\"."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "diseaseStatus")]
    pub disease_status: Option<CodeableReference>,
    #[doc = " The situation that is being documented as contraindicating against this item."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "diseaseSymptomProcedure")]
    pub disease_symptom_procedure: Option<CodeableReference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The indication which this is a contraidication for."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub indication: Option<Vec<Reference>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Information about the use of the medicinal product in relation to other therapies described "]
    #[doc = " as part of the contraindication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "otherTherapy")]
    pub other_therapy: Option<Vec<ClinicalUseDefinitionOtherTherapy>>,
}
#[doc = " A single issue - either an indication, contraindication, interaction or an undesirable effect "]
#[doc = " for a medicinal product, medication, device or procedure."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ClinicalUseDefinition_Indication")]
#[serde(deny_unknown_fields)]
pub struct ClinicalUseDefinitionIndication {
    #[doc = " Extensions for durationString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_durationString")]
    pub _duration_string: Option<Element>,
    #[doc = " A comorbidity (concurrent condition) or coinfection as part of the indication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comorbidity: Option<Vec<CodeableReference>>,
    #[doc = " The status of the disease or symptom for the indication, for example \"chronic\" or "]
    #[doc = " \"metastatic\"."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "diseaseStatus")]
    pub disease_status: Option<CodeableReference>,
    #[doc = " The situation that is being documented as an indicaton for this item."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "diseaseSymptomProcedure")]
    pub disease_symptom_procedure: Option<CodeableReference>,
    #[doc = " Timing or duration information, that may be associated with use with the indicated "]
    #[doc = " condition e.g. Adult patients suffering from myocardial infarction (from a few days until "]
    #[doc = " less than 35 days), ischaemic stroke (from 7 days until less than 6 months)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "durationRange")]
    pub duration_range: Option<Range>,
    #[doc = " Timing or duration information, that may be associated with use with the indicated "]
    #[doc = " condition e.g. Adult patients suffering from myocardial infarction (from a few days until "]
    #[doc = " less than 35 days), ischaemic stroke (from 7 days until less than 6 months)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "durationString")]
    pub duration_string: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The intended effect, aim or strategy to be achieved."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "intendedEffect")]
    pub intended_effect: Option<CodeableReference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Information about the use of the medicinal product in relation to other therapies described "]
    #[doc = " as part of the indication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "otherTherapy")]
    pub other_therapy: Option<Vec<ClinicalUseDefinitionOtherTherapy>>,
    #[doc = " An unwanted side effect or negative outcome that may happen if you use the drug (or other "]
    #[doc = " subject of this resource) for this indication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "undesirableEffect")]
    pub undesirable_effect: Option<Vec<Reference>>,
}
#[doc = " A single issue - either an indication, contraindication, interaction or an undesirable effect "]
#[doc = " for a medicinal product, medication, device or procedure."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ClinicalUseDefinition_Interactant")]
#[serde(deny_unknown_fields)]
pub struct ClinicalUseDefinitionInteractant {
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The specific medication, food or laboratory test that interacts."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "itemCodeableConcept")]
    pub item_codeable_concept: Option<CodeableConcept>,
    #[doc = " The specific medication, food or laboratory test that interacts."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "itemReference")]
    pub item_reference: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " A single issue - either an indication, contraindication, interaction or an undesirable effect "]
#[doc = " for a medicinal product, medication, device or procedure."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ClinicalUseDefinition_Interaction")]
#[serde(deny_unknown_fields)]
pub struct ClinicalUseDefinitionInteraction {
    #[doc = " The effect of the interaction, for example \"reduced gastric absorption of primary "]
    #[doc = " medication\"."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub effect: Option<CodeableReference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The incidence of the interaction, e.g. theoretical, observed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub incidence: Option<CodeableConcept>,
    #[doc = " The specific medication, food, substance or laboratory test that interacts."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub interactant: Option<Vec<ClinicalUseDefinitionInteractant>>,
    #[doc = " Actions for managing the interaction."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub management: Option<Vec<CodeableConcept>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The type of the interaction e.g. drug-drug interaction, drug-food interaction, drug-lab "]
    #[doc = " test interaction."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " A single issue - either an indication, contraindication, interaction or an undesirable effect "]
#[doc = " for a medicinal product, medication, device or procedure."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ClinicalUseDefinition_OtherTherapy")]
#[serde(deny_unknown_fields)]
pub struct ClinicalUseDefinitionOtherTherapy {
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The type of relationship between the medicinal product indication or contraindication and "]
    #[doc = " another therapy."]
    #[serde(rename = "relationshipType")]
    pub relationship_type: CodeableConcept,
    #[doc = " Reference to a specific medication (active substance, medicinal product or class of "]
    #[doc = " products) as part of an indication or contraindication."]
    pub therapy: CodeableReference,
}
#[doc = " A single issue - either an indication, contraindication, interaction or an undesirable effect "]
#[doc = " for a medicinal product, medication, device or procedure."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ClinicalUseDefinition_UndesirableEffect")]
#[serde(deny_unknown_fields)]
pub struct ClinicalUseDefinitionUndesirableEffect {
    #[doc = " High level classification of the effect."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub classification: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " How often the effect is seen."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "frequencyOfOccurrence")]
    pub frequency_of_occurrence: Option<CodeableConcept>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The situation in which the undesirable effect may manifest."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "symptomConditionEffect")]
    pub symptom_condition_effect: Option<CodeableReference>,
}
#[doc = " A single issue - either an indication, contraindication, interaction or an undesirable effect "]
#[doc = " for a medicinal product, medication, device or procedure."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ClinicalUseDefinition_Warning")]
#[serde(deny_unknown_fields)]
pub struct ClinicalUseDefinitionWarning {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " A coded or unformatted textual definition of this warning."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,
    #[doc = " A textual definition of this warning, with formatting."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " The CodeSystem resource is used to declare the existence of and describe a code system or code "]
#[doc = " system supplement and its key properties, and optionally define a part or all of its content."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct CodeSystem {
    #[doc = " Extensions for caseSensitive"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_caseSensitive")]
    pub _case_sensitive: Option<Element>,
    #[doc = " Extensions for compositional"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _compositional: Option<Element>,
    #[doc = " Extensions for content"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _content: Option<Element>,
    #[doc = " Extensions for copyright"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _copyright: Option<Element>,
    #[doc = " Extensions for count"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _count: Option<Element>,
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for experimental"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _experimental: Option<Element>,
    #[doc = " Extensions for hierarchyMeaning"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_hierarchyMeaning")]
    pub _hierarchy_meaning: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for publisher"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _publisher: Option<Element>,
    #[doc = " Extensions for purpose"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _purpose: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " Extensions for versionNeeded"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_versionNeeded")]
    pub _version_needed: Option<Element>,
    #[doc = " If code comparison is case sensitive when codes within this system are compared to each "]
    #[doc = " other."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "caseSensitive")]
    pub case_sensitive: Option<Boolean>,
    #[doc = " The code system defines a compositional (post-coordination) grammar."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub compositional: Option<Boolean>,
    #[doc = " Concepts that are in the code system. The concept definitions are inherently hierarchical, "]
    #[doc = " but the definitions must be consulted to determine what the meanings of the hierarchical "]
    #[doc = " relationships are."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub concept: Option<Vec<CodeSystemConcept>>,
    #[doc = " Contact details to assist a user in finding and communicating with the publisher."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The extent of the content of the code system (the concepts and codes it defines) are "]
    #[doc = " represented in this resource instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub content: Option<Code>,
    #[doc = " A copyright statement relating to the code system and/or its contents. Copyright statements "]
    #[doc = " are generally legal restrictions on the use and publishing of the code system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,
    #[doc = " The total number of concepts defined by the code system. Where the code system has a "]
    #[doc = " compositional grammar, the basis of this count is defined by the system steward."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub count: Option<UnsignedInt>,
    #[doc = " The date  (and optionally time) when the code system was published. The date must change "]
    #[doc = " when the business version changes and it must change if the status code changes. In "]
    #[doc = " addition, it should change when the substantive content of the code system changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " A free text natural language description of the code system from a consumer's perspective."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " A Boolean value to indicate that this code system is authored for testing purposes (or "]
    #[doc = " education/evaluation/marketing) and is not intended to be used for genuine usage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " A filter that can be used in a value set compose statement when selecting concepts using a "]
    #[doc = " filter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub filter: Option<Vec<CodeSystemFilter>>,
    #[doc = " The meaning of the hierarchy of concepts as represented in this resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "hierarchyMeaning")]
    pub hierarchy_meaning: Option<Code>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A formal identifier that is used to identify this code system when it is represented in "]
    #[doc = " other formats, or referenced in a specification, model, design or an instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " A legal or geographic region in which the code system is intended to be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A natural language name identifying the code system. This name should be usable as an "]
    #[doc = " identifier for the module by machine processing applications such as code generation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " A property defines an additional slot through which additional information can be provided "]
    #[doc = " about a concept."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub property: Option<Vec<CodeSystemProperty>>,
    #[doc = " The name of the organization or individual that published the code system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
    #[doc = " Explanation of why this code system is needed and why it has been designed as it has."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,
    #[doc = " This is a CodeSystem resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The date (and optionally time) when the code system resource was created or revised."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " The canonical URL of the code system that this code system supplement is adding "]
    #[doc = " designations and properties to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub supplements: Option<Canonical>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " A short, descriptive, user-friendly title for the code system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[doc = " An absolute URI that is used to identify this code system when it is referenced in a "]
    #[doc = " specification, model, design or an instance; also called its canonical identifier. This "]
    #[doc = " SHOULD be globally unique and SHOULD be a literal address at which at which an "]
    #[doc = " authoritative instance of this code system is (or will be) published. This URL can be the "]
    #[doc = " target of a canonical reference. It SHALL remain the same when the code system is stored on "]
    #[doc = " different servers. This is used in [Coding](datatypes.html#Coding).system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
    #[doc = " The content was developed with a focus and intent of supporting the contexts that are "]
    #[doc = " listed. These contexts may be general categories (gender, age, ...) or may be references to "]
    #[doc = " specific programs (insurance plans, studies, ...) and may be used to assist with indexing "]
    #[doc = " and searching for appropriate code system instances."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,
    #[doc = " Canonical reference to the value set that contains the entire code system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueSet")]
    pub value_set: Option<Canonical>,
    #[doc = " The identifier that is used to identify this version of the code system when it is "]
    #[doc = " referenced in a specification, model, design or instance. This is an arbitrary value "]
    #[doc = " managed by the code system author and is not expected to be globally unique. For example, "]
    #[doc = " it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is "]
    #[doc = " also no expectation that versions can be placed in a lexicographical sequence. This is used "]
    #[doc = " in [Coding](datatypes.html#Coding).version."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[doc = " This flag is used to signify that the code system does not commit to concept permanence "]
    #[doc = " across versions. If true, a version must be specified when referencing this code system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "versionNeeded")]
    pub version_needed: Option<Boolean>,
}
#[doc = " The CodeSystem resource is used to declare the existence of and describe a code system or code "]
#[doc = " system supplement and its key properties, and optionally define a part or all of its content."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CodeSystem_Concept")]
#[serde(deny_unknown_fields)]
pub struct CodeSystemConcept {
    #[doc = " Extensions for code"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _code: Option<Element>,
    #[doc = " Extensions for definition"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _definition: Option<Element>,
    #[doc = " Extensions for display"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _display: Option<Element>,
    #[doc = " A code - a text symbol - that uniquely identifies the concept within the code system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,
    #[doc = " Defines children of a concept to produce a hierarchy of concepts. The nature of the "]
    #[doc = " relationships is variable (is-a/contains/categorizes) - see hierarchyMeaning."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub concept: Option<Vec<CodeSystemConcept>>,
    #[doc = " The formal definition of the concept. The code system resource does not make formal "]
    #[doc = " definitions required, because of the prevalence of legacy systems. However, they are highly "]
    #[doc = " recommended, as without them there is no formal meaning associated with the concept."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub definition: Option<String>,
    #[doc = " Additional representations for the concept - other languages, aliases, specialized "]
    #[doc = " purposes, used for particular purposes, etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub designation: Option<Vec<CodeSystemDesignation>>,
    #[doc = " A human readable string that is the recommended default way to present this concept to a "]
    #[doc = " user."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A property value for this concept."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub property: Option<Vec<CodeSystemProperty1>>,
}
#[doc = " The CodeSystem resource is used to declare the existence of and describe a code system or code "]
#[doc = " system supplement and its key properties, and optionally define a part or all of its content."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CodeSystem_Designation")]
#[serde(deny_unknown_fields)]
pub struct CodeSystemDesignation {
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for value"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _value: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The language this designation is defined for."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A code that details how this designation would be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "use")]
    pub use_: Option<Coding>,
    #[doc = " The text value for this designation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[doc = " The CodeSystem resource is used to declare the existence of and describe a code system or code "]
#[doc = " system supplement and its key properties, and optionally define a part or all of its content."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CodeSystem_Filter")]
#[serde(deny_unknown_fields)]
pub struct CodeSystemFilter {
    #[doc = " Extensions for code"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _code: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for operator"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _operator: Option<Vec<Element>>,
    #[doc = " Extensions for value"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _value: Option<Element>,
    #[doc = " The code that identifies this filter when it is used as a filter in "]
    #[doc = " [ValueSet](valueset.html#).compose.include.filter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,
    #[doc = " A description of how or why the filter is used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A list of operators that can be used with the filter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub operator: Option<Vec<Code>>,
    #[doc = " A description of what the value for the filter should be."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[doc = " The CodeSystem resource is used to declare the existence of and describe a code system or code "]
#[doc = " system supplement and its key properties, and optionally define a part or all of its content."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CodeSystem_Property")]
#[serde(deny_unknown_fields)]
pub struct CodeSystemProperty {
    #[doc = " Extensions for code"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _code: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " Extensions for uri"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _uri: Option<Element>,
    #[doc = " A code that is used to identify the property. The code is used internally (in "]
    #[doc = " CodeSystem.concept.property.code) and also externally, such as in property filters."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,
    #[doc = " A description of the property- why it is defined, and how its value might be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The type of the property value. Properties of type \"code\" contain a code defined by the "]
    #[doc = " code system (e.g. a reference to another defined concept)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
    #[doc = " Reference to the formal meaning of the property. One possible source of meaning is the "]
    #[doc = " [Concept Properties](codesystem-concept-properties.html) code system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub uri: Option<Uri>,
}
#[doc = " The CodeSystem resource is used to declare the existence of and describe a code system or code "]
#[doc = " system supplement and its key properties, and optionally define a part or all of its content."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CodeSystem_Property1")]
#[serde(deny_unknown_fields)]
pub struct CodeSystemProperty1 {
    #[doc = " Extensions for code"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _code: Option<Element>,
    #[doc = " Extensions for valueBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub _value_boolean: Option<Element>,
    #[doc = " Extensions for valueCode"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueCode")]
    pub _value_code: Option<Element>,
    #[doc = " Extensions for valueDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDateTime")]
    pub _value_date_time: Option<Element>,
    #[doc = " Extensions for valueDecimal"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDecimal")]
    pub _value_decimal: Option<Element>,
    #[doc = " Extensions for valueInteger"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueInteger")]
    pub _value_integer: Option<Element>,
    #[doc = " Extensions for valueString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueString")]
    pub _value_string: Option<Element>,
    #[doc = " A code that is a reference to CodeSystem.property.code."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The value of this property."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,
    #[doc = " The value of this property."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCode")]
    pub value_code: Option<String>,
    #[doc = " The value of this property."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCoding")]
    pub value_coding: Option<Coding>,
    #[doc = " The value of this property."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDateTime")]
    pub value_date_time: Option<String>,
    #[doc = " The value of this property."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDecimal")]
    pub value_decimal: Option<f64>,
    #[doc = " The value of this property."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueInteger")]
    pub value_integer: Option<f64>,
    #[doc = " The value of this property."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueString")]
    pub value_string: Option<String>,
}
#[doc = " A concept that may be defined by a formal reference to a terminology or ontology or may be "]
#[doc = " provided by text."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct CodeableConcept {
    #[doc = " Extensions for text"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _text: Option<Element>,
    #[doc = " A reference to a code defined by a terminology system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub coding: Option<Vec<Coding>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A human language representation of the concept as seen/selected/uttered by the user who "]
    #[doc = " entered the data and/or which represents the intended meaning of the user."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}
#[doc = " A reference to a resource (by instance), or instead, a reference to a concept defined in a "]
#[doc = " terminology or ontology (by class)."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct CodeableReference {
    #[doc = " A reference to a concept - e.g. the information is identified by its general class to the "]
    #[doc = " degree of precision found in the terminology."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub concept: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A reference to a resource the provides exact details about the information being "]
    #[doc = " referenced."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reference: Option<Reference>,
}
#[doc = " A reference to a code defined by a terminology system."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Coding {
    #[doc = " Extensions for code"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _code: Option<Element>,
    #[doc = " Extensions for display"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _display: Option<Element>,
    #[doc = " Extensions for system"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _system: Option<Element>,
    #[doc = " Extensions for userSelected"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_userSelected")]
    pub _user_selected: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " A symbol in syntax defined by the system. The symbol may be a predefined code or an "]
    #[doc = " expression in a syntax defined by the coding system (e.g. post-coordination)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,
    #[doc = " A representation of the meaning of the code in the system, following the rules of the "]
    #[doc = " system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The identification of the code system that defines the meaning of the symbol in the code."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub system: Option<Uri>,
    #[doc = " Indicates that this coding was chosen by a user directly - e.g. off a pick list of "]
    #[doc = " available items (codes or displays)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "userSelected")]
    pub user_selected: Option<Boolean>,
    #[doc = " The version of the code system which was used when choosing this code. Note that a "]
    #[doc = " well-maintained code system does not need the version reported, because the meaning of "]
    #[doc = " codes is consistent across versions. However this cannot consistently be assured, and when "]
    #[doc = " the meaning is not guaranteed to be consistent, the version SHOULD be exchanged."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[doc = " An occurrence of information being transmitted; e.g. an alert that was sent to a responsible "]
#[doc = " provider, a public health agency that was notified about a reportable condition."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Communication {
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for instantiatesUri"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_instantiatesUri")]
    pub _instantiates_uri: Option<Vec<Element>>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for priority"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _priority: Option<Element>,
    #[doc = " Extensions for received"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _received: Option<Element>,
    #[doc = " Extensions for sent"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _sent: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Other resources that pertain to this communication and to which this communication should "]
    #[doc = " be associated."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub about: Option<Vec<Reference>>,
    #[doc = " An order, proposal or plan fulfilled in whole or in part by this Communication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Vec<Reference>>,
    #[doc = " The type of message conveyed such as alert, notification, reminder, instruction, etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The Encounter during which this Communication was created or to which the creation of this "]
    #[doc = " record is tightly associated."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Business identifiers assigned to this communication by the performer or other systems which "]
    #[doc = " remain constant as the resource is updated and propagates from server to server."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " Prior communication that this communication is in response to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "inResponseTo")]
    pub in_response_to: Option<Vec<Reference>>,
    #[doc = " The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that "]
    #[doc = " is adhered to in whole or in part by this Communication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesCanonical")]
    pub instantiates_canonical: Option<Vec<Canonical>>,
    #[doc = " The URL pointing to an externally maintained protocol, guideline, orderset or other "]
    #[doc = " definition that is adhered to in whole or in part by this Communication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesUri")]
    pub instantiates_uri: Option<Vec<Uri>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " A channel that was used for this communication (e.g. email, fax)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub medium: Option<Vec<CodeableConcept>>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Additional notes or commentary about the communication by the sender, receiver or other "]
    #[doc = " interested parties."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " Part of this action."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "partOf")]
    pub part_of: Option<Vec<Reference>>,
    #[doc = " Text, attachment(s), or resource(s) that was communicated to the recipient."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub payload: Option<Vec<CommunicationPayload>>,
    #[doc = " Characterizes how quickly the planned or in progress communication must be addressed. "]
    #[doc = " Includes concepts such as stat, urgent, routine."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub priority: Option<Code>,
    #[doc = " The reason or justification for the communication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,
    #[doc = " Indicates another resource whose existence justifies this communication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,
    #[doc = " The time when this communication arrived at the destination."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub received: Option<DateTime>,
    #[doc = " The entity (e.g. person, organization, clinical information system, care team or device) "]
    #[doc = " which was the target of the communication. If receipts need to be tracked by an individual, "]
    #[doc = " a separate resource instance will need to be created for each recipient.  Multiple "]
    #[doc = " recipient communications are intended where either receipts are not tracked (e.g. a mass "]
    #[doc = " mail-out) or a receipt is captured in aggregate (all emails confirmed received by a "]
    #[doc = " particular time)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub recipient: Option<Vec<Reference>>,
    #[doc = " This is a Communication resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The entity (e.g. person, organization, clinical information system, or device) which was "]
    #[doc = " the source of the communication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sender: Option<Reference>,
    #[doc = " The time when this communication was sent."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sent: Option<DateTime>,
    #[doc = " The status of the transmission."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " Captures the reason for the current state of the Communication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusReason")]
    pub status_reason: Option<CodeableConcept>,
    #[doc = " The patient or group that was the focus of this communication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Reference>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " Description of the purpose/content, similar to a subject line in an email."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub topic: Option<CodeableConcept>,
}
#[doc = " A request to convey information; e.g. the CDS system proposes that an alert be sent to a "]
#[doc = " responsible provider, the CDS system proposes that the public health agency be notified about a "]
#[doc = " reportable condition."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct CommunicationRequest {
    #[doc = " Extensions for authoredOn"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_authoredOn")]
    pub _authored_on: Option<Element>,
    #[doc = " Extensions for doNotPerform"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_doNotPerform")]
    pub _do_not_perform: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for occurrenceDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_occurrenceDateTime")]
    pub _occurrence_date_time: Option<Element>,
    #[doc = " Extensions for priority"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _priority: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Other resources that pertain to this communication request and to which this communication "]
    #[doc = " request should be associated."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub about: Option<Vec<Reference>>,
    #[doc = " For draft requests, indicates the date of initial creation.  For requests with other "]
    #[doc = " statuses, indicates the date of activation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "authoredOn")]
    pub authored_on: Option<DateTime>,
    #[doc = " A plan or proposal that is fulfilled in whole or in part by this request."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Vec<Reference>>,
    #[doc = " The type of message to be sent such as alert, notification, reminder, instruction, etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " If true indicates that the CommunicationRequest is asking for the specified action to *not* "]
    #[doc = " occur."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "doNotPerform")]
    pub do_not_perform: Option<Boolean>,
    #[doc = " The Encounter during which this CommunicationRequest was created or to which the creation "]
    #[doc = " of this record is tightly associated."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " A shared identifier common to all requests that were authorized more or less simultaneously "]
    #[doc = " by a single author, representing the identifier of the requisition, prescription or similar "]
    #[doc = " form."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "groupIdentifier")]
    pub group_identifier: Option<Identifier>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Business identifiers assigned to this communication request by the performer or other "]
    #[doc = " systems which remain constant as the resource is updated and propagates from server to "]
    #[doc = " server."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " A channel that was used for this communication (e.g. email, fax)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub medium: Option<Vec<CodeableConcept>>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Comments made about the request by the requester, sender, recipient, subject or other "]
    #[doc = " participants."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " The time when this communication is to occur."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrenceDateTime")]
    pub occurrence_date_time: Option<String>,
    #[doc = " The time when this communication is to occur."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrencePeriod")]
    pub occurrence_period: Option<Period>,
    #[doc = " Text, attachment(s), or resource(s) to be communicated to the recipient."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub payload: Option<Vec<CommunicationRequestPayload>>,
    #[doc = " Characterizes how quickly the proposed act must be initiated. Includes concepts such as "]
    #[doc = " stat, urgent, routine."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub priority: Option<Code>,
    #[doc = " Describes why the request is being made in coded or textual form."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,
    #[doc = " Indicates another resource whose existence justifies this request."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,
    #[doc = " The entity (e.g. person, organization, clinical information system, device, group, or care "]
    #[doc = " team) which is the intended target of the communication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub recipient: Option<Vec<Reference>>,
    #[doc = " Completed or terminated request(s) whose function is taken by this new request."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub replaces: Option<Vec<Reference>>,
    #[doc = " The device, individual, or organization who initiated the request and has responsibility "]
    #[doc = " for its activation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub requester: Option<Reference>,
    #[doc = " This is a CommunicationRequest resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The entity (e.g. person, organization, clinical information system, or device) which is to "]
    #[doc = " be the source of the communication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sender: Option<Reference>,
    #[doc = " The status of the proposal or order."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " Captures the reason for the current state of the CommunicationRequest."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusReason")]
    pub status_reason: Option<CodeableConcept>,
    #[doc = " The patient or group that is the focus of this communication request."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Reference>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " A request to convey information; e.g. the CDS system proposes that an alert be sent to a "]
#[doc = " responsible provider, the CDS system proposes that the public health agency be notified about a "]
#[doc = " reportable condition."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CommunicationRequest_Payload")]
#[serde(deny_unknown_fields)]
pub struct CommunicationRequestPayload {
    #[doc = " Extensions for contentString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_contentString")]
    pub _content_string: Option<Element>,
    #[doc = " The communicated content (or for multi-part communications, one portion of the "]
    #[doc = " communication)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contentAttachment")]
    pub content_attachment: Option<Attachment>,
    #[doc = " The communicated content (or for multi-part communications, one portion of the "]
    #[doc = " communication)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contentReference")]
    pub content_reference: Option<Reference>,
    #[doc = " The communicated content (or for multi-part communications, one portion of the "]
    #[doc = " communication)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contentString")]
    pub content_string: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " An occurrence of information being transmitted; e.g. an alert that was sent to a responsible "]
#[doc = " provider, a public health agency that was notified about a reportable condition."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Communication_Payload")]
#[serde(deny_unknown_fields)]
pub struct CommunicationPayload {
    #[doc = " Extensions for contentString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_contentString")]
    pub _content_string: Option<Element>,
    #[doc = " A communicated content (or for multi-part communications, one portion of the "]
    #[doc = " communication)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contentAttachment")]
    pub content_attachment: Option<Attachment>,
    #[doc = " A communicated content (or for multi-part communications, one portion of the "]
    #[doc = " communication)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contentReference")]
    pub content_reference: Option<Reference>,
    #[doc = " A communicated content (or for multi-part communications, one portion of the "]
    #[doc = " communication)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contentString")]
    pub content_string: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " A compartment definition that defines how resources are accessed on a server."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct CompartmentDefinition {
    #[doc = " Extensions for code"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _code: Option<Element>,
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for experimental"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _experimental: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for publisher"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _publisher: Option<Element>,
    #[doc = " Extensions for purpose"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _purpose: Option<Element>,
    #[doc = " Extensions for search"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _search: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " Which compartment this definition describes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,
    #[doc = " Contact details to assist a user in finding and communicating with the publisher."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The date  (and optionally time) when the compartment definition was published. The date "]
    #[doc = " must change when the business version changes and it must change if the status code "]
    #[doc = " changes. In addition, it should change when the substantive content of the compartment "]
    #[doc = " definition changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " A free text natural language description of the compartment definition from a consumer's "]
    #[doc = " perspective."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " A Boolean value to indicate that this compartment definition is authored for testing "]
    #[doc = " purposes (or education/evaluation/marketing) and is not intended to be used for genuine "]
    #[doc = " usage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A natural language name identifying the compartment definition. This name should be usable "]
    #[doc = " as an identifier for the module by machine processing applications such as code generation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " The name of the organization or individual that published the compartment definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
    #[doc = " Explanation of why this compartment definition is needed and why it has been designed as it "]
    #[doc = " has."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,
    #[doc = " Information about how a resource is related to the compartment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource: Option<Vec<CompartmentDefinitionResource>>,
    #[doc = " This is a CompartmentDefinition resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " Whether the search syntax is supported,."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub search: Option<Boolean>,
    #[doc = " The status of this compartment definition. Enables tracking the life-cycle of the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " An absolute URI that is used to identify this compartment definition when it is referenced "]
    #[doc = " in a specification, model, design or an instance; also called its canonical identifier. "]
    #[doc = " This SHOULD be globally unique and SHOULD be a literal address at which at which an "]
    #[doc = " authoritative instance of this compartment definition is (or will be) published. This URL "]
    #[doc = " can be the target of a canonical reference. It SHALL remain the same when the compartment "]
    #[doc = " definition is stored on different servers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
    #[doc = " The content was developed with a focus and intent of supporting the contexts that are "]
    #[doc = " listed. These contexts may be general categories (gender, age, ...) or may be references to "]
    #[doc = " specific programs (insurance plans, studies, ...) and may be used to assist with indexing "]
    #[doc = " and searching for appropriate compartment definition instances."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,
    #[doc = " The identifier that is used to identify this version of the compartment definition when it "]
    #[doc = " is referenced in a specification, model, design or instance. This is an arbitrary value "]
    #[doc = " managed by the compartment definition author and is not expected to be globally unique. For "]
    #[doc = " example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. "]
    #[doc = " There is also no expectation that versions can be placed in a lexicographical sequence."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[doc = " A compartment definition that defines how resources are accessed on a server."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CompartmentDefinition_Resource")]
#[serde(deny_unknown_fields)]
pub struct CompartmentDefinitionResource {
    #[doc = " Extensions for code"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _code: Option<Element>,
    #[doc = " Extensions for documentation"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _documentation: Option<Element>,
    #[doc = " Extensions for param"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _param: Option<Vec<Element>>,
    #[doc = " The name of a resource supported by the server."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,
    #[doc = " Additional documentation about the resource and compartment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub documentation: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The name of a search parameter that represents the link to the compartment. More than one "]
    #[doc = " may be listed because a resource may be linked to a compartment in more than one way,."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub param: Option<Vec<String>>,
}
#[doc = " A set of healthcare-related information that is assembled together into a single logical "]
#[doc = " package that provides a single coherent statement of meaning, establishes its own context and "]
#[doc = " that has clinical attestation with regard to who is making the statement. A Composition defines "]
#[doc = " the structure and narrative content necessary for a document. However, a Composition alone does "]
#[doc = " not constitute a document. Rather, the Composition must be the first entry in a Bundle where "]
#[doc = " Bundle.type=document, and any other resources referenced from Composition must be included as "]
#[doc = " subsequent entries in the Bundle (for example Patient, Practitioner, Encounter, etc.)."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Composition {
    #[doc = " Extensions for confidentiality"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _confidentiality: Option<Element>,
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " A participant who has attested to the accuracy of the composition/document."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub attester: Option<Vec<CompositionAttester>>,
    #[doc = " Identifies who is responsible for the information in the composition, not necessarily who "]
    #[doc = " typed it in."]
    pub author: Vec<Reference>,
    #[doc = " A categorization for the type of the composition - helps for indexing and searching. This "]
    #[doc = " may be implied by or derived from the code specified in the Composition Type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,
    #[doc = " The code specifying the level of confidentiality of the Composition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub confidentiality: Option<Code>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " Identifies the organization or group who is responsible for ongoing maintenance of and "]
    #[doc = " access to the composition/document information."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub custodian: Option<Reference>,
    #[doc = " The composition editing time, when the composition was last logically changed by the "]
    #[doc = " author."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " Describes the clinical encounter or type of care this documentation is associated with."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,
    #[doc = " The clinical service, such as a colonoscopy or an appendectomy, being documented."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub event: Option<Vec<CompositionEvent>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A version-independent identifier for the Composition. This identifier stays constant as the "]
    #[doc = " composition is changed over time."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Relationships that this composition has with other compositions or documents that already "]
    #[doc = " exist."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatesTo")]
    pub relates_to: Option<Vec<CompositionRelatesTo>>,
    #[doc = " This is a Composition resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The root of the sections that make up the composition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub section: Option<Vec<CompositionSection>>,
    #[doc = " The workflow/clinical status of this composition. The status is a marker for the clinical "]
    #[doc = " standing of the document."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " Who or what the composition is about. The composition can be about a person, (patient or "]
    #[doc = " healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a "]
    #[doc = " document about a herd of livestock, or a set of patients that share a common exposure)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Reference>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " Official human-readable label for the composition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[doc = " Specifies the particular kind of composition (e.g. History and Physical, Discharge Summary, "]
    #[doc = " Progress Note). This usually equates to the purpose of making the composition."]
    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}
#[doc = " A set of healthcare-related information that is assembled together into a single logical "]
#[doc = " package that provides a single coherent statement of meaning, establishes its own context and "]
#[doc = " that has clinical attestation with regard to who is making the statement. A Composition defines "]
#[doc = " the structure and narrative content necessary for a document. However, a Composition alone does "]
#[doc = " not constitute a document. Rather, the Composition must be the first entry in a Bundle where "]
#[doc = " Bundle.type=document, and any other resources referenced from Composition must be included as "]
#[doc = " subsequent entries in the Bundle (for example Patient, Practitioner, Encounter, etc.)."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Composition_Attester")]
#[serde(deny_unknown_fields)]
pub struct CompositionAttester {
    #[doc = " Extensions for mode"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _mode: Option<Element>,
    #[doc = " Extensions for time"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _time: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The type of attestation the authenticator offers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub mode: Option<Code>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Who attested the composition in the specified way."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub party: Option<Reference>,
    #[doc = " When the composition was attested by the party."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub time: Option<DateTime>,
}
#[doc = " A set of healthcare-related information that is assembled together into a single logical "]
#[doc = " package that provides a single coherent statement of meaning, establishes its own context and "]
#[doc = " that has clinical attestation with regard to who is making the statement. A Composition defines "]
#[doc = " the structure and narrative content necessary for a document. However, a Composition alone does "]
#[doc = " not constitute a document. Rather, the Composition must be the first entry in a Bundle where "]
#[doc = " Bundle.type=document, and any other resources referenced from Composition must be included as "]
#[doc = " subsequent entries in the Bundle (for example Patient, Practitioner, Encounter, etc.)."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Composition_Event")]
#[serde(deny_unknown_fields)]
pub struct CompositionEvent {
    #[doc = " This list of codes represents the main clinical acts, such as a colonoscopy or an "]
    #[doc = " appendectomy, being documented. In some cases, the event is inherent in the typeCode, such "]
    #[doc = " as a \"History and Physical Report\" in which the procedure being documented is necessarily a "]
    #[doc = " \"History and Physical\" act."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Vec<CodeableConcept>>,
    #[doc = " The description and/or reference of the event(s) being documented. For example, this could "]
    #[doc = " be used to document such a colonoscopy or an appendectomy."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub detail: Option<Vec<Reference>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The period of time covered by the documentation. There is no assertion that the "]
    #[doc = " documentation is a complete representation for this period, only that it documents events "]
    #[doc = " during this time."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
}
#[doc = " A set of healthcare-related information that is assembled together into a single logical "]
#[doc = " package that provides a single coherent statement of meaning, establishes its own context and "]
#[doc = " that has clinical attestation with regard to who is making the statement. A Composition defines "]
#[doc = " the structure and narrative content necessary for a document. However, a Composition alone does "]
#[doc = " not constitute a document. Rather, the Composition must be the first entry in a Bundle where "]
#[doc = " Bundle.type=document, and any other resources referenced from Composition must be included as "]
#[doc = " subsequent entries in the Bundle (for example Patient, Practitioner, Encounter, etc.)."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Composition_RelatesTo")]
#[serde(deny_unknown_fields)]
pub struct CompositionRelatesTo {
    #[doc = " Extensions for code"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _code: Option<Element>,
    #[doc = " The type of relationship that this composition has with anther composition or document."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The target composition/document of this relationship."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetIdentifier")]
    pub target_identifier: Option<Identifier>,
    #[doc = " The target composition/document of this relationship."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetReference")]
    pub target_reference: Option<Reference>,
}
#[doc = " A set of healthcare-related information that is assembled together into a single logical "]
#[doc = " package that provides a single coherent statement of meaning, establishes its own context and "]
#[doc = " that has clinical attestation with regard to who is making the statement. A Composition defines "]
#[doc = " the structure and narrative content necessary for a document. However, a Composition alone does "]
#[doc = " not constitute a document. Rather, the Composition must be the first entry in a Bundle where "]
#[doc = " Bundle.type=document, and any other resources referenced from Composition must be included as "]
#[doc = " subsequent entries in the Bundle (for example Patient, Practitioner, Encounter, etc.)."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Composition_Section")]
#[serde(deny_unknown_fields)]
pub struct CompositionSection {
    #[doc = " Extensions for mode"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _mode: Option<Element>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " Identifies who is responsible for the information in this section, not necessarily who "]
    #[doc = " typed it in."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Vec<Reference>>,
    #[doc = " A code identifying the kind of content contained within the section. This must be "]
    #[doc = " consistent with the section title."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,
    #[doc = " If the section is empty, why the list is empty. An empty section typically has some text "]
    #[doc = " explaining the empty reason."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "emptyReason")]
    pub empty_reason: Option<CodeableConcept>,
    #[doc = " A reference to the actual resource from which the narrative in the section is derived."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub entry: Option<Vec<Reference>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The actual focus of the section when it is not the subject of the composition, but instead "]
    #[doc = " represents something or someone associated with the subject such as (for a patient subject) "]
    #[doc = " a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be "]
    #[doc = " focus of the parent section, or, for a section in the Composition itself, the subject of "]
    #[doc = " the composition. Sections with a focus SHALL only include resources where the logical "]
    #[doc = " subject (patient, subject, focus, etc.) matches the section focus, or the resources have no "]
    #[doc = " logical subject (few resources)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub focus: Option<Reference>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " How the entry list was prepared - whether it is a working list that is suitable for being "]
    #[doc = " maintained on an ongoing basis, or if it represents a snapshot of a list of items from "]
    #[doc = " another source, or whether it is a prepared list where items may be marked as added, "]
    #[doc = " modified or deleted."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub mode: Option<Code>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Specifies the order applied to the items in the section entries."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "orderedBy")]
    pub ordered_by: Option<CodeableConcept>,
    #[doc = " A nested sub-section within this section."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub section: Option<Vec<CompositionSection>>,
    #[doc = " A human-readable narrative that contains the attested content of the section, used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " The label for this particular section.  This will be part of the rendered content for the "]
    #[doc = " document, and is often used to build a table of contents."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}
#[doc = " A statement of relationships from one set of concepts to one or more other concepts - either "]
#[doc = " concepts in code systems, or data element/data element concepts, or classes in class models."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ConceptMap {
    #[doc = " Extensions for copyright"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _copyright: Option<Element>,
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for experimental"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _experimental: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for publisher"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _publisher: Option<Element>,
    #[doc = " Extensions for purpose"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _purpose: Option<Element>,
    #[doc = " Extensions for sourceCanonical"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sourceCanonical")]
    pub _source_canonical: Option<Element>,
    #[doc = " Extensions for sourceUri"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sourceUri")]
    pub _source_uri: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for targetCanonical"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_targetCanonical")]
    pub _target_canonical: Option<Element>,
    #[doc = " Extensions for targetUri"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_targetUri")]
    pub _target_uri: Option<Element>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " Contact details to assist a user in finding and communicating with the publisher."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " A copyright statement relating to the concept map and/or its contents. Copyright statements "]
    #[doc = " are generally legal restrictions on the use and publishing of the concept map."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,
    #[doc = " The date  (and optionally time) when the concept map was published. The date must change "]
    #[doc = " when the business version changes and it must change if the status code changes. In "]
    #[doc = " addition, it should change when the substantive content of the concept map changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " A free text natural language description of the concept map from a consumer's perspective."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " A Boolean value to indicate that this concept map is authored for testing purposes (or "]
    #[doc = " education/evaluation/marketing) and is not intended to be used for genuine usage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " A group of mappings that all have the same source and target system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub group: Option<Vec<ConceptMapGroup>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A formal identifier that is used to identify this concept map when it is represented in "]
    #[doc = " other formats, or referenced in a specification, model, design or an instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " A legal or geographic region in which the concept map is intended to be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A natural language name identifying the concept map. This name should be usable as an "]
    #[doc = " identifier for the module by machine processing applications such as code generation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " The name of the organization or individual that published the concept map."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
    #[doc = " Explanation of why this concept map is needed and why it has been designed as it has."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,
    #[doc = " This is a ConceptMap resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " Identifier for the source value set that contains the concepts that are being mapped and "]
    #[doc = " provides context for the mappings."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "sourceCanonical")]
    pub source_canonical: Option<String>,
    #[doc = " Identifier for the source value set that contains the concepts that are being mapped and "]
    #[doc = " provides context for the mappings."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "sourceUri")]
    pub source_uri: Option<String>,
    #[doc = " The status of this concept map. Enables tracking the life-cycle of the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " The target value set provides context for the mappings. Note that the mapping is made "]
    #[doc = " between concepts, not between value sets, but the value set provides important context "]
    #[doc = " about how the concept mapping choices are made."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetCanonical")]
    pub target_canonical: Option<String>,
    #[doc = " The target value set provides context for the mappings. Note that the mapping is made "]
    #[doc = " between concepts, not between value sets, but the value set provides important context "]
    #[doc = " about how the concept mapping choices are made."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetUri")]
    pub target_uri: Option<String>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " A short, descriptive, user-friendly title for the concept map."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[doc = " An absolute URI that is used to identify this concept map when it is referenced in a "]
    #[doc = " specification, model, design or an instance; also called its canonical identifier. This "]
    #[doc = " SHOULD be globally unique and SHOULD be a literal address at which at which an "]
    #[doc = " authoritative instance of this concept map is (or will be) published. This URL can be the "]
    #[doc = " target of a canonical reference. It SHALL remain the same when the concept map is stored on "]
    #[doc = " different servers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
    #[doc = " The content was developed with a focus and intent of supporting the contexts that are "]
    #[doc = " listed. These contexts may be general categories (gender, age, ...) or may be references to "]
    #[doc = " specific programs (insurance plans, studies, ...) and may be used to assist with indexing "]
    #[doc = " and searching for appropriate concept map instances."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,
    #[doc = " The identifier that is used to identify this version of the concept map when it is "]
    #[doc = " referenced in a specification, model, design or instance. This is an arbitrary value "]
    #[doc = " managed by the concept map author and is not expected to be globally unique. For example, "]
    #[doc = " it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is "]
    #[doc = " also no expectation that versions can be placed in a lexicographical sequence."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[doc = " A statement of relationships from one set of concepts to one or more other concepts - either "]
#[doc = " concepts in code systems, or data element/data element concepts, or classes in class models."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ConceptMap_DependsOn")]
#[serde(deny_unknown_fields)]
pub struct ConceptMapDependsOn {
    #[doc = " Extensions for display"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _display: Option<Element>,
    #[doc = " Extensions for property"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _property: Option<Element>,
    #[doc = " Extensions for value"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _value: Option<Element>,
    #[doc = " The display for the code. The display is only provided to help editors when editing the "]
    #[doc = " concept map."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A reference to an element that holds a coded value that corresponds to a code system "]
    #[doc = " property. The idea is that the information model carries an element somewhere that is "]
    #[doc = " labeled to correspond with a code system property."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub property: Option<Uri>,
    #[doc = " An absolute URI that identifies the code system of the dependency code (if the "]
    #[doc = " source/dependency is a value set that crosses code systems)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub system: Option<Canonical>,
    #[doc = " Identity (code or path) or the element/item/ValueSet/text that the map depends on / refers "]
    #[doc = " to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[doc = " A statement of relationships from one set of concepts to one or more other concepts - either "]
#[doc = " concepts in code systems, or data element/data element concepts, or classes in class models."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ConceptMap_Element")]
#[serde(deny_unknown_fields)]
pub struct ConceptMapElement {
    #[doc = " Extensions for code"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _code: Option<Element>,
    #[doc = " Extensions for display"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _display: Option<Element>,
    #[doc = " Identity (code or path) or the element/item being mapped."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,
    #[doc = " The display for the code. The display is only provided to help editors when editing the "]
    #[doc = " concept map."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A concept from the target value set that this concept maps to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub target: Option<Vec<ConceptMapTarget>>,
}
#[doc = " A statement of relationships from one set of concepts to one or more other concepts - either "]
#[doc = " concepts in code systems, or data element/data element concepts, or classes in class models."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ConceptMap_Group")]
#[serde(deny_unknown_fields)]
pub struct ConceptMapGroup {
    #[doc = " Extensions for source"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _source: Option<Element>,
    #[doc = " Extensions for sourceVersion"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sourceVersion")]
    pub _source_version: Option<Element>,
    #[doc = " Extensions for target"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _target: Option<Element>,
    #[doc = " Extensions for targetVersion"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_targetVersion")]
    pub _target_version: Option<Element>,
    #[doc = " Mappings for an individual concept in the source to one or more concepts in the target."]
    pub element: Vec<ConceptMapElement>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " An absolute URI that identifies the source system where the concepts to be mapped are "]
    #[doc = " defined."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub source: Option<Uri>,
    #[doc = " The specific version of the code system, as determined by the code system authority."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "sourceVersion")]
    pub source_version: Option<String>,
    #[doc = " An absolute URI that identifies the target system that the concepts will be mapped to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub target: Option<Uri>,
    #[doc = " The specific version of the code system, as determined by the code system authority."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetVersion")]
    pub target_version: Option<String>,
    #[doc = " What to do when there is no mapping for the source concept. \"Unmapped\" does not include "]
    #[doc = " codes that are unmatched, and the unmapped element is ignored in a code is specified to "]
    #[doc = " have equivalence = unmatched."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub unmapped: Option<ConceptMapUnmapped>,
}
#[doc = " A statement of relationships from one set of concepts to one or more other concepts - either "]
#[doc = " concepts in code systems, or data element/data element concepts, or classes in class models."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ConceptMap_Target")]
#[serde(deny_unknown_fields)]
pub struct ConceptMapTarget {
    #[doc = " Extensions for code"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _code: Option<Element>,
    #[doc = " Extensions for comment"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _comment: Option<Element>,
    #[doc = " Extensions for display"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _display: Option<Element>,
    #[doc = " Extensions for equivalence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _equivalence: Option<Element>,
    #[doc = " Identity (code or path) or the element/item that the map refers to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,
    #[doc = " A description of status/issues in mapping that conveys additional information not "]
    #[doc = " represented in  the structured data."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[doc = " A set of additional dependencies for this mapping to hold. This mapping is only applicable "]
    #[doc = " if the specified element can be resolved, and it has the specified value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dependsOn")]
    pub depends_on: Option<Vec<ConceptMapDependsOn>>,
    #[doc = " The display for the code. The display is only provided to help editors when editing the "]
    #[doc = " concept map."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,
    #[doc = " The equivalence between the source and target concepts (counting for the dependencies and "]
    #[doc = " products). The equivalence is read from target to source (e.g. the target is 'wider' than "]
    #[doc = " the source)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub equivalence: Option<Code>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A set of additional outcomes from this mapping to other elements. To properly execute this "]
    #[doc = " mapping, the specified element must be mapped to some data element or source that is in "]
    #[doc = " context. The mapping may still be useful without a place for the additional data elements, "]
    #[doc = " but the equivalence cannot be relied on."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub product: Option<Vec<ConceptMapDependsOn>>,
}
#[doc = " A statement of relationships from one set of concepts to one or more other concepts - either "]
#[doc = " concepts in code systems, or data element/data element concepts, or classes in class models."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ConceptMap_Unmapped")]
#[serde(deny_unknown_fields)]
pub struct ConceptMapUnmapped {
    #[doc = " Extensions for code"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _code: Option<Element>,
    #[doc = " Extensions for display"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _display: Option<Element>,
    #[doc = " Extensions for mode"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _mode: Option<Element>,
    #[doc = " The fixed code to use when the mode = 'fixed'  - all unmapped codes are mapped to a single "]
    #[doc = " fixed code."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,
    #[doc = " The display for the code. The display is only provided to help editors when editing the "]
    #[doc = " concept map."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Defines which action to take if there is no match for the source concept in the target "]
    #[doc = " system designated for the group. One of 3 actions are possible: use the unmapped code (this "]
    #[doc = " is useful when doing a mapping between versions, and only a few codes have changed), use a "]
    #[doc = " fixed code (a default code), or alternatively, a reference to a different concept map can "]
    #[doc = " be provided (by canonical URL)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub mode: Option<Code>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The canonical reference to an additional ConceptMap resource instance to use for mapping if "]
    #[doc = " this ConceptMap resource contains no matching mapping for the source concept."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Canonical>,
}
#[doc = " A clinical condition, problem, diagnosis, or other event, situation, issue, or clinical concept "]
#[doc = " that has risen to a level of concern."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Condition {
    #[doc = " Extensions for abatementDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_abatementDateTime")]
    pub _abatement_date_time: Option<Element>,
    #[doc = " Extensions for abatementString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_abatementString")]
    pub _abatement_string: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for onsetDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_onsetDateTime")]
    pub _onset_date_time: Option<Element>,
    #[doc = " Extensions for onsetString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_onsetString")]
    pub _onset_string: Option<Element>,
    #[doc = " Extensions for recordedDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_recordedDate")]
    pub _recorded_date: Option<Element>,
    #[doc = " The date or estimated date that the condition resolved or went into remission. This is "]
    #[doc = " called \"abatement\" because of the many overloaded connotations associated with \"remission\" "]
    #[doc = " or \"resolution\" - Conditions are never really resolved, but they can abate."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "abatementAge")]
    pub abatement_age: Option<Age>,
    #[doc = " The date or estimated date that the condition resolved or went into remission. This is "]
    #[doc = " called \"abatement\" because of the many overloaded connotations associated with \"remission\" "]
    #[doc = " or \"resolution\" - Conditions are never really resolved, but they can abate."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "abatementDateTime")]
    pub abatement_date_time: Option<String>,
    #[doc = " The date or estimated date that the condition resolved or went into remission. This is "]
    #[doc = " called \"abatement\" because of the many overloaded connotations associated with \"remission\" "]
    #[doc = " or \"resolution\" - Conditions are never really resolved, but they can abate."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "abatementPeriod")]
    pub abatement_period: Option<Period>,
    #[doc = " The date or estimated date that the condition resolved or went into remission. This is "]
    #[doc = " called \"abatement\" because of the many overloaded connotations associated with \"remission\" "]
    #[doc = " or \"resolution\" - Conditions are never really resolved, but they can abate."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "abatementRange")]
    pub abatement_range: Option<Range>,
    #[doc = " The date or estimated date that the condition resolved or went into remission. This is "]
    #[doc = " called \"abatement\" because of the many overloaded connotations associated with \"remission\" "]
    #[doc = " or \"resolution\" - Conditions are never really resolved, but they can abate."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "abatementString")]
    pub abatement_string: Option<String>,
    #[doc = " Individual who is making the condition statement."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub asserter: Option<Reference>,
    #[doc = " The anatomical location where this condition manifests itself."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "bodySite")]
    pub body_site: Option<Vec<CodeableConcept>>,
    #[doc = " A category assigned to the condition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,
    #[doc = " The clinical status of the condition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "clinicalStatus")]
    pub clinical_status: Option<CodeableConcept>,
    #[doc = " Identification of the condition, problem or diagnosis."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The Encounter during which this Condition was created or to which the creation of this "]
    #[doc = " record is tightly associated."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,
    #[doc = " Supporting evidence / manifestations that are the basis of the Condition's verification "]
    #[doc = " status, such as evidence that confirmed or refuted the condition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub evidence: Option<Vec<ConditionEvidence>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Business identifiers assigned to this condition by the performer or other systems which "]
    #[doc = " remain constant as the resource is updated and propagates from server to server."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Additional information about the Condition. This is a general notes/comments entry  for "]
    #[doc = " description of the Condition, its diagnosis and prognosis."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " Estimated or actual date or date-time  the condition began, in the opinion of the "]
    #[doc = " clinician."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onsetAge")]
    pub onset_age: Option<Age>,
    #[doc = " Estimated or actual date or date-time  the condition began, in the opinion of the "]
    #[doc = " clinician."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onsetDateTime")]
    pub onset_date_time: Option<String>,
    #[doc = " Estimated or actual date or date-time  the condition began, in the opinion of the "]
    #[doc = " clinician."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onsetPeriod")]
    pub onset_period: Option<Period>,
    #[doc = " Estimated or actual date or date-time  the condition began, in the opinion of the "]
    #[doc = " clinician."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onsetRange")]
    pub onset_range: Option<Range>,
    #[doc = " Estimated or actual date or date-time  the condition began, in the opinion of the "]
    #[doc = " clinician."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onsetString")]
    pub onset_string: Option<String>,
    #[doc = " The recordedDate represents when this particular Condition record was created in the "]
    #[doc = " system, which is often a system-generated date."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "recordedDate")]
    pub recorded_date: Option<DateTime>,
    #[doc = " Individual who recorded the record and takes responsibility for its content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub recorder: Option<Reference>,
    #[doc = " This is a Condition resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " A subjective assessment of the severity of the condition as evaluated by the clinician."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub severity: Option<CodeableConcept>,
    #[doc = " Clinical stage or grade of a condition. May include formal severity assessments."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub stage: Option<Vec<ConditionStage>>,
    #[doc = " Indicates the patient or group who the condition record is associated with."]
    pub subject: Reference,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " The verification status to support the clinical status of the condition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "verificationStatus")]
    pub verification_status: Option<CodeableConcept>,
}
#[doc = " A clinical condition, problem, diagnosis, or other event, situation, issue, or clinical concept "]
#[doc = " that has risen to a level of concern."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Condition_Evidence")]
#[serde(deny_unknown_fields)]
pub struct ConditionEvidence {
    #[doc = " A manifestation or symptom that led to the recording of this condition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Vec<CodeableConcept>>,
    #[doc = " Links to other relevant information, including pathology reports."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub detail: Option<Vec<Reference>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " A clinical condition, problem, diagnosis, or other event, situation, issue, or clinical concept "]
#[doc = " that has risen to a level of concern."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Condition_Stage")]
#[serde(deny_unknown_fields)]
pub struct ConditionStage {
    #[doc = " Reference to a formal record of the evidence on which the staging assessment is based."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub assessment: Option<Vec<Reference>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A simple summary of the stage such as \"Stage 3\". The determination of the stage is "]
    #[doc = " disease-specific."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub summary: Option<CodeableConcept>,
    #[doc = " The kind of staging, such as pathological or clinical staging."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " A record of a healthcare consumer’s  choices, which permits or denies identified recipient(s) "]
#[doc = " or recipient role(s) to perform one or more actions within a given policy context, for specific "]
#[doc = " purposes and periods of time."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Consent {
    #[doc = " Extensions for dateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_dateTime")]
    pub _date_time: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " A classification of the type of consents found in the statement. This element supports "]
    #[doc = " indexing and retrieval of consent statements."]
    pub category: Vec<CodeableConcept>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " When this  Consent was issued / created / indexed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dateTime")]
    pub date_time: Option<DateTime>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Unique identifier for this copy of the Consent Statement."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The organization that manages the consent, and the framework within which it is executed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub organization: Option<Vec<Reference>>,
    #[doc = " The patient/healthcare consumer to whom this consent applies."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub patient: Option<Reference>,
    #[doc = " Either the Grantor, which is the entity responsible for granting the rights listed in a "]
    #[doc = " Consent Directive or the Grantee, which is the entity responsible for complying with the "]
    #[doc = " Consent Directive, including any obligations or limitations on authorizations and "]
    #[doc = " enforcement of prohibitions."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub performer: Option<Vec<Reference>>,
    #[doc = " The references to the policies that are included in this consent scope. Policies may be "]
    #[doc = " organizational, but are often defined jurisdictionally, or in law."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub policy: Option<Vec<ConsentPolicy>>,
    #[doc = " A reference to the specific base computable regulation or policy."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "policyRule")]
    pub policy_rule: Option<CodeableConcept>,
    #[doc = " An exception to the base policy of this consent. An exception can be an addition or removal "]
    #[doc = " of access permissions."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub provision: Option<ConsentProvision>,
    #[doc = " This is a Consent resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " A selector of the type of consent being presented: ADR, Privacy, Treatment, Research.  This "]
    #[doc = " list is now extensible."]
    pub scope: CodeableConcept,
    #[doc = " The source on which this consent statement is based. The source might be a scanned original "]
    #[doc = " paper form, or a reference to a consent that links back to such a source, a reference to a "]
    #[doc = " document repository (e.g. XDS) that stores the original consent document."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "sourceAttachment")]
    pub source_attachment: Option<Attachment>,
    #[doc = " The source on which this consent statement is based. The source might be a scanned original "]
    #[doc = " paper form, or a reference to a consent that links back to such a source, a reference to a "]
    #[doc = " document repository (e.g. XDS) that stores the original consent document."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "sourceReference")]
    pub source_reference: Option<Reference>,
    #[doc = " Indicates the current state of this consent."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " Whether a treatment instruction (e.g. artificial respiration yes or no) was verified with "]
    #[doc = " the patient, his/her family or another authorized person."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub verification: Option<Vec<ConsentVerification>>,
}
#[doc = " A record of a healthcare consumer’s  choices, which permits or denies identified recipient(s) "]
#[doc = " or recipient role(s) to perform one or more actions within a given policy context, for specific "]
#[doc = " purposes and periods of time."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Consent_Actor")]
#[serde(deny_unknown_fields)]
pub struct ConsentActor {
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The resource that identifies the actor. To identify actors by type, use group to identify a "]
    #[doc = " set of actors by some property they share (e.g. 'admitting officers')."]
    pub reference: Reference,
    #[doc = " How the individual is involved in the resources content that is described in the exception."]
    pub role: CodeableConcept,
}
#[doc = " A record of a healthcare consumer’s  choices, which permits or denies identified recipient(s) "]
#[doc = " or recipient role(s) to perform one or more actions within a given policy context, for specific "]
#[doc = " purposes and periods of time."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Consent_Data")]
#[serde(deny_unknown_fields)]
pub struct ConsentData {
    #[doc = " Extensions for meaning"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _meaning: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " How the resource reference is interpreted when testing consent restrictions."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meaning: Option<Code>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A reference to a specific resource that defines which resources are covered by this "]
    #[doc = " consent."]
    pub reference: Reference,
}
#[doc = " A record of a healthcare consumer’s  choices, which permits or denies identified recipient(s) "]
#[doc = " or recipient role(s) to perform one or more actions within a given policy context, for specific "]
#[doc = " purposes and periods of time."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Consent_Policy")]
#[serde(deny_unknown_fields)]
pub struct ConsentPolicy {
    #[doc = " Extensions for authority"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _authority: Option<Element>,
    #[doc = " Extensions for uri"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _uri: Option<Element>,
    #[doc = " Entity or Organization having regulatory jurisdiction or accountability for  enforcing "]
    #[doc = " policies pertaining to Consent Directives."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub authority: Option<Uri>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The references to the policies that are included in this consent scope. Policies may be "]
    #[doc = " organizational, but are often defined jurisdictionally, or in law."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub uri: Option<Uri>,
}
#[doc = " A record of a healthcare consumer’s  choices, which permits or denies identified recipient(s) "]
#[doc = " or recipient role(s) to perform one or more actions within a given policy context, for specific "]
#[doc = " purposes and periods of time."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Consent_Provision")]
#[serde(deny_unknown_fields)]
pub struct ConsentProvision {
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " Actions controlled by this Rule."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub action: Option<Vec<CodeableConcept>>,
    #[doc = " Who or what is controlled by this rule. Use group to identify a set of actors by some "]
    #[doc = " property they share (e.g. 'admitting officers')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub actor: Option<Vec<ConsentActor>>,
    #[doc = " The class of information covered by this rule. The type can be a FHIR resource type, a "]
    #[doc = " profile on a type, or a CDA document, or some other type that indicates what sort of "]
    #[doc = " information the consent relates to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub class: Option<Vec<Coding>>,
    #[doc = " If this code is found in an instance, then the rule applies."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Vec<CodeableConcept>>,
    #[doc = " The resources controlled by this rule if specific resources are referenced."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub data: Option<Vec<ConsentData>>,
    #[doc = " Clinical or Operational Relevant period of time that bounds the data controlled by this "]
    #[doc = " rule."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dataPeriod")]
    pub data_period: Option<Period>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The timeframe in this rule is valid."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
    #[doc = " Rules which provide exceptions to the base rule or subrules."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub provision: Option<Vec<ConsentProvision>>,
    #[doc = " The context of the activities a user is taking - why the user is accessing the data - that "]
    #[doc = " are controlled by this rule."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Vec<Coding>>,
    #[doc = " A security label, comprised of 0..* security label fields (Privacy tags), which define "]
    #[doc = " which resources are controlled by this exception."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "securityLabel")]
    pub security_label: Option<Vec<Coding>>,
    #[doc = " Action  to take - permit or deny - when the rule conditions are met.  Not permitted in root "]
    #[doc = " rule, required in all nested rules."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}
#[doc = " A record of a healthcare consumer’s  choices, which permits or denies identified recipient(s) "]
#[doc = " or recipient role(s) to perform one or more actions within a given policy context, for specific "]
#[doc = " purposes and periods of time."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Consent_Verification")]
#[serde(deny_unknown_fields)]
pub struct ConsentVerification {
    #[doc = " Extensions for verificationDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_verificationDate")]
    pub _verification_date: Option<Element>,
    #[doc = " Extensions for verified"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _verified: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Date verification was collected."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "verificationDate")]
    pub verification_date: Option<DateTime>,
    #[doc = " Has the instruction been verified."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub verified: Option<Boolean>,
    #[doc = " Who verified the instruction (Patient, Relative or other Authorized Person)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "verifiedWith")]
    pub verified_with: Option<Reference>,
}
#[doc = " Specifies contact information for a person or organization."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ContactDetail {
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The name of an individual to contact."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " The contact details for the individual (if a name was provided) or the organization."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub telecom: Option<Vec<ContactPoint>>,
}
#[doc = " Details for all kinds of technology mediated contact points for a person or organization, "]
#[doc = " including telephone, email, etc."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ContactPoint {
    #[doc = " Extensions for rank"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _rank: Option<Element>,
    #[doc = " Extensions for system"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _system: Option<Element>,
    #[doc = " Extensions for use"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _use: Option<Element>,
    #[doc = " Extensions for value"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _value: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Time period when the contact point was/is in use."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
    #[doc = " Specifies a preferred order in which to use a set of contacts. ContactPoints with lower "]
    #[doc = " rank values are more preferred than those with higher rank values."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub rank: Option<PositiveInt>,
    #[doc = " Telecommunications form for contact point - what communications system is required to make "]
    #[doc = " use of the contact."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub system: Option<serde_json::Value>,
    #[doc = " Identifies the purpose for the contact point."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "use")]
    pub use_: Option<serde_json::Value>,
    #[doc = " The actual contact point details, in a form that is meaningful to the designated "]
    #[doc = " communication system (i.e. phone number or email address)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[doc = " Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or "]
#[doc = " agreement."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Contract {
    #[doc = " Extensions for alias"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _alias: Option<Vec<Element>>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for instantiatesUri"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_instantiatesUri")]
    pub _instantiates_uri: Option<Element>,
    #[doc = " Extensions for issued"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _issued: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for subtitle"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _subtitle: Option<Element>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " Alternative representation of the title for this Contract definition, derivative, or "]
    #[doc = " instance in any legal state., e.g., a domain specific contract number related to "]
    #[doc = " legislation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub alias: Option<Vec<String>>,
    #[doc = " Relevant time or time-period when this Contract is applicable."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub applies: Option<Period>,
    #[doc = " The individual or organization that authored the Contract definition, derivative, or "]
    #[doc = " instance in any legal state."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Reference>,
    #[doc = " A formally or informally recognized grouping of people, principals, organizations, or "]
    #[doc = " jurisdictions formed for the purpose of achieving some form of collective action such as "]
    #[doc = " the promulgation, administration and enforcement of contracts and policies."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub authority: Option<Vec<Reference>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " Precusory content developed with a focus and intent of supporting the formation a Contract "]
    #[doc = " instance, which may be associated with and transformable into a Contract."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contentDefinition")]
    pub content_definition: Option<ContractContentDefinition>,
    #[doc = " The minimal content derived from the basal information source at a specific stage in its "]
    #[doc = " lifecycle."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contentDerivative")]
    pub content_derivative: Option<CodeableConcept>,
    #[doc = " Recognized governance framework or system operating with a circumscribed scope in "]
    #[doc = " accordance with specified principles, policies, processes or procedures for managing "]
    #[doc = " rights, actions, or behaviors of parties or principals relative to resources."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub domain: Option<Vec<Reference>>,
    #[doc = " Event resulting in discontinuation or termination of this Contract instance by one or more "]
    #[doc = " parties to the contract."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "expirationType")]
    pub expiration_type: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The \"patient friendly language\" versionof the Contract in whole or in parts. \"Patient "]
    #[doc = " friendly language\" means the representation of the Contract and Contract Provisions in a "]
    #[doc = " manner that is readily accessible and understandable by a layperson in accordance with best "]
    #[doc = " practices for communication styles that ensure that those agreeing to or signing the "]
    #[doc = " Contract understand the roles, actions, obligations, responsibilities, and implication of "]
    #[doc = " the agreement."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub friendly: Option<Vec<ContractFriendly>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Unique identifier for this Contract or a derivative that references a Source Contract."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The URL pointing to a FHIR-defined Contract Definition that is adhered to in whole or part "]
    #[doc = " by this Contract."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesCanonical")]
    pub instantiates_canonical: Option<Reference>,
    #[doc = " The URL pointing to an externally maintained definition that is adhered to in whole or in "]
    #[doc = " part by this Contract."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesUri")]
    pub instantiates_uri: Option<Uri>,
    #[doc = " When this  Contract was issued."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub issued: Option<DateTime>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " List of Legal expressions or representations of this Contract."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub legal: Option<Vec<ContractLegal>>,
    #[doc = " Legal states of the formation of a legal instrument, which is a formally executed written "]
    #[doc = " document that can be formally attributed to its author, records and formally expresses a "]
    #[doc = " legally enforceable act, process, or contractual duty, obligation, or right, and therefore "]
    #[doc = " evidences that act, process, or agreement."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "legalState")]
    pub legal_state: Option<CodeableConcept>,
    #[doc = " Legally binding Contract: This is the signed and legally recognized representation of the "]
    #[doc = " Contract, which is considered the \"source of truth\" and which would be the basis for legal "]
    #[doc = " action related to enforcement of this Contract."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "legallyBindingAttachment")]
    pub legally_binding_attachment: Option<Attachment>,
    #[doc = " Legally binding Contract: This is the signed and legally recognized representation of the "]
    #[doc = " Contract, which is considered the \"source of truth\" and which would be the basis for legal "]
    #[doc = " action related to enforcement of this Contract."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "legallyBindingReference")]
    pub legally_binding_reference: Option<Reference>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A natural language name identifying this Contract definition, derivative, or instance in "]
    #[doc = " any legal state. Provides additional information about its content. This name should be "]
    #[doc = " usable as an identifier for the module by machine processing applications such as code "]
    #[doc = " generation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " Links to Provenance records for past versions of this Contract definition, derivative, or "]
    #[doc = " instance, which identify key state transitions or updates that are likely to be relevant to "]
    #[doc = " a user looking at the current version of the Contract.  The Provence.entity indicates the "]
    #[doc = " target that was changed in the update. "]
    #[doc = " http://build.fhir.org/provenance-definitions.html#Provenance.entity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relevantHistory")]
    pub relevant_history: Option<Vec<Reference>>,
    #[doc = " This is a Contract resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " List of Computable Policy Rule Language Representations of this Contract."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub rule: Option<Vec<ContractRule>>,
    #[doc = " A selector of legal concerns for this Contract definition, derivative, or instance in any "]
    #[doc = " legal state."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub scope: Option<CodeableConcept>,
    #[doc = " Parties with legal standing in the Contract, including the principal parties, the "]
    #[doc = " grantor(s) and grantee(s), which are any person or organization bound by the contract, and "]
    #[doc = " any ancillary parties, which facilitate the execution of the contract such as a notary or "]
    #[doc = " witness."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub signer: Option<Vec<ContractSigner>>,
    #[doc = " Sites in which the contract is complied with,  exercised, or in force."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub site: Option<Vec<Reference>>,
    #[doc = " The status of the resource instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " Sub-category for the Contract that distinguishes the kinds of systems that would be "]
    #[doc = " interested in the Contract within the context of the Contract's scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subType")]
    pub sub_type: Option<Vec<CodeableConcept>>,
    #[doc = " The target entity impacted by or of interest to parties to the agreement."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Vec<Reference>>,
    #[doc = " An explanatory or alternate user-friendly title for this Contract definition, derivative, "]
    #[doc = " or instance in any legal state.t giving additional information about its content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subtitle: Option<String>,
    #[doc = " Information that may be needed by/relevant to the performer in their execution of this term "]
    #[doc = " action."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportingInfo")]
    pub supporting_info: Option<Vec<Reference>>,
    #[doc = " One or more Contract Provisions, which may be related and conveyed as a group, and may "]
    #[doc = " contain nested groups."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub term: Option<Vec<ContractTerm>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " A short, descriptive, user-friendly title for this Contract definition, derivative, or "]
    #[doc = " instance in any legal state.t giving additional information about its content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[doc = " Narrows the range of legal concerns to focus on the achievement of specific contractual "]
    #[doc = " objectives."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "topicCodeableConcept")]
    pub topic_codeable_concept: Option<CodeableConcept>,
    #[doc = " Narrows the range of legal concerns to focus on the achievement of specific contractual "]
    #[doc = " objectives."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "topicReference")]
    pub topic_reference: Option<Reference>,
    #[doc = " A high-level category for the legal instrument, whether constructed as a Contract "]
    #[doc = " definition, derivative, or instance in any legal state.  Provides additional information "]
    #[doc = " about its content within the context of the Contract's scope to distinguish the kinds of "]
    #[doc = " systems that would be interested in the contract."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
    #[doc = " Canonical identifier for this contract, represented as a URI (globally unique)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
    #[doc = " An edition identifier used for business purposes to label business significant variants."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[doc = " Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or "]
#[doc = " agreement."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Contract_Action")]
#[serde(deny_unknown_fields)]
pub struct ContractAction {
    #[doc = " Extensions for contextLinkId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_contextLinkId")]
    pub _context_link_id: Option<Vec<Element>>,
    #[doc = " Extensions for doNotPerform"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_doNotPerform")]
    pub _do_not_perform: Option<Element>,
    #[doc = " Extensions for linkId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_linkId")]
    pub _link_id: Option<Vec<Element>>,
    #[doc = " Extensions for occurrenceDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_occurrenceDateTime")]
    pub _occurrence_date_time: Option<Element>,
    #[doc = " Extensions for performerLinkId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_performerLinkId")]
    pub _performer_link_id: Option<Vec<Element>>,
    #[doc = " Extensions for reason"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _reason: Option<Vec<Element>>,
    #[doc = " Extensions for reasonLinkId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_reasonLinkId")]
    pub _reason_link_id: Option<Vec<Element>>,
    #[doc = " Extensions for requesterLinkId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_requesterLinkId")]
    pub _requester_link_id: Option<Vec<Element>>,
    #[doc = " Extensions for securityLabelNumber"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_securityLabelNumber")]
    pub _security_label_number: Option<Vec<Element>>,
    #[doc = " Encounter or Episode with primary association to specified term activity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub context: Option<Reference>,
    #[doc = " Id [identifier??] of the clause or question text related to the requester of this action in "]
    #[doc = " the referenced form or QuestionnaireResponse."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contextLinkId")]
    pub context_link_id: Option<Vec<String>>,
    #[doc = " True if the term prohibits the  action."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "doNotPerform")]
    pub do_not_perform: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Reason or purpose for the action stipulated by this Contract Provision."]
    pub intent: CodeableConcept,
    #[doc = " Id [identifier??] of the clause or question text related to this action in the referenced "]
    #[doc = " form or QuestionnaireResponse."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "linkId")]
    pub link_id: Option<Vec<String>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Comments made about the term action made by the requester, performer, subject or other "]
    #[doc = " participants."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " When action happens."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrenceDateTime")]
    pub occurrence_date_time: Option<String>,
    #[doc = " When action happens."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrencePeriod")]
    pub occurrence_period: Option<Period>,
    #[doc = " When action happens."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrenceTiming")]
    pub occurrence_timing: Option<Timing>,
    #[doc = " Indicates who or what is being asked to perform (or not perform) the ction."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub performer: Option<Reference>,
    #[doc = " Id [identifier??] of the clause or question text related to the reason type or reference of "]
    #[doc = " this  action in the referenced form or QuestionnaireResponse."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "performerLinkId")]
    pub performer_link_id: Option<Vec<String>>,
    #[doc = " The type of role or competency of an individual desired or required to perform or not "]
    #[doc = " perform the action."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "performerRole")]
    pub performer_role: Option<CodeableConcept>,
    #[doc = " The type of individual that is desired or required to perform or not perform the action."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "performerType")]
    pub performer_type: Option<Vec<CodeableConcept>>,
    #[doc = " Describes why the action is to be performed or not performed in textual form."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reason: Option<Vec<String>>,
    #[doc = " Rationale for the action to be performed or not performed. Describes why the action is "]
    #[doc = " permitted or prohibited."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,
    #[doc = " Id [identifier??] of the clause or question text related to the reason type or reference of "]
    #[doc = " this  action in the referenced form or QuestionnaireResponse."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonLinkId")]
    pub reason_link_id: Option<Vec<String>>,
    #[doc = " Indicates another resource whose existence justifies permitting or not permitting this "]
    #[doc = " action."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,
    #[doc = " Who or what initiated the action and has responsibility for its activation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub requester: Option<Vec<Reference>>,
    #[doc = " Id [identifier??] of the clause or question text related to the requester of this action in "]
    #[doc = " the referenced form or QuestionnaireResponse."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "requesterLinkId")]
    pub requester_link_id: Option<Vec<String>>,
    #[doc = " Security labels that protects the action."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "securityLabelNumber")]
    pub security_label_number: Option<Vec<UnsignedInt>>,
    #[doc = " Current state of the term action."]
    pub status: CodeableConcept,
    #[doc = " Entity of the action."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Vec<ContractSubject>>,
    #[doc = " Activity or service obligation to be done or not done, performed or not performed, "]
    #[doc = " effectuated or not by this Contract term."]
    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}
#[doc = " Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or "]
#[doc = " agreement."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Contract_Answer")]
#[serde(deny_unknown_fields)]
pub struct ContractAnswer {
    #[doc = " Extensions for valueBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub _value_boolean: Option<Element>,
    #[doc = " Extensions for valueDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDate")]
    pub _value_date: Option<Element>,
    #[doc = " Extensions for valueDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDateTime")]
    pub _value_date_time: Option<Element>,
    #[doc = " Extensions for valueDecimal"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDecimal")]
    pub _value_decimal: Option<Element>,
    #[doc = " Extensions for valueInteger"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueInteger")]
    pub _value_integer: Option<Element>,
    #[doc = " Extensions for valueString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueString")]
    pub _value_string: Option<Element>,
    #[doc = " Extensions for valueTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueTime")]
    pub _value_time: Option<Element>,
    #[doc = " Extensions for valueUri"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUri")]
    pub _value_uri: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Response to an offer clause or question text,  which enables selection of values to be "]
    #[doc = " agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently "]
    #[doc = " duration, or whether biospecimen may be used for further research."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAttachment")]
    pub value_attachment: Option<Attachment>,
    #[doc = " Response to an offer clause or question text,  which enables selection of values to be "]
    #[doc = " agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently "]
    #[doc = " duration, or whether biospecimen may be used for further research."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,
    #[doc = " Response to an offer clause or question text,  which enables selection of values to be "]
    #[doc = " agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently "]
    #[doc = " duration, or whether biospecimen may be used for further research."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCoding")]
    pub value_coding: Option<Coding>,
    #[doc = " Response to an offer clause or question text,  which enables selection of values to be "]
    #[doc = " agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently "]
    #[doc = " duration, or whether biospecimen may be used for further research."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDate")]
    pub value_date: Option<String>,
    #[doc = " Response to an offer clause or question text,  which enables selection of values to be "]
    #[doc = " agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently "]
    #[doc = " duration, or whether biospecimen may be used for further research."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDateTime")]
    pub value_date_time: Option<String>,
    #[doc = " Response to an offer clause or question text,  which enables selection of values to be "]
    #[doc = " agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently "]
    #[doc = " duration, or whether biospecimen may be used for further research."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDecimal")]
    pub value_decimal: Option<f64>,
    #[doc = " Response to an offer clause or question text,  which enables selection of values to be "]
    #[doc = " agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently "]
    #[doc = " duration, or whether biospecimen may be used for further research."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueInteger")]
    pub value_integer: Option<f64>,
    #[doc = " Response to an offer clause or question text,  which enables selection of values to be "]
    #[doc = " agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently "]
    #[doc = " duration, or whether biospecimen may be used for further research."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,
    #[doc = " Response to an offer clause or question text,  which enables selection of values to be "]
    #[doc = " agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently "]
    #[doc = " duration, or whether biospecimen may be used for further research."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueReference")]
    pub value_reference: Option<Reference>,
    #[doc = " Response to an offer clause or question text,  which enables selection of values to be "]
    #[doc = " agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently "]
    #[doc = " duration, or whether biospecimen may be used for further research."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueString")]
    pub value_string: Option<String>,
    #[doc = " Response to an offer clause or question text,  which enables selection of values to be "]
    #[doc = " agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently "]
    #[doc = " duration, or whether biospecimen may be used for further research."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTime")]
    pub value_time: Option<String>,
    #[doc = " Response to an offer clause or question text,  which enables selection of values to be "]
    #[doc = " agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently "]
    #[doc = " duration, or whether biospecimen may be used for further research."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUri")]
    pub value_uri: Option<String>,
}
#[doc = " Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or "]
#[doc = " agreement."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Contract_Asset")]
#[serde(deny_unknown_fields)]
pub struct ContractAsset {
    #[doc = " Extensions for condition"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _condition: Option<Element>,
    #[doc = " Extensions for linkId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_linkId")]
    pub _link_id: Option<Vec<Element>>,
    #[doc = " Extensions for securityLabelNumber"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_securityLabelNumber")]
    pub _security_label_number: Option<Vec<Element>>,
    #[doc = " Extensions for text"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _text: Option<Element>,
    #[doc = " Response to assets."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub answer: Option<Vec<ContractAnswer>>,
    #[doc = " Description of the quality and completeness of the asset that imay be a factor in its "]
    #[doc = " valuation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub condition: Option<String>,
    #[doc = " Circumstance of the asset."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub context: Option<Vec<ContractContext>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Id [identifier??] of the clause or question text about the asset in the referenced form or "]
    #[doc = " QuestionnaireResponse."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "linkId")]
    pub link_id: Option<Vec<String>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Asset relevant contractual time period."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Vec<Period>>,
    #[doc = " Type of Asset availability for use or ownership."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "periodType")]
    pub period_type: Option<Vec<CodeableConcept>>,
    #[doc = " Specifies the applicability of the term to an asset resource instance, and instances it "]
    #[doc = " refers to orinstances that refer to it, and/or are owned by the offeree."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub relationship: Option<Coding>,
    #[doc = " Differentiates the kind of the asset ."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub scope: Option<CodeableConcept>,
    #[doc = " Security labels that protects the asset."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "securityLabelNumber")]
    pub security_label_number: Option<Vec<UnsignedInt>>,
    #[doc = " May be a subtype or part of an offered asset."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subtype: Option<Vec<CodeableConcept>>,
    #[doc = " Clause or question text (Prose Object) concerning the asset in a linked form, such as a "]
    #[doc = " QuestionnaireResponse used in the formation of the contract."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    #[doc = " Target entity type about which the term may be concerned."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Vec<CodeableConcept>>,
    #[doc = " Associated entities."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "typeReference")]
    pub type_reference: Option<Vec<Reference>>,
    #[doc = " Time period of asset use."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "usePeriod")]
    pub use_period: Option<Vec<Period>>,
    #[doc = " Contract Valued Item List."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valuedItem")]
    pub valued_item: Option<Vec<ContractValuedItem>>,
}
#[doc = " Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or "]
#[doc = " agreement."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Contract_ContentDefinition")]
#[serde(deny_unknown_fields)]
pub struct ContractContentDefinition {
    #[doc = " Extensions for copyright"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _copyright: Option<Element>,
    #[doc = " Extensions for publicationDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_publicationDate")]
    pub _publication_date: Option<Element>,
    #[doc = " Extensions for publicationStatus"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_publicationStatus")]
    pub _publication_status: Option<Element>,
    #[doc = " A copyright statement relating to Contract precursor content. Copyright statements are "]
    #[doc = " generally legal restrictions on the use and publishing of the Contract precursor content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The date (and optionally time) when the contract was published. The date must change when "]
    #[doc = " the business version changes and it must change if the status code changes. In addition, it "]
    #[doc = " should change when the substantive content of the contract changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "publicationDate")]
    pub publication_date: Option<DateTime>,
    #[doc = " amended | appended | cancelled | disputed | entered-in-error | executable | executed | "]
    #[doc = " negotiable | offered | policy | rejected | renewed | revoked | resolved | terminated."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "publicationStatus")]
    pub publication_status: Option<Code>,
    #[doc = " The  individual or organization that published the Contract precursor content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<Reference>,
    #[doc = " Detailed Precusory content type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subType")]
    pub sub_type: Option<CodeableConcept>,
    #[doc = " Precusory content structure and use, i.e., a boilerplate, template, application for a "]
    #[doc = " contract such as an insurance policy or benefits under a program, e.g., workers "]
    #[doc = " compensation."]
    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}
#[doc = " Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or "]
#[doc = " agreement."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Contract_Context")]
#[serde(deny_unknown_fields)]
pub struct ContractContext {
    #[doc = " Extensions for text"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _text: Option<Element>,
    #[doc = " Coded representation of the context generally or of the Referenced entity, such as the "]
    #[doc = " asset holder type or location."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Vec<CodeableConcept>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Asset context reference may include the creator, custodian, or owning Person or "]
    #[doc = " Organization (e.g., bank, repository),  location held, e.g., building,  jurisdiction."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reference: Option<Reference>,
    #[doc = " Context description."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}
#[doc = " Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or "]
#[doc = " agreement."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Contract_Friendly")]
#[serde(deny_unknown_fields)]
pub struct ContractFriendly {
    #[doc = " Human readable rendering of this Contract in a format and representation intended to "]
    #[doc = " enhance comprehension and ensure understandability."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contentAttachment")]
    pub content_attachment: Option<Attachment>,
    #[doc = " Human readable rendering of this Contract in a format and representation intended to "]
    #[doc = " enhance comprehension and ensure understandability."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contentReference")]
    pub content_reference: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or "]
#[doc = " agreement."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Contract_Legal")]
#[serde(deny_unknown_fields)]
pub struct ContractLegal {
    #[doc = " Contract legal text in human renderable form."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contentAttachment")]
    pub content_attachment: Option<Attachment>,
    #[doc = " Contract legal text in human renderable form."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contentReference")]
    pub content_reference: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or "]
#[doc = " agreement."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Contract_Offer")]
#[serde(deny_unknown_fields)]
pub struct ContractOffer {
    #[doc = " Extensions for linkId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_linkId")]
    pub _link_id: Option<Vec<Element>>,
    #[doc = " Extensions for securityLabelNumber"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_securityLabelNumber")]
    pub _security_label_number: Option<Vec<Element>>,
    #[doc = " Extensions for text"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _text: Option<Element>,
    #[doc = " Response to offer text."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub answer: Option<Vec<ContractAnswer>>,
    #[doc = " Type of choice made by accepting party with respect to an offer made by an offeror/ "]
    #[doc = " grantee."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub decision: Option<CodeableConcept>,
    #[doc = " How the decision about a Contract was conveyed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "decisionMode")]
    pub decision_mode: Option<Vec<CodeableConcept>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Unique identifier for this particular Contract Provision."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " The id of the clause or question text of the offer in the referenced "]
    #[doc = " questionnaire/response."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "linkId")]
    pub link_id: Option<Vec<String>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Offer Recipient."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub party: Option<Vec<ContractParty>>,
    #[doc = " Security labels that protects the offer."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "securityLabelNumber")]
    pub security_label_number: Option<Vec<UnsignedInt>>,
    #[doc = " Human readable form of this Contract Offer."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    #[doc = " The owner of an asset has the residual control rights over the asset: the right to decide "]
    #[doc = " all usages of the asset in any way not inconsistent with a prior contract, custom, or law "]
    #[doc = " (Hart, 1995, p. 30)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub topic: Option<Reference>,
    #[doc = " Type of Contract Provision such as specific requirements, purposes for actions, "]
    #[doc = " obligations, prohibitions, e.g. life time maximum benefit."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or "]
#[doc = " agreement."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Contract_Party")]
#[serde(deny_unknown_fields)]
pub struct ContractParty {
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Participant in the offer."]
    pub reference: Vec<Reference>,
    #[doc = " How the party participates in the offer."]
    pub role: CodeableConcept,
}
#[doc = " Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or "]
#[doc = " agreement."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Contract_Rule")]
#[serde(deny_unknown_fields)]
pub struct ContractRule {
    #[doc = " Computable Contract conveyed using a policy rule language (e.g. XACML, DKAL, SecPal)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contentAttachment")]
    pub content_attachment: Option<Attachment>,
    #[doc = " Computable Contract conveyed using a policy rule language (e.g. XACML, DKAL, SecPal)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contentReference")]
    pub content_reference: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or "]
#[doc = " agreement."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Contract_SecurityLabel")]
#[serde(deny_unknown_fields)]
pub struct ContractSecurityLabel {
    #[doc = " Extensions for number"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _number: Option<Vec<Element>>,
    #[doc = " Security label privacy tag that species the applicable privacy and security policies "]
    #[doc = " governing this term and/or term elements."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<Coding>>,
    #[doc = " Security label privacy tag that species the level of confidentiality protection required "]
    #[doc = " for this term and/or term elements."]
    pub classification: Coding,
    #[doc = " Security label privacy tag that species the manner in which term and/or term elements are "]
    #[doc = " to be protected."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub control: Option<Vec<Coding>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Number used to link this term or term element to the applicable Security Label."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub number: Option<Vec<UnsignedInt>>,
}
#[doc = " Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or "]
#[doc = " agreement."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Contract_Signer")]
#[serde(deny_unknown_fields)]
pub struct ContractSigner {
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Party which is a signator to this Contract."]
    pub party: Reference,
    #[doc = " Legally binding Contract DSIG signature contents in Base64."]
    pub signature: Vec<Signature>,
    #[doc = " Role of this Contract signer, e.g. notary, grantee."]
    #[serde(rename = "type")]
    pub type_: Coding,
}
#[doc = " Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or "]
#[doc = " agreement."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Contract_Subject")]
#[serde(deny_unknown_fields)]
pub struct ContractSubject {
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The entity the action is performed or not performed on or for."]
    pub reference: Vec<Reference>,
    #[doc = " Role type of agent assigned roles in this Contract."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub role: Option<CodeableConcept>,
}
#[doc = " Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or "]
#[doc = " agreement."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Contract_Term")]
#[serde(deny_unknown_fields)]
pub struct ContractTerm {
    #[doc = " Extensions for issued"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _issued: Option<Element>,
    #[doc = " Extensions for text"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _text: Option<Element>,
    #[doc = " An actor taking a role in an activity for which it can be assigned some degree of "]
    #[doc = " responsibility for the activity taking place."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub action: Option<Vec<ContractAction>>,
    #[doc = " Relevant time or time-period when this Contract Provision is applicable."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub applies: Option<Period>,
    #[doc = " Contract Term Asset List."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub asset: Option<Vec<ContractAsset>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Nested group of Contract Provisions."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub group: Option<Vec<ContractTerm>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Unique identifier for this particular Contract Provision."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,
    #[doc = " When this Contract Provision was issued."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub issued: Option<DateTime>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The matter of concern in the context of this provision of the agrement."]
    pub offer: ContractOffer,
    #[doc = " Security labels that protect the handling of information about the term and its elements, "]
    #[doc = " which may be specifically identified.."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "securityLabel")]
    pub security_label: Option<Vec<ContractSecurityLabel>>,
    #[doc = " A specialized legal clause or condition based on overarching contract type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subType")]
    pub sub_type: Option<CodeableConcept>,
    #[doc = " Statement of a provision in a policy or a contract."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    #[doc = " The entity that the term applies to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "topicCodeableConcept")]
    pub topic_codeable_concept: Option<CodeableConcept>,
    #[doc = " The entity that the term applies to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "topicReference")]
    pub topic_reference: Option<Reference>,
    #[doc = " A legal clause or condition contained within a contract that requires one or both parties "]
    #[doc = " to perform a particular requirement by some specified time or prevents one or both parties "]
    #[doc = " from performing a particular requirement by some specified time."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or "]
#[doc = " agreement."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Contract_ValuedItem")]
#[serde(deny_unknown_fields)]
pub struct ContractValuedItem {
    #[doc = " Extensions for effectiveTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_effectiveTime")]
    pub _effective_time: Option<Element>,
    #[doc = " Extensions for factor"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _factor: Option<Element>,
    #[doc = " Extensions for linkId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_linkId")]
    pub _link_id: Option<Vec<Element>>,
    #[doc = " Extensions for payment"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _payment: Option<Element>,
    #[doc = " Extensions for paymentDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_paymentDate")]
    pub _payment_date: Option<Element>,
    #[doc = " Extensions for points"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _points: Option<Element>,
    #[doc = " Extensions for securityLabelNumber"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_securityLabelNumber")]
    pub _security_label_number: Option<Vec<Element>>,
    #[doc = " Indicates the time during which this Contract ValuedItem information is effective."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectiveTime")]
    pub effective_time: Option<DateTime>,
    #[doc = " Specific type of Contract Valued Item that may be priced."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "entityCodeableConcept")]
    pub entity_codeable_concept: Option<CodeableConcept>,
    #[doc = " Specific type of Contract Valued Item that may be priced."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "entityReference")]
    pub entity_reference: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " A real number that represents a multiplier used in determining the overall value of the "]
    #[doc = " Contract Valued Item delivered. The concept of a Factor allows for a discount or surcharge "]
    #[doc = " multiplier to be applied to a monetary amount."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub factor: Option<Decimal>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Identifies a Contract Valued Item instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,
    #[doc = " Id  of the clause or question text related to the context of this valuedItem in the "]
    #[doc = " referenced form or QuestionnaireResponse."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "linkId")]
    pub link_id: Option<Vec<String>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Expresses the product of the Contract Valued Item unitQuantity and the unitPriceAmt. For "]
    #[doc = " example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points "]
    #[doc = " = net Amount. Quantity, factor and points are assumed to be 1 if not supplied."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub net: Option<Money>,
    #[doc = " Terms of valuation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub payment: Option<String>,
    #[doc = " When payment is due."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "paymentDate")]
    pub payment_date: Option<DateTime>,
    #[doc = " An amount that expresses the weighting (based on difficulty, cost and/or resource "]
    #[doc = " intensiveness) associated with the Contract Valued Item delivered. The concept of Points "]
    #[doc = " allows for assignment of point values for a Contract Valued Item, such that a monetary "]
    #[doc = " amount can be assigned to each point."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub points: Option<Decimal>,
    #[doc = " Specifies the units by which the Contract Valued Item is measured or counted, and "]
    #[doc = " quantifies the countable or measurable Contract Valued Item instances."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,
    #[doc = " Who will receive payment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub recipient: Option<Reference>,
    #[doc = " Who will make payment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub responsible: Option<Reference>,
    #[doc = " A set of security labels that define which terms are controlled by this condition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "securityLabelNumber")]
    pub security_label_number: Option<Vec<UnsignedInt>>,
    #[doc = " A Contract Valued Item unit valuation measure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "unitPrice")]
    pub unit_price: Option<Money>,
}
#[doc = " A contributor to the content of a knowledge asset, including authors, editors, reviewers, and "]
#[doc = " endorsers."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Contributor {
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " Contact details to assist a user in finding and communicating with the contributor."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The name of the individual or organization responsible for the contribution."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " The type of contributor."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<serde_json::Value>,
}
#[doc = " A measured amount (or an amount that can potentially be measured). Note that measured amounts "]
#[doc = " include amounts that are not precisely quantified, including amounts involving arbitrary units "]
#[doc = " and floating currencies."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Count {
    #[doc = " Extensions for code"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _code: Option<Element>,
    #[doc = " Extensions for comparator"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _comparator: Option<Element>,
    #[doc = " Extensions for system"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _system: Option<Element>,
    #[doc = " Extensions for unit"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _unit: Option<Element>,
    #[doc = " Extensions for value"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _value: Option<Element>,
    #[doc = " A computer processable form of the unit in some unit representation system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,
    #[doc = " How the value should be understood and represented - whether the actual value is greater or "]
    #[doc = " less than the stated value due to measurement issues; e.g. if the comparator is \"<\" , then "]
    #[doc = " the real value is < stated value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comparator: Option<serde_json::Value>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The identification of the system that provides the coded form of the unit."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub system: Option<Uri>,
    #[doc = " A human-readable form of the unit."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
    #[doc = " The value of the measured amount. The value includes an implicit precision in the "]
    #[doc = " presentation of the value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Decimal>,
}
#[doc = " Financial instrument which may be used to reimburse or pay for health care products and "]
#[doc = " services. Includes both insurance and self-payment."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Coverage {
    #[doc = " Extensions for dependent"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _dependent: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for network"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _network: Option<Element>,
    #[doc = " Extensions for order"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _order: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for subrogation"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _subrogation: Option<Element>,
    #[doc = " Extensions for subscriberId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_subscriberId")]
    pub _subscriber_id: Option<Element>,
    #[doc = " The party who benefits from the insurance coverage; the patient when products and/or "]
    #[doc = " services are provided."]
    pub beneficiary: Reference,
    #[doc = " A suite of underwriter specific classifiers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub class: Option<Vec<CoverageClass>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The policy(s) which constitute this insurance coverage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contract: Option<Vec<Reference>>,
    #[doc = " A suite of codes indicating the cost category and associated amount which have been "]
    #[doc = " detailed in the policy and may have been  included on the health card."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "costToBeneficiary")]
    pub cost_to_beneficiary: Option<Vec<CoverageCostToBeneficiary>>,
    #[doc = " A unique identifier for a dependent under the coverage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub dependent: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A unique identifier assigned to this coverage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The insurer-specific identifier for the insurer-defined network of providers to which the "]
    #[doc = " beneficiary may seek treatment which will be covered at the 'in-network' rate, otherwise "]
    #[doc = " 'out of network' terms and conditions apply."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub network: Option<String>,
    #[doc = " The order of applicability of this coverage relative to other coverages which are currently "]
    #[doc = " in force. Note, there may be gaps in the numbering and this does not imply primary, "]
    #[doc = " secondary etc. as the specific positioning of coverages depends upon the episode of care."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub order: Option<PositiveInt>,
    #[doc = " The program or plan underwriter or payor including both insurance and non-insurance "]
    #[doc = " agreements, such as patient-pay agreements."]
    pub payor: Vec<Reference>,
    #[doc = " Time period during which the coverage is in force. A missing start date indicates the start "]
    #[doc = " date isn't known, a missing end date means the coverage is continuing to be in force."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
    #[doc = " The party who 'owns' the insurance policy."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "policyHolder")]
    pub policy_holder: Option<Reference>,
    #[doc = " The relationship of beneficiary (patient) to the subscriber."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub relationship: Option<CodeableConcept>,
    #[doc = " This is a Coverage resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The status of the resource instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " When 'subrogation=true' this insurance instance has been included not for adjudication but "]
    #[doc = " to provide insurers with the details to recover costs."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subrogation: Option<Boolean>,
    #[doc = " The party who has signed-up for or 'owns' the contractual relationship to the policy or to "]
    #[doc = " whom the benefit of the policy for services rendered to them or their family is due."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subscriber: Option<Reference>,
    #[doc = " The insurer assigned ID for the Subscriber."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subscriberId")]
    pub subscriber_id: Option<String>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " The type of coverage: social program, medical plan, accident coverage (workers "]
    #[doc = " compensation, auto), group health or payment by an individual or organization."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " The CoverageEligibilityRequest provides patient and insurance coverage information to an "]
#[doc = " insurer for them to respond, in the form of an CoverageEligibilityResponse, with information "]
#[doc = " regarding whether the stated coverage is valid and in-force and optionally to provide the "]
#[doc = " insurance details of the policy."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct CoverageEligibilityRequest {
    #[doc = " Extensions for created"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _created: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for purpose"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _purpose: Option<Vec<Element>>,
    #[doc = " Extensions for servicedDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_servicedDate")]
    pub _serviced_date: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The date when this resource was created."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub created: Option<DateTime>,
    #[doc = " Person who created the request."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub enterer: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Facility where the services are intended to be provided."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub facility: Option<Reference>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A unique identifier assigned to this coverage eligiblity request."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " Financial instruments for reimbursement for the health care products and services."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub insurance: Option<Vec<CoverageEligibilityRequestInsurance>>,
    #[doc = " The Insurer who issued the coverage in question and is the recipient of the request."]
    pub insurer: Reference,
    #[doc = " Service categories or billable services for which benefit details and/or an authorization "]
    #[doc = " prior to service delivery may be required by the payor."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub item: Option<Vec<CoverageEligibilityRequestItem>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The party who is the beneficiary of the supplied coverage and for whom eligibility is "]
    #[doc = " sought."]
    pub patient: Reference,
    #[doc = " When the requestor expects the processor to complete processing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub priority: Option<CodeableConcept>,
    #[doc = " The provider which is responsible for the request."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub provider: Option<Reference>,
    #[doc = " Code to specify whether requesting: prior authorization requirements for some service "]
    #[doc = " categories or billing codes; benefits for coverages specified or discovered; discovery and "]
    #[doc = " return of coverages for the patient; and/or validation that the specified coverage is "]
    #[doc = " in-force at the date/period specified or 'now' if not specified."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Vec<Code>>,
    #[doc = " This is a CoverageEligibilityRequest resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The date or dates when the enclosed suite of services were performed or completed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "servicedDate")]
    pub serviced_date: Option<String>,
    #[doc = " The date or dates when the enclosed suite of services were performed or completed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "servicedPeriod")]
    pub serviced_period: Option<Period>,
    #[doc = " The status of the resource instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " Additional information codes regarding exceptions, special considerations, the condition, "]
    #[doc = " situation, prior or concurrent issues."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportingInfo")]
    pub supporting_info: Option<Vec<CoverageEligibilityRequestSupportingInfo>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " The CoverageEligibilityRequest provides patient and insurance coverage information to an "]
#[doc = " insurer for them to respond, in the form of an CoverageEligibilityResponse, with information "]
#[doc = " regarding whether the stated coverage is valid and in-force and optionally to provide the "]
#[doc = " insurance details of the policy."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CoverageEligibilityRequest_Diagnosis")]
#[serde(deny_unknown_fields)]
pub struct CoverageEligibilityRequestDiagnosis {
    #[doc = " The nature of illness or problem in a coded form or as a reference to an external defined "]
    #[doc = " Condition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "diagnosisCodeableConcept")]
    pub diagnosis_codeable_concept: Option<CodeableConcept>,
    #[doc = " The nature of illness or problem in a coded form or as a reference to an external defined "]
    #[doc = " Condition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "diagnosisReference")]
    pub diagnosis_reference: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " The CoverageEligibilityRequest provides patient and insurance coverage information to an "]
#[doc = " insurer for them to respond, in the form of an CoverageEligibilityResponse, with information "]
#[doc = " regarding whether the stated coverage is valid and in-force and optionally to provide the "]
#[doc = " insurance details of the policy."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "CoverageEligibilityRequest_Insurance")]
#[serde(deny_unknown_fields)]
pub struct CoverageEligibilityRequestInsurance {
    #[doc = " Extensions for businessArrangement"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_businessArrangement")]
    pub _business_arrangement: Option<Element>,
    #[doc = " Extensions for focal"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _focal: Option<Element>,
    #[doc = " A business agreement number established between the provider and the insurer for special "]
    #[doc = " business processing purposes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "businessArrangement")]
    pub business_arrangement: Option<String>,
    #[doc = " Reference to the insurance card level information contained in the Coverage resource. The "]
    #[doc = " coverage issuing insurer will use these details to locate the patient's actual coverage "]
    #[doc = " within the insurer's information system."]
    pub coverage: Reference,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " A flag to indicate that this Coverage is to be used for evaluation of this request when set "]
    #[doc = " to true."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub focal: Option<Boolean>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " The CoverageEligibilityRequest provides patient and insurance coverage information to an "]
#[doc = " insurer for them to respond, in the form of an CoverageEligibilityResponse, with information "]
#[doc = " regarding whether the stated coverage is valid and in-force and optionally to provide the "]
#[doc = " insurance details of the policy."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CoverageEligibilityRequest_Item")]
#[serde(deny_unknown_fields)]
pub struct CoverageEligibilityRequestItem {
    #[doc = " Extensions for supportingInfoSequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_supportingInfoSequence")]
    pub _supporting_info_sequence: Option<Vec<Element>>,
    #[doc = " Code to identify the general type of benefits under which products and services are "]
    #[doc = " provided."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<CodeableConcept>,
    #[doc = " The plan/proposal/order describing the proposed service in detail."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub detail: Option<Vec<Reference>>,
    #[doc = " Patient diagnosis for which care is sought."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub diagnosis: Option<Vec<CoverageEligibilityRequestDiagnosis>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Facility where the services will be provided."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub facility: Option<Reference>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Item typification or modifiers codes to convey additional context for the product or "]
    #[doc = " service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub modifier: Option<Vec<CodeableConcept>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " This contains the product, service, drug or other billing code for the item."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "productOrService")]
    pub product_or_service: Option<CodeableConcept>,
    #[doc = " The practitioner who is responsible for the product or service to be rendered to the "]
    #[doc = " patient."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub provider: Option<Reference>,
    #[doc = " The number of repetitions of a service or product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,
    #[doc = " Exceptions, special conditions and supporting information applicable for this service or "]
    #[doc = " product line."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportingInfoSequence")]
    pub supporting_info_sequence: Option<Vec<PositiveInt>>,
    #[doc = " The amount charged to the patient by the provider for a single unit."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "unitPrice")]
    pub unit_price: Option<Money>,
}
#[doc = " The CoverageEligibilityRequest provides patient and insurance coverage information to an "]
#[doc = " insurer for them to respond, in the form of an CoverageEligibilityResponse, with information "]
#[doc = " regarding whether the stated coverage is valid and in-force and optionally to provide the "]
#[doc = " insurance details of the policy."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "CoverageEligibilityRequest_SupportingInfo")]
#[serde(deny_unknown_fields)]
pub struct CoverageEligibilityRequestSupportingInfo {
    #[doc = " Extensions for appliesToAll"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_appliesToAll")]
    pub _applies_to_all: Option<Element>,
    #[doc = " Extensions for sequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _sequence: Option<Element>,
    #[doc = " The supporting materials are applicable for all detail items, product/servce categories and "]
    #[doc = " specific billing codes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "appliesToAll")]
    pub applies_to_all: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Additional data or information such as resources, documents, images etc. including "]
    #[doc = " references to the data or the actual inclusion of the data."]
    pub information: Reference,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A number to uniquely identify supporting information entries."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sequence: Option<PositiveInt>,
}
#[doc = " This resource provides eligibility and plan details from the processing of an "]
#[doc = " CoverageEligibilityRequest resource."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct CoverageEligibilityResponse {
    #[doc = " Extensions for created"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _created: Option<Element>,
    #[doc = " Extensions for disposition"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _disposition: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for outcome"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _outcome: Option<Element>,
    #[doc = " Extensions for preAuthRef"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_preAuthRef")]
    pub _pre_auth_ref: Option<Element>,
    #[doc = " Extensions for purpose"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _purpose: Option<Vec<Element>>,
    #[doc = " Extensions for servicedDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_servicedDate")]
    pub _serviced_date: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The date this resource was created."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub created: Option<DateTime>,
    #[doc = " A human readable description of the status of the adjudication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub disposition: Option<String>,
    #[doc = " Errors encountered during the processing of the request."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<Vec<CoverageEligibilityResponseError>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " A code for the form to be used for printing the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub form: Option<CodeableConcept>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A unique identifier assigned to this coverage eligiblity request."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " Financial instruments for reimbursement for the health care products and services."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub insurance: Option<Vec<CoverageEligibilityResponseInsurance>>,
    #[doc = " The Insurer who issued the coverage in question and is the author of the response."]
    pub insurer: Reference,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The outcome of the request processing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub outcome: Option<Code>,
    #[doc = " The party who is the beneficiary of the supplied coverage and for whom eligibility is "]
    #[doc = " sought."]
    pub patient: Reference,
    #[doc = " A reference from the Insurer to which these services pertain to be used on further "]
    #[doc = " communication and as proof that the request occurred."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "preAuthRef")]
    pub pre_auth_ref: Option<String>,
    #[doc = " Code to specify whether requesting: prior authorization requirements for some service "]
    #[doc = " categories or billing codes; benefits for coverages specified or discovered; discovery and "]
    #[doc = " return of coverages for the patient; and/or validation that the specified coverage is "]
    #[doc = " in-force at the date/period specified or 'now' if not specified."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Vec<Code>>,
    #[doc = " Reference to the original request resource."]
    pub request: Reference,
    #[doc = " The provider which is responsible for the request."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub requestor: Option<Reference>,
    #[doc = " This is a CoverageEligibilityResponse resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The date or dates when the enclosed suite of services were performed or completed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "servicedDate")]
    pub serviced_date: Option<String>,
    #[doc = " The date or dates when the enclosed suite of services were performed or completed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "servicedPeriod")]
    pub serviced_period: Option<Period>,
    #[doc = " The status of the resource instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " This resource provides eligibility and plan details from the processing of an "]
#[doc = " CoverageEligibilityRequest resource."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "CoverageEligibilityResponse_Benefit")]
#[serde(deny_unknown_fields)]
pub struct CoverageEligibilityResponseBenefit {
    #[doc = " Extensions for allowedString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_allowedString")]
    pub _allowed_string: Option<Element>,
    #[doc = " Extensions for allowedUnsignedInt"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_allowedUnsignedInt")]
    pub _allowed_unsigned_int: Option<Element>,
    #[doc = " Extensions for usedString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_usedString")]
    pub _used_string: Option<Element>,
    #[doc = " Extensions for usedUnsignedInt"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_usedUnsignedInt")]
    pub _used_unsigned_int: Option<Element>,
    #[doc = " The quantity of the benefit which is permitted under the coverage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "allowedMoney")]
    pub allowed_money: Option<Money>,
    #[doc = " The quantity of the benefit which is permitted under the coverage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "allowedString")]
    pub allowed_string: Option<String>,
    #[doc = " The quantity of the benefit which is permitted under the coverage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "allowedUnsignedInt")]
    pub allowed_unsigned_int: Option<f64>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Classification of benefit being provided."]
    #[serde(rename = "type")]
    pub type_: CodeableConcept,
    #[doc = " The quantity of the benefit which have been consumed to date."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "usedMoney")]
    pub used_money: Option<Money>,
    #[doc = " The quantity of the benefit which have been consumed to date."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "usedString")]
    pub used_string: Option<String>,
    #[doc = " The quantity of the benefit which have been consumed to date."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "usedUnsignedInt")]
    pub used_unsigned_int: Option<f64>,
}
#[doc = " This resource provides eligibility and plan details from the processing of an "]
#[doc = " CoverageEligibilityRequest resource."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "CoverageEligibilityResponse_Error")]
#[serde(deny_unknown_fields)]
pub struct CoverageEligibilityResponseError {
    #[doc = " An error code,from a specified code system, which details why the eligibility check could "]
    #[doc = " not be performed."]
    pub code: CodeableConcept,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " This resource provides eligibility and plan details from the processing of an "]
#[doc = " CoverageEligibilityRequest resource."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "CoverageEligibilityResponse_Insurance")]
#[serde(deny_unknown_fields)]
pub struct CoverageEligibilityResponseInsurance {
    #[doc = " Extensions for inforce"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _inforce: Option<Element>,
    #[doc = " The term of the benefits documented in this response."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "benefitPeriod")]
    pub benefit_period: Option<Period>,
    #[doc = " Reference to the insurance card level information contained in the Coverage resource. The "]
    #[doc = " coverage issuing insurer will use these details to locate the patient's actual coverage "]
    #[doc = " within the insurer's information system."]
    pub coverage: Reference,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Flag indicating if the coverage provided is inforce currently if no service date(s) "]
    #[doc = " specified or for the whole duration of the service dates."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub inforce: Option<Boolean>,
    #[doc = " Benefits and optionally current balances, and authorization details by category or service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub item: Option<Vec<CoverageEligibilityResponseItem>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " This resource provides eligibility and plan details from the processing of an "]
#[doc = " CoverageEligibilityRequest resource."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CoverageEligibilityResponse_Item")]
#[serde(deny_unknown_fields)]
pub struct CoverageEligibilityResponseItem {
    #[doc = " Extensions for authorizationRequired"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_authorizationRequired")]
    pub _authorization_required: Option<Element>,
    #[doc = " Extensions for authorizationUrl"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_authorizationUrl")]
    pub _authorization_url: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for excluded"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _excluded: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " A boolean flag indicating whether a preauthorization is required prior to actual service "]
    #[doc = " delivery."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "authorizationRequired")]
    pub authorization_required: Option<Boolean>,
    #[doc = " Codes or comments regarding information or actions associated with the preauthorization."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "authorizationSupporting")]
    pub authorization_supporting: Option<Vec<CodeableConcept>>,
    #[doc = " A web location for obtaining requirements or descriptive information regarding the "]
    #[doc = " preauthorization."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "authorizationUrl")]
    pub authorization_url: Option<Uri>,
    #[doc = " Benefits used to date."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub benefit: Option<Vec<CoverageEligibilityResponseBenefit>>,
    #[doc = " Code to identify the general type of benefits under which products and services are "]
    #[doc = " provided."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<CodeableConcept>,
    #[doc = " A richer description of the benefit or services covered."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " True if the indicated class of service is excluded from the plan, missing or False "]
    #[doc = " indicates the product or service is included in the coverage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub excluded: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Item typification or modifiers codes to convey additional context for the product or "]
    #[doc = " service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub modifier: Option<Vec<CodeableConcept>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A short name or tag for the benefit."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " Is a flag to indicate whether the benefits refer to in-network providers or out-of-network "]
    #[doc = " providers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub network: Option<CodeableConcept>,
    #[doc = " This contains the product, service, drug or other billing code for the item."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "productOrService")]
    pub product_or_service: Option<CodeableConcept>,
    #[doc = " The practitioner who is eligible for the provision of the product or service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub provider: Option<Reference>,
    #[doc = " The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual "]
    #[doc = " visits'."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub term: Option<CodeableConcept>,
    #[doc = " Indicates if the benefits apply to an individual or to the family."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub unit: Option<CodeableConcept>,
}
#[doc = " Financial instrument which may be used to reimburse or pay for health care products and "]
#[doc = " services. Includes both insurance and self-payment."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Coverage_Class")]
#[serde(deny_unknown_fields)]
pub struct CoverageClass {
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for value"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _value: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A short description for the class."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " The type of classification for which an insurer-specific class label or number and optional "]
    #[doc = " name is provided, for example may be used to identify a class of coverage or employer "]
    #[doc = " group, Policy, Plan."]
    #[serde(rename = "type")]
    pub type_: CodeableConcept,
    #[doc = " The alphanumeric string value associated with the insurer issued label."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[doc = " Financial instrument which may be used to reimburse or pay for health care products and "]
#[doc = " services. Includes both insurance and self-payment."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Coverage_CostToBeneficiary")]
#[serde(deny_unknown_fields)]
pub struct CoverageCostToBeneficiary {
    #[doc = " A suite of codes indicating exceptions or reductions to patient costs and their effective "]
    #[doc = " periods."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub exception: Option<Vec<CoverageException>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The category of patient centric costs associated with treatment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
    #[doc = " The amount due from the patient for the cost category."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueMoney")]
    pub value_money: Option<Money>,
    #[doc = " The amount due from the patient for the cost category."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,
}
#[doc = " Financial instrument which may be used to reimburse or pay for health care products and "]
#[doc = " services. Includes both insurance and self-payment."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Coverage_Exception")]
#[serde(deny_unknown_fields)]
pub struct CoverageException {
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The timeframe during when the exception is in force."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
    #[doc = " The code for the specific exception."]
    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}
#[doc = " Describes a required data item for evaluation in terms of the type of data, and optional code "]
#[doc = " or date-based filters of the data."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct DataRequirement {
    #[doc = " Extensions for limit"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _limit: Option<Element>,
    #[doc = " Extensions for mustSupport"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_mustSupport")]
    pub _must_support: Option<Vec<Element>>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " Code filters specify additional constraints on the data, specifying the value set of "]
    #[doc = " interest for a particular element of the data. Each code filter defines an additional "]
    #[doc = " constraint on the data, i.e. code filters are AND'ed, not OR'ed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "codeFilter")]
    pub code_filter: Option<Vec<DataRequirementCodeFilter>>,
    #[doc = " Date filters specify additional constraints on the data in terms of the applicable date "]
    #[doc = " range for specific elements. Each date filter specifies an additional constraint on the "]
    #[doc = " data, i.e. date filters are AND'ed, not OR'ed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dateFilter")]
    pub date_filter: Option<Vec<DataRequirementDateFilter>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Specifies a maximum number of results that are required (uses the _count search parameter)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub limit: Option<PositiveInt>,
    #[doc = " Indicates that specific elements of the type are referenced by the knowledge module and "]
    #[doc = " must be supported by the consumer in order to obtain an effective evaluation. This does not "]
    #[doc = " mean that a value is required for this element, only that the consuming system must "]
    #[doc = " understand the element and be able to provide values for it if they are available. "]
    #[doc = " "]
    #[doc = " The value of mustSupport SHALL be a FHIRPath resolveable on the type of the "]
    #[doc = " DataRequirement. The path SHALL consist only of identifiers, constant indexers, and "]
    #[doc = " .resolve() (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "mustSupport")]
    pub must_support: Option<Vec<String>>,
    #[doc = " The profile of the required data, specified as the uri of the profile definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub profile: Option<Vec<Canonical>>,
    #[doc = " Specifies the order of the results to be returned."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sort: Option<Vec<DataRequirementSort>>,
    #[doc = " The intended subjects of the data requirement. If this element is not provided, a Patient "]
    #[doc = " subject is assumed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectCodeableConcept")]
    pub subject_codeable_concept: Option<CodeableConcept>,
    #[doc = " The intended subjects of the data requirement. If this element is not provided, a Patient "]
    #[doc = " subject is assumed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectReference")]
    pub subject_reference: Option<Reference>,
    #[doc = " The type of the required data, specified as the type name of a resource. For profiles, this "]
    #[doc = " value is set to the type of the base resource of the profile."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}
#[doc = " Describes a required data item for evaluation in terms of the type of data, and optional code "]
#[doc = " or date-based filters of the data."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "DataRequirement_CodeFilter")]
#[serde(deny_unknown_fields)]
pub struct DataRequirementCodeFilter {
    #[doc = " Extensions for path"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _path: Option<Element>,
    #[doc = " Extensions for searchParam"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_searchParam")]
    pub _search_param: Option<Element>,
    #[doc = " The codes for the code filter. If values are given, the filter will return only those data "]
    #[doc = " items for which the code-valued attribute specified by the path has a value that is one of "]
    #[doc = " the specified codes. If codes are specified in addition to a value set, the filter returns "]
    #[doc = " items matching a code in the value set or one of the specified codes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Vec<Coding>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The code-valued attribute of the filter. The specified path SHALL be a FHIRPath resolveable "]
    #[doc = " on the specified type of the DataRequirement, and SHALL consist only of identifiers, "]
    #[doc = " constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to "]
    #[doc = " traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality "]
    #[doc = " sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). "]
    #[doc = " Note that the index must be an integer constant. The path must resolve to an element of "]
    #[doc = " type code, Coding, or CodeableConcept."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[doc = " A token parameter that refers to a search parameter defined on the specified type of the "]
    #[doc = " DataRequirement, and which searches on elements of type code, Coding, or CodeableConcept."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "searchParam")]
    pub search_param: Option<String>,
    #[doc = " The valueset for the code filter. The valueSet and code elements are additive. If valueSet "]
    #[doc = " is specified, the filter will return only those data items for which the value of the "]
    #[doc = " code-valued element specified in the path is a member of the specified valueset."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueSet")]
    pub value_set: Option<Canonical>,
}
#[doc = " Describes a required data item for evaluation in terms of the type of data, and optional code "]
#[doc = " or date-based filters of the data."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "DataRequirement_DateFilter")]
#[serde(deny_unknown_fields)]
pub struct DataRequirementDateFilter {
    #[doc = " Extensions for path"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _path: Option<Element>,
    #[doc = " Extensions for searchParam"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_searchParam")]
    pub _search_param: Option<Element>,
    #[doc = " Extensions for valueDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDateTime")]
    pub _value_date_time: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The date-valued attribute of the filter. The specified path SHALL be a FHIRPath resolveable "]
    #[doc = " on the specified type of the DataRequirement, and SHALL consist only of identifiers, "]
    #[doc = " constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to "]
    #[doc = " traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality "]
    #[doc = " sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). "]
    #[doc = " Note that the index must be an integer constant. The path must resolve to an element of "]
    #[doc = " type date, dateTime, Period, Schedule, or Timing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[doc = " A date parameter that refers to a search parameter defined on the specified type of the "]
    #[doc = " DataRequirement, and which searches on elements of type date, dateTime, Period, Schedule, "]
    #[doc = " or Timing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "searchParam")]
    pub search_param: Option<String>,
    #[doc = " The value of the filter. If period is specified, the filter will return only those data "]
    #[doc = " items that fall within the bounds determined by the Period, inclusive of the period "]
    #[doc = " boundaries. If dateTime is specified, the filter will return only those data items that are "]
    #[doc = " equal to the specified dateTime. If a Duration is specified, the filter will return only "]
    #[doc = " those data items that fall within Duration before now."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDateTime")]
    pub value_date_time: Option<String>,
    #[doc = " The value of the filter. If period is specified, the filter will return only those data "]
    #[doc = " items that fall within the bounds determined by the Period, inclusive of the period "]
    #[doc = " boundaries. If dateTime is specified, the filter will return only those data items that are "]
    #[doc = " equal to the specified dateTime. If a Duration is specified, the filter will return only "]
    #[doc = " those data items that fall within Duration before now."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDuration")]
    pub value_duration: Option<Duration>,
    #[doc = " The value of the filter. If period is specified, the filter will return only those data "]
    #[doc = " items that fall within the bounds determined by the Period, inclusive of the period "]
    #[doc = " boundaries. If dateTime is specified, the filter will return only those data items that are "]
    #[doc = " equal to the specified dateTime. If a Duration is specified, the filter will return only "]
    #[doc = " those data items that fall within Duration before now."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valuePeriod")]
    pub value_period: Option<Period>,
}
#[doc = " Describes a required data item for evaluation in terms of the type of data, and optional code "]
#[doc = " or date-based filters of the data."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "DataRequirement_Sort")]
#[serde(deny_unknown_fields)]
pub struct DataRequirementSort {
    #[doc = " Extensions for direction"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _direction: Option<Element>,
    #[doc = " Extensions for path"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _path: Option<Element>,
    #[doc = " The direction of the sort, ascending or descending."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub direction: Option<serde_json::Value>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The attribute of the sort. The specified path must be resolvable from the type of the "]
    #[doc = " required data. The path is allowed to contain qualifiers (.) to traverse sub-elements, as "]
    #[doc = " well as indexers ([x]) to traverse multiple-cardinality sub-elements. Note that the index "]
    #[doc = " must be an integer constant."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}
#[doc = " Indicates an actual or potential clinical issue with or between one or more active or proposed "]
#[doc = " clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, "]
#[doc = " Procedure-condition conflict, etc."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct DetectedIssue {
    #[doc = " Extensions for detail"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _detail: Option<Element>,
    #[doc = " Extensions for identifiedDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_identifiedDateTime")]
    pub _identified_date_time: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for reference"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _reference: Option<Element>,
    #[doc = " Extensions for severity"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _severity: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Individual or device responsible for the issue being raised.  For example, a decision "]
    #[doc = " support application or a pharmacist conducting a medication review."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Reference>,
    #[doc = " Identifies the general type of issue identified."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " A textual explanation of the detected issue."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub detail: Option<String>,
    #[doc = " Supporting evidence or manifestations that provide the basis for identifying the detected "]
    #[doc = " issue such as a GuidanceResponse or MeasureReport."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub evidence: Option<Vec<DetectedIssueEvidence>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The date or period when the detected issue was initially identified."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "identifiedDateTime")]
    pub identified_date_time: Option<String>,
    #[doc = " The date or period when the detected issue was initially identified."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "identifiedPeriod")]
    pub identified_period: Option<Period>,
    #[doc = " Business identifier associated with the detected issue record."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " Indicates the resource representing the current activity or proposed activity that is "]
    #[doc = " potentially problematic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub implicated: Option<Vec<Reference>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " Indicates an action that has been taken or is committed to reduce or eliminate the "]
    #[doc = " likelihood of the risk identified by the detected issue from manifesting.  Can also reflect "]
    #[doc = " an observation of known mitigating factors that may reduce/eliminate the need for any "]
    #[doc = " action."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub mitigation: Option<Vec<DetectedIssueMitigation>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Indicates the patient whose record the detected issue is associated with."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub patient: Option<Reference>,
    #[doc = " The literature, knowledge-base or similar reference that describes the propensity for the "]
    #[doc = " detected issue identified."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reference: Option<Uri>,
    #[doc = " This is a DetectedIssue resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " Indicates the degree of importance associated with the identified issue based on the "]
    #[doc = " potential impact on the patient."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub severity: Option<Code>,
    #[doc = " Indicates the status of the detected issue."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " Indicates an actual or potential clinical issue with or between one or more active or proposed "]
#[doc = " clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, "]
#[doc = " Procedure-condition conflict, etc."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "DetectedIssue_Evidence")]
#[serde(deny_unknown_fields)]
pub struct DetectedIssueEvidence {
    #[doc = " A manifestation that led to the recording of this detected issue."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Vec<CodeableConcept>>,
    #[doc = " Links to resources that constitute evidence for the detected issue such as a "]
    #[doc = " GuidanceResponse or MeasureReport."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub detail: Option<Vec<Reference>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " Indicates an actual or potential clinical issue with or between one or more active or proposed "]
#[doc = " clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, "]
#[doc = " Procedure-condition conflict, etc."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "DetectedIssue_Mitigation")]
#[serde(deny_unknown_fields)]
pub struct DetectedIssueMitigation {
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Describes the action that was taken or the observation that was made that "]
    #[doc = " reduces/eliminates the risk associated with the identified issue."]
    pub action: CodeableConcept,
    #[doc = " Identifies the practitioner who determined the mitigation and takes responsibility for the "]
    #[doc = " mitigation step occurring."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Reference>,
    #[doc = " Indicates when the mitigating action was documented."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " A type of a manufactured item that is used in the provision of healthcare without being "]
#[doc = " substantially changed through that activity. The device may be a medical or non-medical device."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Device {
    #[doc = " Extensions for distinctIdentifier"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_distinctIdentifier")]
    pub _distinct_identifier: Option<Element>,
    #[doc = " Extensions for expirationDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_expirationDate")]
    pub _expiration_date: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for lotNumber"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lotNumber")]
    pub _lot_number: Option<Element>,
    #[doc = " Extensions for manufactureDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_manufactureDate")]
    pub _manufacture_date: Option<Element>,
    #[doc = " Extensions for manufacturer"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _manufacturer: Option<Element>,
    #[doc = " Extensions for modelNumber"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_modelNumber")]
    pub _model_number: Option<Element>,
    #[doc = " Extensions for partNumber"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_partNumber")]
    pub _part_number: Option<Element>,
    #[doc = " Extensions for serialNumber"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_serialNumber")]
    pub _serial_number: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " Contact details for an organization or a particular human that is responsible for the "]
    #[doc = " device."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactPoint>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The reference to the definition for the device."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub definition: Option<Reference>,
    #[doc = " This represents the manufacturer's name of the device as provided by the device, from a UDI "]
    #[doc = " label, or by a person describing the Device.  This typically would be used when a person "]
    #[doc = " provides the name(s) or when the device represents one of the names available from "]
    #[doc = " DeviceDefinition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "deviceName")]
    pub device_name: Option<Vec<DeviceDeviceName>>,
    #[doc = " The distinct identification string as required by regulation for a human cell, tissue, or "]
    #[doc = " cellular and tissue-based product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "distinctIdentifier")]
    pub distinct_identifier: Option<String>,
    #[doc = " The date and time beyond which this device is no longer valid or should not be used (if "]
    #[doc = " applicable)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "expirationDate")]
    pub expiration_date: Option<DateTime>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Unique instance identifiers assigned to a device by manufacturers other organizations or "]
    #[doc = " owners."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The place where the device can be found."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<Reference>,
    #[doc = " Lot number assigned by the manufacturer."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lotNumber")]
    pub lot_number: Option<String>,
    #[doc = " The date and time when the device was manufactured."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "manufactureDate")]
    pub manufacture_date: Option<DateTime>,
    #[doc = " A name of the manufacturer."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub manufacturer: Option<String>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " The manufacturer's model number for the device."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modelNumber")]
    pub model_number: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Descriptive information, usage information or implantation information that is not captured "]
    #[doc = " in an existing element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " An organization that is responsible for the provision and ongoing maintenance of the "]
    #[doc = " device."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub owner: Option<Reference>,
    #[doc = " The device that this device is attached to or is part of."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub parent: Option<Reference>,
    #[doc = " The part number or catalog number of the device."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "partNumber")]
    pub part_number: Option<String>,
    #[doc = " Patient information, If the device is affixed to a person."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub patient: Option<Reference>,
    #[doc = " The actual configuration settings of a device as it actually operates, e.g., regulation "]
    #[doc = " status, time properties."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub property: Option<Vec<DeviceProperty>>,
    #[doc = " This is a Device resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " Provides additional safety characteristics about a medical device.  For example devices "]
    #[doc = " containing latex."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub safety: Option<Vec<CodeableConcept>>,
    #[doc = " The serial number assigned by the organization when the device was manufactured."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "serialNumber")]
    pub serial_number: Option<String>,
    #[doc = " The capabilities supported on a  device, the standards to which the device conforms for a "]
    #[doc = " particular purpose, and used for the communication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub specialization: Option<Vec<DeviceSpecialization>>,
    #[doc = " Status of the Device availability."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " Reason for the dtatus of the Device availability."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusReason")]
    pub status_reason: Option<Vec<CodeableConcept>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " The kind or type of device."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
    #[doc = " Unique device identifier (UDI) assigned to device label or package.  Note that the Device "]
    #[doc = " may include multiple udiCarriers as it either may include just the udiCarrier for the "]
    #[doc = " jurisdiction it is sold, or for multiple jurisdictions it could have been sold."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "udiCarrier")]
    pub udi_carrier: Option<Vec<DeviceUdiCarrier>>,
    #[doc = " A network address on which the device may be contacted directly."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
    #[doc = " The actual design of the device or software version running on the device."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<Vec<DeviceVersion>>,
}
#[doc = " The characteristics, operational status and capabilities of a medical-related component of a "]
#[doc = " medical device."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct DeviceDefinition {
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for manufacturerString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_manufacturerString")]
    pub _manufacturer_string: Option<Element>,
    #[doc = " Extensions for modelNumber"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_modelNumber")]
    pub _model_number: Option<Element>,
    #[doc = " Extensions for onlineInformation"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_onlineInformation")]
    pub _online_information: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Vec<Element>>,
    #[doc = " Device capabilities."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub capability: Option<Vec<DeviceDefinitionCapability>>,
    #[doc = " Contact details for an organization or a particular human that is responsible for the "]
    #[doc = " device."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactPoint>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " A name given to the device to identify it."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "deviceName")]
    pub device_name: Option<Vec<DeviceDefinitionDeviceName>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Unique instance identifiers assigned to a device by the software, manufacturers, other "]
    #[doc = " organizations or owners. For example: handle ID."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " Language code for the human-readable text strings produced by the device (all supported)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "languageCode")]
    pub language_code: Option<Vec<CodeableConcept>>,
    #[doc = " A name of the manufacturer."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "manufacturerReference")]
    pub manufacturer_reference: Option<Reference>,
    #[doc = " A name of the manufacturer."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "manufacturerString")]
    pub manufacturer_string: Option<String>,
    #[doc = " A substance used to create the material(s) of which the device is made."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub material: Option<Vec<DeviceDefinitionMaterial>>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " The model number for the device."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modelNumber")]
    pub model_number: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Descriptive information, usage information or implantation information that is not captured "]
    #[doc = " in an existing element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " Access to on-line information about the device."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onlineInformation")]
    pub online_information: Option<Uri>,
    #[doc = " An organization that is responsible for the provision and ongoing maintenance of the "]
    #[doc = " device."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub owner: Option<Reference>,
    #[doc = " The parent device it can be part of."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "parentDevice")]
    pub parent_device: Option<Reference>,
    #[doc = " Dimensions, color etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "physicalCharacteristics")]
    pub physical_characteristics: Option<ProdCharacteristic>,
    #[doc = " The actual configuration settings of a device as it actually operates, e.g., regulation "]
    #[doc = " status, time properties."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub property: Option<Vec<DeviceDefinitionProperty>>,
    #[doc = " The quantity of the device present in the packaging (e.g. the number of devices present in "]
    #[doc = " a pack, or the number of devices in the same package of the medicinal product)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,
    #[doc = " This is a DeviceDefinition resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " Safety characteristics of the device."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub safety: Option<Vec<CodeableConcept>>,
    #[doc = " Shelf Life and storage information."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "shelfLifeStorage")]
    pub shelf_life_storage: Option<Vec<ProductShelfLife>>,
    #[doc = " The capabilities supported on a  device, the standards to which the device conforms for a "]
    #[doc = " particular purpose, and used for the communication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub specialization: Option<Vec<DeviceDefinitionSpecialization>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " What kind of device or device system this is."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
    #[doc = " Unique device identifier (UDI) assigned to device label or package.  Note that the Device "]
    #[doc = " may include multiple udiCarriers as it either may include just the udiCarrier for the "]
    #[doc = " jurisdiction it is sold, or for multiple jurisdictions it could have been sold."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "udiDeviceIdentifier")]
    pub udi_device_identifier: Option<Vec<DeviceDefinitionUdiDeviceIdentifier>>,
    #[doc = " A network address on which the device may be contacted directly."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
    #[doc = " The available versions of the device, e.g., software versions."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<Vec<String>>,
}
#[doc = " The characteristics, operational status and capabilities of a medical-related component of a "]
#[doc = " medical device."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "DeviceDefinition_Capability")]
#[serde(deny_unknown_fields)]
pub struct DeviceDefinitionCapability {
    #[doc = " Description of capability."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Vec<CodeableConcept>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Type of capability."]
    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}
#[doc = " The characteristics, operational status and capabilities of a medical-related component of a "]
#[doc = " medical device."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "DeviceDefinition_DeviceName")]
#[serde(deny_unknown_fields)]
pub struct DeviceDefinitionDeviceName {
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The name of the device."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " The type of deviceName."]
    #[doc = " UDILabelName | UserFriendlyName | PatientReportedName | ManufactureDeviceName | ModelName."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}
#[doc = " The characteristics, operational status and capabilities of a medical-related component of a "]
#[doc = " medical device."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "DeviceDefinition_Material")]
#[serde(deny_unknown_fields)]
pub struct DeviceDefinitionMaterial {
    #[doc = " Extensions for allergenicIndicator"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_allergenicIndicator")]
    pub _allergenic_indicator: Option<Element>,
    #[doc = " Extensions for alternate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _alternate: Option<Element>,
    #[doc = " Whether the substance is a known or suspected allergen."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "allergenicIndicator")]
    pub allergenic_indicator: Option<Boolean>,
    #[doc = " Indicates an alternative material of the device."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub alternate: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The substance."]
    pub substance: CodeableConcept,
}
#[doc = " The characteristics, operational status and capabilities of a medical-related component of a "]
#[doc = " medical device."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "DeviceDefinition_Property")]
#[serde(deny_unknown_fields)]
pub struct DeviceDefinitionProperty {
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Code that specifies the property DeviceDefinitionPropetyCode (Extensible)."]
    #[serde(rename = "type")]
    pub type_: CodeableConcept,
    #[doc = " Property value as a code, e.g., NTP4 (synced to NTP)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCode")]
    pub value_code: Option<Vec<CodeableConcept>>,
    #[doc = " Property value as a quantity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Vec<Quantity>>,
}
#[doc = " The characteristics, operational status and capabilities of a medical-related component of a "]
#[doc = " medical device."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "DeviceDefinition_Specialization")]
#[serde(deny_unknown_fields)]
pub struct DeviceDefinitionSpecialization {
    #[doc = " Extensions for systemType"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_systemType")]
    pub _system_type: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The standard that is used to operate and communicate."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "systemType")]
    pub system_type: Option<String>,
    #[doc = " The version of the standard that is used to operate and communicate."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[doc = " The characteristics, operational status and capabilities of a medical-related component of a "]
#[doc = " medical device."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "DeviceDefinition_UdiDeviceIdentifier")]
#[serde(deny_unknown_fields)]
pub struct DeviceDefinitionUdiDeviceIdentifier {
    #[doc = " Extensions for deviceIdentifier"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_deviceIdentifier")]
    pub _device_identifier: Option<Element>,
    #[doc = " Extensions for issuer"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _issuer: Option<Element>,
    #[doc = " Extensions for jurisdiction"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _jurisdiction: Option<Element>,
    #[doc = " The identifier that is to be associated with every Device that references this "]
    #[doc = " DeviceDefintiion for the issuer and jurisdication porvided in the "]
    #[doc = " DeviceDefinition.udiDeviceIdentifier."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "deviceIdentifier")]
    pub device_identifier: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The organization that assigns the identifier algorithm."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub issuer: Option<Uri>,
    #[doc = " The jurisdiction to which the deviceIdentifier applies."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Uri>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " Describes a measurement, calculation or setting capability of a medical device."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct DeviceMetric {
    #[doc = " Extensions for category"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _category: Option<Element>,
    #[doc = " Extensions for color"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _color: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for operationalStatus"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_operationalStatus")]
    pub _operational_status: Option<Element>,
    #[doc = " Describes the calibrations that have been performed or that are required to be performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub calibration: Option<Vec<DeviceMetricCalibration>>,
    #[doc = " Indicates the category of the observation generation process. A DeviceMetric can be for "]
    #[doc = " example a setting, measurement, or calculation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Code>,
    #[doc = " Describes the color representation for the metric. This is often used to aid clinicians to "]
    #[doc = " track and identify parameter types by color. In practice, consider a Patient Monitor that "]
    #[doc = " has ECG/HR and Pleth for example; the parameters are displayed in different characteristic "]
    #[doc = " colors, such as HR-blue, BP-green, and PR and SpO2- magenta."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub color: Option<Code>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Unique instance identifiers assigned to a device by the device or gateway software, "]
    #[doc = " manufacturers, other organizations or owners. For example: handle ID."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " Describes the measurement repetition time. This is not necessarily the same as the update "]
    #[doc = " period. The measurement repetition time can range from milliseconds up to hours. An example "]
    #[doc = " for a measurement repetition time in the range of milliseconds is the sampling rate of an "]
    #[doc = " ECG. An example for a measurement repetition time in the range of hours is a NIBP that is "]
    #[doc = " triggered automatically every hour. The update period may be different than the measurement "]
    #[doc = " repetition time, if the device does not update the published observed value with the same "]
    #[doc = " frequency as it was measured."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "measurementPeriod")]
    pub measurement_period: Option<Timing>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Indicates current operational state of the device. For example: On, Off, Standby, etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "operationalStatus")]
    pub operational_status: Option<Code>,
    #[doc = " Describes the link to the  Device that this DeviceMetric belongs to and that provide "]
    #[doc = " information about the location of this DeviceMetric in the containment structure of the "]
    #[doc = " parent Device. An example would be a Device that represents a Channel. This reference can "]
    #[doc = " be used by a client application to distinguish DeviceMetrics that have the same type, but "]
    #[doc = " should be interpreted based on their containment location."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub parent: Option<Reference>,
    #[doc = " This is a DeviceMetric resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " Describes the link to the  Device that this DeviceMetric belongs to and that contains "]
    #[doc = " administrative device information such as manufacturer, serial number, etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub source: Option<Reference>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " Describes the type of the metric. For example: Heart Rate, PEEP Setting, etc."]
    #[serde(rename = "type")]
    pub type_: CodeableConcept,
    #[doc = " Describes the unit that an observed value determined for this metric will have. For "]
    #[doc = " example: Percent, Seconds, etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub unit: Option<CodeableConcept>,
}
#[doc = " Describes a measurement, calculation or setting capability of a medical device."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "DeviceMetric_Calibration")]
#[serde(deny_unknown_fields)]
pub struct DeviceMetricCalibration {
    #[doc = " Extensions for state"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _state: Option<Element>,
    #[doc = " Extensions for time"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _time: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Describes the state of the calibration."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub state: Option<Code>,
    #[doc = " Describes the time last calibration has been performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub time: Option<Instant>,
    #[doc = " Describes the type of the calibration method."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}
#[doc = " Represents a request for a patient to employ a medical device. The device may be an implantable "]
#[doc = " device, or an external assistive device, such as a walker."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct DeviceRequest {
    #[doc = " Extensions for authoredOn"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_authoredOn")]
    pub _authored_on: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for instantiatesUri"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_instantiatesUri")]
    pub _instantiates_uri: Option<Vec<Element>>,
    #[doc = " Extensions for intent"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _intent: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for occurrenceDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_occurrenceDateTime")]
    pub _occurrence_date_time: Option<Element>,
    #[doc = " Extensions for priority"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _priority: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " When the request transitioned to being actionable."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "authoredOn")]
    pub authored_on: Option<DateTime>,
    #[doc = " Plan/proposal/order fulfilled by this request."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Vec<Reference>>,
    #[doc = " The details of the device to be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "codeCodeableConcept")]
    pub code_codeable_concept: Option<CodeableConcept>,
    #[doc = " The details of the device to be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "codeReference")]
    pub code_reference: Option<Reference>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " An encounter that provides additional context in which this request is made."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Composite request this is part of."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "groupIdentifier")]
    pub group_identifier: Option<Identifier>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Identifiers assigned to this order by the orderer or by the receiver."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that "]
    #[doc = " is adhered to in whole or in part by this DeviceRequest."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesCanonical")]
    pub instantiates_canonical: Option<Vec<Canonical>>,
    #[doc = " The URL pointing to an externally maintained protocol, guideline, orderset or other "]
    #[doc = " definition that is adhered to in whole or in part by this DeviceRequest."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesUri")]
    pub instantiates_uri: Option<Vec<Uri>>,
    #[doc = " Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may "]
    #[doc = " be required for delivering the requested service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub insurance: Option<Vec<Reference>>,
    #[doc = " Whether the request is a proposal, plan, an original order or a reflex order."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub intent: Option<Code>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Details about this request that were not represented at all or sufficiently in one of the "]
    #[doc = " attributes provided in a class. These may include for example a comment, an instruction, or "]
    #[doc = " a note associated with the statement."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " The timing schedule for the use of the device. The Schedule data type allows many different "]
    #[doc = " expressions, for example. \"Every 8 hours\"; \"Three times a day\"; \"1/2 an hour before "]
    #[doc = " breakfast for 10 days from 23-Dec 2011:\"; \"15 Oct 2013, 17 Oct 2013 and 1 Nov 2013\"."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrenceDateTime")]
    pub occurrence_date_time: Option<String>,
    #[doc = " The timing schedule for the use of the device. The Schedule data type allows many different "]
    #[doc = " expressions, for example. \"Every 8 hours\"; \"Three times a day\"; \"1/2 an hour before "]
    #[doc = " breakfast for 10 days from 23-Dec 2011:\"; \"15 Oct 2013, 17 Oct 2013 and 1 Nov 2013\"."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrencePeriod")]
    pub occurrence_period: Option<Period>,
    #[doc = " The timing schedule for the use of the device. The Schedule data type allows many different "]
    #[doc = " expressions, for example. \"Every 8 hours\"; \"Three times a day\"; \"1/2 an hour before "]
    #[doc = " breakfast for 10 days from 23-Dec 2011:\"; \"15 Oct 2013, 17 Oct 2013 and 1 Nov 2013\"."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrenceTiming")]
    pub occurrence_timing: Option<Timing>,
    #[doc = " Specific parameters for the ordered item.  For example, the prism value for lenses."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub parameter: Option<Vec<DeviceRequestParameter>>,
    #[doc = " The desired performer for doing the diagnostic testing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub performer: Option<Reference>,
    #[doc = " Desired type of performer for doing the diagnostic testing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "performerType")]
    pub performer_type: Option<CodeableConcept>,
    #[doc = " The request takes the place of the referenced completed or terminated request(s)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "priorRequest")]
    pub prior_request: Option<Vec<Reference>>,
    #[doc = " Indicates how quickly the {{title}} should be addressed with respect to other requests."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub priority: Option<Code>,
    #[doc = " Reason or justification for the use of this device."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,
    #[doc = " Reason or justification for the use of this device."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,
    #[doc = " Key events in the history of the request."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relevantHistory")]
    pub relevant_history: Option<Vec<Reference>>,
    #[doc = " The individual who initiated the request and has responsibility for its activation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub requester: Option<Reference>,
    #[doc = " This is a DeviceRequest resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The status of the request."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " The patient who will use the device."]
    pub subject: Reference,
    #[doc = " Additional clinical information about the patient that may influence the request "]
    #[doc = " fulfilment.  For example, this may include where on the subject's body the device will be "]
    #[doc = " used (i.e. the target site)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportingInfo")]
    pub supporting_info: Option<Vec<Reference>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " Represents a request for a patient to employ a medical device. The device may be an implantable "]
#[doc = " device, or an external assistive device, such as a walker."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "DeviceRequest_Parameter")]
#[serde(deny_unknown_fields)]
pub struct DeviceRequestParameter {
    #[doc = " Extensions for valueBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub _value_boolean: Option<Element>,
    #[doc = " A code or string that identifies the device detail being asserted."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The value of the device detail."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,
    #[doc = " The value of the device detail."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,
    #[doc = " The value of the device detail."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,
    #[doc = " The value of the device detail."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRange")]
    pub value_range: Option<Range>,
}
#[doc = " A record of a device being used by a patient where the record is the result of a report from "]
#[doc = " the patient or another clinician."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct DeviceUseStatement {
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for recordedOn"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_recordedOn")]
    pub _recorded_on: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for timingDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_timingDateTime")]
    pub _timing_date_time: Option<Element>,
    #[doc = " A plan, proposal or order that is fulfilled in whole or in part by this DeviceUseStatement."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Vec<Reference>>,
    #[doc = " Indicates the anotomic location on the subject's body where the device was used ( i.e. the "]
    #[doc = " target)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "bodySite")]
    pub body_site: Option<CodeableConcept>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " Allows linking the DeviceUseStatement to the underlying Request, or to other information "]
    #[doc = " that supports or is used to derive the DeviceUseStatement."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "derivedFrom")]
    pub derived_from: Option<Vec<Reference>>,
    #[doc = " The details of the device used."]
    pub device: Reference,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " An external identifier for this statement such as an IRI."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Details about the device statement that were not represented at all or sufficiently in one "]
    #[doc = " of the attributes provided in a class. These may include for example a comment, an "]
    #[doc = " instruction, or a note associated with the statement."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " Reason or justification for the use of the device."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,
    #[doc = " Indicates another resource whose existence justifies this DeviceUseStatement."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,
    #[doc = " The time at which the statement was made/recorded."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "recordedOn")]
    pub recorded_on: Option<DateTime>,
    #[doc = " This is a DeviceUseStatement resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " Who reported the device was being used by the patient."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub source: Option<Reference>,
    #[doc = " A code representing the patient or other source's judgment about the state of the device "]
    #[doc = " used that this statement is about.  Generally this will be active or completed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " The patient who used the device."]
    pub subject: Reference,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " How often the device was used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingDateTime")]
    pub timing_date_time: Option<String>,
    #[doc = " How often the device was used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingPeriod")]
    pub timing_period: Option<Period>,
    #[doc = " How often the device was used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingTiming")]
    pub timing_timing: Option<Timing>,
}
#[doc = " A type of a manufactured item that is used in the provision of healthcare without being "]
#[doc = " substantially changed through that activity. The device may be a medical or non-medical device."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Device_DeviceName")]
#[serde(deny_unknown_fields)]
pub struct DeviceDeviceName {
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The name that identifies the device."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " The type of deviceName."]
    #[doc = " UDILabelName | UserFriendlyName | PatientReportedName | ManufactureDeviceName | ModelName."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}
#[doc = " A type of a manufactured item that is used in the provision of healthcare without being "]
#[doc = " substantially changed through that activity. The device may be a medical or non-medical device."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Device_Property")]
#[serde(deny_unknown_fields)]
pub struct DeviceProperty {
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Code that specifies the property DeviceDefinitionPropetyCode (Extensible)."]
    #[serde(rename = "type")]
    pub type_: CodeableConcept,
    #[doc = " Property value as a code, e.g., NTP4 (synced to NTP)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCode")]
    pub value_code: Option<Vec<CodeableConcept>>,
    #[doc = " Property value as a quantity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Vec<Quantity>>,
}
#[doc = " A type of a manufactured item that is used in the provision of healthcare without being "]
#[doc = " substantially changed through that activity. The device may be a medical or non-medical device."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Device_Specialization")]
#[serde(deny_unknown_fields)]
pub struct DeviceSpecialization {
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The standard that is used to operate and communicate."]
    #[serde(rename = "systemType")]
    pub system_type: CodeableConcept,
    #[doc = " The version of the standard that is used to operate and communicate."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[doc = " A type of a manufactured item that is used in the provision of healthcare without being "]
#[doc = " substantially changed through that activity. The device may be a medical or non-medical device."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Device_UdiCarrier")]
#[serde(deny_unknown_fields)]
pub struct DeviceUdiCarrier {
    #[doc = " Extensions for carrierAIDC"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_carrierAIDC")]
    pub _carrier_aidc: Option<Element>,
    #[doc = " Extensions for carrierHRF"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_carrierHRF")]
    pub _carrier_hrf: Option<Element>,
    #[doc = " Extensions for deviceIdentifier"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_deviceIdentifier")]
    pub _device_identifier: Option<Element>,
    #[doc = " Extensions for entryType"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_entryType")]
    pub _entry_type: Option<Element>,
    #[doc = " Extensions for issuer"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _issuer: Option<Element>,
    #[doc = " Extensions for jurisdiction"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _jurisdiction: Option<Element>,
    #[doc = " The full UDI carrier of the Automatic Identification and Data Capture (AIDC) technology "]
    #[doc = " representation of the barcode string as printed on the packaging of the device - e.g., a "]
    #[doc = " barcode or RFID.   Because of limitations on character sets in XML and the need to "]
    #[doc = " round-trip JSON data through XML, AIDC Formats *SHALL* be base64 encoded."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "carrierAIDC")]
    pub carrier_aidc: Option<Base64Binary>,
    #[doc = " The full UDI carrier as the human readable form (HRF) representation of the barcode string "]
    #[doc = " as printed on the packaging of the device."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "carrierHRF")]
    pub carrier_hrf: Option<String>,
    #[doc = " The device identifier (DI) is a mandatory, fixed portion of a UDI that identifies the "]
    #[doc = " labeler and the specific version or model of a device."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "deviceIdentifier")]
    pub device_identifier: Option<String>,
    #[doc = " A coded entry to indicate how the data was entered."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "entryType")]
    pub entry_type: Option<Code>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Organization that is charged with issuing UDIs for devices.  For example, the US FDA "]
    #[doc = " issuers include :"]
    #[doc = " 1) GS1: "]
    #[doc = " http://hl7.org/fhir/NamingSystem/gs1-di, "]
    #[doc = " 2) HIBCC:"]
    #[doc = " http://hl7.org/fhir/NamingSystem/hibcc-dI, "]
    #[doc = " 3) ICCBBA for blood containers:"]
    #[doc = " http://hl7.org/fhir/NamingSystem/iccbba-blood-di, "]
    #[doc = " 4) ICCBA for other devices:"]
    #[doc = " http://hl7.org/fhir/NamingSystem/iccbba-other-di."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub issuer: Option<Uri>,
    #[doc = " The identity of the authoritative source for UDI generation within a  jurisdiction.  All "]
    #[doc = " UDIs are globally unique within a single namespace with the appropriate repository uri as "]
    #[doc = " the system.  For example,  UDIs of devices managed in the U.S. by the FDA, the value is  "]
    #[doc = " http://hl7.org/fhir/NamingSystem/fda-udi."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Uri>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " A type of a manufactured item that is used in the provision of healthcare without being "]
#[doc = " substantially changed through that activity. The device may be a medical or non-medical device."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Device_Version")]
#[serde(deny_unknown_fields)]
pub struct DeviceVersion {
    #[doc = " Extensions for value"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _value: Option<Element>,
    #[doc = " A single component of the device version."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub component: Option<Identifier>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The type of the device version, e.g. manufacturer, approved, internal."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
    #[doc = " The version text."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[doc = " The findings and interpretation of diagnostic  tests performed on patients, groups of patients, "]
#[doc = " devices, and locations, and/or specimens derived from these. The report includes clinical "]
#[doc = " context such as requesting and provider information, and some mix of atomic results, images, "]
#[doc = " textual and coded interpretations, and formatted representation of diagnostic reports."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct DiagnosticReport {
    #[doc = " Extensions for conclusion"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _conclusion: Option<Element>,
    #[doc = " Extensions for effectiveDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_effectiveDateTime")]
    pub _effective_date_time: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for issued"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _issued: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Details concerning a service requested."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Vec<Reference>>,
    #[doc = " A code that classifies the clinical discipline, department or diagnostic service that "]
    #[doc = " created the report (e.g. cardiology, biochemistry, hematology, MRI). This is used for "]
    #[doc = " searching, sorting and display purposes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,
    #[doc = " A code or name that describes this diagnostic report."]
    pub code: CodeableConcept,
    #[doc = " Concise and clinically contextualized summary conclusion (interpretation/impression) of the "]
    #[doc = " diagnostic report."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub conclusion: Option<String>,
    #[doc = " One or more codes that represent the summary conclusion (interpretation/impression) of the "]
    #[doc = " diagnostic report."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "conclusionCode")]
    pub conclusion_code: Option<Vec<CodeableConcept>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The time or time-period the observed values are related to. When the subject of the report "]
    #[doc = " is a patient, this is usually either the time of the procedure or of specimen "]
    #[doc = " collection(s), but very often the source of the date/time is not known, only the date/time "]
    #[doc = " itself."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectiveDateTime")]
    pub effective_date_time: Option<String>,
    #[doc = " The time or time-period the observed values are related to. When the subject of the report "]
    #[doc = " is a patient, this is usually either the time of the procedure or of specimen "]
    #[doc = " collection(s), but very often the source of the date/time is not known, only the date/time "]
    #[doc = " itself."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectivePeriod")]
    pub effective_period: Option<Period>,
    #[doc = " The healthcare event  (e.g. a patient and healthcare provider interaction) which this "]
    #[doc = " DiagnosticReport is about."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Identifiers assigned to this report by the performer or other systems."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " One or more links to full details of any imaging performed during the diagnostic "]
    #[doc = " investigation. Typically, this is imaging performed by DICOM enabled modalities, but this "]
    #[doc = " is not required. A fully enabled PACS viewer can use this information to provide views of "]
    #[doc = " the source images."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "imagingStudy")]
    pub imaging_study: Option<Vec<Reference>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The date and time that this version of the report was made available to providers, "]
    #[doc = " typically after the report was reviewed and verified."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub issued: Option<Instant>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " A list of key images associated with this report. The images are generally created during "]
    #[doc = " the diagnostic process, and may be directly of the patient, or of treated specimens (i.e. "]
    #[doc = " slides of interest)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub media: Option<Vec<DiagnosticReportMedia>>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The diagnostic service that is responsible for issuing the report."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub performer: Option<Vec<Reference>>,
    #[doc = " Rich text representation of the entire result as issued by the diagnostic service. Multiple "]
    #[doc = " formats are allowed but they SHALL be semantically equivalent."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "presentedForm")]
    pub presented_form: Option<Vec<Attachment>>,
    #[doc = " This is a DiagnosticReport resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " [Observations](observation.html)  that are part of this diagnostic report."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub result: Option<Vec<Reference>>,
    #[doc = " The practitioner or organization that is responsible for the report's conclusions and "]
    #[doc = " interpretations."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "resultsInterpreter")]
    pub results_interpreter: Option<Vec<Reference>>,
    #[doc = " Details about the specimens on which this diagnostic report is based."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub specimen: Option<Vec<Reference>>,
    #[doc = " The status of the diagnostic report."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " The subject of the report. Usually, but not always, this is a patient. However, diagnostic "]
    #[doc = " services also perform analyses on specimens collected from a variety of other sources."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Reference>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " The findings and interpretation of diagnostic  tests performed on patients, groups of patients, "]
#[doc = " devices, and locations, and/or specimens derived from these. The report includes clinical "]
#[doc = " context such as requesting and provider information, and some mix of atomic results, images, "]
#[doc = " textual and coded interpretations, and formatted representation of diagnostic reports."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "DiagnosticReport_Media")]
#[serde(deny_unknown_fields)]
pub struct DiagnosticReportMedia {
    #[doc = " Extensions for comment"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _comment: Option<Element>,
    #[doc = " A comment about the image. Typically, this is used to provide an explanation for why the "]
    #[doc = " image is included, or to draw the viewer's attention to important features."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Reference to the image source."]
    pub link: Reference,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " A length - a value with a unit that is a physical distance."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Distance {
    #[doc = " Extensions for code"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _code: Option<Element>,
    #[doc = " Extensions for comparator"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _comparator: Option<Element>,
    #[doc = " Extensions for system"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _system: Option<Element>,
    #[doc = " Extensions for unit"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _unit: Option<Element>,
    #[doc = " Extensions for value"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _value: Option<Element>,
    #[doc = " A computer processable form of the unit in some unit representation system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,
    #[doc = " How the value should be understood and represented - whether the actual value is greater or "]
    #[doc = " less than the stated value due to measurement issues; e.g. if the comparator is \"<\" , then "]
    #[doc = " the real value is < stated value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comparator: Option<serde_json::Value>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The identification of the system that provides the coded form of the unit."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub system: Option<Uri>,
    #[doc = " A human-readable form of the unit."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
    #[doc = " The value of the measured amount. The value includes an implicit precision in the "]
    #[doc = " presentation of the value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Decimal>,
}
#[doc = " A collection of documents compiled for a purpose together with metadata that applies to the "]
#[doc = " collection."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct DocumentManifest {
    #[doc = " Extensions for created"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _created: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for source"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _source: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Identifies who is the author of the manifest. Manifest author is not necessarly the author "]
    #[doc = " of the references included."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Vec<Reference>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The list of Resources that consist of the parts of this manifest."]
    pub content: Vec<Reference>,
    #[doc = " When the document manifest was created for submission to the server (not necessarily the "]
    #[doc = " same thing as the actual resource last modified time, since it may be modified, replicated, "]
    #[doc = " etc.)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub created: Option<DateTime>,
    #[doc = " Human-readable description of the source document. This is sometimes known as the \"title\"."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Other identifiers associated with the document manifest, including version independent  "]
    #[doc = " identifiers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " A single identifier that uniquely identifies this manifest. Principally used to refer to "]
    #[doc = " the manifest in non-FHIR contexts."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "masterIdentifier")]
    pub master_identifier: Option<Identifier>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A patient, practitioner, or organization for which this set of documents is intended."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub recipient: Option<Vec<Reference>>,
    #[doc = " Related identifiers or resources associated with the DocumentManifest."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub related: Option<Vec<DocumentManifestRelated>>,
    #[doc = " This is a DocumentManifest resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " Identifies the source system, application, or software that produced the document manifest."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub source: Option<Uri>,
    #[doc = " The status of this document manifest."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " Who or what the set of documents is about. The documents can be about a person, (patient or "]
    #[doc = " healthcare practitioner), a device (i.e. machine) or even a group of subjects (such as a "]
    #[doc = " document about a herd of farm animals, or a set of patients that share a common exposure). "]
    #[doc = " If the documents cross more than one subject, then more than one subject is allowed here "]
    #[doc = " (unusual use case)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Reference>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " The code specifying the type of clinical activity that resulted in placing the associated "]
    #[doc = " content into the DocumentManifest."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " A collection of documents compiled for a purpose together with metadata that applies to the "]
#[doc = " collection."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "DocumentManifest_Related")]
#[serde(deny_unknown_fields)]
pub struct DocumentManifestRelated {
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Related identifier to this DocumentManifest.  For example, Order numbers, accession "]
    #[doc = " numbers, XDW workflow numbers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Related Resource to this DocumentManifest. For example, Order, ServiceRequest,  Procedure, "]
    #[doc = " EligibilityRequest, etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "ref")]
    pub ref_: Option<Reference>,
}
#[doc = " A reference to a document of any kind for any purpose. Provides metadata about the document so "]
#[doc = " that the document can be discovered and managed. The scope of a document is any seralized "]
#[doc = " object with a mime-type, so includes formal patient centric documents (CDA), cliical notes, "]
#[doc = " scanned paper, and non-patient specific documents like policy text."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct DocumentReference {
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for docStatus"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_docStatus")]
    pub _doc_status: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Which person or organization authenticates that this document is valid."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub authenticator: Option<Reference>,
    #[doc = " Identifies who is responsible for adding the information to the document."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Vec<Reference>>,
    #[doc = " A categorization for the type of document referenced - helps for indexing and searching. "]
    #[doc = " This may be implied by or derived from the code specified in the DocumentReference.type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The document and format referenced. There may be multiple content element repetitions, each "]
    #[doc = " with a different format."]
    pub content: Vec<DocumentReferenceContent>,
    #[doc = " The clinical context in which the document was prepared."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub context: Option<DocumentReferenceContext>,
    #[doc = " Identifies the organization or group who is responsible for ongoing maintenance of and "]
    #[doc = " access to the document."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub custodian: Option<Reference>,
    #[doc = " When the document reference was created."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<Instant>,
    #[doc = " Human-readable description of the source document."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " The status of the underlying document."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "docStatus")]
    pub doc_status: Option<Code>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Other identifiers associated with the document, including version independent identifiers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " Document identifier as assigned by the source of the document. This identifier is specific "]
    #[doc = " to this version of the document. This unique identifier may be used elsewhere to identify "]
    #[doc = " this version of the document."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "masterIdentifier")]
    pub master_identifier: Option<Identifier>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Relationships that this document has with other document references that already exist."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatesTo")]
    pub relates_to: Option<Vec<DocumentReferenceRelatesTo>>,
    #[doc = " This is a DocumentReference resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " A set of Security-Tag codes specifying the level of privacy/security of the Document. Note "]
    #[doc = " that DocumentReference.meta.security contains the security labels of the \"reference\" to the "]
    #[doc = " document, while DocumentReference.securityLabel contains a snapshot of the security labels "]
    #[doc = " on the document the reference refers to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "securityLabel")]
    pub security_label: Option<Vec<CodeableConcept>>,
    #[doc = " The status of this document reference."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " Who or what the document is about. The document can be about a person, (patient or "]
    #[doc = " healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a "]
    #[doc = " document about a herd of farm animals, or a set of patients that share a common exposure)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Reference>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " Specifies the particular kind of document referenced  (e.g. History and Physical, Discharge "]
    #[doc = " Summary, Progress Note). This usually equates to the purpose of making the document "]
    #[doc = " referenced."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " A reference to a document of any kind for any purpose. Provides metadata about the document so "]
#[doc = " that the document can be discovered and managed. The scope of a document is any seralized "]
#[doc = " object with a mime-type, so includes formal patient centric documents (CDA), cliical notes, "]
#[doc = " scanned paper, and non-patient specific documents like policy text."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "DocumentReference_Content")]
#[serde(deny_unknown_fields)]
pub struct DocumentReferenceContent {
    #[doc = " The document or URL of the document along with critical metadata to prove content has "]
    #[doc = " integrity."]
    pub attachment: Attachment,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " An identifier of the document encoding, structure, and template that the document conforms "]
    #[doc = " to beyond the base format indicated in the mimeType."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub format: Option<Coding>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " A reference to a document of any kind for any purpose. Provides metadata about the document so "]
#[doc = " that the document can be discovered and managed. The scope of a document is any seralized "]
#[doc = " object with a mime-type, so includes formal patient centric documents (CDA), cliical notes, "]
#[doc = " scanned paper, and non-patient specific documents like policy text."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "DocumentReference_Context")]
#[serde(deny_unknown_fields)]
pub struct DocumentReferenceContext {
    #[doc = " Describes the clinical encounter or type of care that the document content is associated "]
    #[doc = " with."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Vec<Reference>>,
    #[doc = " This list of codes represents the main clinical acts, such as a colonoscopy or an "]
    #[doc = " appendectomy, being documented. In some cases, the event is inherent in the type Code, such "]
    #[doc = " as a \"History and Physical Report\" in which the procedure being documented is necessarily a "]
    #[doc = " \"History and Physical\" act."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub event: Option<Vec<CodeableConcept>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The kind of facility where the patient was seen."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "facilityType")]
    pub facility_type: Option<CodeableConcept>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The time period over which the service that is described by the document was provided."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
    #[doc = " This property may convey specifics about the practice setting where the content was "]
    #[doc = " created, often reflecting the clinical specialty."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "practiceSetting")]
    pub practice_setting: Option<CodeableConcept>,
    #[doc = " Related identifiers or resources associated with the DocumentReference."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub related: Option<Vec<Reference>>,
    #[doc = " The Patient Information as known when the document was published. May be a reference to a "]
    #[doc = " version specific, or contained."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "sourcePatientInfo")]
    pub source_patient_info: Option<Reference>,
}
#[doc = " A reference to a document of any kind for any purpose. Provides metadata about the document so "]
#[doc = " that the document can be discovered and managed. The scope of a document is any seralized "]
#[doc = " object with a mime-type, so includes formal patient centric documents (CDA), cliical notes, "]
#[doc = " scanned paper, and non-patient specific documents like policy text."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "DocumentReference_RelatesTo")]
#[serde(deny_unknown_fields)]
pub struct DocumentReferenceRelatesTo {
    #[doc = " Extensions for code"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _code: Option<Element>,
    #[doc = " The type of relationship that this document has with anther document."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The target document of this relationship."]
    pub target: Reference,
}
#[doc = " Indicates how the medication is/was taken or should be taken by the patient."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Dosage {
    #[doc = " Extensions for asNeededBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_asNeededBoolean")]
    pub _as_needed_boolean: Option<Element>,
    #[doc = " Extensions for patientInstruction"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patientInstruction")]
    pub _patient_instruction: Option<Element>,
    #[doc = " Extensions for sequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _sequence: Option<Element>,
    #[doc = " Extensions for text"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _text: Option<Element>,
    #[doc = " Supplemental instructions to the patient on how to take the medication  (e.g. \"with meals\" "]
    #[doc = " or\"take half to one hour before food\") or warnings for the patient about the medication "]
    #[doc = " (e.g. \"may cause drowsiness\" or \"avoid exposure of skin to direct sunlight or sunlamps\")."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "additionalInstruction")]
    pub additional_instruction: Option<Vec<CodeableConcept>>,
    #[doc = " Indicates whether the Medication is only taken when needed within a specific dosing "]
    #[doc = " schedule (Boolean option), or it indicates the precondition for taking the Medication "]
    #[doc = " (CodeableConcept)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "asNeededBoolean")]
    pub as_needed_boolean: Option<bool>,
    #[doc = " Indicates whether the Medication is only taken when needed within a specific dosing "]
    #[doc = " schedule (Boolean option), or it indicates the precondition for taking the Medication "]
    #[doc = " (CodeableConcept)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "asNeededCodeableConcept")]
    pub as_needed_codeable_concept: Option<CodeableConcept>,
    #[doc = " The amount of medication administered."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "doseAndRate")]
    pub dose_and_rate: Option<Vec<DosageDoseAndRate>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Upper limit on medication per administration."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxDosePerAdministration")]
    pub max_dose_per_administration: Option<Quantity>,
    #[doc = " Upper limit on medication per lifetime of the patient."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxDosePerLifetime")]
    pub max_dose_per_lifetime: Option<Quantity>,
    #[doc = " Upper limit on medication per unit of time."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxDosePerPeriod")]
    pub max_dose_per_period: Option<Ratio>,
    #[doc = " Technique for administering medication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub method: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Instructions in terms that are understood by the patient or consumer."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patientInstruction")]
    pub patient_instruction: Option<String>,
    #[doc = " How drug should enter body."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub route: Option<CodeableConcept>,
    #[doc = " Indicates the order in which the dosage instructions should be applied or interpreted."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sequence: Option<Integer>,
    #[doc = " Body site to administer to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub site: Option<CodeableConcept>,
    #[doc = " Free text dosage instructions e.g. SIG."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    #[doc = " When medication should be administered."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub timing: Option<Timing>,
}
#[doc = " Indicates how the medication is/was taken or should be taken by the patient."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Dosage_DoseAndRate")]
#[serde(deny_unknown_fields)]
pub struct DosageDoseAndRate {
    #[doc = " Amount of medication per dose."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "doseQuantity")]
    pub dose_quantity: Option<Quantity>,
    #[doc = " Amount of medication per dose."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "doseRange")]
    pub dose_range: Option<Range>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Amount of medication per unit of time."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "rateQuantity")]
    pub rate_quantity: Option<Quantity>,
    #[doc = " Amount of medication per unit of time."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "rateRange")]
    pub rate_range: Option<Range>,
    #[doc = " Amount of medication per unit of time."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "rateRatio")]
    pub rate_ratio: Option<Ratio>,
    #[doc = " The kind of dose or rate specified, for example, ordered or calculated."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " A length of time."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Duration {
    #[doc = " Extensions for code"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _code: Option<Element>,
    #[doc = " Extensions for comparator"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _comparator: Option<Element>,
    #[doc = " Extensions for system"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _system: Option<Element>,
    #[doc = " Extensions for unit"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _unit: Option<Element>,
    #[doc = " Extensions for value"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _value: Option<Element>,
    #[doc = " A computer processable form of the unit in some unit representation system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,
    #[doc = " How the value should be understood and represented - whether the actual value is greater or "]
    #[doc = " less than the stated value due to measurement issues; e.g. if the comparator is \"<\" , then "]
    #[doc = " the real value is < stated value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comparator: Option<serde_json::Value>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The identification of the system that provides the coded form of the unit."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub system: Option<Uri>,
    #[doc = " A human-readable form of the unit."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
    #[doc = " The value of the measured amount. The value includes an implicit precision in the "]
    #[doc = " presentation of the value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Decimal>,
}
#[doc = " Base definition for all elements in a resource."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Element {
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
}
#[doc = " Captures constraints on each element within the resource, profile, or extension."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ElementDefinition {
    #[doc = " Extensions for alias"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _alias: Option<Vec<Element>>,
    #[doc = " Extensions for comment"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _comment: Option<Element>,
    #[doc = " Extensions for condition"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _condition: Option<Vec<Element>>,
    #[doc = " Extensions for contentReference"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_contentReference")]
    pub _content_reference: Option<Element>,
    #[doc = " Extensions for defaultValueBase64Binary"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueBase64Binary")]
    pub _default_value_base_64_binary: Option<Element>,
    #[doc = " Extensions for defaultValueBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueBoolean")]
    pub _default_value_boolean: Option<Element>,
    #[doc = " Extensions for defaultValueCanonical"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueCanonical")]
    pub _default_value_canonical: Option<Element>,
    #[doc = " Extensions for defaultValueCode"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueCode")]
    pub _default_value_code: Option<Element>,
    #[doc = " Extensions for defaultValueDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueDate")]
    pub _default_value_date: Option<Element>,
    #[doc = " Extensions for defaultValueDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueDateTime")]
    pub _default_value_date_time: Option<Element>,
    #[doc = " Extensions for defaultValueDecimal"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueDecimal")]
    pub _default_value_decimal: Option<Element>,
    #[doc = " Extensions for defaultValueId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueId")]
    pub _default_value_id: Option<Element>,
    #[doc = " Extensions for defaultValueInstant"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueInstant")]
    pub _default_value_instant: Option<Element>,
    #[doc = " Extensions for defaultValueInteger"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueInteger")]
    pub _default_value_integer: Option<Element>,
    #[doc = " Extensions for defaultValueMarkdown"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueMarkdown")]
    pub _default_value_markdown: Option<Element>,
    #[doc = " Extensions for defaultValueOid"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueOid")]
    pub _default_value_oid: Option<Element>,
    #[doc = " Extensions for defaultValuePositiveInt"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValuePositiveInt")]
    pub _default_value_positive_int: Option<Element>,
    #[doc = " Extensions for defaultValueString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueString")]
    pub _default_value_string: Option<Element>,
    #[doc = " Extensions for defaultValueTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueTime")]
    pub _default_value_time: Option<Element>,
    #[doc = " Extensions for defaultValueUnsignedInt"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueUnsignedInt")]
    pub _default_value_unsigned_int: Option<Element>,
    #[doc = " Extensions for defaultValueUri"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueUri")]
    pub _default_value_uri: Option<Element>,
    #[doc = " Extensions for defaultValueUrl"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueUrl")]
    pub _default_value_url: Option<Element>,
    #[doc = " Extensions for defaultValueUuid"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueUuid")]
    pub _default_value_uuid: Option<Element>,
    #[doc = " Extensions for definition"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _definition: Option<Element>,
    #[doc = " Extensions for fixedBase64Binary"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fixedBase64Binary")]
    pub _fixed_base_64_binary: Option<Element>,
    #[doc = " Extensions for fixedBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fixedBoolean")]
    pub _fixed_boolean: Option<Element>,
    #[doc = " Extensions for fixedCanonical"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fixedCanonical")]
    pub _fixed_canonical: Option<Element>,
    #[doc = " Extensions for fixedCode"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fixedCode")]
    pub _fixed_code: Option<Element>,
    #[doc = " Extensions for fixedDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fixedDate")]
    pub _fixed_date: Option<Element>,
    #[doc = " Extensions for fixedDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fixedDateTime")]
    pub _fixed_date_time: Option<Element>,
    #[doc = " Extensions for fixedDecimal"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fixedDecimal")]
    pub _fixed_decimal: Option<Element>,
    #[doc = " Extensions for fixedId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fixedId")]
    pub _fixed_id: Option<Element>,
    #[doc = " Extensions for fixedInstant"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fixedInstant")]
    pub _fixed_instant: Option<Element>,
    #[doc = " Extensions for fixedInteger"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fixedInteger")]
    pub _fixed_integer: Option<Element>,
    #[doc = " Extensions for fixedMarkdown"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fixedMarkdown")]
    pub _fixed_markdown: Option<Element>,
    #[doc = " Extensions for fixedOid"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fixedOid")]
    pub _fixed_oid: Option<Element>,
    #[doc = " Extensions for fixedPositiveInt"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fixedPositiveInt")]
    pub _fixed_positive_int: Option<Element>,
    #[doc = " Extensions for fixedString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fixedString")]
    pub _fixed_string: Option<Element>,
    #[doc = " Extensions for fixedTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fixedTime")]
    pub _fixed_time: Option<Element>,
    #[doc = " Extensions for fixedUnsignedInt"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fixedUnsignedInt")]
    pub _fixed_unsigned_int: Option<Element>,
    #[doc = " Extensions for fixedUri"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fixedUri")]
    pub _fixed_uri: Option<Element>,
    #[doc = " Extensions for fixedUrl"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fixedUrl")]
    pub _fixed_url: Option<Element>,
    #[doc = " Extensions for fixedUuid"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fixedUuid")]
    pub _fixed_uuid: Option<Element>,
    #[doc = " Extensions for isModifier"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_isModifier")]
    pub _is_modifier: Option<Element>,
    #[doc = " Extensions for isModifierReason"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_isModifierReason")]
    pub _is_modifier_reason: Option<Element>,
    #[doc = " Extensions for isSummary"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_isSummary")]
    pub _is_summary: Option<Element>,
    #[doc = " Extensions for label"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _label: Option<Element>,
    #[doc = " Extensions for max"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _max: Option<Element>,
    #[doc = " Extensions for maxLength"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_maxLength")]
    pub _max_length: Option<Element>,
    #[doc = " Extensions for maxValueDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_maxValueDate")]
    pub _max_value_date: Option<Element>,
    #[doc = " Extensions for maxValueDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_maxValueDateTime")]
    pub _max_value_date_time: Option<Element>,
    #[doc = " Extensions for maxValueDecimal"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_maxValueDecimal")]
    pub _max_value_decimal: Option<Element>,
    #[doc = " Extensions for maxValueInstant"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_maxValueInstant")]
    pub _max_value_instant: Option<Element>,
    #[doc = " Extensions for maxValueInteger"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_maxValueInteger")]
    pub _max_value_integer: Option<Element>,
    #[doc = " Extensions for maxValuePositiveInt"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_maxValuePositiveInt")]
    pub _max_value_positive_int: Option<Element>,
    #[doc = " Extensions for maxValueTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_maxValueTime")]
    pub _max_value_time: Option<Element>,
    #[doc = " Extensions for maxValueUnsignedInt"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_maxValueUnsignedInt")]
    pub _max_value_unsigned_int: Option<Element>,
    #[doc = " Extensions for meaningWhenMissing"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_meaningWhenMissing")]
    pub _meaning_when_missing: Option<Element>,
    #[doc = " Extensions for min"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _min: Option<Element>,
    #[doc = " Extensions for minValueDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_minValueDate")]
    pub _min_value_date: Option<Element>,
    #[doc = " Extensions for minValueDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_minValueDateTime")]
    pub _min_value_date_time: Option<Element>,
    #[doc = " Extensions for minValueDecimal"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_minValueDecimal")]
    pub _min_value_decimal: Option<Element>,
    #[doc = " Extensions for minValueInstant"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_minValueInstant")]
    pub _min_value_instant: Option<Element>,
    #[doc = " Extensions for minValueInteger"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_minValueInteger")]
    pub _min_value_integer: Option<Element>,
    #[doc = " Extensions for minValuePositiveInt"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_minValuePositiveInt")]
    pub _min_value_positive_int: Option<Element>,
    #[doc = " Extensions for minValueTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_minValueTime")]
    pub _min_value_time: Option<Element>,
    #[doc = " Extensions for minValueUnsignedInt"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_minValueUnsignedInt")]
    pub _min_value_unsigned_int: Option<Element>,
    #[doc = " Extensions for mustSupport"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_mustSupport")]
    pub _must_support: Option<Element>,
    #[doc = " Extensions for orderMeaning"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_orderMeaning")]
    pub _order_meaning: Option<Element>,
    #[doc = " Extensions for path"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _path: Option<Element>,
    #[doc = " Extensions for patternBase64Binary"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patternBase64Binary")]
    pub _pattern_base_64_binary: Option<Element>,
    #[doc = " Extensions for patternBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patternBoolean")]
    pub _pattern_boolean: Option<Element>,
    #[doc = " Extensions for patternCanonical"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patternCanonical")]
    pub _pattern_canonical: Option<Element>,
    #[doc = " Extensions for patternCode"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patternCode")]
    pub _pattern_code: Option<Element>,
    #[doc = " Extensions for patternDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patternDate")]
    pub _pattern_date: Option<Element>,
    #[doc = " Extensions for patternDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patternDateTime")]
    pub _pattern_date_time: Option<Element>,
    #[doc = " Extensions for patternDecimal"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patternDecimal")]
    pub _pattern_decimal: Option<Element>,
    #[doc = " Extensions for patternId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patternId")]
    pub _pattern_id: Option<Element>,
    #[doc = " Extensions for patternInstant"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patternInstant")]
    pub _pattern_instant: Option<Element>,
    #[doc = " Extensions for patternInteger"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patternInteger")]
    pub _pattern_integer: Option<Element>,
    #[doc = " Extensions for patternMarkdown"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patternMarkdown")]
    pub _pattern_markdown: Option<Element>,
    #[doc = " Extensions for patternOid"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patternOid")]
    pub _pattern_oid: Option<Element>,
    #[doc = " Extensions for patternPositiveInt"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patternPositiveInt")]
    pub _pattern_positive_int: Option<Element>,
    #[doc = " Extensions for patternString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patternString")]
    pub _pattern_string: Option<Element>,
    #[doc = " Extensions for patternTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patternTime")]
    pub _pattern_time: Option<Element>,
    #[doc = " Extensions for patternUnsignedInt"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patternUnsignedInt")]
    pub _pattern_unsigned_int: Option<Element>,
    #[doc = " Extensions for patternUri"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patternUri")]
    pub _pattern_uri: Option<Element>,
    #[doc = " Extensions for patternUrl"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patternUrl")]
    pub _pattern_url: Option<Element>,
    #[doc = " Extensions for patternUuid"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patternUuid")]
    pub _pattern_uuid: Option<Element>,
    #[doc = " Extensions for representation"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _representation: Option<Vec<Element>>,
    #[doc = " Extensions for requirements"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _requirements: Option<Element>,
    #[doc = " Extensions for short"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _short: Option<Element>,
    #[doc = " Extensions for sliceIsConstraining"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sliceIsConstraining")]
    pub _slice_is_constraining: Option<Element>,
    #[doc = " Extensions for sliceName"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sliceName")]
    pub _slice_name: Option<Element>,
    #[doc = " Identifies additional names by which this element might also be known."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub alias: Option<Vec<String>>,
    #[doc = " Information about the base definition of the element, provided to make it unnecessary for "]
    #[doc = " tools to trace the deviation of the element through the derived and related profiles. When "]
    #[doc = " the element definition is not the original definition of an element - i.g. either in a "]
    #[doc = " constraint on another type, or for elements from a super type in a snap shot - then the "]
    #[doc = " information in provided in the element definition may be different to the base definition. "]
    #[doc = " On the original definition of the element, it will be same."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub base: Option<ElementDefinitionBase>,
    #[doc = " Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or "]
    #[doc = " the data types (string, uri)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub binding: Option<ElementDefinitionBinding>,
    #[doc = " A code that has the same meaning as the element in a particular terminology."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Vec<Coding>>,
    #[doc = " Explanatory notes and implementation guidance about the data element, including notes about "]
    #[doc = " how to use the data properly, exceptions to proper use, etc. (Note: The text you are "]
    #[doc = " reading is specified in ElementDefinition.comment)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<Markdown>,
    #[doc = " A reference to an invariant that may make additional statements about the cardinality or "]
    #[doc = " value in the instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub condition: Option<Vec<Id>>,
    #[doc = " Formal constraints such as co-occurrence and other constraints that can be computationally "]
    #[doc = " evaluated within the context of the instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub constraint: Option<Vec<ElementDefinitionConstraint>>,
    #[doc = " Identifies an element defined elsewhere in the definition whose content rules should be "]
    #[doc = " applied to the current element. ContentReferences bring across all the rules that are in "]
    #[doc = " the ElementDefinition for the element, including definitions, cardinality constraints, "]
    #[doc = " bindings, invariants etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contentReference")]
    pub content_reference: Option<Uri>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueAddress")]
    pub default_value_address: Option<Address>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueAge")]
    pub default_value_age: Option<Age>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueAnnotation")]
    pub default_value_annotation: Option<Annotation>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueAttachment")]
    pub default_value_attachment: Option<Attachment>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueBase64Binary")]
    pub default_value_base_64_binary: Option<String>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueBoolean")]
    pub default_value_boolean: Option<bool>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueCanonical")]
    pub default_value_canonical: Option<String>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueCode")]
    pub default_value_code: Option<String>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueCodeableConcept")]
    pub default_value_codeable_concept: Option<CodeableConcept>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueCodeableReference")]
    pub default_value_codeable_reference: Option<CodeableReference>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueCoding")]
    pub default_value_coding: Option<Coding>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueContactDetail")]
    pub default_value_contact_detail: Option<ContactDetail>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueContactPoint")]
    pub default_value_contact_point: Option<ContactPoint>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueContributor")]
    pub default_value_contributor: Option<Contributor>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueCount")]
    pub default_value_count: Option<Count>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueDataRequirement")]
    pub default_value_data_requirement: Option<DataRequirement>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueDate")]
    pub default_value_date: Option<String>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueDateTime")]
    pub default_value_date_time: Option<String>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueDecimal")]
    pub default_value_decimal: Option<f64>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueDistance")]
    pub default_value_distance: Option<Distance>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueDosage")]
    pub default_value_dosage: Option<Dosage>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueDuration")]
    pub default_value_duration: Option<Duration>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueExpression")]
    pub default_value_expression: Option<Expression>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueHumanName")]
    pub default_value_human_name: Option<HumanName>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueId")]
    pub default_value_id: Option<String>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueIdentifier")]
    pub default_value_identifier: Option<Identifier>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueInstant")]
    pub default_value_instant: Option<String>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueInteger")]
    pub default_value_integer: Option<f64>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueMarkdown")]
    pub default_value_markdown: Option<String>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueMoney")]
    pub default_value_money: Option<Money>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueOid")]
    pub default_value_oid: Option<String>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueParameterDefinition")]
    pub default_value_parameter_definition: Option<ParameterDefinition>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValuePeriod")]
    pub default_value_period: Option<Period>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValuePositiveInt")]
    pub default_value_positive_int: Option<f64>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueQuantity")]
    pub default_value_quantity: Option<Quantity>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueRange")]
    pub default_value_range: Option<Range>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueRatio")]
    pub default_value_ratio: Option<Ratio>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueRatioRange")]
    pub default_value_ratio_range: Option<RatioRange>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueReference")]
    pub default_value_reference: Option<Reference>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueRelatedArtifact")]
    pub default_value_related_artifact: Option<RelatedArtifact>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueSampledData")]
    pub default_value_sampled_data: Option<SampledData>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueSignature")]
    pub default_value_signature: Option<Signature>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueString")]
    pub default_value_string: Option<String>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueTime")]
    pub default_value_time: Option<String>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueTiming")]
    pub default_value_timing: Option<Timing>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueTriggerDefinition")]
    pub default_value_trigger_definition: Option<TriggerDefinition>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueUnsignedInt")]
    pub default_value_unsigned_int: Option<f64>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueUri")]
    pub default_value_uri: Option<String>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueUrl")]
    pub default_value_url: Option<String>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueUsageContext")]
    pub default_value_usage_context: Option<UsageContext>,
    #[doc = " The value that should be used if there is no value stated in the instance (e.g. 'if not "]
    #[doc = " otherwise specified, the abstract is false')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueUuid")]
    pub default_value_uuid: Option<String>,
    #[doc = " Provides a complete explanation of the meaning of the data element for human readability.  "]
    #[doc = " For the case of elements derived from existing elements (e.g. constraints), the definition "]
    #[doc = " SHALL be consistent with the base definition, but convey the meaning of the element in the "]
    #[doc = " particular context of use of the resource. (Note: The text you are reading is specified in "]
    #[doc = " ElementDefinition.definition)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub definition: Option<Markdown>,
    #[doc = " A sample value for this element demonstrating the type of information that would typically "]
    #[doc = " be found in the element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub example: Option<Vec<ElementDefinitionExample>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedAddress")]
    pub fixed_address: Option<Address>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedAge")]
    pub fixed_age: Option<Age>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedAnnotation")]
    pub fixed_annotation: Option<Annotation>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedAttachment")]
    pub fixed_attachment: Option<Attachment>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedBase64Binary")]
    pub fixed_base_64_binary: Option<String>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedBoolean")]
    pub fixed_boolean: Option<bool>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedCanonical")]
    pub fixed_canonical: Option<String>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedCode")]
    pub fixed_code: Option<String>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedCodeableConcept")]
    pub fixed_codeable_concept: Option<CodeableConcept>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedCodeableReference")]
    pub fixed_codeable_reference: Option<CodeableReference>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedCoding")]
    pub fixed_coding: Option<Coding>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedContactDetail")]
    pub fixed_contact_detail: Option<ContactDetail>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedContactPoint")]
    pub fixed_contact_point: Option<ContactPoint>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedContributor")]
    pub fixed_contributor: Option<Contributor>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedCount")]
    pub fixed_count: Option<Count>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedDataRequirement")]
    pub fixed_data_requirement: Option<DataRequirement>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedDate")]
    pub fixed_date: Option<String>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedDateTime")]
    pub fixed_date_time: Option<String>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedDecimal")]
    pub fixed_decimal: Option<f64>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedDistance")]
    pub fixed_distance: Option<Distance>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedDosage")]
    pub fixed_dosage: Option<Dosage>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedDuration")]
    pub fixed_duration: Option<Duration>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedExpression")]
    pub fixed_expression: Option<Expression>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedHumanName")]
    pub fixed_human_name: Option<HumanName>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedId")]
    pub fixed_id: Option<String>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedIdentifier")]
    pub fixed_identifier: Option<Identifier>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedInstant")]
    pub fixed_instant: Option<String>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedInteger")]
    pub fixed_integer: Option<f64>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedMarkdown")]
    pub fixed_markdown: Option<String>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedMoney")]
    pub fixed_money: Option<Money>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedOid")]
    pub fixed_oid: Option<String>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedParameterDefinition")]
    pub fixed_parameter_definition: Option<ParameterDefinition>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedPeriod")]
    pub fixed_period: Option<Period>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedPositiveInt")]
    pub fixed_positive_int: Option<f64>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedQuantity")]
    pub fixed_quantity: Option<Quantity>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedRange")]
    pub fixed_range: Option<Range>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedRatio")]
    pub fixed_ratio: Option<Ratio>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedRatioRange")]
    pub fixed_ratio_range: Option<RatioRange>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedReference")]
    pub fixed_reference: Option<Reference>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedRelatedArtifact")]
    pub fixed_related_artifact: Option<RelatedArtifact>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedSampledData")]
    pub fixed_sampled_data: Option<SampledData>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedSignature")]
    pub fixed_signature: Option<Signature>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedString")]
    pub fixed_string: Option<String>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedTime")]
    pub fixed_time: Option<String>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedTiming")]
    pub fixed_timing: Option<Timing>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedTriggerDefinition")]
    pub fixed_trigger_definition: Option<TriggerDefinition>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedUnsignedInt")]
    pub fixed_unsigned_int: Option<f64>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedUri")]
    pub fixed_uri: Option<String>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedUrl")]
    pub fixed_url: Option<String>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedUsageContext")]
    pub fixed_usage_context: Option<UsageContext>,
    #[doc = " Specifies a value that SHALL be exactly the value  for this element in the instance. For "]
    #[doc = " purposes of comparison, non-significant whitespace is ignored, and all values must be an "]
    #[doc = " exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedUuid")]
    pub fixed_uuid: Option<String>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " If true, the value of this element affects the interpretation of the element or resource "]
    #[doc = " that contains it, and the value of the element cannot be ignored. Typically, this is used "]
    #[doc = " for status, negation and qualification codes. The effect of this is that the element cannot "]
    #[doc = " be ignored by systems: they SHALL either recognize the element and process it, and/or a "]
    #[doc = " pre-determination has been made that it is not relevant to their particular system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "isModifier")]
    pub is_modifier: Option<Boolean>,
    #[doc = " Explains how that element affects the interpretation of the resource or element that "]
    #[doc = " contains it."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "isModifierReason")]
    pub is_modifier_reason: Option<String>,
    #[doc = " Whether the element should be included if a client requests a search with the parameter "]
    #[doc = " _summary=true."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "isSummary")]
    pub is_summary: Option<Boolean>,
    #[doc = " A single preferred label which is the text to display beside the element indicating its "]
    #[doc = " meaning or to use to prompt for the element in a user display or form."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    #[doc = " Identifies a concept from an external specification that roughly corresponds to this "]
    #[doc = " element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub mapping: Option<Vec<ElementDefinitionMapping>>,
    #[doc = " The maximum number of times this element is permitted to appear in the instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub max: Option<String>,
    #[doc = " Indicates the maximum length in characters that is permitted to be present in conformant "]
    #[doc = " instances and which is expected to be supported by conformant consumers that support the "]
    #[doc = " element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxLength")]
    pub max_length: Option<Integer>,
    #[doc = " The maximum allowed value for the element. The value is inclusive. This is allowed for the "]
    #[doc = " types date, dateTime, instant, time, decimal, integer, and Quantity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxValueDate")]
    pub max_value_date: Option<String>,
    #[doc = " The maximum allowed value for the element. The value is inclusive. This is allowed for the "]
    #[doc = " types date, dateTime, instant, time, decimal, integer, and Quantity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxValueDateTime")]
    pub max_value_date_time: Option<String>,
    #[doc = " The maximum allowed value for the element. The value is inclusive. This is allowed for the "]
    #[doc = " types date, dateTime, instant, time, decimal, integer, and Quantity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxValueDecimal")]
    pub max_value_decimal: Option<f64>,
    #[doc = " The maximum allowed value for the element. The value is inclusive. This is allowed for the "]
    #[doc = " types date, dateTime, instant, time, decimal, integer, and Quantity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxValueInstant")]
    pub max_value_instant: Option<String>,
    #[doc = " The maximum allowed value for the element. The value is inclusive. This is allowed for the "]
    #[doc = " types date, dateTime, instant, time, decimal, integer, and Quantity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxValueInteger")]
    pub max_value_integer: Option<f64>,
    #[doc = " The maximum allowed value for the element. The value is inclusive. This is allowed for the "]
    #[doc = " types date, dateTime, instant, time, decimal, integer, and Quantity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxValuePositiveInt")]
    pub max_value_positive_int: Option<f64>,
    #[doc = " The maximum allowed value for the element. The value is inclusive. This is allowed for the "]
    #[doc = " types date, dateTime, instant, time, decimal, integer, and Quantity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxValueQuantity")]
    pub max_value_quantity: Option<Quantity>,
    #[doc = " The maximum allowed value for the element. The value is inclusive. This is allowed for the "]
    #[doc = " types date, dateTime, instant, time, decimal, integer, and Quantity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxValueTime")]
    pub max_value_time: Option<String>,
    #[doc = " The maximum allowed value for the element. The value is inclusive. This is allowed for the "]
    #[doc = " types date, dateTime, instant, time, decimal, integer, and Quantity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxValueUnsignedInt")]
    pub max_value_unsigned_int: Option<f64>,
    #[doc = " The Implicit meaning that is to be understood when this element is missing (e.g. 'when this "]
    #[doc = " element is missing, the period is ongoing')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "meaningWhenMissing")]
    pub meaning_when_missing: Option<Markdown>,
    #[doc = " The minimum number of times this element SHALL appear in the instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub min: Option<UnsignedInt>,
    #[doc = " The minimum allowed value for the element. The value is inclusive. This is allowed for the "]
    #[doc = " types date, dateTime, instant, time, decimal, integer, and Quantity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "minValueDate")]
    pub min_value_date: Option<String>,
    #[doc = " The minimum allowed value for the element. The value is inclusive. This is allowed for the "]
    #[doc = " types date, dateTime, instant, time, decimal, integer, and Quantity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "minValueDateTime")]
    pub min_value_date_time: Option<String>,
    #[doc = " The minimum allowed value for the element. The value is inclusive. This is allowed for the "]
    #[doc = " types date, dateTime, instant, time, decimal, integer, and Quantity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "minValueDecimal")]
    pub min_value_decimal: Option<f64>,
    #[doc = " The minimum allowed value for the element. The value is inclusive. This is allowed for the "]
    #[doc = " types date, dateTime, instant, time, decimal, integer, and Quantity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "minValueInstant")]
    pub min_value_instant: Option<String>,
    #[doc = " The minimum allowed value for the element. The value is inclusive. This is allowed for the "]
    #[doc = " types date, dateTime, instant, time, decimal, integer, and Quantity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "minValueInteger")]
    pub min_value_integer: Option<f64>,
    #[doc = " The minimum allowed value for the element. The value is inclusive. This is allowed for the "]
    #[doc = " types date, dateTime, instant, time, decimal, integer, and Quantity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "minValuePositiveInt")]
    pub min_value_positive_int: Option<f64>,
    #[doc = " The minimum allowed value for the element. The value is inclusive. This is allowed for the "]
    #[doc = " types date, dateTime, instant, time, decimal, integer, and Quantity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "minValueQuantity")]
    pub min_value_quantity: Option<Quantity>,
    #[doc = " The minimum allowed value for the element. The value is inclusive. This is allowed for the "]
    #[doc = " types date, dateTime, instant, time, decimal, integer, and Quantity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "minValueTime")]
    pub min_value_time: Option<String>,
    #[doc = " The minimum allowed value for the element. The value is inclusive. This is allowed for the "]
    #[doc = " types date, dateTime, instant, time, decimal, integer, and Quantity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "minValueUnsignedInt")]
    pub min_value_unsigned_int: Option<f64>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " If true, implementations that produce or consume resources SHALL provide \"support\" for the "]
    #[doc = " element in some meaningful way.  If false, the element may be ignored and not supported. If "]
    #[doc = " false, whether to populate or use the data element in any way is at the discretion of the "]
    #[doc = " implementation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "mustSupport")]
    pub must_support: Option<Boolean>,
    #[doc = " If present, indicates that the order of the repeating element has meaning and describes "]
    #[doc = " what that meaning is.  If absent, it means that the order of the element has no meaning."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "orderMeaning")]
    pub order_meaning: Option<String>,
    #[doc = " The path identifies the element and is expressed as a \".\"-separated list of ancestor "]
    #[doc = " elements, beginning with the name of the resource or extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternAddress")]
    pub pattern_address: Option<Address>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternAge")]
    pub pattern_age: Option<Age>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternAnnotation")]
    pub pattern_annotation: Option<Annotation>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternAttachment")]
    pub pattern_attachment: Option<Attachment>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternBase64Binary")]
    pub pattern_base_64_binary: Option<String>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternBoolean")]
    pub pattern_boolean: Option<bool>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternCanonical")]
    pub pattern_canonical: Option<String>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternCode")]
    pub pattern_code: Option<String>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternCodeableConcept")]
    pub pattern_codeable_concept: Option<CodeableConcept>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternCodeableReference")]
    pub pattern_codeable_reference: Option<CodeableReference>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternCoding")]
    pub pattern_coding: Option<Coding>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternContactDetail")]
    pub pattern_contact_detail: Option<ContactDetail>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternContactPoint")]
    pub pattern_contact_point: Option<ContactPoint>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternContributor")]
    pub pattern_contributor: Option<Contributor>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternCount")]
    pub pattern_count: Option<Count>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternDataRequirement")]
    pub pattern_data_requirement: Option<DataRequirement>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternDate")]
    pub pattern_date: Option<String>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternDateTime")]
    pub pattern_date_time: Option<String>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternDecimal")]
    pub pattern_decimal: Option<f64>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternDistance")]
    pub pattern_distance: Option<Distance>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternDosage")]
    pub pattern_dosage: Option<Dosage>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternDuration")]
    pub pattern_duration: Option<Duration>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternExpression")]
    pub pattern_expression: Option<Expression>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternHumanName")]
    pub pattern_human_name: Option<HumanName>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternId")]
    pub pattern_id: Option<String>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternIdentifier")]
    pub pattern_identifier: Option<Identifier>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternInstant")]
    pub pattern_instant: Option<String>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternInteger")]
    pub pattern_integer: Option<f64>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternMarkdown")]
    pub pattern_markdown: Option<String>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternMoney")]
    pub pattern_money: Option<Money>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternOid")]
    pub pattern_oid: Option<String>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternParameterDefinition")]
    pub pattern_parameter_definition: Option<ParameterDefinition>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternPeriod")]
    pub pattern_period: Option<Period>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternPositiveInt")]
    pub pattern_positive_int: Option<f64>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternQuantity")]
    pub pattern_quantity: Option<Quantity>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternRange")]
    pub pattern_range: Option<Range>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternRatio")]
    pub pattern_ratio: Option<Ratio>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternRatioRange")]
    pub pattern_ratio_range: Option<RatioRange>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternReference")]
    pub pattern_reference: Option<Reference>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternRelatedArtifact")]
    pub pattern_related_artifact: Option<RelatedArtifact>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternSampledData")]
    pub pattern_sampled_data: Option<SampledData>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternSignature")]
    pub pattern_signature: Option<Signature>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternString")]
    pub pattern_string: Option<String>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternTime")]
    pub pattern_time: Option<String>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternTiming")]
    pub pattern_timing: Option<Timing>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternTriggerDefinition")]
    pub pattern_trigger_definition: Option<TriggerDefinition>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternUnsignedInt")]
    pub pattern_unsigned_int: Option<f64>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternUri")]
    pub pattern_uri: Option<String>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternUrl")]
    pub pattern_url: Option<String>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternUsageContext")]
    pub pattern_usage_context: Option<UsageContext>,
    #[doc = " Specifies a value that the value in the instance SHALL follow - that is, any value in the "]
    #[doc = " pattern must be found in the instance. Other additional values may be found too. This is "]
    #[doc = " effectively constraint by example.  "]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a primitive, it means that the value provided in the "]
    #[doc = " pattern[x] must match the instance value exactly."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain an array, it means that each element provided in the "]
    #[doc = " pattern[x] array must (recursively) match at least one element from the instance array."]
    #[doc = " "]
    #[doc = " When pattern[x] is used to constrain a complex object, it means that each property in the "]
    #[doc = " pattern must be present in the complex object, and its value must recursively match -- "]
    #[doc = " i.e.,"]
    #[doc = " "]
    #[doc = " 1. If primitive: it must match exactly the pattern value"]
    #[doc = " 2. If a complex object: it must match (recursively) the pattern value"]
    #[doc = " 3. If an array: it must match (recursively) the pattern value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternUuid")]
    pub pattern_uuid: Option<String>,
    #[doc = " Codes that define how this element is represented in instances, when the deviation varies "]
    #[doc = " from the normal case."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub representation: Option<Vec<serde_json::Value>>,
    #[doc = " This element is for traceability of why the element was created and why the constraints "]
    #[doc = " exist as they do. This may be used to point to source materials or specifications that "]
    #[doc = " drove the structure of this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub requirements: Option<Markdown>,
    #[doc = " A concise description of what this element means (e.g. for use in autogenerated summaries)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub short: Option<String>,
    #[doc = " If true, indicates that this slice definition is constraining a slice definition with the "]
    #[doc = " same name in an inherited profile. If false, the slice is not overriding any slice in an "]
    #[doc = " inherited profile. If missing, the slice might or might not be overriding a slice in an "]
    #[doc = " inherited profile, depending on the sliceName."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "sliceIsConstraining")]
    pub slice_is_constraining: Option<Boolean>,
    #[doc = " The name of this element definition slice, when slicing is working. The name must be a "]
    #[doc = " token with no dots or spaces. This is a unique name referring to a specific set of "]
    #[doc = " constraints applied to this element, used to provide a name to different slices of the same "]
    #[doc = " element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "sliceName")]
    pub slice_name: Option<String>,
    #[doc = " Indicates that the element is sliced into a set of alternative definitions (i.e. in a "]
    #[doc = " structure definition, there are multiple different constraints on a single element in the "]
    #[doc = " base resource). Slicing can be used in any resource that has cardinality ..* on the base "]
    #[doc = " resource, or any resource with a choice of types. The set of slices is any elements that "]
    #[doc = " come after this in the element sequence that have the same path, until a shorter path "]
    #[doc = " occurs (the shorter path terminates the set)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub slicing: Option<ElementDefinitionSlicing>,
    #[doc = " The data type or resource that the value of this element is permitted to be."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Vec<ElementDefinitionType>>,
}
#[doc = " Captures constraints on each element within the resource, profile, or extension."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ElementDefinition_Base")]
#[serde(deny_unknown_fields)]
pub struct ElementDefinitionBase {
    #[doc = " Extensions for max"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _max: Option<Element>,
    #[doc = " Extensions for min"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _min: Option<Element>,
    #[doc = " Extensions for path"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _path: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Maximum cardinality of the base element identified by the path."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub max: Option<String>,
    #[doc = " Minimum cardinality of the base element identified by the path."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub min: Option<UnsignedInt>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The Path that identifies the base element - this matches the ElementDefinition.path for "]
    #[doc = " that element. Across FHIR, there is only one base definition of any element - that is, an "]
    #[doc = " element definition on a [[[StructureDefinition]]] without a StructureDefinition.base."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}
#[doc = " Captures constraints on each element within the resource, profile, or extension."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ElementDefinition_Binding")]
#[serde(deny_unknown_fields)]
pub struct ElementDefinitionBinding {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for strength"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _strength: Option<Element>,
    #[doc = " Describes the intended use of this particular set of codes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Indicates the degree of conformance expectations associated with this binding - that is, "]
    #[doc = " the degree to which the provided value set must be adhered to in the instances."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub strength: Option<serde_json::Value>,
    #[doc = " Refers to the value set that identifies the set of codes the binding refers to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueSet")]
    pub value_set: Option<Canonical>,
}
#[doc = " Captures constraints on each element within the resource, profile, or extension."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ElementDefinition_Constraint")]
#[serde(deny_unknown_fields)]
pub struct ElementDefinitionConstraint {
    #[doc = " Extensions for expression"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _expression: Option<Element>,
    #[doc = " Extensions for human"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _human: Option<Element>,
    #[doc = " Extensions for key"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _key: Option<Element>,
    #[doc = " Extensions for requirements"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _requirements: Option<Element>,
    #[doc = " Extensions for severity"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _severity: Option<Element>,
    #[doc = " Extensions for xpath"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _xpath: Option<Element>,
    #[doc = " A [FHIRPath](fhirpath.html) expression of constraint that can be executed to see if this "]
    #[doc = " constraint is met."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Text that can be used to describe the constraint in messages identifying that the "]
    #[doc = " constraint has been violated."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub human: Option<String>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Allows identification of which elements have their cardinalities impacted by the "]
    #[doc = " constraint.  Will not be referenced for constraints that do not affect cardinality."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub key: Option<Id>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Description of why this constraint is necessary or appropriate."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub requirements: Option<String>,
    #[doc = " Identifies the impact constraint violation has on the conformance of the instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub severity: Option<serde_json::Value>,
    #[doc = " A reference to the original source of the constraint, for traceability purposes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub source: Option<Canonical>,
    #[doc = " An XPath expression of constraint that can be executed to see if this constraint is met."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub xpath: Option<String>,
}
#[doc = " Captures constraints on each element within the resource, profile, or extension."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ElementDefinition_Discriminator")]
#[serde(deny_unknown_fields)]
pub struct ElementDefinitionDiscriminator {
    #[doc = " Extensions for path"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _path: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A FHIRPath expression, using [the simple subset of FHIRPath](fhirpath.html#simple), that is "]
    #[doc = " used to identify the element on which discrimination is based."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[doc = " How the element value is interpreted when discrimination is evaluated."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<serde_json::Value>,
}
#[doc = " Captures constraints on each element within the resource, profile, or extension."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ElementDefinition_Example")]
#[serde(deny_unknown_fields)]
pub struct ElementDefinitionExample {
    #[doc = " Extensions for label"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _label: Option<Element>,
    #[doc = " Extensions for valueBase64Binary"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBase64Binary")]
    pub _value_base_64_binary: Option<Element>,
    #[doc = " Extensions for valueBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub _value_boolean: Option<Element>,
    #[doc = " Extensions for valueCanonical"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueCanonical")]
    pub _value_canonical: Option<Element>,
    #[doc = " Extensions for valueCode"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueCode")]
    pub _value_code: Option<Element>,
    #[doc = " Extensions for valueDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDate")]
    pub _value_date: Option<Element>,
    #[doc = " Extensions for valueDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDateTime")]
    pub _value_date_time: Option<Element>,
    #[doc = " Extensions for valueDecimal"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDecimal")]
    pub _value_decimal: Option<Element>,
    #[doc = " Extensions for valueId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueId")]
    pub _value_id: Option<Element>,
    #[doc = " Extensions for valueInstant"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueInstant")]
    pub _value_instant: Option<Element>,
    #[doc = " Extensions for valueInteger"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueInteger")]
    pub _value_integer: Option<Element>,
    #[doc = " Extensions for valueMarkdown"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueMarkdown")]
    pub _value_markdown: Option<Element>,
    #[doc = " Extensions for valueOid"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueOid")]
    pub _value_oid: Option<Element>,
    #[doc = " Extensions for valuePositiveInt"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valuePositiveInt")]
    pub _value_positive_int: Option<Element>,
    #[doc = " Extensions for valueString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueString")]
    pub _value_string: Option<Element>,
    #[doc = " Extensions for valueTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueTime")]
    pub _value_time: Option<Element>,
    #[doc = " Extensions for valueUnsignedInt"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUnsignedInt")]
    pub _value_unsigned_int: Option<Element>,
    #[doc = " Extensions for valueUri"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUri")]
    pub _value_uri: Option<Element>,
    #[doc = " Extensions for valueUrl"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUrl")]
    pub _value_url: Option<Element>,
    #[doc = " Extensions for valueUuid"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUuid")]
    pub _value_uuid: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Describes the purpose of this example amoung the set of examples."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAddress")]
    pub value_address: Option<Address>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAge")]
    pub value_age: Option<Age>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAnnotation")]
    pub value_annotation: Option<Annotation>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAttachment")]
    pub value_attachment: Option<Attachment>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBase64Binary")]
    pub value_base_64_binary: Option<String>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCanonical")]
    pub value_canonical: Option<String>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCode")]
    pub value_code: Option<String>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableReference")]
    pub value_codeable_reference: Option<CodeableReference>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCoding")]
    pub value_coding: Option<Coding>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueContactDetail")]
    pub value_contact_detail: Option<ContactDetail>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueContactPoint")]
    pub value_contact_point: Option<ContactPoint>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueContributor")]
    pub value_contributor: Option<Contributor>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCount")]
    pub value_count: Option<Count>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDataRequirement")]
    pub value_data_requirement: Option<DataRequirement>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDate")]
    pub value_date: Option<String>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDateTime")]
    pub value_date_time: Option<String>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDecimal")]
    pub value_decimal: Option<f64>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDistance")]
    pub value_distance: Option<Distance>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDosage")]
    pub value_dosage: Option<Dosage>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDuration")]
    pub value_duration: Option<Duration>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueExpression")]
    pub value_expression: Option<Expression>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueHumanName")]
    pub value_human_name: Option<HumanName>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueId")]
    pub value_id: Option<String>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueIdentifier")]
    pub value_identifier: Option<Identifier>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueInstant")]
    pub value_instant: Option<String>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueInteger")]
    pub value_integer: Option<f64>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueMarkdown")]
    pub value_markdown: Option<String>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueMoney")]
    pub value_money: Option<Money>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueOid")]
    pub value_oid: Option<String>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueParameterDefinition")]
    pub value_parameter_definition: Option<ParameterDefinition>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valuePeriod")]
    pub value_period: Option<Period>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valuePositiveInt")]
    pub value_positive_int: Option<f64>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRange")]
    pub value_range: Option<Range>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRatio")]
    pub value_ratio: Option<Ratio>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRatioRange")]
    pub value_ratio_range: Option<RatioRange>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueReference")]
    pub value_reference: Option<Reference>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRelatedArtifact")]
    pub value_related_artifact: Option<RelatedArtifact>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueSampledData")]
    pub value_sampled_data: Option<SampledData>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueSignature")]
    pub value_signature: Option<Signature>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueString")]
    pub value_string: Option<String>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTime")]
    pub value_time: Option<String>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTiming")]
    pub value_timing: Option<Timing>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTriggerDefinition")]
    pub value_trigger_definition: Option<TriggerDefinition>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUnsignedInt")]
    pub value_unsigned_int: Option<f64>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUri")]
    pub value_uri: Option<String>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUrl")]
    pub value_url: Option<String>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUsageContext")]
    pub value_usage_context: Option<UsageContext>,
    #[doc = " The actual value for the element, which must be one of the types allowed for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUuid")]
    pub value_uuid: Option<String>,
}
#[doc = " Captures constraints on each element within the resource, profile, or extension."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ElementDefinition_Mapping")]
#[serde(deny_unknown_fields)]
pub struct ElementDefinitionMapping {
    #[doc = " Extensions for comment"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _comment: Option<Element>,
    #[doc = " Extensions for identity"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _identity: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for map"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _map: Option<Element>,
    #[doc = " Comments that provide information about the mapping or its use."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " An internal reference to the definition of a mapping."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identity: Option<Id>,
    #[doc = " Identifies the computable language in which mapping.map is expressed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " Expresses what part of the target specification corresponds to this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub map: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " Captures constraints on each element within the resource, profile, or extension."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ElementDefinition_Slicing")]
#[serde(deny_unknown_fields)]
pub struct ElementDefinitionSlicing {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for ordered"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _ordered: Option<Element>,
    #[doc = " Extensions for rules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _rules: Option<Element>,
    #[doc = " A human-readable text description of how the slicing works. If there is no discriminator, "]
    #[doc = " this is required to be present to provide whatever information is possible about how the "]
    #[doc = " slices can be differentiated."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " Designates which child elements are used to discriminate between the slices when processing "]
    #[doc = " an instance. If one or more discriminators are provided, the value of the child elements in "]
    #[doc = " the instance data SHALL completely distinguish which slice the element in the resource "]
    #[doc = " matches based on the allowed values for those elements in each of the slices."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub discriminator: Option<Vec<ElementDefinitionDiscriminator>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " If the matching elements have to occur in the same order as defined in the profile."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub ordered: Option<Boolean>,
    #[doc = " Whether additional slices are allowed or not. When the slices are ordered, profile authors "]
    #[doc = " can also say that additional slices are only allowed at the end."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub rules: Option<serde_json::Value>,
}
#[doc = " Captures constraints on each element within the resource, profile, or extension."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ElementDefinition_Type")]
#[serde(deny_unknown_fields)]
pub struct ElementDefinitionType {
    #[doc = " Extensions for aggregation"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _aggregation: Option<Vec<Element>>,
    #[doc = " Extensions for code"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _code: Option<Element>,
    #[doc = " Extensions for versioning"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _versioning: Option<Element>,
    #[doc = " If the type is a reference to another resource, how the resource is or can be aggregated - "]
    #[doc = " is it a contained resource, or a reference, and if the context is a bundle, is it included "]
    #[doc = " in the bundle."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub aggregation: Option<Vec<serde_json::Value>>,
    #[doc = " URL of Data type or Resource that is a(or the) type used for this element. References are "]
    #[doc = " URLs that are relative to http://hl7.org/fhir/StructureDefinition e.g. \"string\" is a "]
    #[doc = " reference to http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed "]
    #[doc = " in logical models."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Uri>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Identifies a profile structure or implementation Guide that applies to the datatype this "]
    #[doc = " element refers to. If any profiles are specified, then the content must conform to at least "]
    #[doc = " one of them. The URL can be a local reference - to a contained StructureDefinition, or a "]
    #[doc = " reference to another StructureDefinition or Implementation Guide by a canonical URL. When "]
    #[doc = " an implementation guide is specified, the type SHALL conform to at least one profile "]
    #[doc = " defined in the implementation guide."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub profile: Option<Vec<Canonical>>,
    #[doc = " Used when the type is \"Reference\" or \"canonical\", and identifies a profile structure or "]
    #[doc = " implementation Guide that applies to the target of the reference this element refers to. If "]
    #[doc = " any profiles are specified, then the content must conform to at least one of them. The URL "]
    #[doc = " can be a local reference - to a contained StructureDefinition, or a reference to another "]
    #[doc = " StructureDefinition or Implementation Guide by a canonical URL. When an implementation "]
    #[doc = " guide is specified, the target resource SHALL conform to at least one profile defined in "]
    #[doc = " the implementation guide."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetProfile")]
    pub target_profile: Option<Vec<Canonical>>,
    #[doc = " Whether this reference needs to be version specific or version independent, or whether "]
    #[doc = " either can be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub versioning: Option<serde_json::Value>,
}
#[doc = " An interaction between a patient and healthcare provider(s) for the purpose of providing "]
#[doc = " healthcare service(s) or assessing the health status of a patient."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Encounter {
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " The set of accounts that may be used for billing for this Encounter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub account: Option<Vec<Reference>>,
    #[doc = " The appointment that scheduled this encounter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub appointment: Option<Vec<Reference>>,
    #[doc = " The request this encounter satisfies (e.g. incoming referral or procedure request)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Vec<Reference>>,
    #[doc = " Concepts representing classification of patient encounter such as ambulatory (outpatient), "]
    #[doc = " inpatient, emergency, home health or others due to local variations."]
    pub class: Coding,
    #[doc = " The class history permits the tracking of the encounters transitions without needing to go  "]
    #[doc = " through the resource history.  This would be used for a case where an admission starts of "]
    #[doc = " as an emergency encounter, then transitions into an inpatient scenario. Doing this and not "]
    #[doc = " restarting a new encounter ensures that any lab/diagnostic results can more easily follow "]
    #[doc = " the patient and not require re-processing and not get lost or cancelled during a kind of "]
    #[doc = " discharge from emergency to inpatient."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "classHistory")]
    pub class_history: Option<Vec<EncounterClassHistory>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The list of diagnosis relevant to this encounter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub diagnosis: Option<Vec<EncounterDiagnosis>>,
    #[doc = " Where a specific encounter should be classified as a part of a specific episode(s) of care "]
    #[doc = " this field should be used. This association can facilitate grouping of related encounters "]
    #[doc = " together for a specific purpose, such as government reporting, issue tracking, association "]
    #[doc = " via a common problem.  The association is recorded on the encounter as these are typically "]
    #[doc = " created after the episode of care and grouped on entry rather than editing the episode of "]
    #[doc = " care to append another encounter to it (the episode of care could span years)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "episodeOfCare")]
    pub episode_of_care: Option<Vec<Reference>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Details about the admission to a healthcare service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub hospitalization: Option<EncounterHospitalization>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Identifier(s) by which this encounter is known."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " Quantity of time the encounter lasted. This excludes the time during leaves of absence."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub length: Option<Duration>,
    #[doc = " List of locations where  the patient has been during this encounter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<Vec<EncounterLocation>>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Another Encounter of which this encounter is a part of (administratively or in time)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "partOf")]
    pub part_of: Option<Reference>,
    #[doc = " The list of people responsible for providing the service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub participant: Option<Vec<EncounterParticipant>>,
    #[doc = " The start and end time of the encounter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
    #[doc = " Indicates the urgency of the encounter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub priority: Option<CodeableConcept>,
    #[doc = " Reason the encounter takes place, expressed as a code. For admissions, this can be used for "]
    #[doc = " a coded admission diagnosis."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,
    #[doc = " Reason the encounter takes place, expressed as a code. For admissions, this can be used for "]
    #[doc = " a coded admission diagnosis."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,
    #[doc = " This is a Encounter resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The organization that is primarily responsible for this Encounter's services. This MAY be "]
    #[doc = " the same as the organization on the Patient record, however it could be different, such as "]
    #[doc = " if the actor performing the services was from an external organization (which may be billed "]
    #[doc = " seperately) for an external consultation.  Refer to the example bundle showing an "]
    #[doc = " abbreviated set of Encounters for a colonoscopy."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "serviceProvider")]
    pub service_provider: Option<Reference>,
    #[doc = " Broad categorization of the service that is to be provided (e.g. cardiology)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "serviceType")]
    pub service_type: Option<CodeableConcept>,
    #[doc = " planned | arrived | triaged | in-progress | onleave | finished | cancelled +."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " The status history permits the encounter resource to contain the status history without "]
    #[doc = " needing to read through the historical versions of the resource, or even have the server "]
    #[doc = " store them."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusHistory")]
    pub status_history: Option<Vec<EncounterStatusHistory>>,
    #[doc = " The patient or group present at the encounter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Reference>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " Specific type of encounter (e.g. e-mail consultation, surgical day-care, skilled nursing, "]
    #[doc = " rehabilitation)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Vec<CodeableConcept>>,
}
#[doc = " An interaction between a patient and healthcare provider(s) for the purpose of providing "]
#[doc = " healthcare service(s) or assessing the health status of a patient."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Encounter_ClassHistory")]
#[serde(deny_unknown_fields)]
pub struct EncounterClassHistory {
    #[doc = " inpatient | outpatient | ambulatory | emergency +."]
    pub class: Coding,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The time that the episode was in the specified class."]
    pub period: Period,
}
#[doc = " An interaction between a patient and healthcare provider(s) for the purpose of providing "]
#[doc = " healthcare service(s) or assessing the health status of a patient."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Encounter_Diagnosis")]
#[serde(deny_unknown_fields)]
pub struct EncounterDiagnosis {
    #[doc = " Extensions for rank"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _rank: Option<Element>,
    #[doc = " Reason the encounter takes place, as specified using information from another resource. For "]
    #[doc = " admissions, this is the admission diagnosis. The indication will typically be a Condition "]
    #[doc = " (with other resources referenced in the evidence.detail), or a Procedure."]
    pub condition: Reference,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Ranking of the diagnosis (for each role type)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub rank: Option<PositiveInt>,
    #[doc = " Role that this diagnosis has within the encounter (e.g. admission, billing, discharge …)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "use")]
    pub use_: Option<CodeableConcept>,
}
#[doc = " An interaction between a patient and healthcare provider(s) for the purpose of providing "]
#[doc = " healthcare service(s) or assessing the health status of a patient."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Encounter_Hospitalization")]
#[serde(deny_unknown_fields)]
pub struct EncounterHospitalization {
    #[doc = " From where patient was admitted (physician referral, transfer)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "admitSource")]
    pub admit_source: Option<CodeableConcept>,
    #[doc = " Location/organization to which the patient is discharged."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub destination: Option<Reference>,
    #[doc = " Diet preferences reported by the patient."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dietPreference")]
    pub diet_preference: Option<Vec<CodeableConcept>>,
    #[doc = " Category or kind of location after discharge."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dischargeDisposition")]
    pub discharge_disposition: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The location/organization from which the patient came before admission."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub origin: Option<Reference>,
    #[doc = " Pre-admission identifier."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "preAdmissionIdentifier")]
    pub pre_admission_identifier: Option<Identifier>,
    #[doc = " Whether this hospitalization is a readmission and why if known."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reAdmission")]
    pub re_admission: Option<CodeableConcept>,
    #[doc = " Any special requests that have been made for this hospitalization encounter, such as the "]
    #[doc = " provision of specific equipment or other things."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "specialArrangement")]
    pub special_arrangement: Option<Vec<CodeableConcept>>,
    #[doc = " Special courtesies (VIP, board member)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "specialCourtesy")]
    pub special_courtesy: Option<Vec<CodeableConcept>>,
}
#[doc = " An interaction between a patient and healthcare provider(s) for the purpose of providing "]
#[doc = " healthcare service(s) or assessing the health status of a patient."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Encounter_Location")]
#[serde(deny_unknown_fields)]
pub struct EncounterLocation {
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The location where the encounter takes place."]
    pub location: Reference,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Time period during which the patient was present at the location."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
    #[doc = " This will be used to specify the required levels (bed/ward/room/etc.) desired to be "]
    #[doc = " recorded to simplify either messaging or query."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "physicalType")]
    pub physical_type: Option<CodeableConcept>,
    #[doc = " The status of the participants' presence at the specified location during the period "]
    #[doc = " specified. If the participant is no longer at the location, then the period will have an "]
    #[doc = " end date/time."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
}
#[doc = " An interaction between a patient and healthcare provider(s) for the purpose of providing "]
#[doc = " healthcare service(s) or assessing the health status of a patient."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Encounter_Participant")]
#[serde(deny_unknown_fields)]
pub struct EncounterParticipant {
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Persons involved in the encounter other than the patient."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub individual: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The period of time that the specified participant participated in the encounter. These can "]
    #[doc = " overlap or be sub-sets of the overall encounter's period."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
    #[doc = " Role of participant in encounter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Vec<CodeableConcept>>,
}
#[doc = " An interaction between a patient and healthcare provider(s) for the purpose of providing "]
#[doc = " healthcare service(s) or assessing the health status of a patient."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Encounter_StatusHistory")]
#[serde(deny_unknown_fields)]
pub struct EncounterStatusHistory {
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The time that the episode was in the specified status."]
    pub period: Period,
    #[doc = " planned | arrived | triaged | in-progress | onleave | finished | cancelled +."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
}
#[doc = " The technical details of an endpoint that can be used for electronic services, such as for web "]
#[doc = " services providing XDS.b or a REST endpoint for another FHIR server. This may include any "]
#[doc = " security context information."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Endpoint {
    #[doc = " Extensions for address"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _address: Option<Element>,
    #[doc = " Extensions for header"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _header: Option<Vec<Element>>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for payloadMimeType"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_payloadMimeType")]
    pub _payload_mime_type: Option<Vec<Element>>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " The uri that describes the actual end-point to connect to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub address: Option<Url>,
    #[doc = " A coded value that represents the technical details of the usage of this endpoint, such as "]
    #[doc = " what WSDLs should be used in what way. (e.g. XDS.b/DICOM/cds-hook)."]
    #[serde(rename = "connectionType")]
    pub connection_type: Coding,
    #[doc = " Contact details for a human to contact about the subscription. The primary use of this for "]
    #[doc = " system administrator troubleshooting."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactPoint>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Additional headers / information to send as part of the notification."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub header: Option<Vec<String>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Identifier for the organization that is used to identify the endpoint across multiple "]
    #[doc = " disparate systems."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The organization that manages this endpoint (even if technically another organization is "]
    #[doc = " hosting this in the cloud, it is the organization associated with the data)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "managingOrganization")]
    pub managing_organization: Option<Reference>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A friendly name that this endpoint can be referred to with."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " The mime type to send the payload in - e.g. application/fhir+xml, application/fhir+json. If "]
    #[doc = " the mime type is not specified, then the sender could send any content (including no "]
    #[doc = " content depending on the connectionType)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "payloadMimeType")]
    pub payload_mime_type: Option<Vec<Code>>,
    #[doc = " The payload type describes the acceptable content that can be communicated on the endpoint."]
    #[serde(rename = "payloadType")]
    pub payload_type: Vec<CodeableConcept>,
    #[doc = " The interval during which the endpoint is expected to be operational."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
    #[doc = " This is a Endpoint resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " active | suspended | error | off | test."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " This resource provides the insurance enrollment details to the insurer regarding a specified "]
#[doc = " coverage."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct EnrollmentRequest {
    #[doc = " Extensions for created"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _created: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Patient Resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub candidate: Option<Reference>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " Reference to the program or plan identification, underwriter or payor."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub coverage: Option<Reference>,
    #[doc = " The date when this resource was created."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub created: Option<DateTime>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The Response business identifier."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The Insurer who is target  of the request."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub insurer: Option<Reference>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The practitioner who is responsible for the services rendered to the patient."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub provider: Option<Reference>,
    #[doc = " This is a EnrollmentRequest resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The status of the resource instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " This resource provides enrollment and plan details from the processing of an EnrollmentRequest "]
#[doc = " resource."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct EnrollmentResponse {
    #[doc = " Extensions for created"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _created: Option<Element>,
    #[doc = " Extensions for disposition"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _disposition: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for outcome"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _outcome: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The date when the enclosed suite of services were performed or completed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub created: Option<DateTime>,
    #[doc = " A description of the status of the adjudication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub disposition: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The Response business identifier."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The Insurer who produced this adjudicated response."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub organization: Option<Reference>,
    #[doc = " Processing status: error, complete."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub outcome: Option<Code>,
    #[doc = " Original request resource reference."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub request: Option<Reference>,
    #[doc = " The practitioner who is responsible for the services rendered to the patient."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "requestProvider")]
    pub request_provider: Option<Reference>,
    #[doc = " This is a EnrollmentResponse resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The status of the resource instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " An association between a patient and an organization / healthcare provider(s) during which time "]
#[doc = " encounters may occur. The managing organization assumes a level of responsibility for the "]
#[doc = " patient during this time."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct EpisodeOfCare {
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " The set of accounts that may be used for billing for this EpisodeOfCare."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub account: Option<Vec<Reference>>,
    #[doc = " The practitioner that is the care manager/care coordinator for this patient."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "careManager")]
    pub care_manager: Option<Reference>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The list of diagnosis relevant to this episode of care."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub diagnosis: Option<Vec<EpisodeOfCareDiagnosis>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The EpisodeOfCare may be known by different identifiers for different contexts of use, such "]
    #[doc = " as when an external agency is tracking the Episode for funding purposes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The organization that has assumed the specific responsibilities for the specified duration."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "managingOrganization")]
    pub managing_organization: Option<Reference>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The patient who is the focus of this episode of care."]
    pub patient: Reference,
    #[doc = " The interval during which the managing organization assumes the defined responsibility."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
    #[doc = " Referral Request(s) that are fulfilled by this EpisodeOfCare, incoming referrals."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "referralRequest")]
    pub referral_request: Option<Vec<Reference>>,
    #[doc = " This is a EpisodeOfCare resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " planned | waitlist | active | onhold | finished | cancelled."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " The history of statuses that the EpisodeOfCare has been through (without requiring "]
    #[doc = " processing the history of the resource)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusHistory")]
    pub status_history: Option<Vec<EpisodeOfCareStatusHistory>>,
    #[doc = " The list of practitioners that may be facilitating this episode of care for specific "]
    #[doc = " purposes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub team: Option<Vec<Reference>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " A classification of the type of episode of care; e.g. specialist referral, disease "]
    #[doc = " management, type of funded care."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Vec<CodeableConcept>>,
}
#[doc = " An association between a patient and an organization / healthcare provider(s) during which time "]
#[doc = " encounters may occur. The managing organization assumes a level of responsibility for the "]
#[doc = " patient during this time."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "EpisodeOfCare_Diagnosis")]
#[serde(deny_unknown_fields)]
pub struct EpisodeOfCareDiagnosis {
    #[doc = " Extensions for rank"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _rank: Option<Element>,
    #[doc = " A list of conditions/problems/diagnoses that this episode of care is intended to be "]
    #[doc = " providing care for."]
    pub condition: Reference,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Ranking of the diagnosis (for each role type)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub rank: Option<PositiveInt>,
    #[doc = " Role that this diagnosis has within the episode of care (e.g. admission, billing, discharge "]
    #[doc = " …)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub role: Option<CodeableConcept>,
}
#[doc = " An association between a patient and an organization / healthcare provider(s) during which time "]
#[doc = " encounters may occur. The managing organization assumes a level of responsibility for the "]
#[doc = " patient during this time."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "EpisodeOfCare_StatusHistory")]
#[serde(deny_unknown_fields)]
pub struct EpisodeOfCareStatusHistory {
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The period during this EpisodeOfCare that the specific status applied."]
    pub period: Period,
    #[doc = " planned | waitlist | active | onhold | finished | cancelled."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
}
#[doc = " The EventDefinition resource provides a reusable description of when a particular event can "]
#[doc = " occur."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct EventDefinition {
    #[doc = " Extensions for approvalDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_approvalDate")]
    pub _approval_date: Option<Element>,
    #[doc = " Extensions for copyright"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _copyright: Option<Element>,
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for experimental"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _experimental: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for lastReviewDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastReviewDate")]
    pub _last_review_date: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for publisher"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _publisher: Option<Element>,
    #[doc = " Extensions for purpose"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _purpose: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for subtitle"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _subtitle: Option<Element>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " Extensions for usage"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _usage: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " The date on which the resource content was approved by the publisher. Approval happens once "]
    #[doc = " when the content is officially approved for usage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "approvalDate")]
    pub approval_date: Option<Date>,
    #[doc = " An individiual or organization primarily involved in the creation and maintenance of the "]
    #[doc = " content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Vec<ContactDetail>>,
    #[doc = " Contact details to assist a user in finding and communicating with the publisher."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " A copyright statement relating to the event definition and/or its contents. Copyright "]
    #[doc = " statements are generally legal restrictions on the use and publishing of the event "]
    #[doc = " definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,
    #[doc = " The date  (and optionally time) when the event definition was published. The date must "]
    #[doc = " change when the business version changes and it must change if the status code changes. In "]
    #[doc = " addition, it should change when the substantive content of the event definition changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " A free text natural language description of the event definition from a consumer's "]
    #[doc = " perspective."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " An individual or organization primarily responsible for internal coherence of the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub editor: Option<Vec<ContactDetail>>,
    #[doc = " The period during which the event definition content was or is planned to be in active use."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectivePeriod")]
    pub effective_period: Option<Period>,
    #[doc = " An individual or organization responsible for officially endorsing the content for use in "]
    #[doc = " some setting."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub endorser: Option<Vec<ContactDetail>>,
    #[doc = " A Boolean value to indicate that this event definition is authored for testing purposes (or "]
    #[doc = " education/evaluation/marketing) and is not intended to be used for genuine usage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A formal identifier that is used to identify this event definition when it is represented "]
    #[doc = " in other formats, or referenced in a specification, model, design or an instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " A legal or geographic region in which the event definition is intended to be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The date on which the resource content was last reviewed. Review happens periodically after "]
    #[doc = " approval but does not change the original approval date."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastReviewDate")]
    pub last_review_date: Option<Date>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A natural language name identifying the event definition. This name should be usable as an "]
    #[doc = " identifier for the module by machine processing applications such as code generation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " The name of the organization or individual that published the event definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
    #[doc = " Explanation of why this event definition is needed and why it has been designed as it has."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,
    #[doc = " Related resources such as additional documentation, justification, or bibliographic "]
    #[doc = " references."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatedArtifact")]
    pub related_artifact: Option<Vec<RelatedArtifact>>,
    #[doc = " This is a EventDefinition resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " An individual or organization primarily responsible for review of some aspect of the "]
    #[doc = " content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reviewer: Option<Vec<ContactDetail>>,
    #[doc = " The status of this event definition. Enables tracking the life-cycle of the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A code or group definition that describes the intended subject of the event definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectCodeableConcept")]
    pub subject_codeable_concept: Option<CodeableConcept>,
    #[doc = " A code or group definition that describes the intended subject of the event definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectReference")]
    pub subject_reference: Option<Reference>,
    #[doc = " An explanatory or alternate title for the event definition giving additional information "]
    #[doc = " about its content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subtitle: Option<String>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " A short, descriptive, user-friendly title for the event definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[doc = " Descriptive topics related to the module. Topics provide a high-level categorization of the "]
    #[doc = " module that can be useful for filtering and searching."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub topic: Option<Vec<CodeableConcept>>,
    #[doc = " The trigger element defines when the event occurs. If more than one trigger condition is "]
    #[doc = " specified, the event fires whenever any one of the trigger conditions is met."]
    pub trigger: Vec<TriggerDefinition>,
    #[doc = " An absolute URI that is used to identify this event definition when it is referenced in a "]
    #[doc = " specification, model, design or an instance; also called its canonical identifier. This "]
    #[doc = " SHOULD be globally unique and SHOULD be a literal address at which at which an "]
    #[doc = " authoritative instance of this event definition is (or will be) published. This URL can be "]
    #[doc = " the target of a canonical reference. It SHALL remain the same when the event definition is "]
    #[doc = " stored on different servers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
    #[doc = " A detailed description of how the event definition is used from a clinical perspective."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub usage: Option<String>,
    #[doc = " The content was developed with a focus and intent of supporting the contexts that are "]
    #[doc = " listed. These contexts may be general categories (gender, age, ...) or may be references to "]
    #[doc = " specific programs (insurance plans, studies, ...) and may be used to assist with indexing "]
    #[doc = " and searching for appropriate event definition instances."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,
    #[doc = " The identifier that is used to identify this version of the event definition when it is "]
    #[doc = " referenced in a specification, model, design or instance. This is an arbitrary value "]
    #[doc = " managed by the event definition author and is not expected to be globally unique. For "]
    #[doc = " example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. "]
    #[doc = " There is also no expectation that versions can be placed in a lexicographical sequence."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[doc = " The Evidence Resource provides a machine-interpretable expression of an evidence concept "]
#[doc = " including the evidence variables (eg population, exposures/interventions, comparators, "]
#[doc = " outcomes, measured variables, confounding variables), the statistics, and the certainty of this "]
#[doc = " evidence."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Evidence {
    #[doc = " Extensions for approvalDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_approvalDate")]
    pub _approval_date: Option<Element>,
    #[doc = " Extensions for assertion"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _assertion: Option<Element>,
    #[doc = " Extensions for citeAsMarkdown"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_citeAsMarkdown")]
    pub _cite_as_markdown: Option<Element>,
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for lastReviewDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastReviewDate")]
    pub _last_review_date: Option<Element>,
    #[doc = " Extensions for publisher"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _publisher: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " The date on which the resource content was approved by the publisher. Approval happens once "]
    #[doc = " when the content is officially approved for usage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "approvalDate")]
    pub approval_date: Option<Date>,
    #[doc = " Declarative description of the Evidence."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub assertion: Option<Markdown>,
    #[doc = " An individiual, organization, or device primarily involved in the creation and maintenance "]
    #[doc = " of the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Vec<ContactDetail>>,
    #[doc = " Assessment of certainty, confidence in the estimates, or quality of the evidence."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub certainty: Option<Vec<EvidenceCertainty>>,
    #[doc = " Citation Resource or display of suggested citation for this evidence."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "citeAsMarkdown")]
    pub cite_as_markdown: Option<String>,
    #[doc = " Citation Resource or display of suggested citation for this evidence."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "citeAsReference")]
    pub cite_as_reference: Option<Reference>,
    #[doc = " Contact details to assist a user in finding and communicating with the publisher."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The date  (and optionally time) when the summary was published. The date must change when "]
    #[doc = " the business version changes and it must change if the status code changes. In addition, it "]
    #[doc = " should change when the substantive content of the summary changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " A free text natural language description of the evidence from a consumer's perspective."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " An individiual, organization, or device primarily responsible for internal coherence of the "]
    #[doc = " content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub editor: Option<Vec<ContactDetail>>,
    #[doc = " An individiual, organization, or device responsible for officially endorsing the content "]
    #[doc = " for use in some setting."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub endorser: Option<Vec<ContactDetail>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A formal identifier that is used to identify this summary when it is represented in other "]
    #[doc = " formats, or referenced in a specification, model, design or an instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The date on which the resource content was last reviewed. Review happens periodically after "]
    #[doc = " approval but does not change the original approval date."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastReviewDate")]
    pub last_review_date: Option<Date>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Footnotes and/or explanatory notes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " The name of the organization or individual that published the evidence."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
    #[doc = " Link or citation to artifact associated with the summary."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatedArtifact")]
    pub related_artifact: Option<Vec<RelatedArtifact>>,
    #[doc = " This is a Evidence resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " An individiual, organization, or device primarily responsible for review of some aspect of "]
    #[doc = " the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reviewer: Option<Vec<ContactDetail>>,
    #[doc = " Values and parameters for a single statistic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub statistic: Option<Vec<EvidenceStatistic>>,
    #[doc = " The status of this summary. Enables tracking the life-cycle of the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " The type of study that produced this evidence."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "studyType")]
    pub study_type: Option<CodeableConcept>,
    #[doc = " The method to combine studies."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "synthesisType")]
    pub synthesis_type: Option<CodeableConcept>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " A short, descriptive, user-friendly title for the summary."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[doc = " An absolute URI that is used to identify this evidence when it is referenced in a "]
    #[doc = " specification, model, design or an instance; also called its canonical identifier. This "]
    #[doc = " SHOULD be globally unique and SHOULD be a literal address at which at which an "]
    #[doc = " authoritative instance of this summary is (or will be) published. This URL can be the "]
    #[doc = " target of a canonical reference. It SHALL remain the same when the summary is stored on "]
    #[doc = " different servers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
    #[doc = " The content was developed with a focus and intent of supporting the contexts that are "]
    #[doc = " listed. These contexts may be general categories (gender, age, ...) or may be references to "]
    #[doc = " specific programs (insurance plans, studies, ...) and may be used to assist with indexing "]
    #[doc = " and searching for appropriate evidence instances."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,
    #[doc = " Evidence variable such as population, exposure, or outcome."]
    #[serde(rename = "variableDefinition")]
    pub variable_definition: Vec<EvidenceVariableDefinition>,
    #[doc = " The identifier that is used to identify this version of the summary when it is referenced "]
    #[doc = " in a specification, model, design or instance. This is an arbitrary value managed by the "]
    #[doc = " summary author and is not expected to be globally unique. For example, it might be a "]
    #[doc = " timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no "]
    #[doc = " expectation that versions can be placed in a lexicographical sequence."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[doc = " The EvidenceReport Resource is a specialized container for a collection of resources and "]
#[doc = " codable concepts, adapted to support compositions of Evidence, EvidenceVariable, and Citation "]
#[doc = " resources and related concepts."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct EvidenceReport {
    #[doc = " Extensions for citeAsMarkdown"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_citeAsMarkdown")]
    pub _cite_as_markdown: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for publisher"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _publisher: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " An individiual, organization, or device primarily involved in the creation and maintenance "]
    #[doc = " of the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Vec<ContactDetail>>,
    #[doc = " Citation Resource or display of suggested citation for this report."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "citeAsMarkdown")]
    pub cite_as_markdown: Option<String>,
    #[doc = " Citation Resource or display of suggested citation for this report."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "citeAsReference")]
    pub cite_as_reference: Option<Reference>,
    #[doc = " Contact details to assist a user in finding and communicating with the publisher."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " An individiual, organization, or device primarily responsible for internal coherence of the "]
    #[doc = " content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub editor: Option<Vec<ContactDetail>>,
    #[doc = " An individiual, organization, or device responsible for officially endorsing the content "]
    #[doc = " for use in some setting."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub endorser: Option<Vec<ContactDetail>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A formal identifier that is used to identify this EvidenceReport when it is represented in "]
    #[doc = " other formats, or referenced in a specification, model, design or an instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Used for footnotes and annotations."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " The name of the organization or individual that published the evidence report."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
    #[doc = " Link, description or reference to artifact associated with the report."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatedArtifact")]
    pub related_artifact: Option<Vec<RelatedArtifact>>,
    #[doc = " A formal identifier that is used to identify things closely related to this EvidenceReport."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatedIdentifier")]
    pub related_identifier: Option<Vec<Identifier>>,
    #[doc = " Relationships that this composition has with other compositions or documents that already "]
    #[doc = " exist."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatesTo")]
    pub relates_to: Option<Vec<EvidenceReportRelatesTo>>,
    #[doc = " This is a EvidenceReport resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " An individiual, organization, or device primarily responsible for review of some aspect of "]
    #[doc = " the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reviewer: Option<Vec<ContactDetail>>,
    #[doc = " The root of the sections that make up the composition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub section: Option<Vec<EvidenceReportSection>>,
    #[doc = " The status of this summary. Enables tracking the life-cycle of the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " Specifies the subject or focus of the report. Answers \"What is this report about?\"."]
    pub subject: EvidenceReportSubject,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " Specifies the kind of report, such as grouping of classifiers, search results, or "]
    #[doc = " human-compiled expression."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
    #[doc = " An absolute URI that is used to identify this EvidenceReport when it is referenced in a "]
    #[doc = " specification, model, design or an instance; also called its canonical identifier. This "]
    #[doc = " SHOULD be globally unique and SHOULD be a literal address at which at which an "]
    #[doc = " authoritative instance of this summary is (or will be) published. This URL can be the "]
    #[doc = " target of a canonical reference. It SHALL remain the same when the summary is stored on "]
    #[doc = " different servers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
    #[doc = " The content was developed with a focus and intent of supporting the contexts that are "]
    #[doc = " listed. These contexts may be general categories (gender, age, ...) or may be references to "]
    #[doc = " specific programs (insurance plans, studies, ...) and may be used to assist with indexing "]
    #[doc = " and searching for appropriate evidence report instances."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,
}
#[doc = " The EvidenceReport Resource is a specialized container for a collection of resources and "]
#[doc = " codable concepts, adapted to support compositions of Evidence, EvidenceVariable, and Citation "]
#[doc = " resources and related concepts."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "EvidenceReport_Characteristic")]
#[serde(deny_unknown_fields)]
pub struct EvidenceReportCharacteristic {
    #[doc = " Extensions for exclude"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _exclude: Option<Element>,
    #[doc = " Extensions for valueBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub _value_boolean: Option<Element>,
    #[doc = " Characteristic code."]
    pub code: CodeableConcept,
    #[doc = " Is used to express not the characteristic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub exclude: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Timeframe for the characteristic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
    #[doc = " Characteristic value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,
    #[doc = " Characteristic value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,
    #[doc = " Characteristic value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,
    #[doc = " Characteristic value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRange")]
    pub value_range: Option<Range>,
    #[doc = " Characteristic value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueReference")]
    pub value_reference: Option<Reference>,
}
#[doc = " The EvidenceReport Resource is a specialized container for a collection of resources and "]
#[doc = " codable concepts, adapted to support compositions of Evidence, EvidenceVariable, and Citation "]
#[doc = " resources and related concepts."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "EvidenceReport_RelatesTo")]
#[serde(deny_unknown_fields)]
pub struct EvidenceReportRelatesTo {
    #[doc = " Extensions for code"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _code: Option<Element>,
    #[doc = " The type of relationship that this composition has with anther composition or document."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The target composition/document of this relationship."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetIdentifier")]
    pub target_identifier: Option<Identifier>,
    #[doc = " The target composition/document of this relationship."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetReference")]
    pub target_reference: Option<Reference>,
}
#[doc = " The EvidenceReport Resource is a specialized container for a collection of resources and "]
#[doc = " codable concepts, adapted to support compositions of Evidence, EvidenceVariable, and Citation "]
#[doc = " resources and related concepts."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "EvidenceReport_Section")]
#[serde(deny_unknown_fields)]
pub struct EvidenceReportSection {
    #[doc = " Extensions for mode"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _mode: Option<Element>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " Identifies who is responsible for the information in this section, not necessarily who "]
    #[doc = " typed it in."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Vec<Reference>>,
    #[doc = " If the section is empty, why the list is empty. An empty section typically has some text "]
    #[doc = " explaining the empty reason."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "emptyReason")]
    pub empty_reason: Option<CodeableConcept>,
    #[doc = " Specifies any type of classification of the evidence report."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "entryClassifier")]
    pub entry_classifier: Option<Vec<CodeableConcept>>,
    #[doc = " Quantity as content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "entryQuantity")]
    pub entry_quantity: Option<Vec<Quantity>>,
    #[doc = " A reference to the actual resource from which the narrative in the section is derived."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "entryReference")]
    pub entry_reference: Option<Vec<Reference>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " A code identifying the kind of content contained within the section. This should be "]
    #[doc = " consistent with the section title."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub focus: Option<CodeableConcept>,
    #[doc = " A definitional Resource identifying the kind of content contained within the section. This "]
    #[doc = " should be consistent with the section title."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "focusReference")]
    pub focus_reference: Option<Reference>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " How the entry list was prepared - whether it is a working list that is suitable for being "]
    #[doc = " maintained on an ongoing basis, or if it represents a snapshot of a list of items from "]
    #[doc = " another source, or whether it is a prepared list where items may be marked as added, "]
    #[doc = " modified or deleted."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub mode: Option<Code>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Specifies the order applied to the items in the section entries."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "orderedBy")]
    pub ordered_by: Option<CodeableConcept>,
    #[doc = " A nested sub-section within this section."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub section: Option<Vec<EvidenceReportSection>>,
    #[doc = " A human-readable narrative that contains the attested content of the section, used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is peferred to contain sufficient detail to make it acceptable for a "]
    #[doc = " human to just read the narrative."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " The label for this particular section.  This will be part of the rendered content for the "]
    #[doc = " document, and is often used to build a table of contents."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}
#[doc = " The EvidenceReport Resource is a specialized container for a collection of resources and "]
#[doc = " codable concepts, adapted to support compositions of Evidence, EvidenceVariable, and Citation "]
#[doc = " resources and related concepts."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "EvidenceReport_Subject")]
#[serde(deny_unknown_fields)]
pub struct EvidenceReportSubject {
    #[doc = " Characteristic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub characteristic: Option<Vec<EvidenceReportCharacteristic>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Used for general notes and annotations not coded elsewhere."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
}
#[doc = " The EvidenceVariable resource describes an element that knowledge (Evidence) is about."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct EvidenceVariable {
    #[doc = " Extensions for actual"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _actual: Option<Element>,
    #[doc = " Extensions for characteristicCombination"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_characteristicCombination")]
    pub _characteristic_combination: Option<Element>,
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for handling"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _handling: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for publisher"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _publisher: Option<Element>,
    #[doc = " Extensions for shortTitle"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_shortTitle")]
    pub _short_title: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for subtitle"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _subtitle: Option<Element>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " True if the actual variable measured, false if a conceptual representation of the intended "]
    #[doc = " variable."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub actual: Option<Boolean>,
    #[doc = " An individiual or organization primarily involved in the creation and maintenance of the "]
    #[doc = " content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Vec<ContactDetail>>,
    #[doc = " A grouping (or set of values) described along with other groupings to specify the set of "]
    #[doc = " groupings allowed for the variable."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<EvidenceVariableCategory>>,
    #[doc = " A characteristic that defines the members of the evidence element. Multiple characteristics "]
    #[doc = " are applied with \"and\" semantics."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub characteristic: Option<Vec<EvidenceVariableCharacteristic>>,
    #[doc = " Used to specify if two or more characteristics are combined with OR or AND."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "characteristicCombination")]
    pub characteristic_combination: Option<Code>,
    #[doc = " Contact details to assist a user in finding and communicating with the publisher."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The date  (and optionally time) when the evidence variable was published. The date must "]
    #[doc = " change when the business version changes and it must change if the status code changes. In "]
    #[doc = " addition, it should change when the substantive content of the evidence variable changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " A free text natural language description of the evidence variable from a consumer's "]
    #[doc = " perspective."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " An individual or organization primarily responsible for internal coherence of the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub editor: Option<Vec<ContactDetail>>,
    #[doc = " An individual or organization responsible for officially endorsing the content for use in "]
    #[doc = " some setting."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub endorser: Option<Vec<ContactDetail>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Used for an outcome to classify."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub handling: Option<Code>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A formal identifier that is used to identify this evidence variable when it is represented "]
    #[doc = " in other formats, or referenced in a specification, model, design or an instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A natural language name identifying the evidence variable. This name should be usable as an "]
    #[doc = " identifier for the module by machine processing applications such as code generation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " A human-readable string to clarify or explain concepts about the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " The name of the organization or individual that published the evidence variable."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
    #[doc = " Related artifacts such as additional documentation, justification, or bibliographic "]
    #[doc = " references."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatedArtifact")]
    pub related_artifact: Option<Vec<RelatedArtifact>>,
    #[doc = " This is a EvidenceVariable resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " An individual or organization primarily responsible for review of some aspect of the "]
    #[doc = " content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reviewer: Option<Vec<ContactDetail>>,
    #[doc = " The short title provides an alternate title for use in informal descriptive contexts where "]
    #[doc = " the full, formal title is not necessary."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "shortTitle")]
    pub short_title: Option<String>,
    #[doc = " The status of this evidence variable. Enables tracking the life-cycle of the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " An explanatory or alternate title for the EvidenceVariable giving additional information "]
    #[doc = " about its content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subtitle: Option<String>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " A short, descriptive, user-friendly title for the evidence variable."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[doc = " An absolute URI that is used to identify this evidence variable when it is referenced in a "]
    #[doc = " specification, model, design or an instance; also called its canonical identifier. This "]
    #[doc = " SHOULD be globally unique and SHOULD be a literal address at which at which an "]
    #[doc = " authoritative instance of this evidence variable is (or will be) published. This URL can be "]
    #[doc = " the target of a canonical reference. It SHALL remain the same when the evidence variable is "]
    #[doc = " stored on different servers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
    #[doc = " The content was developed with a focus and intent of supporting the contexts that are "]
    #[doc = " listed. These contexts may be general categories (gender, age, ...) or may be references to "]
    #[doc = " specific programs (insurance plans, studies, ...) and may be used to assist with indexing "]
    #[doc = " and searching for appropriate evidence variable instances."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,
    #[doc = " The identifier that is used to identify this version of the evidence variable when it is "]
    #[doc = " referenced in a specification, model, design or instance. This is an arbitrary value "]
    #[doc = " managed by the evidence variable author and is not expected to be globally unique. For "]
    #[doc = " example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. "]
    #[doc = " There is also no expectation that versions can be placed in a lexicographical sequence. To "]
    #[doc = " provide a version consistent with the Decision Support Service specification, use the "]
    #[doc = " format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge "]
    #[doc = " assets, refer to the Decision Support Service specification. Note that a version is "]
    #[doc = " required for non-experimental active artifacts."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[doc = " The EvidenceVariable resource describes an element that knowledge (Evidence) is about."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "EvidenceVariable_Category")]
#[serde(deny_unknown_fields)]
pub struct EvidenceVariableCategory {
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A human-readable title or representation of the grouping."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " Value or set of values that define the grouping."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,
    #[doc = " Value or set of values that define the grouping."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,
    #[doc = " Value or set of values that define the grouping."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRange")]
    pub value_range: Option<Range>,
}
#[doc = " The EvidenceVariable resource describes an element that knowledge (Evidence) is about."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "EvidenceVariable_Characteristic")]
#[serde(deny_unknown_fields)]
pub struct EvidenceVariableCharacteristic {
    #[doc = " Extensions for definitionCanonical"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_definitionCanonical")]
    pub _definition_canonical: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for exclude"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _exclude: Option<Element>,
    #[doc = " Extensions for groupMeasure"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_groupMeasure")]
    pub _group_measure: Option<Element>,
    #[doc = " Define members of the evidence element using Codes (such as condition, medication, or "]
    #[doc = " observation), Expressions ( using an expression language such as FHIRPath or CQL) or "]
    #[doc = " DataRequirements (such as Diabetes diagnosis onset in the last year)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "definitionCanonical")]
    pub definition_canonical: Option<String>,
    #[doc = " Define members of the evidence element using Codes (such as condition, medication, or "]
    #[doc = " observation), Expressions ( using an expression language such as FHIRPath or CQL) or "]
    #[doc = " DataRequirements (such as Diabetes diagnosis onset in the last year)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "definitionCodeableConcept")]
    pub definition_codeable_concept: Option<CodeableConcept>,
    #[doc = " Define members of the evidence element using Codes (such as condition, medication, or "]
    #[doc = " observation), Expressions ( using an expression language such as FHIRPath or CQL) or "]
    #[doc = " DataRequirements (such as Diabetes diagnosis onset in the last year)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "definitionExpression")]
    pub definition_expression: Option<Expression>,
    #[doc = " Define members of the evidence element using Codes (such as condition, medication, or "]
    #[doc = " observation), Expressions ( using an expression language such as FHIRPath or CQL) or "]
    #[doc = " DataRequirements (such as Diabetes diagnosis onset in the last year)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "definitionReference")]
    pub definition_reference: Option<Reference>,
    #[doc = " A short, natural language description of the characteristic that could be used to "]
    #[doc = " communicate the criteria to an end-user."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " Device used for determining characteristic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub device: Option<Reference>,
    #[doc = " When true, members with this characteristic are excluded from the element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub exclude: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Indicates how elements are aggregated within the study effective period."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "groupMeasure")]
    pub group_measure: Option<Code>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Method used for describing characteristic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub method: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Indicates duration, period, or point of observation from the participant's study entry."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timeFromStart")]
    pub time_from_start: Option<EvidenceVariableTimeFromStart>,
}
#[doc = " The EvidenceVariable resource describes an element that knowledge (Evidence) is about."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "EvidenceVariable_TimeFromStart")]
#[serde(deny_unknown_fields)]
pub struct EvidenceVariableTimeFromStart {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " A short, natural language description."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A human-readable string to clarify or explain concepts about the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " Used to express the observation at a defined amount of time after the study start."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,
    #[doc = " Used to express the observation within a period after the study start."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub range: Option<Range>,
}
#[doc = " The Evidence Resource provides a machine-interpretable expression of an evidence concept "]
#[doc = " including the evidence variables (eg population, exposures/interventions, comparators, "]
#[doc = " outcomes, measured variables, confounding variables), the statistics, and the certainty of this "]
#[doc = " evidence."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Evidence_AttributeEstimate")]
#[serde(deny_unknown_fields)]
pub struct EvidenceAttributeEstimate {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for level"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _level: Option<Element>,
    #[doc = " A nested attribute estimate; which is the attribute estimate of an attribute estimate."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "attributeEstimate")]
    pub attribute_estimate: Option<Vec<EvidenceAttributeEstimate>>,
    #[doc = " Human-readable summary of the estimate."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Use 95 for a 95% confidence interval."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub level: Option<Decimal>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Footnote or explanatory note about the estimate."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " The singular quantity of the attribute estimate, for attribute estimates represented as "]
    #[doc = " single values; also used to report unit of measure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,
    #[doc = " Lower bound of confidence interval."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub range: Option<Range>,
    #[doc = " The type of attribute estimate, eg confidence interval or p value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " The Evidence Resource provides a machine-interpretable expression of an evidence concept "]
#[doc = " including the evidence variables (eg population, exposures/interventions, comparators, "]
#[doc = " outcomes, measured variables, confounding variables), the statistics, and the certainty of this "]
#[doc = " evidence."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Evidence_Certainty")]
#[serde(deny_unknown_fields)]
pub struct EvidenceCertainty {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for rater"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _rater: Option<Element>,
    #[doc = " Textual description of certainty."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Footnotes and/or explanatory notes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " Individual or group who did the rating."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub rater: Option<String>,
    #[doc = " Assessment or judgement of the aspect."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub rating: Option<CodeableConcept>,
    #[doc = " A domain or subdomain of certainty."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subcomponent: Option<Vec<EvidenceCertainty>>,
    #[doc = " Aspect of certainty being rated."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " The Evidence Resource provides a machine-interpretable expression of an evidence concept "]
#[doc = " including the evidence variables (eg population, exposures/interventions, comparators, "]
#[doc = " outcomes, measured variables, confounding variables), the statistics, and the certainty of this "]
#[doc = " evidence."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Evidence_ModelCharacteristic")]
#[serde(deny_unknown_fields)]
pub struct EvidenceModelCharacteristic {
    #[doc = " An attribute of the statistic used as a model characteristic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "attributeEstimate")]
    pub attribute_estimate: Option<Vec<EvidenceAttributeEstimate>>,
    #[doc = " Description of a component of the method to generate the statistic."]
    pub code: CodeableConcept,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Further specification of the quantified value of the component of the method to generate "]
    #[doc = " the statistic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Quantity>,
    #[doc = " A variable adjusted for in the adjusted analysis."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub variable: Option<Vec<EvidenceVariable>>,
}
#[doc = " The Evidence Resource provides a machine-interpretable expression of an evidence concept "]
#[doc = " including the evidence variables (eg population, exposures/interventions, comparators, "]
#[doc = " outcomes, measured variables, confounding variables), the statistics, and the certainty of this "]
#[doc = " evidence."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Evidence_SampleSize")]
#[serde(deny_unknown_fields)]
pub struct EvidenceSampleSize {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for knownDataCount"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_knownDataCount")]
    pub _known_data_count: Option<Element>,
    #[doc = " Extensions for numberOfParticipants"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_numberOfParticipants")]
    pub _number_of_participants: Option<Element>,
    #[doc = " Extensions for numberOfStudies"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_numberOfStudies")]
    pub _number_of_studies: Option<Element>,
    #[doc = " Human-readable summary of population sample size."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Number of participants with known results for measured variables."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "knownDataCount")]
    pub known_data_count: Option<UnsignedInt>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Footnote or explanatory note about the sample size."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " A human-readable string to clarify or explain concepts about the sample size."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "numberOfParticipants")]
    pub number_of_participants: Option<UnsignedInt>,
    #[doc = " Number of participants in the population."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "numberOfStudies")]
    pub number_of_studies: Option<UnsignedInt>,
}
#[doc = " The Evidence Resource provides a machine-interpretable expression of an evidence concept "]
#[doc = " including the evidence variables (eg population, exposures/interventions, comparators, "]
#[doc = " outcomes, measured variables, confounding variables), the statistics, and the certainty of this "]
#[doc = " evidence."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Evidence_Statistic")]
#[serde(deny_unknown_fields)]
pub struct EvidenceStatistic {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for numberAffected"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_numberAffected")]
    pub _number_affected: Option<Element>,
    #[doc = " Extensions for numberOfEvents"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_numberOfEvents")]
    pub _number_of_events: Option<Element>,
    #[doc = " A statistical attribute of the statistic such as a measure of heterogeneity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "attributeEstimate")]
    pub attribute_estimate: Option<Vec<EvidenceAttributeEstimate>>,
    #[doc = " When the measured variable is handled categorically, the category element is used to define "]
    #[doc = " which category the statistic is reporting."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<CodeableConcept>,
    #[doc = " A description of the content value of the statistic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A component of the method to generate the statistic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modelCharacteristic")]
    pub model_characteristic: Option<Vec<EvidenceModelCharacteristic>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Footnotes and/or explanatory notes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " The number of participants affected where the unit of analysis is the same as "]
    #[doc = " sampleSize.knownDataCount and sampleSize.numberOfParticipants."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "numberAffected")]
    pub number_affected: Option<UnsignedInt>,
    #[doc = " The number of events associated with the statistic, where the unit of analysis is different "]
    #[doc = " from numberAffected, sampleSize.knownDataCount and sampleSize.numberOfParticipants."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "numberOfEvents")]
    pub number_of_events: Option<UnsignedInt>,
    #[doc = " Statistic value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,
    #[doc = " Number of samples in the statistic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "sampleSize")]
    pub sample_size: Option<EvidenceSampleSize>,
    #[doc = " Type of statistic, eg relative risk."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statisticType")]
    pub statistic_type: Option<CodeableConcept>,
}
#[doc = " The Evidence Resource provides a machine-interpretable expression of an evidence concept "]
#[doc = " including the evidence variables (eg population, exposures/interventions, comparators, "]
#[doc = " outcomes, measured variables, confounding variables), the statistics, and the certainty of this "]
#[doc = " evidence."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Evidence_Variable")]
#[serde(deny_unknown_fields)]
pub struct EvidenceVariable_ {
    #[doc = " Extensions for handling"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _handling: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " How the variable is classified for use in adjusted analysis."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub handling: Option<Code>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Description for grouping of ordinal or polychotomous variables."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCategory")]
    pub value_category: Option<Vec<CodeableConcept>>,
    #[doc = " Discrete value for grouping of ordinal or polychotomous variables."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Vec<Quantity>>,
    #[doc = " Range of values for grouping of ordinal or polychotomous variables."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRange")]
    pub value_range: Option<Vec<Range>>,
    #[doc = " Description of the variable."]
    #[serde(rename = "variableDefinition")]
    pub variable_definition: Reference,
}
#[doc = " The Evidence Resource provides a machine-interpretable expression of an evidence concept "]
#[doc = " including the evidence variables (eg population, exposures/interventions, comparators, "]
#[doc = " outcomes, measured variables, confounding variables), the statistics, and the certainty of this "]
#[doc = " evidence."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Evidence_VariableDefinition")]
#[serde(deny_unknown_fields)]
pub struct EvidenceVariableDefinition {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " A text description or summary of the variable."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " Indication of quality of match between intended variable to actual variable."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "directnessMatch")]
    pub directness_match: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Definition of the intended variable related to the Evidence."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub intended: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Footnotes and/or explanatory notes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " Definition of the actual variable related to the statistic(s)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub observed: Option<Reference>,
    #[doc = " population | subpopulation | exposure | referenceExposure | measuredVariable | confounder."]
    #[serde(rename = "variableRole")]
    pub variable_role: CodeableConcept,
}
#[doc = " Example of workflow instance."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ExampleScenario {
    #[doc = " Extensions for copyright"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _copyright: Option<Element>,
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for experimental"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _experimental: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for publisher"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _publisher: Option<Element>,
    #[doc = " Extensions for purpose"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _purpose: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " Actor participating in the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub actor: Option<Vec<ExampleScenarioActor>>,
    #[doc = " Contact details to assist a user in finding and communicating with the publisher."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " A copyright statement relating to the example scenario and/or its contents. Copyright "]
    #[doc = " statements are generally legal restrictions on the use and publishing of the example "]
    #[doc = " scenario."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,
    #[doc = " The date  (and optionally time) when the example scenario was published. The date must "]
    #[doc = " change when the business version changes and it must change if the status code changes. In "]
    #[doc = " addition, it should change when the substantive content of the example scenario changes. "]
    #[doc = " (e.g. the 'content logical definition')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " A Boolean value to indicate that this example scenario is authored for testing purposes (or "]
    #[doc = " education/evaluation/marketing) and is not intended to be used for genuine usage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A formal identifier that is used to identify this example scenario when it is represented "]
    #[doc = " in other formats, or referenced in a specification, model, design or an instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " Each resource and each version that is present in the workflow."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub instance: Option<Vec<ExampleScenarioInstance>>,
    #[doc = " A legal or geographic region in which the example scenario is intended to be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A natural language name identifying the example scenario. This name should be usable as an "]
    #[doc = " identifier for the module by machine processing applications such as code generation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " Each major process - a group of operations."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub process: Option<Vec<ExampleScenarioProcess>>,
    #[doc = " The name of the organization or individual that published the example scenario."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
    #[doc = " What the example scenario resource is created for. This should not be used to show the "]
    #[doc = " business purpose of the scenario itself, but the purpose of documenting a scenario."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,
    #[doc = " This is a ExampleScenario resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The status of this example scenario. Enables tracking the life-cycle of the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " An absolute URI that is used to identify this example scenario when it is referenced in a "]
    #[doc = " specification, model, design or an instance; also called its canonical identifier. This "]
    #[doc = " SHOULD be globally unique and SHOULD be a literal address at which at which an "]
    #[doc = " authoritative instance of this example scenario is (or will be) published. This URL can be "]
    #[doc = " the target of a canonical reference. It SHALL remain the same when the example scenario is "]
    #[doc = " stored on different servers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
    #[doc = " The content was developed with a focus and intent of supporting the contexts that are "]
    #[doc = " listed. These contexts may be general categories (gender, age, ...) or may be references to "]
    #[doc = " specific programs (insurance plans, studies, ...) and may be used to assist with indexing "]
    #[doc = " and searching for appropriate example scenario instances."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,
    #[doc = " The identifier that is used to identify this version of the example scenario when it is "]
    #[doc = " referenced in a specification, model, design or instance. This is an arbitrary value "]
    #[doc = " managed by the example scenario author and is not expected to be globally unique. For "]
    #[doc = " example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. "]
    #[doc = " There is also no expectation that versions can be placed in a lexicographical sequence."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[doc = " Another nested workflow."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub workflow: Option<Vec<Canonical>>,
}
#[doc = " Example of workflow instance."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ExampleScenario_Actor")]
#[serde(deny_unknown_fields)]
pub struct ExampleScenarioActor {
    #[doc = " Extensions for actorId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_actorId")]
    pub _actor_id: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " ID or acronym of actor."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "actorId")]
    pub actor_id: Option<String>,
    #[doc = " The description of the actor."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The name of the actor as shown in the page."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " The type of actor - person or system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}
#[doc = " Example of workflow instance."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ExampleScenario_Alternative")]
#[serde(deny_unknown_fields)]
pub struct ExampleScenarioAlternative {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " A human-readable description of the alternative explaining when the alternative should "]
    #[doc = " occur rather than the base step."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " What happens in each alternative option."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub step: Option<Vec<ExampleScenarioStep>>,
    #[doc = " The label to display for the alternative that gives a sense of the circumstance in which "]
    #[doc = " the alternative should be invoked."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}
#[doc = " Example of workflow instance."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ExampleScenario_ContainedInstance")]
#[serde(deny_unknown_fields)]
pub struct ExampleScenarioContainedInstance {
    #[doc = " Extensions for resourceId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_resourceId")]
    pub _resource_id: Option<Element>,
    #[doc = " Extensions for versionId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_versionId")]
    pub _version_id: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Each resource contained in the instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "resourceId")]
    pub resource_id: Option<String>,
    #[doc = " A specific version of a resource contained in the instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "versionId")]
    pub version_id: Option<String>,
}
#[doc = " Example of workflow instance."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ExampleScenario_Instance")]
#[serde(deny_unknown_fields)]
pub struct ExampleScenarioInstance {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for resourceId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_resourceId")]
    pub _resource_id: Option<Element>,
    #[doc = " Extensions for resourceType"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_resourceType")]
    pub _resource_type: Option<Element>,
    #[doc = " Resources contained in the instance (e.g. the observations contained in a bundle)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "containedInstance")]
    pub contained_instance: Option<Vec<ExampleScenarioContainedInstance>>,
    #[doc = " Human-friendly description of the resource instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A short name for the resource instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " The id of the resource for referencing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "resourceId")]
    pub resource_id: Option<String>,
    #[doc = " The type of the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "resourceType")]
    pub resource_type: Option<Code>,
    #[doc = " A specific version of the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<Vec<ExampleScenarioVersion>>,
}
#[doc = " Example of workflow instance."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ExampleScenario_Operation")]
#[serde(deny_unknown_fields)]
pub struct ExampleScenarioOperation {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for initiator"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _initiator: Option<Element>,
    #[doc = " Extensions for initiatorActive"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_initiatorActive")]
    pub _initiator_active: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for number"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _number: Option<Element>,
    #[doc = " Extensions for receiver"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _receiver: Option<Element>,
    #[doc = " Extensions for receiverActive"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_receiverActive")]
    pub _receiver_active: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " A comment to be inserted in the diagram."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Who starts the transaction."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub initiator: Option<String>,
    #[doc = " Whether the initiator is deactivated right after the transaction."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "initiatorActive")]
    pub initiator_active: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The human-friendly name of the interaction."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " The sequential number of the interaction, e.g. 1.2.5."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub number: Option<String>,
    #[doc = " Who receives the transaction."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub receiver: Option<String>,
    #[doc = " Whether the receiver is deactivated right after the transaction."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "receiverActive")]
    pub receiver_active: Option<Boolean>,
    #[doc = " Each resource instance used by the initiator."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub request: Option<ExampleScenarioContainedInstance>,
    #[doc = " Each resource instance used by the responder."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub response: Option<ExampleScenarioContainedInstance>,
    #[doc = " The type of operation - CRUD."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<String>,
}
#[doc = " Example of workflow instance."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ExampleScenario_Process")]
#[serde(deny_unknown_fields)]
pub struct ExampleScenarioProcess {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for postConditions"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_postConditions")]
    pub _post_conditions: Option<Element>,
    #[doc = " Extensions for preConditions"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_preConditions")]
    pub _pre_conditions: Option<Element>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " A longer description of the group of operations."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Description of final status after the process ends."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "postConditions")]
    pub post_conditions: Option<Markdown>,
    #[doc = " Description of initial status before the process starts."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "preConditions")]
    pub pre_conditions: Option<Markdown>,
    #[doc = " Each step of the process."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub step: Option<Vec<ExampleScenarioStep>>,
    #[doc = " The diagram title of the group of operations."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}
#[doc = " Example of workflow instance."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ExampleScenario_Step")]
#[serde(deny_unknown_fields)]
pub struct ExampleScenarioStep {
    #[doc = " Extensions for pause"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _pause: Option<Element>,
    #[doc = " Indicates an alternative step that can be taken instead of the operations on the base step "]
    #[doc = " in exceptional/atypical circumstances."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub alternative: Option<Vec<ExampleScenarioAlternative>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Each interaction or action."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub operation: Option<ExampleScenarioOperation>,
    #[doc = " If there is a pause in the flow."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub pause: Option<Boolean>,
    #[doc = " Nested process."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub process: Option<Vec<ExampleScenarioProcess>>,
}
#[doc = " Example of workflow instance."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ExampleScenario_Version")]
#[serde(deny_unknown_fields)]
pub struct ExampleScenarioVersion {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for versionId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_versionId")]
    pub _version_id: Option<Element>,
    #[doc = " The description of the resource version."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The identifier of a specific version of a resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "versionId")]
    pub version_id: Option<String>,
}
#[doc = " This resource provides: the claim details; adjudication details from the processing of a Claim; "]
#[doc = " and optionally account balance information, for informing the subscriber of the benefits "]
#[doc = " provided."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefit {
    #[doc = " Extensions for created"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _created: Option<Element>,
    #[doc = " Extensions for disposition"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _disposition: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for outcome"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _outcome: Option<Element>,
    #[doc = " Extensions for preAuthRef"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_preAuthRef")]
    pub _pre_auth_ref: Option<Vec<Element>>,
    #[doc = " Extensions for precedence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _precedence: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for use"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _use: Option<Element>,
    #[doc = " Details of a accident which resulted in injuries which required the products and services "]
    #[doc = " listed in the claim."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub accident: Option<ExplanationOfBenefitAccident>,
    #[doc = " The first-tier service adjudications for payor added product or service lines."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "addItem")]
    pub add_item: Option<Vec<ExplanationOfBenefitAddItem>>,
    #[doc = " The adjudication results which are presented at the header level rather than at the "]
    #[doc = " line-item or add-item levels."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub adjudication: Option<Vec<ExplanationOfBenefitAdjudication>>,
    #[doc = " Balance by Benefit Category."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "benefitBalance")]
    pub benefit_balance: Option<Vec<ExplanationOfBenefitBenefitBalance>>,
    #[doc = " The term of the benefits documented in this response."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "benefitPeriod")]
    pub benefit_period: Option<Period>,
    #[doc = " The period for which charges are being submitted."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "billablePeriod")]
    pub billable_period: Option<Period>,
    #[doc = " The members of the team who provided the products and services."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "careTeam")]
    pub care_team: Option<Vec<ExplanationOfBenefitCareTeam>>,
    #[doc = " The business identifier for the instance of the adjudication request: claim "]
    #[doc = " predetermination or preauthorization."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub claim: Option<Reference>,
    #[doc = " The business identifier for the instance of the adjudication response: claim, "]
    #[doc = " predetermination or preauthorization response."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "claimResponse")]
    pub claim_response: Option<Reference>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The date this resource was created."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub created: Option<DateTime>,
    #[doc = " Information about diagnoses relevant to the claim items."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub diagnosis: Option<Vec<ExplanationOfBenefitDiagnosis>>,
    #[doc = " A human readable description of the status of the adjudication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub disposition: Option<String>,
    #[doc = " Individual who created the claim, predetermination or preauthorization."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub enterer: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Facility where the services were provided."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub facility: Option<Reference>,
    #[doc = " The actual form, by reference or inclusion, for printing the content or an EOB."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub form: Option<Attachment>,
    #[doc = " A code for the form to be used for printing the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "formCode")]
    pub form_code: Option<CodeableConcept>,
    #[doc = " A code, used only on a response to a preauthorization, to indicate whether the benefits "]
    #[doc = " payable have been reserved and for whom."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fundsReserve")]
    pub funds_reserve: Option<CodeableConcept>,
    #[doc = " A code to indicate whether and for whom funds are to be reserved for future claims."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fundsReserveRequested")]
    pub funds_reserve_requested: Option<CodeableConcept>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A unique identifier assigned to this explanation of benefit."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " Financial instruments for reimbursement for the health care products and services specified "]
    #[doc = " on the claim."]
    pub insurance: Vec<ExplanationOfBenefitInsurance>,
    #[doc = " The party responsible for authorization, adjudication and reimbursement."]
    pub insurer: Reference,
    #[doc = " A claim line. Either a simple (a product or service) or a 'group' of details which can also "]
    #[doc = " be a simple items or groups of sub-details."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub item: Option<Vec<ExplanationOfBenefitItem>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Original prescription which has been superseded by this prescription to support the "]
    #[doc = " dispensing of pharmacy services, medications or products."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "originalPrescription")]
    pub original_prescription: Option<Reference>,
    #[doc = " The outcome of the claim, predetermination, or preauthorization processing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub outcome: Option<Code>,
    #[doc = " The party to whom the professional services and/or products have been supplied or are being "]
    #[doc = " considered and for whom actual for forecast reimbursement is sought."]
    pub patient: Reference,
    #[doc = " The party to be reimbursed for cost of the products and services according to the terms of "]
    #[doc = " the policy."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub payee: Option<ExplanationOfBenefitPayee>,
    #[doc = " Payment details for the adjudication of the claim."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub payment: Option<ExplanationOfBenefitPayment>,
    #[doc = " Reference from the Insurer which is used in later communications which refers to this "]
    #[doc = " adjudication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "preAuthRef")]
    pub pre_auth_ref: Option<Vec<String>>,
    #[doc = " The timeframe during which the supplied preauthorization reference may be quoted on claims "]
    #[doc = " to obtain the adjudication as provided."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "preAuthRefPeriod")]
    pub pre_auth_ref_period: Option<Vec<Period>>,
    #[doc = " This indicates the relative order of a series of EOBs related to different coverages for "]
    #[doc = " the same suite of services."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub precedence: Option<PositiveInt>,
    #[doc = " Prescription to support the dispensing of pharmacy, device or vision products."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub prescription: Option<Reference>,
    #[doc = " The provider-required urgency of processing the request. Typical values include: stat, "]
    #[doc = " routine deferred."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub priority: Option<CodeableConcept>,
    #[doc = " Procedures performed on the patient relevant to the billing items with the claim."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub procedure: Option<Vec<ExplanationOfBenefitProcedure>>,
    #[doc = " A note that describes or explains adjudication results in a human readable form."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "processNote")]
    pub process_note: Option<Vec<ExplanationOfBenefitProcessNote>>,
    #[doc = " The provider which is responsible for the claim, predetermination or preauthorization."]
    pub provider: Reference,
    #[doc = " A reference to a referral resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub referral: Option<Reference>,
    #[doc = " Other claims which are related to this claim such as prior submissions or claims for "]
    #[doc = " related services or for the same event."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub related: Option<Vec<ExplanationOfBenefitRelated>>,
    #[doc = " This is a ExplanationOfBenefit resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The status of the resource instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A finer grained suite of claim type codes which may convey additional information such as "]
    #[doc = " Inpatient vs Outpatient and/or a specialty service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subType")]
    pub sub_type: Option<CodeableConcept>,
    #[doc = " Additional information codes regarding exceptions, special considerations, the condition, "]
    #[doc = " situation, prior or concurrent issues."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportingInfo")]
    pub supporting_info: Option<Vec<ExplanationOfBenefitSupportingInfo>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " Categorized monetary totals for the adjudication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub total: Option<Vec<ExplanationOfBenefitTotal>>,
    #[doc = " The category of claim, e.g. oral, pharmacy, vision, institutional, professional."]
    #[serde(rename = "type")]
    pub type_: CodeableConcept,
    #[doc = " A code to indicate whether the nature of the request is: to request adjudication of "]
    #[doc = " products and services previously rendered; or requesting authorization and adjudication for "]
    #[doc = " provision in the future; or requesting the non-binding adjudication of the listed products "]
    #[doc = " and services which could be provided in the future."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "use")]
    pub use_: Option<Code>,
}
#[doc = " This resource provides: the claim details; adjudication details from the processing of a Claim; "]
#[doc = " and optionally account balance information, for informing the subscriber of the benefits "]
#[doc = " provided."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_Accident")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitAccident {
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Date of an accident event  related to the products and services contained in the claim."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<Date>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The physical location of the accident event."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "locationAddress")]
    pub location_address: Option<Address>,
    #[doc = " The physical location of the accident event."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "locationReference")]
    pub location_reference: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The type or context of the accident event for the purposes of selection of potential "]
    #[doc = " insurance coverages and determination of coordination between insurers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " This resource provides: the claim details; adjudication details from the processing of a Claim; "]
#[doc = " and optionally account balance information, for informing the subscriber of the benefits "]
#[doc = " provided."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_AddItem")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitAddItem {
    #[doc = " Extensions for detailSequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_detailSequence")]
    pub _detail_sequence: Option<Vec<Element>>,
    #[doc = " Extensions for factor"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _factor: Option<Element>,
    #[doc = " Extensions for itemSequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_itemSequence")]
    pub _item_sequence: Option<Vec<Element>>,
    #[doc = " Extensions for noteNumber"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_noteNumber")]
    pub _note_number: Option<Vec<Element>>,
    #[doc = " Extensions for servicedDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_servicedDate")]
    pub _serviced_date: Option<Element>,
    #[doc = " Extensions for subDetailSequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_subDetailSequence")]
    pub _sub_detail_sequence: Option<Vec<Element>>,
    #[doc = " The adjudication results."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub adjudication: Option<Vec<ExplanationOfBenefitAdjudication>>,
    #[doc = " Physical service site on the patient (limb, tooth, etc.)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "bodySite")]
    pub body_site: Option<CodeableConcept>,
    #[doc = " The second-tier service adjudications for payor added services."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub detail: Option<Vec<ExplanationOfBenefitDetail1>>,
    #[doc = " The sequence number of the details within the claim item which this line is intended to "]
    #[doc = " replace."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "detailSequence")]
    pub detail_sequence: Option<Vec<PositiveInt>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " A real number that represents a multiplier used in determining the overall value of "]
    #[doc = " services delivered and/or goods received. The concept of a Factor allows for a discount or "]
    #[doc = " surcharge multiplier to be applied to a monetary amount."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub factor: Option<Decimal>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Claim items which this service line is intended to replace."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "itemSequence")]
    pub item_sequence: Option<Vec<PositiveInt>>,
    #[doc = " Where the product or service was provided."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "locationAddress")]
    pub location_address: Option<Address>,
    #[doc = " Where the product or service was provided."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "locationCodeableConcept")]
    pub location_codeable_concept: Option<CodeableConcept>,
    #[doc = " Where the product or service was provided."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "locationReference")]
    pub location_reference: Option<Reference>,
    #[doc = " Item typification or modifiers codes to convey additional context for the product or "]
    #[doc = " service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub modifier: Option<Vec<CodeableConcept>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The quantity times the unit price for an additional service or product or charge."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub net: Option<Money>,
    #[doc = " The numbers associated with notes below which apply to the adjudication of this item."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "noteNumber")]
    pub note_number: Option<Vec<PositiveInt>>,
    #[doc = " When the value is a group code then this item collects a set of related claim details, "]
    #[doc = " otherwise this contains the product, service, drug or other billing code for the item."]
    #[serde(rename = "productOrService")]
    pub product_or_service: CodeableConcept,
    #[doc = " Identifies the program under which this may be recovered."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "programCode")]
    pub program_code: Option<Vec<CodeableConcept>>,
    #[doc = " The providers who are authorized for the services rendered to the patient."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub provider: Option<Vec<Reference>>,
    #[doc = " The number of repetitions of a service or product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,
    #[doc = " The date or dates when the service or product was supplied, performed or completed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "servicedDate")]
    pub serviced_date: Option<String>,
    #[doc = " The date or dates when the service or product was supplied, performed or completed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "servicedPeriod")]
    pub serviced_period: Option<Period>,
    #[doc = " The sequence number of the sub-details woithin the details within the claim item which this "]
    #[doc = " line is intended to replace."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subDetailSequence")]
    pub sub_detail_sequence: Option<Vec<PositiveInt>>,
    #[doc = " A region or surface of the bodySite, e.g. limb region or tooth surface(s)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subSite")]
    pub sub_site: Option<Vec<CodeableConcept>>,
    #[doc = " If the item is not a group then this is the fee for the product or service, otherwise this "]
    #[doc = " is the total of the fees for the details of the group."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "unitPrice")]
    pub unit_price: Option<Money>,
}
#[doc = " This resource provides: the claim details; adjudication details from the processing of a Claim; "]
#[doc = " and optionally account balance information, for informing the subscriber of the benefits "]
#[doc = " provided."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_Adjudication")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitAdjudication {
    #[doc = " Extensions for value"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _value: Option<Element>,
    #[doc = " Monetary amount associated with the category."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub amount: Option<Money>,
    #[doc = " A code to indicate the information type of this adjudication record. Information types may "]
    #[doc = " include: the value submitted, maximum values or percentages allowed or payable under the "]
    #[doc = " plan, amounts that the patient is responsible for in-aggregate or pertaining to this item, "]
    #[doc = " amounts paid by other coverages, and the benefit payable for this item."]
    pub category: CodeableConcept,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A code supporting the understanding of the adjudication result and explaining variance from "]
    #[doc = " expected amount."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reason: Option<CodeableConcept>,
    #[doc = " A non-monetary value associated with the category. Mutually exclusive to the amount element "]
    #[doc = " above."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Decimal>,
}
#[doc = " This resource provides: the claim details; adjudication details from the processing of a Claim; "]
#[doc = " and optionally account balance information, for informing the subscriber of the benefits "]
#[doc = " provided."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_BenefitBalance")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitBenefitBalance {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for excluded"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _excluded: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Code to identify the general type of benefits under which products and services are "]
    #[doc = " provided."]
    pub category: CodeableConcept,
    #[doc = " A richer description of the benefit or services covered."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " True if the indicated class of service is excluded from the plan, missing or False "]
    #[doc = " indicates the product or service is included in the coverage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub excluded: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Benefits Used to date."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub financial: Option<Vec<ExplanationOfBenefitFinancial>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A short name or tag for the benefit."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " Is a flag to indicate whether the benefits refer to in-network providers or out-of-network "]
    #[doc = " providers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub network: Option<CodeableConcept>,
    #[doc = " The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual "]
    #[doc = " visits'."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub term: Option<CodeableConcept>,
    #[doc = " Indicates if the benefits apply to an individual or to the family."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub unit: Option<CodeableConcept>,
}
#[doc = " This resource provides: the claim details; adjudication details from the processing of a Claim; "]
#[doc = " and optionally account balance information, for informing the subscriber of the benefits "]
#[doc = " provided."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_CareTeam")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitCareTeam {
    #[doc = " Extensions for responsible"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _responsible: Option<Element>,
    #[doc = " Extensions for sequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _sequence: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Member of the team who provided the product or service."]
    pub provider: Reference,
    #[doc = " The qualification of the practitioner which is applicable for this service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub qualification: Option<CodeableConcept>,
    #[doc = " The party who is billing and/or responsible for the claimed products or services."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub responsible: Option<Boolean>,
    #[doc = " The lead, assisting or supervising practitioner and their discipline if a multidisciplinary "]
    #[doc = " team."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub role: Option<CodeableConcept>,
    #[doc = " A number to uniquely identify care team entries."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sequence: Option<PositiveInt>,
}
#[doc = " This resource provides: the claim details; adjudication details from the processing of a Claim; "]
#[doc = " and optionally account balance information, for informing the subscriber of the benefits "]
#[doc = " provided."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_Detail")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitDetail {
    #[doc = " Extensions for factor"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _factor: Option<Element>,
    #[doc = " Extensions for noteNumber"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_noteNumber")]
    pub _note_number: Option<Vec<Element>>,
    #[doc = " Extensions for sequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _sequence: Option<Element>,
    #[doc = " The adjudication results."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub adjudication: Option<Vec<ExplanationOfBenefitAdjudication>>,
    #[doc = " Code to identify the general type of benefits under which products and services are "]
    #[doc = " provided."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " A real number that represents a multiplier used in determining the overall value of "]
    #[doc = " services delivered and/or goods received. The concept of a Factor allows for a discount or "]
    #[doc = " surcharge multiplier to be applied to a monetary amount."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub factor: Option<Decimal>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Item typification or modifiers codes to convey additional context for the product or "]
    #[doc = " service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub modifier: Option<Vec<CodeableConcept>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The quantity times the unit price for an additional service or product or charge."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub net: Option<Money>,
    #[doc = " The numbers associated with notes below which apply to the adjudication of this item."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "noteNumber")]
    pub note_number: Option<Vec<PositiveInt>>,
    #[doc = " When the value is a group code then this item collects a set of related claim details, "]
    #[doc = " otherwise this contains the product, service, drug or other billing code for the item."]
    #[serde(rename = "productOrService")]
    pub product_or_service: CodeableConcept,
    #[doc = " Identifies the program under which this may be recovered."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "programCode")]
    pub program_code: Option<Vec<CodeableConcept>>,
    #[doc = " The number of repetitions of a service or product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,
    #[doc = " The type of revenue or cost center providing the product and/or service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub revenue: Option<CodeableConcept>,
    #[doc = " A claim detail line. Either a simple (a product or service) or a 'group' of sub-details "]
    #[doc = " which are simple items."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sequence: Option<PositiveInt>,
    #[doc = " Third-tier of goods and services."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subDetail")]
    pub sub_detail: Option<Vec<ExplanationOfBenefitSubDetail>>,
    #[doc = " Unique Device Identifiers associated with this line item."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub udi: Option<Vec<Reference>>,
    #[doc = " If the item is not a group then this is the fee for the product or service, otherwise this "]
    #[doc = " is the total of the fees for the details of the group."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "unitPrice")]
    pub unit_price: Option<Money>,
}
#[doc = " This resource provides: the claim details; adjudication details from the processing of a Claim; "]
#[doc = " and optionally account balance information, for informing the subscriber of the benefits "]
#[doc = " provided."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_Detail1")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitDetail1 {
    #[doc = " Extensions for factor"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _factor: Option<Element>,
    #[doc = " Extensions for noteNumber"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_noteNumber")]
    pub _note_number: Option<Vec<Element>>,
    #[doc = " The adjudication results."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub adjudication: Option<Vec<ExplanationOfBenefitAdjudication>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " A real number that represents a multiplier used in determining the overall value of "]
    #[doc = " services delivered and/or goods received. The concept of a Factor allows for a discount or "]
    #[doc = " surcharge multiplier to be applied to a monetary amount."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub factor: Option<Decimal>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Item typification or modifiers codes to convey additional context for the product or "]
    #[doc = " service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub modifier: Option<Vec<CodeableConcept>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The quantity times the unit price for an additional service or product or charge."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub net: Option<Money>,
    #[doc = " The numbers associated with notes below which apply to the adjudication of this item."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "noteNumber")]
    pub note_number: Option<Vec<PositiveInt>>,
    #[doc = " When the value is a group code then this item collects a set of related claim details, "]
    #[doc = " otherwise this contains the product, service, drug or other billing code for the item."]
    #[serde(rename = "productOrService")]
    pub product_or_service: CodeableConcept,
    #[doc = " The number of repetitions of a service or product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,
    #[doc = " The third-tier service adjudications for payor added services."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subDetail")]
    pub sub_detail: Option<Vec<ExplanationOfBenefitSubDetail1>>,
    #[doc = " If the item is not a group then this is the fee for the product or service, otherwise this "]
    #[doc = " is the total of the fees for the details of the group."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "unitPrice")]
    pub unit_price: Option<Money>,
}
#[doc = " This resource provides: the claim details; adjudication details from the processing of a Claim; "]
#[doc = " and optionally account balance information, for informing the subscriber of the benefits "]
#[doc = " provided."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_Diagnosis")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitDiagnosis {
    #[doc = " Extensions for sequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _sequence: Option<Element>,
    #[doc = " The nature of illness or problem in a coded form or as a reference to an external defined "]
    #[doc = " Condition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "diagnosisCodeableConcept")]
    pub diagnosis_codeable_concept: Option<CodeableConcept>,
    #[doc = " The nature of illness or problem in a coded form or as a reference to an external defined "]
    #[doc = " Condition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "diagnosisReference")]
    pub diagnosis_reference: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Indication of whether the diagnosis was present on admission to a facility."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onAdmission")]
    pub on_admission: Option<CodeableConcept>,
    #[doc = " A package billing code or bundle code used to group products and services to a particular "]
    #[doc = " health condition (such as heart attack) which is based on a predetermined grouping code "]
    #[doc = " system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "packageCode")]
    pub package_code: Option<CodeableConcept>,
    #[doc = " A number to uniquely identify diagnosis entries."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sequence: Option<PositiveInt>,
    #[doc = " When the condition was observed or the relative ranking."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Vec<CodeableConcept>>,
}
#[doc = " This resource provides: the claim details; adjudication details from the processing of a Claim; "]
#[doc = " and optionally account balance information, for informing the subscriber of the benefits "]
#[doc = " provided."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_Financial")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitFinancial {
    #[doc = " Extensions for allowedString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_allowedString")]
    pub _allowed_string: Option<Element>,
    #[doc = " Extensions for allowedUnsignedInt"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_allowedUnsignedInt")]
    pub _allowed_unsigned_int: Option<Element>,
    #[doc = " Extensions for usedUnsignedInt"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_usedUnsignedInt")]
    pub _used_unsigned_int: Option<Element>,
    #[doc = " The quantity of the benefit which is permitted under the coverage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "allowedMoney")]
    pub allowed_money: Option<Money>,
    #[doc = " The quantity of the benefit which is permitted under the coverage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "allowedString")]
    pub allowed_string: Option<String>,
    #[doc = " The quantity of the benefit which is permitted under the coverage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "allowedUnsignedInt")]
    pub allowed_unsigned_int: Option<f64>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Classification of benefit being provided."]
    #[serde(rename = "type")]
    pub type_: CodeableConcept,
    #[doc = " The quantity of the benefit which have been consumed to date."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "usedMoney")]
    pub used_money: Option<Money>,
    #[doc = " The quantity of the benefit which have been consumed to date."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "usedUnsignedInt")]
    pub used_unsigned_int: Option<f64>,
}
#[doc = " This resource provides: the claim details; adjudication details from the processing of a Claim; "]
#[doc = " and optionally account balance information, for informing the subscriber of the benefits "]
#[doc = " provided."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_Insurance")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitInsurance {
    #[doc = " Extensions for focal"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _focal: Option<Element>,
    #[doc = " Extensions for preAuthRef"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_preAuthRef")]
    pub _pre_auth_ref: Option<Vec<Element>>,
    #[doc = " Reference to the insurance card level information contained in the Coverage resource. The "]
    #[doc = " coverage issuing insurer will use these details to locate the patient's actual coverage "]
    #[doc = " within the insurer's information system."]
    pub coverage: Reference,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " A flag to indicate that this Coverage is to be used for adjudication of this claim when set "]
    #[doc = " to true."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub focal: Option<Boolean>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Reference numbers previously provided by the insurer to the provider to be quoted on "]
    #[doc = " subsequent claims containing services or products related to the prior authorization."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "preAuthRef")]
    pub pre_auth_ref: Option<Vec<String>>,
}
#[doc = " This resource provides: the claim details; adjudication details from the processing of a Claim; "]
#[doc = " and optionally account balance information, for informing the subscriber of the benefits "]
#[doc = " provided."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_Item")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitItem {
    #[doc = " Extensions for careTeamSequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_careTeamSequence")]
    pub _care_team_sequence: Option<Vec<Element>>,
    #[doc = " Extensions for diagnosisSequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_diagnosisSequence")]
    pub _diagnosis_sequence: Option<Vec<Element>>,
    #[doc = " Extensions for factor"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _factor: Option<Element>,
    #[doc = " Extensions for informationSequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_informationSequence")]
    pub _information_sequence: Option<Vec<Element>>,
    #[doc = " Extensions for noteNumber"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_noteNumber")]
    pub _note_number: Option<Vec<Element>>,
    #[doc = " Extensions for procedureSequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_procedureSequence")]
    pub _procedure_sequence: Option<Vec<Element>>,
    #[doc = " Extensions for sequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _sequence: Option<Element>,
    #[doc = " Extensions for servicedDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_servicedDate")]
    pub _serviced_date: Option<Element>,
    #[doc = " If this item is a group then the values here are a summary of the adjudication of the "]
    #[doc = " detail items. If this item is a simple product or service then this is the result of the "]
    #[doc = " adjudication of this item."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub adjudication: Option<Vec<ExplanationOfBenefitAdjudication>>,
    #[doc = " Physical service site on the patient (limb, tooth, etc.)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "bodySite")]
    pub body_site: Option<CodeableConcept>,
    #[doc = " Care team members related to this service or product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "careTeamSequence")]
    pub care_team_sequence: Option<Vec<PositiveInt>>,
    #[doc = " Code to identify the general type of benefits under which products and services are "]
    #[doc = " provided."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<CodeableConcept>,
    #[doc = " Second-tier of goods and services."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub detail: Option<Vec<ExplanationOfBenefitDetail>>,
    #[doc = " Diagnoses applicable for this service or product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "diagnosisSequence")]
    pub diagnosis_sequence: Option<Vec<PositiveInt>>,
    #[doc = " A billed item may include goods or services provided in multiple encounters."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Vec<Reference>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " A real number that represents a multiplier used in determining the overall value of "]
    #[doc = " services delivered and/or goods received. The concept of a Factor allows for a discount or "]
    #[doc = " surcharge multiplier to be applied to a monetary amount."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub factor: Option<Decimal>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Exceptions, special conditions and supporting information applicable for this service or "]
    #[doc = " product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "informationSequence")]
    pub information_sequence: Option<Vec<PositiveInt>>,
    #[doc = " Where the product or service was provided."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "locationAddress")]
    pub location_address: Option<Address>,
    #[doc = " Where the product or service was provided."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "locationCodeableConcept")]
    pub location_codeable_concept: Option<CodeableConcept>,
    #[doc = " Where the product or service was provided."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "locationReference")]
    pub location_reference: Option<Reference>,
    #[doc = " Item typification or modifiers codes to convey additional context for the product or "]
    #[doc = " service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub modifier: Option<Vec<CodeableConcept>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The quantity times the unit price for an additional service or product or charge."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub net: Option<Money>,
    #[doc = " The numbers associated with notes below which apply to the adjudication of this item."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "noteNumber")]
    pub note_number: Option<Vec<PositiveInt>>,
    #[doc = " Procedures applicable for this service or product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "procedureSequence")]
    pub procedure_sequence: Option<Vec<PositiveInt>>,
    #[doc = " When the value is a group code then this item collects a set of related claim details, "]
    #[doc = " otherwise this contains the product, service, drug or other billing code for the item."]
    #[serde(rename = "productOrService")]
    pub product_or_service: CodeableConcept,
    #[doc = " Identifies the program under which this may be recovered."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "programCode")]
    pub program_code: Option<Vec<CodeableConcept>>,
    #[doc = " The number of repetitions of a service or product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,
    #[doc = " The type of revenue or cost center providing the product and/or service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub revenue: Option<CodeableConcept>,
    #[doc = " A number to uniquely identify item entries."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sequence: Option<PositiveInt>,
    #[doc = " The date or dates when the service or product was supplied, performed or completed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "servicedDate")]
    pub serviced_date: Option<String>,
    #[doc = " The date or dates when the service or product was supplied, performed or completed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "servicedPeriod")]
    pub serviced_period: Option<Period>,
    #[doc = " A region or surface of the bodySite, e.g. limb region or tooth surface(s)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subSite")]
    pub sub_site: Option<Vec<CodeableConcept>>,
    #[doc = " Unique Device Identifiers associated with this line item."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub udi: Option<Vec<Reference>>,
    #[doc = " If the item is not a group then this is the fee for the product or service, otherwise this "]
    #[doc = " is the total of the fees for the details of the group."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "unitPrice")]
    pub unit_price: Option<Money>,
}
#[doc = " This resource provides: the claim details; adjudication details from the processing of a Claim; "]
#[doc = " and optionally account balance information, for informing the subscriber of the benefits "]
#[doc = " provided."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_Payee")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitPayee {
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Reference to the individual or organization to whom any payment will be made."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub party: Option<Reference>,
    #[doc = " Type of Party to be reimbursed: Subscriber, provider, other."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " This resource provides: the claim details; adjudication details from the processing of a Claim; "]
#[doc = " and optionally account balance information, for informing the subscriber of the benefits "]
#[doc = " provided."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_Payment")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitPayment {
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Total amount of all adjustments to this payment included in this transaction which are not "]
    #[doc = " related to this claim's adjudication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub adjustment: Option<Money>,
    #[doc = " Reason for the payment adjustment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "adjustmentReason")]
    pub adjustment_reason: Option<CodeableConcept>,
    #[doc = " Benefits payable less any payment adjustment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub amount: Option<Money>,
    #[doc = " Estimated date the payment will be issued or the actual issue date of payment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<Date>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Issuer's unique identifier for the payment instrument."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Whether this represents partial or complete payment of the benefits payable."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " This resource provides: the claim details; adjudication details from the processing of a Claim; "]
#[doc = " and optionally account balance information, for informing the subscriber of the benefits "]
#[doc = " provided."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_Procedure")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitProcedure {
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for sequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _sequence: Option<Element>,
    #[doc = " Date and optionally time the procedure was performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The code or reference to a Procedure resource which identifies the clinical intervention "]
    #[doc = " performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "procedureCodeableConcept")]
    pub procedure_codeable_concept: Option<CodeableConcept>,
    #[doc = " The code or reference to a Procedure resource which identifies the clinical intervention "]
    #[doc = " performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "procedureReference")]
    pub procedure_reference: Option<Reference>,
    #[doc = " A number to uniquely identify procedure entries."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sequence: Option<PositiveInt>,
    #[doc = " When the condition was observed or the relative ranking."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Vec<CodeableConcept>>,
    #[doc = " Unique Device Identifiers associated with this line item."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub udi: Option<Vec<Reference>>,
}
#[doc = " This resource provides: the claim details; adjudication details from the processing of a Claim; "]
#[doc = " and optionally account balance information, for informing the subscriber of the benefits "]
#[doc = " provided."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_ProcessNote")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitProcessNote {
    #[doc = " Extensions for number"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _number: Option<Element>,
    #[doc = " Extensions for text"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _text: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A code to define the language used in the text of the note."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A number to uniquely identify a note entry."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub number: Option<PositiveInt>,
    #[doc = " The explanation or description associated with the processing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    #[doc = " The business purpose of the note text."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}
#[doc = " This resource provides: the claim details; adjudication details from the processing of a Claim; "]
#[doc = " and optionally account balance information, for informing the subscriber of the benefits "]
#[doc = " provided."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_Related")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitRelated {
    #[doc = " Reference to a related claim."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub claim: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " An alternate organizational reference to the case or file to which this particular claim "]
    #[doc = " pertains."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reference: Option<Identifier>,
    #[doc = " A code to convey how the claims are related."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub relationship: Option<CodeableConcept>,
}
#[doc = " This resource provides: the claim details; adjudication details from the processing of a Claim; "]
#[doc = " and optionally account balance information, for informing the subscriber of the benefits "]
#[doc = " provided."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_SubDetail")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitSubDetail {
    #[doc = " Extensions for factor"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _factor: Option<Element>,
    #[doc = " Extensions for noteNumber"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_noteNumber")]
    pub _note_number: Option<Vec<Element>>,
    #[doc = " Extensions for sequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _sequence: Option<Element>,
    #[doc = " The adjudication results."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub adjudication: Option<Vec<ExplanationOfBenefitAdjudication>>,
    #[doc = " Code to identify the general type of benefits under which products and services are "]
    #[doc = " provided."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " A real number that represents a multiplier used in determining the overall value of "]
    #[doc = " services delivered and/or goods received. The concept of a Factor allows for a discount or "]
    #[doc = " surcharge multiplier to be applied to a monetary amount."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub factor: Option<Decimal>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Item typification or modifiers codes to convey additional context for the product or "]
    #[doc = " service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub modifier: Option<Vec<CodeableConcept>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The quantity times the unit price for an additional service or product or charge."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub net: Option<Money>,
    #[doc = " The numbers associated with notes below which apply to the adjudication of this item."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "noteNumber")]
    pub note_number: Option<Vec<PositiveInt>>,
    #[doc = " When the value is a group code then this item collects a set of related claim details, "]
    #[doc = " otherwise this contains the product, service, drug or other billing code for the item."]
    #[serde(rename = "productOrService")]
    pub product_or_service: CodeableConcept,
    #[doc = " Identifies the program under which this may be recovered."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "programCode")]
    pub program_code: Option<Vec<CodeableConcept>>,
    #[doc = " The number of repetitions of a service or product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,
    #[doc = " The type of revenue or cost center providing the product and/or service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub revenue: Option<CodeableConcept>,
    #[doc = " A claim detail line. Either a simple (a product or service) or a 'group' of sub-details "]
    #[doc = " which are simple items."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sequence: Option<PositiveInt>,
    #[doc = " Unique Device Identifiers associated with this line item."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub udi: Option<Vec<Reference>>,
    #[doc = " If the item is not a group then this is the fee for the product or service, otherwise this "]
    #[doc = " is the total of the fees for the details of the group."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "unitPrice")]
    pub unit_price: Option<Money>,
}
#[doc = " This resource provides: the claim details; adjudication details from the processing of a Claim; "]
#[doc = " and optionally account balance information, for informing the subscriber of the benefits "]
#[doc = " provided."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_SubDetail1")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitSubDetail1 {
    #[doc = " Extensions for factor"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _factor: Option<Element>,
    #[doc = " Extensions for noteNumber"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_noteNumber")]
    pub _note_number: Option<Vec<Element>>,
    #[doc = " The adjudication results."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub adjudication: Option<Vec<ExplanationOfBenefitAdjudication>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " A real number that represents a multiplier used in determining the overall value of "]
    #[doc = " services delivered and/or goods received. The concept of a Factor allows for a discount or "]
    #[doc = " surcharge multiplier to be applied to a monetary amount."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub factor: Option<Decimal>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Item typification or modifiers codes to convey additional context for the product or "]
    #[doc = " service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub modifier: Option<Vec<CodeableConcept>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The quantity times the unit price for an additional service or product or charge."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub net: Option<Money>,
    #[doc = " The numbers associated with notes below which apply to the adjudication of this item."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "noteNumber")]
    pub note_number: Option<Vec<PositiveInt>>,
    #[doc = " When the value is a group code then this item collects a set of related claim details, "]
    #[doc = " otherwise this contains the product, service, drug or other billing code for the item."]
    #[serde(rename = "productOrService")]
    pub product_or_service: CodeableConcept,
    #[doc = " The number of repetitions of a service or product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,
    #[doc = " If the item is not a group then this is the fee for the product or service, otherwise this "]
    #[doc = " is the total of the fees for the details of the group."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "unitPrice")]
    pub unit_price: Option<Money>,
}
#[doc = " This resource provides: the claim details; adjudication details from the processing of a Claim; "]
#[doc = " and optionally account balance information, for informing the subscriber of the benefits "]
#[doc = " provided."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_SupportingInfo")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitSupportingInfo {
    #[doc = " Extensions for sequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _sequence: Option<Element>,
    #[doc = " Extensions for timingDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_timingDate")]
    pub _timing_date: Option<Element>,
    #[doc = " Extensions for valueBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub _value_boolean: Option<Element>,
    #[doc = " Extensions for valueString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueString")]
    pub _value_string: Option<Element>,
    #[doc = " The general class of the information supplied: information; exception; accident, "]
    #[doc = " employment; onset, etc."]
    pub category: CodeableConcept,
    #[doc = " System and code pertaining to the specific information regarding special conditions "]
    #[doc = " relating to the setting, treatment or patient  for which care is sought."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Provides the reason in the situation where a reason code is required in addition to the "]
    #[doc = " content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reason: Option<Coding>,
    #[doc = " A number to uniquely identify supporting information entries."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sequence: Option<PositiveInt>,
    #[doc = " The date when or period to which this information refers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingDate")]
    pub timing_date: Option<String>,
    #[doc = " The date when or period to which this information refers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingPeriod")]
    pub timing_period: Option<Period>,
    #[doc = " Additional data or information such as resources, documents, images etc. including "]
    #[doc = " references to the data or the actual inclusion of the data."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAttachment")]
    pub value_attachment: Option<Attachment>,
    #[doc = " Additional data or information such as resources, documents, images etc. including "]
    #[doc = " references to the data or the actual inclusion of the data."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,
    #[doc = " Additional data or information such as resources, documents, images etc. including "]
    #[doc = " references to the data or the actual inclusion of the data."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,
    #[doc = " Additional data or information such as resources, documents, images etc. including "]
    #[doc = " references to the data or the actual inclusion of the data."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueReference")]
    pub value_reference: Option<Reference>,
    #[doc = " Additional data or information such as resources, documents, images etc. including "]
    #[doc = " references to the data or the actual inclusion of the data."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueString")]
    pub value_string: Option<String>,
}
#[doc = " This resource provides: the claim details; adjudication details from the processing of a Claim; "]
#[doc = " and optionally account balance information, for informing the subscriber of the benefits "]
#[doc = " provided."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_Total")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitTotal {
    #[doc = " Monetary total amount associated with the category."]
    pub amount: Money,
    #[doc = " A code to indicate the information type of this adjudication record. Information types may "]
    #[doc = " include: the value submitted, maximum values or percentages allowed or payable under the "]
    #[doc = " plan, amounts that the patient is responsible for in aggregate or pertaining to this item, "]
    #[doc = " amounts paid by other coverages, and the benefit payable for this item."]
    pub category: CodeableConcept,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " A expression that is evaluated in a specified context and returns a value. The context of use "]
#[doc = " of the expression must specify the context in which the expression is evaluated, and how the "]
#[doc = " result of the expression is used."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Expression {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for expression"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _expression: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for reference"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _reference: Option<Element>,
    #[doc = " A brief, natural language description of the condition that effectively communicates the "]
    #[doc = " intended semantics."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " An expression in the specified language that returns a value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The media type of the language for the expression."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<serde_json::Value>,
    #[doc = " A short name assigned to the expression to allow for multiple reuse of the expression in "]
    #[doc = " the context where it is defined."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<Id>,
    #[doc = " A URI that defines where the expression is found."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reference: Option<Uri>,
}
#[doc = " Optional Extension Element - found in all resources."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Extension {
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " Extensions for valueBase64Binary"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBase64Binary")]
    pub _value_base_64_binary: Option<Element>,
    #[doc = " Extensions for valueBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub _value_boolean: Option<Element>,
    #[doc = " Extensions for valueCanonical"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueCanonical")]
    pub _value_canonical: Option<Element>,
    #[doc = " Extensions for valueCode"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueCode")]
    pub _value_code: Option<Element>,
    #[doc = " Extensions for valueDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDate")]
    pub _value_date: Option<Element>,
    #[doc = " Extensions for valueDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDateTime")]
    pub _value_date_time: Option<Element>,
    #[doc = " Extensions for valueDecimal"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDecimal")]
    pub _value_decimal: Option<Element>,
    #[doc = " Extensions for valueId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueId")]
    pub _value_id: Option<Element>,
    #[doc = " Extensions for valueInstant"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueInstant")]
    pub _value_instant: Option<Element>,
    #[doc = " Extensions for valueInteger"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueInteger")]
    pub _value_integer: Option<Element>,
    #[doc = " Extensions for valueMarkdown"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueMarkdown")]
    pub _value_markdown: Option<Element>,
    #[doc = " Extensions for valueOid"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueOid")]
    pub _value_oid: Option<Element>,
    #[doc = " Extensions for valuePositiveInt"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valuePositiveInt")]
    pub _value_positive_int: Option<Element>,
    #[doc = " Extensions for valueString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueString")]
    pub _value_string: Option<Element>,
    #[doc = " Extensions for valueTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueTime")]
    pub _value_time: Option<Element>,
    #[doc = " Extensions for valueUnsignedInt"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUnsignedInt")]
    pub _value_unsigned_int: Option<Element>,
    #[doc = " Extensions for valueUri"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUri")]
    pub _value_uri: Option<Element>,
    #[doc = " Extensions for valueUrl"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUrl")]
    pub _value_url: Option<Element>,
    #[doc = " Extensions for valueUuid"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUuid")]
    pub _value_uuid: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Source of the definition for the extension code - a logical name or a URL."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAddress")]
    pub value_address: Option<Address>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAge")]
    pub value_age: Option<Age>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAnnotation")]
    pub value_annotation: Option<Annotation>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAttachment")]
    pub value_attachment: Option<Attachment>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBase64Binary")]
    pub value_base_64_binary: Option<String>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCanonical")]
    pub value_canonical: Option<String>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCode")]
    pub value_code: Option<String>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableReference")]
    pub value_codeable_reference: Option<CodeableReference>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCoding")]
    pub value_coding: Option<Coding>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueContactDetail")]
    pub value_contact_detail: Option<ContactDetail>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueContactPoint")]
    pub value_contact_point: Option<ContactPoint>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueContributor")]
    pub value_contributor: Option<Contributor>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCount")]
    pub value_count: Option<Count>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDataRequirement")]
    pub value_data_requirement: Option<DataRequirement>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDate")]
    pub value_date: Option<String>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDateTime")]
    pub value_date_time: Option<String>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDecimal")]
    pub value_decimal: Option<f64>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDistance")]
    pub value_distance: Option<Distance>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDosage")]
    pub value_dosage: Option<Dosage>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDuration")]
    pub value_duration: Option<Duration>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueExpression")]
    pub value_expression: Option<Expression>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueHumanName")]
    pub value_human_name: Option<HumanName>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueId")]
    pub value_id: Option<String>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueIdentifier")]
    pub value_identifier: Option<Identifier>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueInstant")]
    pub value_instant: Option<String>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueInteger")]
    pub value_integer: Option<f64>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueMarkdown")]
    pub value_markdown: Option<String>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueMoney")]
    pub value_money: Option<Money>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueOid")]
    pub value_oid: Option<String>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueParameterDefinition")]
    pub value_parameter_definition: Option<ParameterDefinition>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valuePeriod")]
    pub value_period: Option<Period>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valuePositiveInt")]
    pub value_positive_int: Option<f64>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRange")]
    pub value_range: Option<Range>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRatio")]
    pub value_ratio: Option<Ratio>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRatioRange")]
    pub value_ratio_range: Option<RatioRange>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueReference")]
    pub value_reference: Option<Reference>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRelatedArtifact")]
    pub value_related_artifact: Option<RelatedArtifact>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueSampledData")]
    pub value_sampled_data: Option<SampledData>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueSignature")]
    pub value_signature: Option<Signature>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueString")]
    pub value_string: Option<String>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTime")]
    pub value_time: Option<String>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTiming")]
    pub value_timing: Option<Timing>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTriggerDefinition")]
    pub value_trigger_definition: Option<TriggerDefinition>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUnsignedInt")]
    pub value_unsigned_int: Option<f64>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUri")]
    pub value_uri: Option<String>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUrl")]
    pub value_url: Option<String>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUsageContext")]
    pub value_usage_context: Option<UsageContext>,
    #[doc = " Value of extension - must be one of a constrained set of the data types (see "]
    #[doc = " [Extensibility](extensibility.html) for a list)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUuid")]
    pub value_uuid: Option<String>,
}
#[doc = " Significant health conditions for a person related to the patient relevant in the context of "]
#[doc = " care for the patient."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct FamilyMemberHistory {
    #[doc = " Extensions for ageString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_ageString")]
    pub _age_string: Option<Element>,
    #[doc = " Extensions for bornDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_bornDate")]
    pub _born_date: Option<Element>,
    #[doc = " Extensions for bornString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_bornString")]
    pub _born_string: Option<Element>,
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for deceasedBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_deceasedBoolean")]
    pub _deceased_boolean: Option<Element>,
    #[doc = " Extensions for deceasedDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_deceasedDate")]
    pub _deceased_date: Option<Element>,
    #[doc = " Extensions for deceasedString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_deceasedString")]
    pub _deceased_string: Option<Element>,
    #[doc = " Extensions for estimatedAge"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_estimatedAge")]
    pub _estimated_age: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for instantiatesUri"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_instantiatesUri")]
    pub _instantiates_uri: Option<Vec<Element>>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " The age of the relative at the time the family member history is recorded."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "ageAge")]
    pub age_age: Option<Age>,
    #[doc = " The age of the relative at the time the family member history is recorded."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "ageRange")]
    pub age_range: Option<Range>,
    #[doc = " The age of the relative at the time the family member history is recorded."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "ageString")]
    pub age_string: Option<String>,
    #[doc = " The actual or approximate date of birth of the relative."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "bornDate")]
    pub born_date: Option<String>,
    #[doc = " The actual or approximate date of birth of the relative."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "bornPeriod")]
    pub born_period: Option<Period>,
    #[doc = " The actual or approximate date of birth of the relative."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "bornString")]
    pub born_string: Option<String>,
    #[doc = " The significant Conditions (or condition) that the family member had. This is a repeating "]
    #[doc = " section to allow a system to represent more than one condition per resource, though there "]
    #[doc = " is nothing stopping multiple resources - one per condition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub condition: Option<Vec<FamilyMemberHistoryCondition>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " Describes why the family member's history is not available."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dataAbsentReason")]
    pub data_absent_reason: Option<CodeableConcept>,
    #[doc = " The date (and possibly time) when the family member history was recorded or last updated."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " Deceased flag or the actual or approximate age of the relative at the time of death for the "]
    #[doc = " family member history record."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "deceasedAge")]
    pub deceased_age: Option<Age>,
    #[doc = " Deceased flag or the actual or approximate age of the relative at the time of death for the "]
    #[doc = " family member history record."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "deceasedBoolean")]
    pub deceased_boolean: Option<bool>,
    #[doc = " Deceased flag or the actual or approximate age of the relative at the time of death for the "]
    #[doc = " family member history record."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "deceasedDate")]
    pub deceased_date: Option<String>,
    #[doc = " Deceased flag or the actual or approximate age of the relative at the time of death for the "]
    #[doc = " family member history record."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "deceasedRange")]
    pub deceased_range: Option<Range>,
    #[doc = " Deceased flag or the actual or approximate age of the relative at the time of death for the "]
    #[doc = " family member history record."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "deceasedString")]
    pub deceased_string: Option<String>,
    #[doc = " If true, indicates that the age value specified is an estimated value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "estimatedAge")]
    pub estimated_age: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Business identifiers assigned to this family member history by the performer or other "]
    #[doc = " systems which remain constant as the resource is updated and propagates from server to "]
    #[doc = " server."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that "]
    #[doc = " is adhered to in whole or in part by this FamilyMemberHistory."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesCanonical")]
    pub instantiates_canonical: Option<Vec<Canonical>>,
    #[doc = " The URL pointing to an externally maintained protocol, guideline, orderset or other "]
    #[doc = " definition that is adhered to in whole or in part by this FamilyMemberHistory."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesUri")]
    pub instantiates_uri: Option<Vec<Uri>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " This will either be a name or a description; e.g. \"Aunt Susan\", \"my cousin with the red "]
    #[doc = " hair\"."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " This property allows a non condition-specific note to the made about the related person. "]
    #[doc = " Ideally, the note would be in the condition property, but this is not always possible."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " The person who this history concerns."]
    pub patient: Reference,
    #[doc = " Describes why the family member history occurred in coded or textual form."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,
    #[doc = " Indicates a Condition, Observation, AllergyIntolerance, or QuestionnaireResponse that "]
    #[doc = " justifies this family member history event."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,
    #[doc = " The type of relationship this person has to the patient (father, mother, brother etc.)."]
    pub relationship: CodeableConcept,
    #[doc = " This is a FamilyMemberHistory resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The birth sex of the family member."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sex: Option<CodeableConcept>,
    #[doc = " A code specifying the status of the record of the family history of a specific family "]
    #[doc = " member."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " Significant health conditions for a person related to the patient relevant in the context of "]
#[doc = " care for the patient."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "FamilyMemberHistory_Condition")]
#[serde(deny_unknown_fields)]
pub struct FamilyMemberHistoryCondition {
    #[doc = " Extensions for contributedToDeath"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_contributedToDeath")]
    pub _contributed_to_death: Option<Element>,
    #[doc = " Extensions for onsetString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_onsetString")]
    pub _onset_string: Option<Element>,
    #[doc = " The actual condition specified. Could be a coded condition (like MI or Diabetes) or a less "]
    #[doc = " specific string like 'cancer' depending on how much is known about the condition and the "]
    #[doc = " capabilities of the creating system."]
    pub code: CodeableConcept,
    #[doc = " This condition contributed to the cause of death of the related person. If "]
    #[doc = " contributedToDeath is not populated, then it is unknown."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contributedToDeath")]
    pub contributed_to_death: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " An area where general notes can be placed about this specific condition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " Either the age of onset, range of approximate age or descriptive string can be recorded.  "]
    #[doc = " For conditions with multiple occurrences, this describes the first known occurrence."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onsetAge")]
    pub onset_age: Option<Age>,
    #[doc = " Either the age of onset, range of approximate age or descriptive string can be recorded.  "]
    #[doc = " For conditions with multiple occurrences, this describes the first known occurrence."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onsetPeriod")]
    pub onset_period: Option<Period>,
    #[doc = " Either the age of onset, range of approximate age or descriptive string can be recorded.  "]
    #[doc = " For conditions with multiple occurrences, this describes the first known occurrence."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onsetRange")]
    pub onset_range: Option<Range>,
    #[doc = " Either the age of onset, range of approximate age or descriptive string can be recorded.  "]
    #[doc = " For conditions with multiple occurrences, this describes the first known occurrence."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onsetString")]
    pub onset_string: Option<String>,
    #[doc = " Indicates what happened following the condition.  If the condition resulted in death, "]
    #[doc = " deceased date is captured on the relation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub outcome: Option<CodeableConcept>,
}
#[doc = " Prospective warnings of potential issues when providing care to the patient."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Flag {
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " The person, organization or device that created the flag."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Reference>,
    #[doc = " Allows a flag to be divided into different categories like clinical, administrative etc. "]
    #[doc = " Intended to be used as a means of filtering which flags are displayed to particular user or "]
    #[doc = " in a given context."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,
    #[doc = " The coded value or textual component of the flag to display to the user."]
    pub code: CodeableConcept,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " This alert is only relevant during the encounter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Business identifiers assigned to this flag by the performer or other systems which remain "]
    #[doc = " constant as the resource is updated and propagates from server to server."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The period of time from the activation of the flag to inactivation of the flag. If the flag "]
    #[doc = " is active, the end of the period should be unspecified."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
    #[doc = " This is a Flag resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " Supports basic workflow."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " The patient, location, group, organization, or practitioner etc. this is about record this "]
    #[doc = " flag is associated with."]
    pub subject: Reference,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " Describes the intended objective(s) for a patient, group or organization care, for example, "]
#[doc = " weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, "]
#[doc = " meeting a process improvement objective, etc."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Goal {
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for lifecycleStatus"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lifecycleStatus")]
    pub _lifecycle_status: Option<Element>,
    #[doc = " Extensions for startDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_startDate")]
    pub _start_date: Option<Element>,
    #[doc = " Extensions for statusDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_statusDate")]
    pub _status_date: Option<Element>,
    #[doc = " Extensions for statusReason"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_statusReason")]
    pub _status_reason: Option<Element>,
    #[doc = " Describes the progression, or lack thereof, towards the goal against the target."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "achievementStatus")]
    pub achievement_status: Option<CodeableConcept>,
    #[doc = " The identified conditions and other health record elements that are intended to be "]
    #[doc = " addressed by the goal."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub addresses: Option<Vec<Reference>>,
    #[doc = " Indicates a category the goal falls within."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " Human-readable and/or coded description of a specific desired objective of care, such as "]
    #[doc = " \"control blood pressure\" or \"negotiate an obstacle course\" or \"dance with child at "]
    #[doc = " wedding\"."]
    pub description: CodeableConcept,
    #[doc = " Indicates whose goal this is - patient goal, practitioner goal, etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "expressedBy")]
    pub expressed_by: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Business identifiers assigned to this goal by the performer or other systems which remain "]
    #[doc = " constant as the resource is updated and propagates from server to server."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The state of the goal throughout its lifecycle."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lifecycleStatus")]
    pub lifecycle_status: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Any comments related to the goal."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " Identifies the change (or lack of change) at the point when the status of the goal is "]
    #[doc = " assessed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "outcomeCode")]
    pub outcome_code: Option<Vec<CodeableConcept>>,
    #[doc = " Details of what's changed (or not changed)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "outcomeReference")]
    pub outcome_reference: Option<Vec<Reference>>,
    #[doc = " Identifies the mutually agreed level of importance associated with reaching/sustaining the "]
    #[doc = " goal."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub priority: Option<CodeableConcept>,
    #[doc = " This is a Goal resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The date or event after which the goal should begin being pursued."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "startCodeableConcept")]
    pub start_codeable_concept: Option<CodeableConcept>,
    #[doc = " The date or event after which the goal should begin being pursued."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "startDate")]
    pub start_date: Option<String>,
    #[doc = " Identifies when the current status.  I.e. When initially created, when achieved, when "]
    #[doc = " cancelled, etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusDate")]
    pub status_date: Option<Date>,
    #[doc = " Captures the reason for the current status."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusReason")]
    pub status_reason: Option<String>,
    #[doc = " Identifies the patient, group or organization for whom the goal is being established."]
    pub subject: Reference,
    #[doc = " Indicates what should be done by when."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub target: Option<Vec<GoalTarget>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " Describes the intended objective(s) for a patient, group or organization care, for example, "]
#[doc = " weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, "]
#[doc = " meeting a process improvement objective, etc."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Goal_Target")]
#[serde(deny_unknown_fields)]
pub struct GoalTarget {
    #[doc = " Extensions for detailBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_detailBoolean")]
    pub _detail_boolean: Option<Element>,
    #[doc = " Extensions for detailInteger"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_detailInteger")]
    pub _detail_integer: Option<Element>,
    #[doc = " Extensions for detailString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_detailString")]
    pub _detail_string: Option<Element>,
    #[doc = " Extensions for dueDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_dueDate")]
    pub _due_date: Option<Element>,
    #[doc = " The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. "]
    #[doc = " 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When "]
    #[doc = " a low value is missing, it indicates that the goal is achieved at any focus value at or "]
    #[doc = " below the high value. Similarly, if the high value is missing, it indicates that the goal "]
    #[doc = " is achieved at any focus value at or above the low value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "detailBoolean")]
    pub detail_boolean: Option<bool>,
    #[doc = " The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. "]
    #[doc = " 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When "]
    #[doc = " a low value is missing, it indicates that the goal is achieved at any focus value at or "]
    #[doc = " below the high value. Similarly, if the high value is missing, it indicates that the goal "]
    #[doc = " is achieved at any focus value at or above the low value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "detailCodeableConcept")]
    pub detail_codeable_concept: Option<CodeableConcept>,
    #[doc = " The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. "]
    #[doc = " 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When "]
    #[doc = " a low value is missing, it indicates that the goal is achieved at any focus value at or "]
    #[doc = " below the high value. Similarly, if the high value is missing, it indicates that the goal "]
    #[doc = " is achieved at any focus value at or above the low value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "detailInteger")]
    pub detail_integer: Option<f64>,
    #[doc = " The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. "]
    #[doc = " 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When "]
    #[doc = " a low value is missing, it indicates that the goal is achieved at any focus value at or "]
    #[doc = " below the high value. Similarly, if the high value is missing, it indicates that the goal "]
    #[doc = " is achieved at any focus value at or above the low value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "detailQuantity")]
    pub detail_quantity: Option<Quantity>,
    #[doc = " The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. "]
    #[doc = " 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When "]
    #[doc = " a low value is missing, it indicates that the goal is achieved at any focus value at or "]
    #[doc = " below the high value. Similarly, if the high value is missing, it indicates that the goal "]
    #[doc = " is achieved at any focus value at or above the low value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "detailRange")]
    pub detail_range: Option<Range>,
    #[doc = " The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. "]
    #[doc = " 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When "]
    #[doc = " a low value is missing, it indicates that the goal is achieved at any focus value at or "]
    #[doc = " below the high value. Similarly, if the high value is missing, it indicates that the goal "]
    #[doc = " is achieved at any focus value at or above the low value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "detailRatio")]
    pub detail_ratio: Option<Ratio>,
    #[doc = " The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. "]
    #[doc = " 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When "]
    #[doc = " a low value is missing, it indicates that the goal is achieved at any focus value at or "]
    #[doc = " below the high value. Similarly, if the high value is missing, it indicates that the goal "]
    #[doc = " is achieved at any focus value at or above the low value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "detailString")]
    pub detail_string: Option<String>,
    #[doc = " Indicates either the date or the duration after start by which the goal should be met."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dueDate")]
    pub due_date: Option<String>,
    #[doc = " Indicates either the date or the duration after start by which the goal should be met."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dueDuration")]
    pub due_duration: Option<Duration>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The parameter whose value is being tracked, e.g. body weight, blood pressure, or hemoglobin "]
    #[doc = " A1c level."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub measure: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " A formal computable definition of a graph of resources - that is, a coherent set of resources "]
#[doc = " that form a graph by following references. The Graph Definition resource defines a set and "]
#[doc = " makes rules about the set."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct GraphDefinition {
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for experimental"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _experimental: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for publisher"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _publisher: Option<Element>,
    #[doc = " Extensions for purpose"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _purpose: Option<Element>,
    #[doc = " Extensions for start"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _start: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " Contact details to assist a user in finding and communicating with the publisher."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The date  (and optionally time) when the graph definition was published. The date must "]
    #[doc = " change when the business version changes and it must change if the status code changes. In "]
    #[doc = " addition, it should change when the substantive content of the graph definition changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " A free text natural language description of the graph definition from a consumer's "]
    #[doc = " perspective."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " A Boolean value to indicate that this graph definition is authored for testing purposes (or "]
    #[doc = " education/evaluation/marketing) and is not intended to be used for genuine usage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " A legal or geographic region in which the graph definition is intended to be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " Links this graph makes rules about."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub link: Option<Vec<GraphDefinitionLink>>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A natural language name identifying the graph definition. This name should be usable as an "]
    #[doc = " identifier for the module by machine processing applications such as code generation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " The profile that describes the use of the base resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub profile: Option<Canonical>,
    #[doc = " The name of the organization or individual that published the graph definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
    #[doc = " Explanation of why this graph definition is needed and why it has been designed as it has."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,
    #[doc = " This is a GraphDefinition resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The type of FHIR resource at which instances of this graph start."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub start: Option<Code>,
    #[doc = " The status of this graph definition. Enables tracking the life-cycle of the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " An absolute URI that is used to identify this graph definition when it is referenced in a "]
    #[doc = " specification, model, design or an instance; also called its canonical identifier. This "]
    #[doc = " SHOULD be globally unique and SHOULD be a literal address at which at which an "]
    #[doc = " authoritative instance of this graph definition is (or will be) published. This URL can be "]
    #[doc = " the target of a canonical reference. It SHALL remain the same when the graph definition is "]
    #[doc = " stored on different servers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
    #[doc = " The content was developed with a focus and intent of supporting the contexts that are "]
    #[doc = " listed. These contexts may be general categories (gender, age, ...) or may be references to "]
    #[doc = " specific programs (insurance plans, studies, ...) and may be used to assist with indexing "]
    #[doc = " and searching for appropriate graph definition instances."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,
    #[doc = " The identifier that is used to identify this version of the graph definition when it is "]
    #[doc = " referenced in a specification, model, design or instance. This is an arbitrary value "]
    #[doc = " managed by the graph definition author and is not expected to be globally unique. For "]
    #[doc = " example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. "]
    #[doc = " There is also no expectation that versions can be placed in a lexicographical sequence."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[doc = " A formal computable definition of a graph of resources - that is, a coherent set of resources "]
#[doc = " that form a graph by following references. The Graph Definition resource defines a set and "]
#[doc = " makes rules about the set."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "GraphDefinition_Compartment")]
#[serde(deny_unknown_fields)]
pub struct GraphDefinitionCompartment {
    #[doc = " Extensions for code"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _code: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for expression"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _expression: Option<Element>,
    #[doc = " Extensions for rule"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _rule: Option<Element>,
    #[doc = " Extensions for use"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _use: Option<Element>,
    #[doc = " Identifies the compartment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,
    #[doc = " Documentation for FHIRPath expression."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " Custom rule, as a FHIRPath expression."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " identical | matching | different | no-rule | custom."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub rule: Option<Code>,
    #[doc = " Defines how the compartment rule is used - whether it it is used to test whether resources "]
    #[doc = " are subject to the rule, or whether it is a rule that must be followed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "use")]
    pub use_: Option<Code>,
}
#[doc = " A formal computable definition of a graph of resources - that is, a coherent set of resources "]
#[doc = " that form a graph by following references. The Graph Definition resource defines a set and "]
#[doc = " makes rules about the set."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "GraphDefinition_Link")]
#[serde(deny_unknown_fields)]
pub struct GraphDefinitionLink {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for max"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _max: Option<Element>,
    #[doc = " Extensions for min"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _min: Option<Element>,
    #[doc = " Extensions for path"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _path: Option<Element>,
    #[doc = " Extensions for sliceName"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sliceName")]
    pub _slice_name: Option<Element>,
    #[doc = " Information about why this link is of interest in this graph definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Maximum occurrences for this link."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub max: Option<String>,
    #[doc = " Minimum occurrences for this link."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub min: Option<Integer>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A FHIR expression that identifies one of FHIR References to other resources."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[doc = " Which slice (if profiled)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "sliceName")]
    pub slice_name: Option<String>,
    #[doc = " Potential target for the link."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub target: Option<Vec<GraphDefinitionTarget>>,
}
#[doc = " A formal computable definition of a graph of resources - that is, a coherent set of resources "]
#[doc = " that form a graph by following references. The Graph Definition resource defines a set and "]
#[doc = " makes rules about the set."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "GraphDefinition_Target")]
#[serde(deny_unknown_fields)]
pub struct GraphDefinitionTarget {
    #[doc = " Extensions for params"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _params: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " Compartment Consistency Rules."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub compartment: Option<Vec<GraphDefinitionCompartment>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Additional links from target resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub link: Option<Vec<GraphDefinitionLink>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A set of parameters to look up."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub params: Option<String>,
    #[doc = " Profile for the target resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub profile: Option<Canonical>,
    #[doc = " Type of resource this link refers to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}
#[doc = " Represents a defined collection of entities that may be discussed or acted upon collectively "]
#[doc = " but which are not expected to act collectively, and are not formally or legally recognized; "]
#[doc = " i.e. a collection of entities that isn't an Organization."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Group {
    #[doc = " Extensions for active"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _active: Option<Element>,
    #[doc = " Extensions for actual"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _actual: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for quantity"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _quantity: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " Indicates whether the record for the group is available for use or is merely being retained "]
    #[doc = " for historical purposes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub active: Option<Boolean>,
    #[doc = " If true, indicates that the resource refers to a specific group of real individuals.  If "]
    #[doc = " false, the group defines a set of intended individuals."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub actual: Option<Boolean>,
    #[doc = " Identifies traits whose presence r absence is shared by members of the group."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub characteristic: Option<Vec<GroupCharacteristic>>,
    #[doc = " Provides a specific type of resource the group includes; e.g. \"cow\", \"syringe\", etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A unique business identifier for this group."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " Entity responsible for defining and maintaining Group characteristics and/or registered "]
    #[doc = " members."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "managingEntity")]
    pub managing_entity: Option<Reference>,
    #[doc = " Identifies the resource instances that are members of the group."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub member: Option<Vec<GroupMember>>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A label assigned to the group for human identification and communication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " A count of the number of resource instances that are part of the group."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<UnsignedInt>,
    #[doc = " This is a Group resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " Identifies the broad classification of the kind of resources the group includes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}
#[doc = " Represents a defined collection of entities that may be discussed or acted upon collectively "]
#[doc = " but which are not expected to act collectively, and are not formally or legally recognized; "]
#[doc = " i.e. a collection of entities that isn't an Organization."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Group_Characteristic")]
#[serde(deny_unknown_fields)]
pub struct GroupCharacteristic {
    #[doc = " Extensions for exclude"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _exclude: Option<Element>,
    #[doc = " Extensions for valueBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub _value_boolean: Option<Element>,
    #[doc = " A code that identifies the kind of trait being asserted."]
    pub code: CodeableConcept,
    #[doc = " If true, indicates the characteristic is one that is NOT held by members of the group."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub exclude: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The period over which the characteristic is tested; e.g. the patient had an operation "]
    #[doc = " during the month of June."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
    #[doc = " The value of the trait that holds (or does not hold - see 'exclude') for members of the "]
    #[doc = " group."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,
    #[doc = " The value of the trait that holds (or does not hold - see 'exclude') for members of the "]
    #[doc = " group."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,
    #[doc = " The value of the trait that holds (or does not hold - see 'exclude') for members of the "]
    #[doc = " group."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,
    #[doc = " The value of the trait that holds (or does not hold - see 'exclude') for members of the "]
    #[doc = " group."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRange")]
    pub value_range: Option<Range>,
    #[doc = " The value of the trait that holds (or does not hold - see 'exclude') for members of the "]
    #[doc = " group."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueReference")]
    pub value_reference: Option<Reference>,
}
#[doc = " Represents a defined collection of entities that may be discussed or acted upon collectively "]
#[doc = " but which are not expected to act collectively, and are not formally or legally recognized; "]
#[doc = " i.e. a collection of entities that isn't an Organization."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Group_Member")]
#[serde(deny_unknown_fields)]
pub struct GroupMember {
    #[doc = " Extensions for inactive"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _inactive: Option<Element>,
    #[doc = " A reference to the entity that is a member of the group. Must be consistent with "]
    #[doc = " Group.type. If the entity is another group, then the type must be the same."]
    pub entity: Reference,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A flag to indicate that the member is no longer in the group, but previously may have been "]
    #[doc = " a member."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub inactive: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The period that the member was in the group, if known."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
}
#[doc = " A guidance response is the formal response to a guidance request, including any output "]
#[doc = " parameters returned by the evaluation, as well as the description of any proposed actions to be "]
#[doc = " taken."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct GuidanceResponse {
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for moduleCanonical"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_moduleCanonical")]
    pub _module_canonical: Option<Element>,
    #[doc = " Extensions for moduleUri"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_moduleUri")]
    pub _module_uri: Option<Element>,
    #[doc = " Extensions for occurrenceDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_occurrenceDateTime")]
    pub _occurrence_date_time: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " If the evaluation could not be completed due to lack of information, or additional "]
    #[doc = " information would potentially result in a more accurate response, this element will a "]
    #[doc = " description of the data required in order to proceed with the evaluation. A subsequent "]
    #[doc = " request to the service should include this data."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dataRequirement")]
    pub data_requirement: Option<Vec<DataRequirement>>,
    #[doc = " The encounter during which this response was created or to which the creation of this "]
    #[doc = " record is tightly associated."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,
    #[doc = " Messages resulting from the evaluation of the artifact or artifacts. As part of evaluating "]
    #[doc = " the request, the engine may produce informational or warning messages. These messages will "]
    #[doc = " be provided by this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "evaluationMessage")]
    pub evaluation_message: Option<Vec<Reference>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Allows a service to provide  unique, business identifiers for the response."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " An identifier, CodeableConcept or canonical reference to the guidance that was requested."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "moduleCanonical")]
    pub module_canonical: Option<String>,
    #[doc = " An identifier, CodeableConcept or canonical reference to the guidance that was requested."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "moduleCodeableConcept")]
    pub module_codeable_concept: Option<CodeableConcept>,
    #[doc = " An identifier, CodeableConcept or canonical reference to the guidance that was requested."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "moduleUri")]
    pub module_uri: Option<String>,
    #[doc = " Provides a mechanism to communicate additional information about the response."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " Indicates when the guidance response was processed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrenceDateTime")]
    pub occurrence_date_time: Option<DateTime>,
    #[doc = " The output parameters of the evaluation, if any. Many modules will result in the return of "]
    #[doc = " specific resources such as procedure or communication requests that are returned as part of "]
    #[doc = " the operation result. However, modules may define specific outputs that would be returned "]
    #[doc = " as the result of the evaluation, and these would be returned in this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "outputParameters")]
    pub output_parameters: Option<Reference>,
    #[doc = " Provides a reference to the device that performed the guidance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub performer: Option<Reference>,
    #[doc = " Describes the reason for the guidance response in coded or textual form."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,
    #[doc = " Indicates the reason the request was initiated. This is typically provided as a parameter "]
    #[doc = " to the evaluation and echoed by the service, although for some use cases, such as "]
    #[doc = " subscription- or event-based scenarios, it may provide an indication of the cause for the "]
    #[doc = " response."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,
    #[doc = " The identifier of the request associated with this response. If an identifier was given as "]
    #[doc = " part of the request, it will be reproduced here to enable the requester to more easily "]
    #[doc = " identify the response in a multi-request scenario."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "requestIdentifier")]
    pub request_identifier: Option<Identifier>,
    #[doc = " This is a GuidanceResponse resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The actions, if any, produced by the evaluation of the artifact."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub result: Option<Reference>,
    #[doc = " The status of the response. If the evaluation is completed successfully, the status will "]
    #[doc = " indicate success. However, in order to complete the evaluation, the engine may require more "]
    #[doc = " information. In this case, the status will be data-required, and the response will contain "]
    #[doc = " a description of the additional required information. If the evaluation completed "]
    #[doc = " successfully, but the engine determines that a potentially more accurate response could be "]
    #[doc = " provided if more data was available, the status will be data-requested, and the response "]
    #[doc = " will contain a description of the additional requested information."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " The patient for which the request was processed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Reference>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " The details of a healthcare service available at a location."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct HealthcareService {
    #[doc = " Extensions for active"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _active: Option<Element>,
    #[doc = " Extensions for appointmentRequired"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_appointmentRequired")]
    pub _appointment_required: Option<Element>,
    #[doc = " Extensions for availabilityExceptions"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_availabilityExceptions")]
    pub _availability_exceptions: Option<Element>,
    #[doc = " Extensions for comment"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _comment: Option<Element>,
    #[doc = " Extensions for extraDetails"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_extraDetails")]
    pub _extra_details: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " This flag is used to mark the record to not be used. This is not used when a center is "]
    #[doc = " closed for maintenance, or for holidays, the notAvailable period is to be used for this."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub active: Option<Boolean>,
    #[doc = " Indicates whether or not a prospective consumer will require an appointment for a "]
    #[doc = " particular service at a site to be provided by the Organization. Indicates if an "]
    #[doc = " appointment is required for access to this service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "appointmentRequired")]
    pub appointment_required: Option<Boolean>,
    #[doc = " A description of site availability exceptions, e.g. public holiday availability. Succinctly "]
    #[doc = " describing all possible exceptions to normal site availability as details in the available "]
    #[doc = " Times and not available Times."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "availabilityExceptions")]
    pub availability_exceptions: Option<String>,
    #[doc = " A collection of times that the Service Site is available."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "availableTime")]
    pub available_time: Option<Vec<HealthcareServiceAvailableTime>>,
    #[doc = " Identifies the broad category of service being performed or delivered."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,
    #[doc = " Collection of characteristics (attributes)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub characteristic: Option<Vec<CodeableConcept>>,
    #[doc = " Any additional description of the service and/or any specific issues not covered by the "]
    #[doc = " other attributes, which can be displayed as further detail under the serviceName."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[doc = " Some services are specifically made available in multiple languages, this property permits "]
    #[doc = " a directory to declare the languages this is offered in. Typically this is only provided "]
    #[doc = " where a service operates in communities with mixed languages used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub communication: Option<Vec<CodeableConcept>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The location(s) that this service is available to (not where the service is provided)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "coverageArea")]
    pub coverage_area: Option<Vec<Reference>>,
    #[doc = " Does this service have specific eligibility requirements that need to be met in order to "]
    #[doc = " use the service?"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub eligibility: Option<Vec<HealthcareServiceEligibility>>,
    #[doc = " Technical endpoints providing access to services operated for the specific healthcare "]
    #[doc = " services defined at this resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<Vec<Reference>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Extra details about the service that can't be placed in the other fields."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "extraDetails")]
    pub extra_details: Option<Markdown>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " External identifiers for this item."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The location(s) where this healthcare service may be provided."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<Vec<Reference>>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Further description of the service as it would be presented to a consumer while searching."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " The HealthcareService is not available during this period of time due to the provided "]
    #[doc = " reason."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "notAvailable")]
    pub not_available: Option<Vec<HealthcareServiceNotAvailable>>,
    #[doc = " If there is a photo/symbol associated with this HealthcareService, it may be included here "]
    #[doc = " to facilitate quick identification of the service in a list."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub photo: Option<Attachment>,
    #[doc = " Programs that this service is applicable to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub program: Option<Vec<CodeableConcept>>,
    #[doc = " The organization that provides this healthcare service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "providedBy")]
    pub provided_by: Option<Reference>,
    #[doc = " Ways that the service accepts referrals, if this is not provided then it is implied that no "]
    #[doc = " referral is required."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "referralMethod")]
    pub referral_method: Option<Vec<CodeableConcept>>,
    #[doc = " This is a HealthcareService resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The code(s) that detail the conditions under which the healthcare service is "]
    #[doc = " available/offered."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "serviceProvisionCode")]
    pub service_provision_code: Option<Vec<CodeableConcept>>,
    #[doc = " Collection of specialties handled by the service site. This is more of a medical term."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub specialty: Option<Vec<CodeableConcept>>,
    #[doc = " List of contacts related to this specific healthcare service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub telecom: Option<Vec<ContactPoint>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " The specific type of service that may be delivered or performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Vec<CodeableConcept>>,
}
#[doc = " The details of a healthcare service available at a location."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "HealthcareService_AvailableTime")]
#[serde(deny_unknown_fields)]
pub struct HealthcareServiceAvailableTime {
    #[doc = " Extensions for allDay"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_allDay")]
    pub _all_day: Option<Element>,
    #[doc = " Extensions for availableEndTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_availableEndTime")]
    pub _available_end_time: Option<Element>,
    #[doc = " Extensions for availableStartTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_availableStartTime")]
    pub _available_start_time: Option<Element>,
    #[doc = " Extensions for daysOfWeek"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_daysOfWeek")]
    pub _days_of_week: Option<Vec<Element>>,
    #[doc = " Is this always available? (hence times are irrelevant) e.g. 24 hour service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "allDay")]
    pub all_day: Option<Boolean>,
    #[doc = " The closing time of day. Note: If the AllDay flag is set, then this time is ignored."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "availableEndTime")]
    pub available_end_time: Option<Time>,
    #[doc = " The opening time of day. Note: If the AllDay flag is set, then this time is ignored."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "availableStartTime")]
    pub available_start_time: Option<Time>,
    #[doc = " Indicates which days of the week are available between the start and end Times."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "daysOfWeek")]
    pub days_of_week: Option<Vec<Code>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " The details of a healthcare service available at a location."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "HealthcareService_Eligibility")]
#[serde(deny_unknown_fields)]
pub struct HealthcareServiceEligibility {
    #[doc = " Extensions for comment"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _comment: Option<Element>,
    #[doc = " Coded value for the eligibility."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,
    #[doc = " Describes the eligibility conditions for the service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<Markdown>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " The details of a healthcare service available at a location."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "HealthcareService_NotAvailable")]
#[serde(deny_unknown_fields)]
pub struct HealthcareServiceNotAvailable {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " The reason that can be presented to the user as to why this time is not available."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " Service is not available (seasonally or for a public holiday) from this date."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub during: Option<Period>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " A human's name with the ability to identify parts and usage."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct HumanName {
    #[doc = " Extensions for family"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _family: Option<Element>,
    #[doc = " Extensions for given"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _given: Option<Vec<Element>>,
    #[doc = " Extensions for prefix"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _prefix: Option<Vec<Element>>,
    #[doc = " Extensions for suffix"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _suffix: Option<Vec<Element>>,
    #[doc = " Extensions for text"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _text: Option<Element>,
    #[doc = " Extensions for use"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _use: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The part of a name that links to the genealogy. In some cultures (e.g. Eritrea) the family "]
    #[doc = " name of a son is the first name of his father."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub family: Option<String>,
    #[doc = " Given name."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub given: Option<Vec<String>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Indicates the period of time when this name was valid for the named person."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
    #[doc = " Part of the name that is acquired as a title due to academic, legal, employment or nobility "]
    #[doc = " status, etc. and that appears at the start of the name."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub prefix: Option<Vec<String>>,
    #[doc = " Part of the name that is acquired as a title due to academic, legal, employment or nobility "]
    #[doc = " status, etc. and that appears at the end of the name."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub suffix: Option<Vec<String>>,
    #[doc = " Specifies the entire name as it should be displayed e.g. on an application UI. This may be "]
    #[doc = " provided instead of or as well as the specific parts."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    #[doc = " Identifies the purpose for this name."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "use")]
    pub use_: Option<serde_json::Value>,
}
#[doc = " An identifier - identifies some entity uniquely and unambiguously. Typically this is used for "]
#[doc = " business identifiers."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Identifier {
    #[doc = " Extensions for system"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _system: Option<Element>,
    #[doc = " Extensions for use"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _use: Option<Element>,
    #[doc = " Extensions for value"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _value: Option<Element>,
    #[doc = " Organization that issued/manages the identifier."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub assigner: Option<Box<Reference>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Time period during which identifier is/was valid for use."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
    #[doc = " Establishes the namespace for the value - that is, a URL that describes a set values that "]
    #[doc = " are unique."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub system: Option<Uri>,
    #[doc = " A coded type for the identifier that can be used to determine which identifier to use for a "]
    #[doc = " specific purpose."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
    #[doc = " The purpose of this identifier."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "use")]
    pub use_: Option<serde_json::Value>,
    #[doc = " The portion of the identifier typically relevant to the user and which is unique within the "]
    #[doc = " context of the system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[doc = " Representation of the content produced in a DICOM imaging study. A study comprises a set of "]
#[doc = " series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images "]
#[doc = " or other data) acquired or produced in a common context.  A series is of only one modality "]
#[doc = " (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ImagingStudy {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for numberOfInstances"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_numberOfInstances")]
    pub _number_of_instances: Option<Element>,
    #[doc = " Extensions for numberOfSeries"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_numberOfSeries")]
    pub _number_of_series: Option<Element>,
    #[doc = " Extensions for started"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _started: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " A list of the diagnostic requests that resulted in this imaging study being performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Vec<Reference>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The Imaging Manager description of the study. Institution-generated description or "]
    #[doc = " classification of the Study (component) performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " The healthcare event (e.g. a patient and healthcare provider interaction) during which this "]
    #[doc = " ImagingStudy is made."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,
    #[doc = " The network service providing access (e.g., query, view, or retrieval) for the study. See "]
    #[doc = " implementation notes for information about using DICOM endpoints. A study-level endpoint "]
    #[doc = " applies to each series in the study, unless overridden by a series-level endpoint with the "]
    #[doc = " same Endpoint.connectionType."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<Vec<Reference>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Identifiers for the ImagingStudy such as DICOM Study Instance UID, and Accession Number."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " Who read the study and interpreted the images or other content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub interpreter: Option<Vec<Reference>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The principal physical location where the ImagingStudy was performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<Reference>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " A list of all the series.modality values that are actual acquisition modalities, i.e. those "]
    #[doc = " in the DICOM Context Group 29 (value set OID 1.2.840.10008.6.1.19)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub modality: Option<Vec<Coding>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Per the recommended DICOM mapping, this element is derived from the Study Description "]
    #[doc = " attribute (0008,1030). Observations or findings about the imaging study should be recorded "]
    #[doc = " in another resource, e.g. Observation, and not in this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " Number of SOP Instances in Study. This value given may be larger than the number of "]
    #[doc = " instance elements this resource contains due to resource availability, security, or other "]
    #[doc = " factors. This element should be present if any instance elements are present."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "numberOfInstances")]
    pub number_of_instances: Option<UnsignedInt>,
    #[doc = " Number of Series in the Study. This value given may be larger than the number of series "]
    #[doc = " elements this Resource contains due to resource availability, security, or other factors. "]
    #[doc = " This element should be present if any series elements are present."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "numberOfSeries")]
    pub number_of_series: Option<UnsignedInt>,
    #[doc = " The code for the performed procedure type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "procedureCode")]
    pub procedure_code: Option<Vec<CodeableConcept>>,
    #[doc = " The procedure which this ImagingStudy was part of."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "procedureReference")]
    pub procedure_reference: Option<Reference>,
    #[doc = " Description of clinical condition indicating why the ImagingStudy was requested."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,
    #[doc = " Indicates another resource whose existence justifies this Study."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,
    #[doc = " The requesting/referring physician."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub referrer: Option<Reference>,
    #[doc = " This is a ImagingStudy resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " Each study has one or more series of images or other content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub series: Option<Vec<ImagingStudySeries>>,
    #[doc = " Date and time the study started."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub started: Option<DateTime>,
    #[doc = " The current state of the ImagingStudy."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " The subject, typically a patient, of the imaging study."]
    pub subject: Reference,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " Representation of the content produced in a DICOM imaging study. A study comprises a set of "]
#[doc = " series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images "]
#[doc = " or other data) acquired or produced in a common context.  A series is of only one modality "]
#[doc = " (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ImagingStudy_Instance")]
#[serde(deny_unknown_fields)]
pub struct ImagingStudyInstance {
    #[doc = " Extensions for number"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _number: Option<Element>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " Extensions for uid"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _uid: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The number of instance in the series."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub number: Option<UnsignedInt>,
    #[doc = " DICOM instance  type."]
    #[serde(rename = "sopClass")]
    pub sop_class: Coding,
    #[doc = " The description of the instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[doc = " The DICOM SOP Instance UID for this image or other DICOM content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub uid: Option<Id>,
}
#[doc = " Representation of the content produced in a DICOM imaging study. A study comprises a set of "]
#[doc = " series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images "]
#[doc = " or other data) acquired or produced in a common context.  A series is of only one modality "]
#[doc = " (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ImagingStudy_Performer")]
#[serde(deny_unknown_fields)]
pub struct ImagingStudyPerformer {
    #[doc = " Indicates who or what performed the series."]
    pub actor: Reference,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Distinguishes the type of involvement of the performer in the series."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub function: Option<CodeableConcept>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " Representation of the content produced in a DICOM imaging study. A study comprises a set of "]
#[doc = " series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images "]
#[doc = " or other data) acquired or produced in a common context.  A series is of only one modality "]
#[doc = " (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ImagingStudy_Series")]
#[serde(deny_unknown_fields)]
pub struct ImagingStudySeries {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for number"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _number: Option<Element>,
    #[doc = " Extensions for numberOfInstances"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_numberOfInstances")]
    pub _number_of_instances: Option<Element>,
    #[doc = " Extensions for started"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _started: Option<Element>,
    #[doc = " Extensions for uid"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _uid: Option<Element>,
    #[doc = " The anatomic structures examined. See DICOM Part 16 Annex L "]
    #[doc = " (http://dicom.nema.org/medical/dicom/current/output/chtml/part16/chapter_L.html) for DICOM "]
    #[doc = " to SNOMED-CT mappings. The bodySite may indicate the laterality of body part imaged; if so, "]
    #[doc = " it shall be consistent with any content of ImagingStudy.series.laterality."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "bodySite")]
    pub body_site: Option<Coding>,
    #[doc = " A description of the series."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " The network service providing access (e.g., query, view, or retrieval) for this series. See "]
    #[doc = " implementation notes for information about using DICOM endpoints. A series-level endpoint, "]
    #[doc = " if present, has precedence over a study-level endpoint with the same "]
    #[doc = " Endpoint.connectionType."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<Vec<Reference>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A single SOP instance within the series, e.g. an image, or presentation state."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub instance: Option<Vec<ImagingStudyInstance>>,
    #[doc = " The laterality of the (possibly paired) anatomic structures examined. E.g., the left knee, "]
    #[doc = " both lungs, or unpaired abdomen. If present, shall be consistent with any laterality "]
    #[doc = " information indicated in ImagingStudy.series.bodySite."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub laterality: Option<Coding>,
    #[doc = " The modality of this series sequence."]
    pub modality: Coding,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The numeric identifier of this series in the study."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub number: Option<UnsignedInt>,
    #[doc = " Number of SOP Instances in the Study. The value given may be larger than the number of "]
    #[doc = " instance elements this resource contains due to resource availability, security, or other "]
    #[doc = " factors. This element should be present if any instance elements are present."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "numberOfInstances")]
    pub number_of_instances: Option<UnsignedInt>,
    #[doc = " Indicates who or what performed the series and how they were involved."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub performer: Option<Vec<ImagingStudyPerformer>>,
    #[doc = " The specimen imaged, e.g., for whole slide imaging of a biopsy."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub specimen: Option<Vec<Reference>>,
    #[doc = " The date and time the series was started."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub started: Option<DateTime>,
    #[doc = " The DICOM Series Instance UID for the series."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub uid: Option<Id>,
}
#[doc = " Describes the event of a patient being administered a vaccine or a record of an immunization as "]
#[doc = " reported by a patient, a clinician or another party."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Immunization {
    #[doc = " Extensions for expirationDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_expirationDate")]
    pub _expiration_date: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for isSubpotent"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_isSubpotent")]
    pub _is_subpotent: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for lotNumber"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lotNumber")]
    pub _lot_number: Option<Element>,
    #[doc = " Extensions for occurrenceDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_occurrenceDateTime")]
    pub _occurrence_date_time: Option<Element>,
    #[doc = " Extensions for occurrenceString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_occurrenceString")]
    pub _occurrence_string: Option<Element>,
    #[doc = " Extensions for primarySource"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_primarySource")]
    pub _primary_source: Option<Element>,
    #[doc = " Extensions for recorded"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _recorded: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The quantity of vaccine product that was administered."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "doseQuantity")]
    pub dose_quantity: Option<Quantity>,
    #[doc = " Educational material presented to the patient (or guardian) at the time of vaccine "]
    #[doc = " administration."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub education: Option<Vec<ImmunizationEducation>>,
    #[doc = " The visit or admission or other contact between patient and health care provider the "]
    #[doc = " immunization was performed as part of."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,
    #[doc = " Date vaccine batch expires."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "expirationDate")]
    pub expiration_date: Option<Date>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Indicates the source of the vaccine actually administered. This may be different than the "]
    #[doc = " patient eligibility (e.g. the patient may be eligible for a publically purchased vaccine "]
    #[doc = " but due to inventory issues, vaccine purchased with private funds was actually "]
    #[doc = " administered)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fundingSource")]
    pub funding_source: Option<CodeableConcept>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A unique identifier assigned to this immunization record."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " Indication if a dose is considered to be subpotent. By default, a dose should be considered "]
    #[doc = " to be potent."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "isSubpotent")]
    pub is_subpotent: Option<Boolean>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The service delivery location where the vaccine administration occurred."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<Reference>,
    #[doc = " Lot number of the  vaccine product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lotNumber")]
    pub lot_number: Option<String>,
    #[doc = " Name of vaccine manufacturer."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub manufacturer: Option<Reference>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Extra information about the immunization that is not conveyed by the other attributes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " Date vaccine administered or was to be administered."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrenceDateTime")]
    pub occurrence_date_time: Option<String>,
    #[doc = " Date vaccine administered or was to be administered."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrenceString")]
    pub occurrence_string: Option<String>,
    #[doc = " The patient who either received or did not receive the immunization."]
    pub patient: Reference,
    #[doc = " Indicates who performed the immunization event."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub performer: Option<Vec<ImmunizationPerformer>>,
    #[doc = " An indication that the content of the record is based on information from the person who "]
    #[doc = " administered the vaccine. This reflects the context under which the data was originally "]
    #[doc = " recorded."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "primarySource")]
    pub primary_source: Option<Boolean>,
    #[doc = " Indicates a patient's eligibility for a funding program."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "programEligibility")]
    pub program_eligibility: Option<Vec<CodeableConcept>>,
    #[doc = " The protocol (set of recommendations) being followed by the provider who administered the "]
    #[doc = " dose."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "protocolApplied")]
    pub protocol_applied: Option<Vec<ImmunizationProtocolApplied>>,
    #[doc = " Categorical data indicating that an adverse event is associated in time to an immunization."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reaction: Option<Vec<ImmunizationReaction>>,
    #[doc = " Reasons why the vaccine was administered."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,
    #[doc = " Condition, Observation or DiagnosticReport that supports why the immunization was "]
    #[doc = " administered."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,
    #[doc = " The date the occurrence of the immunization was first captured in the record - potentially "]
    #[doc = " significantly after the occurrence of the event."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub recorded: Option<DateTime>,
    #[doc = " The source of the data when the report of the immunization event is not based on "]
    #[doc = " information from the person who administered the vaccine."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reportOrigin")]
    pub report_origin: Option<CodeableConcept>,
    #[doc = " This is a Immunization resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The path by which the vaccine product is taken into the body."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub route: Option<CodeableConcept>,
    #[doc = " Body site where vaccine was administered."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub site: Option<CodeableConcept>,
    #[doc = " Indicates the current status of the immunization event."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " Indicates the reason the immunization event was not performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusReason")]
    pub status_reason: Option<CodeableConcept>,
    #[doc = " Reason why a dose is considered to be subpotent."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subpotentReason")]
    pub subpotent_reason: Option<Vec<CodeableConcept>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " Vaccine that was administered or was to be administered."]
    #[serde(rename = "vaccineCode")]
    pub vaccine_code: CodeableConcept,
}
#[doc = " Describes a comparison of an immunization event against published recommendations to determine "]
#[doc = " if the administration is \"valid\" in relation to those  recommendations."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ImmunizationEvaluation {
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for doseNumberPositiveInt"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_doseNumberPositiveInt")]
    pub _dose_number_positive_int: Option<Element>,
    #[doc = " Extensions for doseNumberString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_doseNumberString")]
    pub _dose_number_string: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for series"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _series: Option<Element>,
    #[doc = " Extensions for seriesDosesPositiveInt"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_seriesDosesPositiveInt")]
    pub _series_doses_positive_int: Option<Element>,
    #[doc = " Extensions for seriesDosesString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_seriesDosesString")]
    pub _series_doses_string: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Indicates the authority who published the protocol (e.g. ACIP)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub authority: Option<Reference>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The date the evaluation of the vaccine administration event was performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " Additional information about the evaluation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " Nominal position in a series."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "doseNumberPositiveInt")]
    pub dose_number_positive_int: Option<f64>,
    #[doc = " Nominal position in a series."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "doseNumberString")]
    pub dose_number_string: Option<String>,
    #[doc = " Indicates if the dose is valid or not valid with respect to the published recommendations."]
    #[serde(rename = "doseStatus")]
    pub dose_status: CodeableConcept,
    #[doc = " Provides an explanation as to why the vaccine administration event is valid or not relative "]
    #[doc = " to the published recommendations."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "doseStatusReason")]
    pub dose_status_reason: Option<Vec<CodeableConcept>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A unique identifier assigned to this immunization evaluation record."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " The vaccine administration event being evaluated."]
    #[serde(rename = "immunizationEvent")]
    pub immunization_event: Reference,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The individual for whom the evaluation is being done."]
    pub patient: Reference,
    #[doc = " This is a ImmunizationEvaluation resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " One possible path to achieve presumed immunity against a disease - within the context of an "]
    #[doc = " authority."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub series: Option<String>,
    #[doc = " The recommended number of doses to achieve immunity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "seriesDosesPositiveInt")]
    pub series_doses_positive_int: Option<f64>,
    #[doc = " The recommended number of doses to achieve immunity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "seriesDosesString")]
    pub series_doses_string: Option<String>,
    #[doc = " Indicates the current status of the evaluation of the vaccination administration event."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " The vaccine preventable disease the dose is being evaluated against."]
    #[serde(rename = "targetDisease")]
    pub target_disease: CodeableConcept,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " A patient's point-in-time set of recommendations (i.e. forecasting) according to a published "]
#[doc = " schedule with optional supporting justification."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ImmunizationRecommendation {
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Indicates the authority who published the protocol (e.g. ACIP)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub authority: Option<Reference>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The date the immunization recommendation(s) were created."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A unique identifier assigned to this particular recommendation record."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The patient the recommendation(s) are for."]
    pub patient: Reference,
    #[doc = " Vaccine administration recommendations."]
    pub recommendation: Vec<ImmunizationRecommendationRecommendation>,
    #[doc = " This is a ImmunizationRecommendation resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " A patient's point-in-time set of recommendations (i.e. forecasting) according to a published "]
#[doc = " schedule with optional supporting justification."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ImmunizationRecommendation_DateCriterion")]
#[serde(deny_unknown_fields)]
pub struct ImmunizationRecommendationDateCriterion {
    #[doc = " Extensions for value"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _value: Option<Element>,
    #[doc = " Date classification of recommendation.  For example, earliest date to give, latest date to "]
    #[doc = " give, etc."]
    pub code: CodeableConcept,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The date whose meaning is specified by dateCriterion.code."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<DateTime>,
}
#[doc = " A patient's point-in-time set of recommendations (i.e. forecasting) according to a published "]
#[doc = " schedule with optional supporting justification."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ImmunizationRecommendation_Recommendation")]
#[serde(deny_unknown_fields)]
pub struct ImmunizationRecommendationRecommendation {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for doseNumberPositiveInt"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_doseNumberPositiveInt")]
    pub _dose_number_positive_int: Option<Element>,
    #[doc = " Extensions for doseNumberString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_doseNumberString")]
    pub _dose_number_string: Option<Element>,
    #[doc = " Extensions for series"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _series: Option<Element>,
    #[doc = " Extensions for seriesDosesPositiveInt"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_seriesDosesPositiveInt")]
    pub _series_doses_positive_int: Option<Element>,
    #[doc = " Extensions for seriesDosesString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_seriesDosesString")]
    pub _series_doses_string: Option<Element>,
    #[doc = " Vaccine(s) which should not be used to fulfill the recommendation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contraindicatedVaccineCode")]
    pub contraindicated_vaccine_code: Option<Vec<CodeableConcept>>,
    #[doc = " Vaccine date recommendations.  For example, earliest date to administer, latest date to "]
    #[doc = " administer, etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dateCriterion")]
    pub date_criterion: Option<Vec<ImmunizationRecommendationDateCriterion>>,
    #[doc = " Contains the description about the protocol under which the vaccine was administered."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " Nominal position of the recommended dose in a series (e.g. dose 2 is the next recommended "]
    #[doc = " dose)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "doseNumberPositiveInt")]
    pub dose_number_positive_int: Option<f64>,
    #[doc = " Nominal position of the recommended dose in a series (e.g. dose 2 is the next recommended "]
    #[doc = " dose)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "doseNumberString")]
    pub dose_number_string: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The reason for the assigned forecast status."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "forecastReason")]
    pub forecast_reason: Option<Vec<CodeableConcept>>,
    #[doc = " Indicates the patient status with respect to the path to immunity for the target disease."]
    #[serde(rename = "forecastStatus")]
    pub forecast_status: CodeableConcept,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " One possible path to achieve presumed immunity against a disease - within the context of an "]
    #[doc = " authority."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub series: Option<String>,
    #[doc = " The recommended number of doses to achieve immunity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "seriesDosesPositiveInt")]
    pub series_doses_positive_int: Option<f64>,
    #[doc = " The recommended number of doses to achieve immunity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "seriesDosesString")]
    pub series_doses_string: Option<String>,
    #[doc = " Immunization event history and/or evaluation that supports the status and recommendation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportingImmunization")]
    pub supporting_immunization: Option<Vec<Reference>>,
    #[doc = " Patient Information that supports the status and recommendation.  This includes patient "]
    #[doc = " observations, adverse reactions and allergy/intolerance information."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportingPatientInformation")]
    pub supporting_patient_information: Option<Vec<Reference>>,
    #[doc = " The targeted disease for the recommendation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetDisease")]
    pub target_disease: Option<CodeableConcept>,
    #[doc = " Vaccine(s) or vaccine group that pertain to the recommendation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "vaccineCode")]
    pub vaccine_code: Option<Vec<CodeableConcept>>,
}
#[doc = " Describes the event of a patient being administered a vaccine or a record of an immunization as "]
#[doc = " reported by a patient, a clinician or another party."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Immunization_Education")]
#[serde(deny_unknown_fields)]
pub struct ImmunizationEducation {
    #[doc = " Extensions for documentType"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_documentType")]
    pub _document_type: Option<Element>,
    #[doc = " Extensions for presentationDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_presentationDate")]
    pub _presentation_date: Option<Element>,
    #[doc = " Extensions for publicationDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_publicationDate")]
    pub _publication_date: Option<Element>,
    #[doc = " Extensions for reference"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _reference: Option<Element>,
    #[doc = " Identifier of the material presented to the patient."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "documentType")]
    pub document_type: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Date the educational material was given to the patient."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "presentationDate")]
    pub presentation_date: Option<DateTime>,
    #[doc = " Date the educational material was published."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "publicationDate")]
    pub publication_date: Option<DateTime>,
    #[doc = " Reference pointer to the educational material given to the patient if the information was "]
    #[doc = " on line."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reference: Option<Uri>,
}
#[doc = " Describes the event of a patient being administered a vaccine or a record of an immunization as "]
#[doc = " reported by a patient, a clinician or another party."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Immunization_Performer")]
#[serde(deny_unknown_fields)]
pub struct ImmunizationPerformer {
    #[doc = " The practitioner or organization who performed the action."]
    pub actor: Reference,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Describes the type of performance (e.g. ordering provider, administering provider, etc.)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub function: Option<CodeableConcept>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " Describes the event of a patient being administered a vaccine or a record of an immunization as "]
#[doc = " reported by a patient, a clinician or another party."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Immunization_ProtocolApplied")]
#[serde(deny_unknown_fields)]
pub struct ImmunizationProtocolApplied {
    #[doc = " Extensions for doseNumberPositiveInt"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_doseNumberPositiveInt")]
    pub _dose_number_positive_int: Option<Element>,
    #[doc = " Extensions for doseNumberString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_doseNumberString")]
    pub _dose_number_string: Option<Element>,
    #[doc = " Extensions for series"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _series: Option<Element>,
    #[doc = " Extensions for seriesDosesPositiveInt"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_seriesDosesPositiveInt")]
    pub _series_doses_positive_int: Option<Element>,
    #[doc = " Extensions for seriesDosesString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_seriesDosesString")]
    pub _series_doses_string: Option<Element>,
    #[doc = " Indicates the authority who published the protocol (e.g. ACIP) that is being followed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub authority: Option<Reference>,
    #[doc = " Nominal position in a series."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "doseNumberPositiveInt")]
    pub dose_number_positive_int: Option<f64>,
    #[doc = " Nominal position in a series."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "doseNumberString")]
    pub dose_number_string: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " One possible path to achieve presumed immunity against a disease - within the context of an "]
    #[doc = " authority."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub series: Option<String>,
    #[doc = " The recommended number of doses to achieve immunity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "seriesDosesPositiveInt")]
    pub series_doses_positive_int: Option<f64>,
    #[doc = " The recommended number of doses to achieve immunity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "seriesDosesString")]
    pub series_doses_string: Option<String>,
    #[doc = " The vaccine preventable disease the dose is being administered against."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetDisease")]
    pub target_disease: Option<Vec<CodeableConcept>>,
}
#[doc = " Describes the event of a patient being administered a vaccine or a record of an immunization as "]
#[doc = " reported by a patient, a clinician or another party."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Immunization_Reaction")]
#[serde(deny_unknown_fields)]
pub struct ImmunizationReaction {
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for reported"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _reported: Option<Element>,
    #[doc = " Date of reaction to the immunization."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " Details of the reaction."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub detail: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Self-reported indicator."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reported: Option<Boolean>,
}
#[doc = " A set of rules of how a particular interoperability or standards problem is solved - typically "]
#[doc = " through the use of FHIR resources. This resource is used to gather all the parts of an "]
#[doc = " implementation guide into a logical whole and to publish a computable definition of all the "]
#[doc = " parts."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ImplementationGuide {
    #[doc = " Extensions for copyright"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _copyright: Option<Element>,
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for experimental"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _experimental: Option<Element>,
    #[doc = " Extensions for fhirVersion"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fhirVersion")]
    pub _fhir_version: Option<Vec<Element>>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for license"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _license: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for packageId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_packageId")]
    pub _package_id: Option<Element>,
    #[doc = " Extensions for publisher"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _publisher: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " Contact details to assist a user in finding and communicating with the publisher."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " A copyright statement relating to the implementation guide and/or its contents. Copyright "]
    #[doc = " statements are generally legal restrictions on the use and publishing of the implementation "]
    #[doc = " guide."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,
    #[doc = " The date  (and optionally time) when the implementation guide was published. The date must "]
    #[doc = " change when the business version changes and it must change if the status code changes. In "]
    #[doc = " addition, it should change when the substantive content of the implementation guide "]
    #[doc = " changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " The information needed by an IG publisher tool to publish the whole implementation guide."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub definition: Option<ImplementationGuideDefinition>,
    #[doc = " Another implementation guide that this implementation depends on. Typically, an "]
    #[doc = " implementation guide uses value sets, profiles etc.defined in other implementation guides."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dependsOn")]
    pub depends_on: Option<Vec<ImplementationGuideDependsOn>>,
    #[doc = " A free text natural language description of the implementation guide from a consumer's "]
    #[doc = " perspective."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " A Boolean value to indicate that this implementation guide is authored for testing purposes "]
    #[doc = " (or education/evaluation/marketing) and is not intended to be used for genuine usage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The version(s) of the FHIR specification that this ImplementationGuide targets - e.g. "]
    #[doc = " describes how to use. The value of this element is the formal version of the specification, "]
    #[doc = " without the revision number, e.g. [publication].[major].[minor], which is 4.3.0-cibuild. "]
    #[doc = " for this version."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fhirVersion")]
    pub fhir_version: Option<Vec<Code>>,
    #[doc = " A set of profiles that all resources covered by this implementation guide must conform to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub global: Option<Vec<ImplementationGuideGlobal>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " A legal or geographic region in which the implementation guide is intended to be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The license that applies to this Implementation Guide, using an SPDX license code, or "]
    #[doc = " 'not-open-source'."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub license: Option<Code>,
    #[doc = " Information about an assembled implementation guide, created by the publication tooling."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub manifest: Option<ImplementationGuideManifest>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A natural language name identifying the implementation guide. This name should be usable as "]
    #[doc = " an identifier for the module by machine processing applications such as code generation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " The NPM package name for this Implementation Guide, used in the NPM package distribution, "]
    #[doc = " which is the primary mechanism by which FHIR based tooling manages IG dependencies. This "]
    #[doc = " value must be globally unique, and should be assigned with care."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "packageId")]
    pub package_id: Option<Id>,
    #[doc = " The name of the organization or individual that published the implementation guide."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
    #[doc = " This is a ImplementationGuide resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The status of this implementation guide. Enables tracking the life-cycle of the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " A short, descriptive, user-friendly title for the implementation guide."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[doc = " An absolute URI that is used to identify this implementation guide when it is referenced in "]
    #[doc = " a specification, model, design or an instance; also called its canonical identifier. This "]
    #[doc = " SHOULD be globally unique and SHOULD be a literal address at which at which an "]
    #[doc = " authoritative instance of this implementation guide is (or will be) published. This URL can "]
    #[doc = " be the target of a canonical reference. It SHALL remain the same when the implementation "]
    #[doc = " guide is stored on different servers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
    #[doc = " The content was developed with a focus and intent of supporting the contexts that are "]
    #[doc = " listed. These contexts may be general categories (gender, age, ...) or may be references to "]
    #[doc = " specific programs (insurance plans, studies, ...) and may be used to assist with indexing "]
    #[doc = " and searching for appropriate implementation guide instances."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,
    #[doc = " The identifier that is used to identify this version of the implementation guide when it is "]
    #[doc = " referenced in a specification, model, design or instance. This is an arbitrary value "]
    #[doc = " managed by the implementation guide author and is not expected to be globally unique. For "]
    #[doc = " example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. "]
    #[doc = " There is also no expectation that versions can be placed in a lexicographical sequence."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[doc = " A set of rules of how a particular interoperability or standards problem is solved - typically "]
#[doc = " through the use of FHIR resources. This resource is used to gather all the parts of an "]
#[doc = " implementation guide into a logical whole and to publish a computable definition of all the "]
#[doc = " parts."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ImplementationGuide_Definition")]
#[serde(deny_unknown_fields)]
pub struct ImplementationGuideDefinition {
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " A logical group of resources. Logical groups can be used when building pages."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub grouping: Option<Vec<ImplementationGuideGrouping>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A page / section in the implementation guide. The root page is the implementation guide "]
    #[doc = " home page."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub page: Option<ImplementationGuidePage>,
    #[doc = " Defines how IG is built by tools."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub parameter: Option<Vec<ImplementationGuideParameter>>,
    #[doc = " A resource that is part of the implementation guide. Conformance resources (value set, "]
    #[doc = " structure definition, capability statements etc.) are obvious candidates for inclusion, but "]
    #[doc = " any kind of resource can be included as an example resource."]
    pub resource: Vec<ImplementationGuideResource>,
    #[doc = " A template for building resources."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub template: Option<Vec<ImplementationGuideTemplate>>,
}
#[doc = " A set of rules of how a particular interoperability or standards problem is solved - typically "]
#[doc = " through the use of FHIR resources. This resource is used to gather all the parts of an "]
#[doc = " implementation guide into a logical whole and to publish a computable definition of all the "]
#[doc = " parts."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ImplementationGuide_DependsOn")]
#[serde(deny_unknown_fields)]
pub struct ImplementationGuideDependsOn {
    #[doc = " Extensions for packageId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_packageId")]
    pub _package_id: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The NPM package name for the Implementation Guide that this IG depends on."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "packageId")]
    pub package_id: Option<Id>,
    #[doc = " A canonical reference to the Implementation guide for the dependency."]
    pub uri: Canonical,
    #[doc = " The version of the IG that is depended on, when the correct version is required to "]
    #[doc = " understand the IG correctly."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[doc = " A set of rules of how a particular interoperability or standards problem is solved - typically "]
#[doc = " through the use of FHIR resources. This resource is used to gather all the parts of an "]
#[doc = " implementation guide into a logical whole and to publish a computable definition of all the "]
#[doc = " parts."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ImplementationGuide_Global")]
#[serde(deny_unknown_fields)]
pub struct ImplementationGuideGlobal {
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A reference to the profile that all instances must conform to."]
    pub profile: Canonical,
    #[doc = " The type of resource that all instances must conform to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}
#[doc = " A set of rules of how a particular interoperability or standards problem is solved - typically "]
#[doc = " through the use of FHIR resources. This resource is used to gather all the parts of an "]
#[doc = " implementation guide into a logical whole and to publish a computable definition of all the "]
#[doc = " parts."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ImplementationGuide_Grouping")]
#[serde(deny_unknown_fields)]
pub struct ImplementationGuideGrouping {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Human readable text describing the package."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The human-readable title to display for the package of resources when rendering the "]
    #[doc = " implementation guide."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[doc = " A set of rules of how a particular interoperability or standards problem is solved - typically "]
#[doc = " through the use of FHIR resources. This resource is used to gather all the parts of an "]
#[doc = " implementation guide into a logical whole and to publish a computable definition of all the "]
#[doc = " parts."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ImplementationGuide_Manifest")]
#[serde(deny_unknown_fields)]
pub struct ImplementationGuideManifest {
    #[doc = " Extensions for image"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _image: Option<Vec<Element>>,
    #[doc = " Extensions for other"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _other: Option<Vec<Element>>,
    #[doc = " Extensions for rendering"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _rendering: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Indicates a relative path to an image that exists within the IG."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub image: Option<Vec<String>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Indicates the relative path of an additional non-page, non-image file that is part of the "]
    #[doc = " IG - e.g. zip, jar and similar files that could be the target of a hyperlink in a derived "]
    #[doc = " IG."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub other: Option<Vec<String>>,
    #[doc = " Information about a page within the IG."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub page: Option<Vec<ImplementationGuidePage1>>,
    #[doc = " A pointer to official web page, PDF or other rendering of the implementation guide."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub rendering: Option<Url>,
    #[doc = " A resource that is part of the implementation guide. Conformance resources (value set, "]
    #[doc = " structure definition, capability statements etc.) are obvious candidates for inclusion, but "]
    #[doc = " any kind of resource can be included as an example resource."]
    pub resource: Vec<ImplementationGuideResource1>,
}
#[doc = " A set of rules of how a particular interoperability or standards problem is solved - typically "]
#[doc = " through the use of FHIR resources. This resource is used to gather all the parts of an "]
#[doc = " implementation guide into a logical whole and to publish a computable definition of all the "]
#[doc = " parts."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ImplementationGuide_Page")]
#[serde(deny_unknown_fields)]
pub struct ImplementationGuidePage {
    #[doc = " Extensions for generation"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _generation: Option<Element>,
    #[doc = " Extensions for nameUrl"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_nameUrl")]
    pub _name_url: Option<Element>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " A code that indicates how the page is generated."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub generation: Option<Code>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The source address for the page."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "nameReference")]
    pub name_reference: Option<Reference>,
    #[doc = " The source address for the page."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "nameUrl")]
    pub name_url: Option<String>,
    #[doc = " Nested Pages/Sections under this page."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub page: Option<Vec<ImplementationGuidePage>>,
    #[doc = " A short title used to represent this page in navigational structures such as table of "]
    #[doc = " contents, bread crumbs, etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}
#[doc = " A set of rules of how a particular interoperability or standards problem is solved - typically "]
#[doc = " through the use of FHIR resources. This resource is used to gather all the parts of an "]
#[doc = " implementation guide into a logical whole and to publish a computable definition of all the "]
#[doc = " parts."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ImplementationGuide_Page1")]
#[serde(deny_unknown_fields)]
pub struct ImplementationGuidePage1 {
    #[doc = " Extensions for anchor"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _anchor: Option<Vec<Element>>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " The name of an anchor available on the page."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub anchor: Option<Vec<String>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Relative path to the page."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " Label for the page intended for human display."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}
#[doc = " A set of rules of how a particular interoperability or standards problem is solved - typically "]
#[doc = " through the use of FHIR resources. This resource is used to gather all the parts of an "]
#[doc = " implementation guide into a logical whole and to publish a computable definition of all the "]
#[doc = " parts."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ImplementationGuide_Parameter")]
#[serde(deny_unknown_fields)]
pub struct ImplementationGuideParameter {
    #[doc = " Extensions for code"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _code: Option<Element>,
    #[doc = " Extensions for value"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _value: Option<Element>,
    #[doc = " apply | path-resource | path-pages | path-tx-cache | expansion-parameter | "]
    #[doc = " rule-broken-links | generate-xml | generate-json | generate-turtle | html-template."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Value for named type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[doc = " A set of rules of how a particular interoperability or standards problem is solved - typically "]
#[doc = " through the use of FHIR resources. This resource is used to gather all the parts of an "]
#[doc = " implementation guide into a logical whole and to publish a computable definition of all the "]
#[doc = " parts."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ImplementationGuide_Resource")]
#[serde(deny_unknown_fields)]
pub struct ImplementationGuideResource {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for exampleBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_exampleBoolean")]
    pub _example_boolean: Option<Element>,
    #[doc = " Extensions for exampleCanonical"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_exampleCanonical")]
    pub _example_canonical: Option<Element>,
    #[doc = " Extensions for fhirVersion"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fhirVersion")]
    pub _fhir_version: Option<Vec<Element>>,
    #[doc = " Extensions for groupingId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_groupingId")]
    pub _grouping_id: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " A description of the reason that a resource has been included in the implementation guide."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " If true or a reference, indicates the resource is an example instance.  If a reference is "]
    #[doc = " present, indicates that the example is an example of the specified profile."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "exampleBoolean")]
    pub example_boolean: Option<bool>,
    #[doc = " If true or a reference, indicates the resource is an example instance.  If a reference is "]
    #[doc = " present, indicates that the example is an example of the specified profile."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "exampleCanonical")]
    pub example_canonical: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Indicates the FHIR Version(s) this artifact is intended to apply to. If no versions are "]
    #[doc = " specified, the resource is assumed to apply to all the versions stated in "]
    #[doc = " ImplementationGuide.fhirVersion."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fhirVersion")]
    pub fhir_version: Option<Vec<Code>>,
    #[doc = " Reference to the id of the grouping this resource appears in."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "groupingId")]
    pub grouping_id: Option<Id>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A human assigned name for the resource. All resources SHOULD have a name, but the name may "]
    #[doc = " be extracted from the resource (e.g. ValueSet.name)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " Where this resource is found."]
    pub reference: Reference,
}
#[doc = " A set of rules of how a particular interoperability or standards problem is solved - typically "]
#[doc = " through the use of FHIR resources. This resource is used to gather all the parts of an "]
#[doc = " implementation guide into a logical whole and to publish a computable definition of all the "]
#[doc = " parts."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ImplementationGuide_Resource1")]
#[serde(deny_unknown_fields)]
pub struct ImplementationGuideResource1 {
    #[doc = " Extensions for exampleBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_exampleBoolean")]
    pub _example_boolean: Option<Element>,
    #[doc = " Extensions for exampleCanonical"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_exampleCanonical")]
    pub _example_canonical: Option<Element>,
    #[doc = " Extensions for relativePath"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_relativePath")]
    pub _relative_path: Option<Element>,
    #[doc = " If true or a reference, indicates the resource is an example instance.  If a reference is "]
    #[doc = " present, indicates that the example is an example of the specified profile."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "exampleBoolean")]
    pub example_boolean: Option<bool>,
    #[doc = " If true or a reference, indicates the resource is an example instance.  If a reference is "]
    #[doc = " present, indicates that the example is an example of the specified profile."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "exampleCanonical")]
    pub example_canonical: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Where this resource is found."]
    pub reference: Reference,
    #[doc = " The relative path for primary page for this resource within the IG."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relativePath")]
    pub relative_path: Option<Url>,
}
#[doc = " A set of rules of how a particular interoperability or standards problem is solved - typically "]
#[doc = " through the use of FHIR resources. This resource is used to gather all the parts of an "]
#[doc = " implementation guide into a logical whole and to publish a computable definition of all the "]
#[doc = " parts."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ImplementationGuide_Template")]
#[serde(deny_unknown_fields)]
pub struct ImplementationGuideTemplate {
    #[doc = " Extensions for code"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _code: Option<Element>,
    #[doc = " Extensions for scope"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _scope: Option<Element>,
    #[doc = " Extensions for source"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _source: Option<Element>,
    #[doc = " Type of template specified."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The scope in which the template applies."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
    #[doc = " The source location for the template."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
}
#[doc = " An ingredient of a manufactured item or pharmaceutical product."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Ingredient {
    #[doc = " Extensions for allergenicIndicator"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_allergenicIndicator")]
    pub _allergenic_indicator: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " If the ingredient is a known or suspected allergen. Note that this is a property of the "]
    #[doc = " substance, so if a reference to a SubstanceDefinition is used to decribe that (rather than "]
    #[doc = " just a code), the allergen information should go there, not here."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "allergenicIndicator")]
    pub allergenic_indicator: Option<Boolean>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The product which this ingredient is a constituent part of."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "for")]
    pub for_: Option<Vec<Reference>>,
    #[doc = " A classification of the ingredient identifying its precise purpose(s) in the drug product. "]
    #[doc = " This extends the Ingredient.role to add more detail. Example: antioxidant, alkalizing "]
    #[doc = " agent."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub function: Option<Vec<CodeableConcept>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The identifier(s) of this Ingredient that are assigned by business processes and/or used to "]
    #[doc = " refer to it when a direct URL reference to the resource itself is not appropriate."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The organization(s) that manufacture this ingredient. Can be used to indicate:         1) "]
    #[doc = " Organizations we are aware of that manufacture this ingredient         2) Specific "]
    #[doc = " Manufacturer(s) currently being used         3) Set of organisations allowed to manufacture "]
    #[doc = " this ingredient for this product         Users must be clear on the application of context "]
    #[doc = " relevant to their use case."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub manufacturer: Option<Vec<IngredientManufacturer>>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " This is a Ingredient resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " A classification of the ingredient identifying its purpose within the product, e.g. active, "]
    #[doc = " inactive."]
    pub role: CodeableConcept,
    #[doc = " The status of this ingredient. Enables tracking the life-cycle of the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " The substance that comprises this ingredient."]
    pub substance: IngredientSubstance,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " An ingredient of a manufactured item or pharmaceutical product."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Ingredient_Manufacturer")]
#[serde(deny_unknown_fields)]
pub struct IngredientManufacturer {
    #[doc = " Extensions for role"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _role: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " An organization that manufactures this ingredient."]
    pub manufacturer: Reference,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The way in which this manufacturer is associated with the ingredient. For example whether "]
    #[doc = " it is a possible one (others allowed), or an exclusive authorized one for this ingredient. "]
    #[doc = " Note that this is not the manufacturing process role."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub role: Option<Code>,
}
#[doc = " An ingredient of a manufactured item or pharmaceutical product."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Ingredient_ReferenceStrength")]
#[serde(deny_unknown_fields)]
pub struct IngredientReferenceStrength {
    #[doc = " Extensions for measurementPoint"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_measurementPoint")]
    pub _measurement_point: Option<Element>,
    #[doc = " The country or countries for which the strength range applies."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub country: Option<Vec<CodeableConcept>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " For when strength is measured at a particular point or distance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "measurementPoint")]
    pub measurement_point: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Strength expressed in terms of a reference substance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "strengthRatio")]
    pub strength_ratio: Option<Ratio>,
    #[doc = " Strength expressed in terms of a reference substance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "strengthRatioRange")]
    pub strength_ratio_range: Option<RatioRange>,
    #[doc = " Relevant reference substance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub substance: Option<CodeableReference>,
}
#[doc = " An ingredient of a manufactured item or pharmaceutical product."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Ingredient_Strength")]
#[serde(deny_unknown_fields)]
pub struct IngredientStrength {
    #[doc = " Extensions for measurementPoint"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_measurementPoint")]
    pub _measurement_point: Option<Element>,
    #[doc = " Extensions for textConcentration"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_textConcentration")]
    pub _text_concentration: Option<Element>,
    #[doc = " Extensions for textPresentation"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_textPresentation")]
    pub _text_presentation: Option<Element>,
    #[doc = " The strength per unitary volume (or mass)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "concentrationRatio")]
    pub concentration_ratio: Option<Ratio>,
    #[doc = " The strength per unitary volume (or mass)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "concentrationRatioRange")]
    pub concentration_ratio_range: Option<RatioRange>,
    #[doc = " The country or countries for which the strength range applies."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub country: Option<Vec<CodeableConcept>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " For when strength is measured at a particular point or distance. There are products where "]
    #[doc = " strength is measured at a particular point. For example, the strength of the ingredient in "]
    #[doc = " some inhalers is measured at a particular position relative to the point of aerosolization."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "measurementPoint")]
    pub measurement_point: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The quantity of substance in the unit of presentation, or in the volume (or mass) of the "]
    #[doc = " single pharmaceutical product or manufactured item. Unit of presentation refers to the "]
    #[doc = " quantity that the item occurs in e.g. a strength per tablet size, perhaps 'per 20mg' (the "]
    #[doc = " size of the tablet). It is not generally normalized as a unitary unit, which would be 'per "]
    #[doc = " mg')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "presentationRatio")]
    pub presentation_ratio: Option<Ratio>,
    #[doc = " The quantity of substance in the unit of presentation, or in the volume (or mass) of the "]
    #[doc = " single pharmaceutical product or manufactured item. Unit of presentation refers to the "]
    #[doc = " quantity that the item occurs in e.g. a strength per tablet size, perhaps 'per 20mg' (the "]
    #[doc = " size of the tablet). It is not generally normalized as a unitary unit, which would be 'per "]
    #[doc = " mg')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "presentationRatioRange")]
    pub presentation_ratio_range: Option<RatioRange>,
    #[doc = " Strength expressed in terms of a reference substance. For when the ingredient strength is "]
    #[doc = " additionally expressed as equivalent to the strength of some other closely related "]
    #[doc = " substance (e.g. salt vs. base). Reference strength represents the strength (quantitative "]
    #[doc = " composition) of the active moiety of the active substance. There are situations when the "]
    #[doc = " active substance and active moiety are different, therefore both a strength and a reference "]
    #[doc = " strength are needed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "referenceStrength")]
    pub reference_strength: Option<Vec<IngredientReferenceStrength>>,
    #[doc = " A textual represention of either the whole of the concentration strength or a part of it - "]
    #[doc = " with the rest being in Strength.concentration as a ratio."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "textConcentration")]
    pub text_concentration: Option<String>,
    #[doc = " A textual represention of either the whole of the presentation strength or a part of it - "]
    #[doc = " with the rest being in Strength.presentation as a ratio."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "textPresentation")]
    pub text_presentation: Option<String>,
}
#[doc = " An ingredient of a manufactured item or pharmaceutical product."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Ingredient_Substance")]
#[serde(deny_unknown_fields)]
pub struct IngredientSubstance {
    #[doc = " A code or full resource that represents the ingredient's substance."]
    pub code: CodeableReference,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The quantity of substance in the unit of presentation, or in the volume (or mass) of the "]
    #[doc = " single pharmaceutical product or manufactured item. The allowed repetitions do not "]
    #[doc = " represent different strengths, but are different representations - mathematically "]
    #[doc = " equivalent - of a single strength."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub strength: Option<Vec<IngredientStrength>>,
}
#[doc = " Details of a Health Insurance product/plan provided by an organization."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct InsurancePlan {
    #[doc = " Extensions for alias"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _alias: Option<Vec<Element>>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " An organization which administer other services such as underwriting, customer service "]
    #[doc = " and/or claims processing on behalf of the health insurance product owner."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "administeredBy")]
    pub administered_by: Option<Reference>,
    #[doc = " A list of alternate names that the product is known as, or was known as in the past."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub alias: Option<Vec<String>>,
    #[doc = " The contact for the health insurance product for a certain purpose."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<InsurancePlanContact>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " Details about the coverage offered by the insurance product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub coverage: Option<Vec<InsurancePlanCoverage>>,
    #[doc = " The geographic region in which a health insurance product's benefits apply."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "coverageArea")]
    pub coverage_area: Option<Vec<Reference>>,
    #[doc = " The technical endpoints providing access to services operated for the health insurance "]
    #[doc = " product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<Vec<Reference>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Business identifiers assigned to this health insurance product which remain constant as the "]
    #[doc = " resource is updated and propagates from server to server."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Official name of the health insurance product as designated by the owner."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " Reference to the network included in the health insurance product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub network: Option<Vec<Reference>>,
    #[doc = " The entity that is providing  the health insurance product and underwriting the risk.  This "]
    #[doc = " is typically an insurance carriers, other third-party payers, or health plan sponsors "]
    #[doc = " comonly referred to as 'payers'."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "ownedBy")]
    pub owned_by: Option<Reference>,
    #[doc = " The period of time that the health insurance product is available."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
    #[doc = " Details about an insurance plan."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub plan: Option<Vec<InsurancePlanPlan>>,
    #[doc = " This is a InsurancePlan resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The current state of the health insurance product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " The kind of health insurance product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Vec<CodeableConcept>>,
}
#[doc = " Details of a Health Insurance product/plan provided by an organization."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "InsurancePlan_Benefit")]
#[serde(deny_unknown_fields)]
pub struct InsurancePlanBenefit {
    #[doc = " Extensions for requirement"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _requirement: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The specific limits on the benefit."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub limit: Option<Vec<InsurancePlanLimit>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The referral requirements to have access/coverage for this benefit."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub requirement: Option<String>,
    #[doc = " Type of benefit (primary care; speciality care; inpatient; outpatient)."]
    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}
#[doc = " Details of a Health Insurance product/plan provided by an organization."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "InsurancePlan_Benefit1")]
#[serde(deny_unknown_fields)]
pub struct InsurancePlanBenefit1 {
    #[doc = " List of the costs associated with a specific benefit."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub cost: Option<Vec<InsurancePlanCost>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Type of specific benefit (preventative; primary care office visit; speciality office visit; "]
    #[doc = " hospitalization; emergency room; urgent care)."]
    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}
#[doc = " Details of a Health Insurance product/plan provided by an organization."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "InsurancePlan_Contact")]
#[serde(deny_unknown_fields)]
pub struct InsurancePlanContact {
    #[doc = " Visiting or postal addresses for the contact."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub address: Option<Address>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A name associated with the contact."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<HumanName>,
    #[doc = " Indicates a purpose for which the contact can be reached."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<CodeableConcept>,
    #[doc = " A contact detail (e.g. a telephone number or an email address) by which the party may be "]
    #[doc = " contacted."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub telecom: Option<Vec<ContactPoint>>,
}
#[doc = " Details of a Health Insurance product/plan provided by an organization."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "InsurancePlan_Cost")]
#[serde(deny_unknown_fields)]
pub struct InsurancePlanCost {
    #[doc = " Whether the cost applies to in-network or out-of-network providers (in-network; "]
    #[doc = " out-of-network; other)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub applicability: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Additional information about the cost, such as information about funding sources (e.g. HSA, "]
    #[doc = " HRA, FSA, RRA)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub qualifiers: Option<Vec<CodeableConcept>>,
    #[doc = " Type of cost (copay; individual cap; family cap; coinsurance; deductible)."]
    #[serde(rename = "type")]
    pub type_: CodeableConcept,
    #[doc = " The actual cost value. (some of the costs may be represented as percentages rather than "]
    #[doc = " currency, e.g. 10% coinsurance)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Quantity>,
}
#[doc = " Details of a Health Insurance product/plan provided by an organization."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "InsurancePlan_Coverage")]
#[serde(deny_unknown_fields)]
pub struct InsurancePlanCoverage {
    #[doc = " Specific benefits under this type of coverage."]
    pub benefit: Vec<InsurancePlanBenefit>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Reference to the network that providing the type of coverage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub network: Option<Vec<Reference>>,
    #[doc = " Type of coverage  (Medical; Dental; Mental Health; Substance Abuse; Vision; Drug; Short "]
    #[doc = " Term; Long Term Care; Hospice; Home Health)."]
    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}
#[doc = " Details of a Health Insurance product/plan provided by an organization."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "InsurancePlan_GeneralCost")]
#[serde(deny_unknown_fields)]
pub struct InsurancePlanGeneralCost {
    #[doc = " Extensions for comment"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _comment: Option<Element>,
    #[doc = " Extensions for groupSize"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_groupSize")]
    pub _group_size: Option<Element>,
    #[doc = " Additional information about the general costs associated with this plan."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[doc = " Value of the cost."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub cost: Option<Money>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Number of participants enrolled in the plan."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "groupSize")]
    pub group_size: Option<PositiveInt>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Type of cost."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " Details of a Health Insurance product/plan provided by an organization."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "InsurancePlan_Limit")]
#[serde(deny_unknown_fields)]
pub struct InsurancePlanLimit {
    #[doc = " The specific limit on the benefit."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The maximum amount of a service item a plan will pay for a covered benefit.  For examples. "]
    #[doc = " wellness visits, or eyeglasses."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Quantity>,
}
#[doc = " Details of a Health Insurance product/plan provided by an organization."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "InsurancePlan_Plan")]
#[serde(deny_unknown_fields)]
pub struct InsurancePlanPlan {
    #[doc = " The geographic region in which a health insurance plan's benefits apply."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "coverageArea")]
    pub coverage_area: Option<Vec<Reference>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Overall costs associated with the plan."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "generalCost")]
    pub general_cost: Option<Vec<InsurancePlanGeneralCost>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Business identifiers assigned to this health insurance plan which remain constant as the "]
    #[doc = " resource is updated and propagates from server to server."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Reference to the network that providing the type of coverage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub network: Option<Vec<Reference>>,
    #[doc = " Costs associated with the coverage provided by the product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "specificCost")]
    pub specific_cost: Option<Vec<InsurancePlanSpecificCost>>,
    #[doc = " Type of plan. For example, \"Platinum\" or \"High Deductable\"."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " Details of a Health Insurance product/plan provided by an organization."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "InsurancePlan_SpecificCost")]
#[serde(deny_unknown_fields)]
pub struct InsurancePlanSpecificCost {
    #[doc = " List of the specific benefits under this category of benefit."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub benefit: Option<Vec<InsurancePlanBenefit1>>,
    #[doc = " General category of benefit (Medical; Dental; Vision; Drug; Mental Health; Substance Abuse; "]
    #[doc = " Hospice, Home Health)."]
    pub category: CodeableConcept,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " Invoice containing collected ChargeItems from an Account with calculated individual and total "]
#[doc = " price for Billing purpose."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Invoice {
    #[doc = " Extensions for cancelledReason"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_cancelledReason")]
    pub _cancelled_reason: Option<Element>,
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for paymentTerms"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_paymentTerms")]
    pub _payment_terms: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Account which is supposed to be balanced with this Invoice."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub account: Option<Reference>,
    #[doc = " In case of Invoice cancellation a reason must be given (entered in error, superseded by "]
    #[doc = " corrected invoice etc.)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "cancelledReason")]
    pub cancelled_reason: Option<String>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " Date/time(s) of when this Invoice was posted."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Identifier of this Invoice, often used for reference in correspondence about this invoice "]
    #[doc = " or for tracking of payments."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The organizationissuing the Invoice."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub issuer: Option<Reference>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " Each line item represents one charge for goods and services rendered. Details such as date, "]
    #[doc = " code and amount are found in the referenced ChargeItem resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lineItem")]
    pub line_item: Option<Vec<InvoiceLineItem>>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Comments made about the invoice by the issuer, subject, or other participants."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " Indicates who or what performed or participated in the charged service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub participant: Option<Vec<InvoiceParticipant>>,
    #[doc = " Payment details such as banking details, period of payment, deductibles, methods of "]
    #[doc = " payment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "paymentTerms")]
    pub payment_terms: Option<Markdown>,
    #[doc = " The individual or Organization responsible for balancing of this invoice."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub recipient: Option<Reference>,
    #[doc = " This is a Invoice resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The current state of the Invoice."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " The individual or set of individuals receiving the goods and services billed in this "]
    #[doc = " invoice."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Reference>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " Invoice total, tax included."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "totalGross")]
    pub total_gross: Option<Money>,
    #[doc = " Invoice total , taxes excluded."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "totalNet")]
    pub total_net: Option<Money>,
    #[doc = " The total amount for the Invoice may be calculated as the sum of the line items with "]
    #[doc = " surcharges/deductions that apply in certain conditions.  The priceComponent element can be "]
    #[doc = " used to offer transparency to the recipient of the Invoice of how the total price was "]
    #[doc = " calculated."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "totalPriceComponent")]
    pub total_price_component: Option<Vec<InvoicePriceComponent>>,
    #[doc = " Type of Invoice depending on domain, realm an usage (e.g. internal/external, dental, "]
    #[doc = " preliminary)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " Invoice containing collected ChargeItems from an Account with calculated individual and total "]
#[doc = " price for Billing purpose."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Invoice_LineItem")]
#[serde(deny_unknown_fields)]
pub struct InvoiceLineItem {
    #[doc = " Extensions for sequence"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _sequence: Option<Element>,
    #[doc = " The ChargeItem contains information such as the billing code, date, amount etc. If no "]
    #[doc = " further details are required for the lineItem, inline billing codes can be added using the "]
    #[doc = " CodeableConcept data type instead of the Reference."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "chargeItemCodeableConcept")]
    pub charge_item_codeable_concept: Option<CodeableConcept>,
    #[doc = " The ChargeItem contains information such as the billing code, date, amount etc. If no "]
    #[doc = " further details are required for the lineItem, inline billing codes can be added using the "]
    #[doc = " CodeableConcept data type instead of the Reference."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "chargeItemReference")]
    pub charge_item_reference: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The price for a ChargeItem may be calculated as a base price with surcharges/deductions "]
    #[doc = " that apply in certain conditions. A ChargeItemDefinition resource that defines the prices, "]
    #[doc = " factors and conditions that apply to a billing code is currently under development. The "]
    #[doc = " priceComponent element can be used to offer transparency to the recipient of the Invoice as "]
    #[doc = " to how the prices have been calculated."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "priceComponent")]
    pub price_component: Option<Vec<InvoicePriceComponent>>,
    #[doc = " Sequence in which the items appear on the invoice."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sequence: Option<PositiveInt>,
}
#[doc = " Invoice containing collected ChargeItems from an Account with calculated individual and total "]
#[doc = " price for Billing purpose."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Invoice_Participant")]
#[serde(deny_unknown_fields)]
pub struct InvoiceParticipant {
    #[doc = " The device, practitioner, etc. who performed or participated in the service."]
    pub actor: Reference,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Describes the type of involvement (e.g. transcriptionist, creator etc.). If the invoice has "]
    #[doc = " been created automatically, the Participant may be a billing engine or another kind of "]
    #[doc = " device."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub role: Option<CodeableConcept>,
}
#[doc = " Invoice containing collected ChargeItems from an Account with calculated individual and total "]
#[doc = " price for Billing purpose."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Invoice_PriceComponent")]
#[serde(deny_unknown_fields)]
pub struct InvoicePriceComponent {
    #[doc = " Extensions for factor"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _factor: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " The amount calculated for this component."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub amount: Option<Money>,
    #[doc = " A code that identifies the component. Codes may be used to differentiate between kinds of "]
    #[doc = " taxes, surcharges, discounts etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The factor that has been applied on the base price for calculating this component."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub factor: Option<Decimal>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " This code identifies the type of the component."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}
#[doc = " The Library resource is a general-purpose container for knowledge asset definitions. It can be "]
#[doc = " used to describe and expose existing knowledge assets such as logic libraries and information "]
#[doc = " model descriptions, as well as to describe a collection of knowledge assets."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Library {
    #[doc = " Extensions for approvalDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_approvalDate")]
    pub _approval_date: Option<Element>,
    #[doc = " Extensions for copyright"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _copyright: Option<Element>,
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for experimental"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _experimental: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for lastReviewDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastReviewDate")]
    pub _last_review_date: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for publisher"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _publisher: Option<Element>,
    #[doc = " Extensions for purpose"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _purpose: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for subtitle"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _subtitle: Option<Element>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " Extensions for usage"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _usage: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " The date on which the resource content was approved by the publisher. Approval happens once "]
    #[doc = " when the content is officially approved for usage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "approvalDate")]
    pub approval_date: Option<Date>,
    #[doc = " An individiual or organization primarily involved in the creation and maintenance of the "]
    #[doc = " content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Vec<ContactDetail>>,
    #[doc = " Contact details to assist a user in finding and communicating with the publisher."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The content of the library as an Attachment. The content may be a reference to a url, or "]
    #[doc = " may be directly embedded as a base-64 string. Either way, the contentType of the attachment "]
    #[doc = " determines how to interpret the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub content: Option<Vec<Attachment>>,
    #[doc = " A copyright statement relating to the library and/or its contents. Copyright statements are "]
    #[doc = " generally legal restrictions on the use and publishing of the library."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,
    #[doc = " Describes a set of data that must be provided in order to be able to successfully perform "]
    #[doc = " the computations defined by the library."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dataRequirement")]
    pub data_requirement: Option<Vec<DataRequirement>>,
    #[doc = " The date  (and optionally time) when the library was published. The date must change when "]
    #[doc = " the business version changes and it must change if the status code changes. In addition, it "]
    #[doc = " should change when the substantive content of the library changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " A free text natural language description of the library from a consumer's perspective."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " An individual or organization primarily responsible for internal coherence of the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub editor: Option<Vec<ContactDetail>>,
    #[doc = " The period during which the library content was or is planned to be in active use."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectivePeriod")]
    pub effective_period: Option<Period>,
    #[doc = " An individual or organization responsible for officially endorsing the content for use in "]
    #[doc = " some setting."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub endorser: Option<Vec<ContactDetail>>,
    #[doc = " A Boolean value to indicate that this library is authored for testing purposes (or "]
    #[doc = " education/evaluation/marketing) and is not intended to be used for genuine usage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A formal identifier that is used to identify this library when it is represented in other "]
    #[doc = " formats, or referenced in a specification, model, design or an instance. e.g. CMS or NQF "]
    #[doc = " identifiers for a measure artifact. Note that at least one identifier is required for "]
    #[doc = " non-experimental active artifacts."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " A legal or geographic region in which the library is intended to be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The date on which the resource content was last reviewed. Review happens periodically after "]
    #[doc = " approval but does not change the original approval date."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastReviewDate")]
    pub last_review_date: Option<Date>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A natural language name identifying the library. This name should be usable as an "]
    #[doc = " identifier for the module by machine processing applications such as code generation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " The parameter element defines parameters used by the library."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub parameter: Option<Vec<ParameterDefinition>>,
    #[doc = " The name of the organization or individual that published the library."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
    #[doc = " Explanation of why this library is needed and why it has been designed as it has."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,
    #[doc = " Related artifacts such as additional documentation, justification, or bibliographic "]
    #[doc = " references."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatedArtifact")]
    pub related_artifact: Option<Vec<RelatedArtifact>>,
    #[doc = " This is a Library resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " An individual or organization primarily responsible for review of some aspect of the "]
    #[doc = " content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reviewer: Option<Vec<ContactDetail>>,
    #[doc = " The status of this library. Enables tracking the life-cycle of the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A code or group definition that describes the intended subject of the contents of the "]
    #[doc = " library."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectCodeableConcept")]
    pub subject_codeable_concept: Option<CodeableConcept>,
    #[doc = " A code or group definition that describes the intended subject of the contents of the "]
    #[doc = " library."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectReference")]
    pub subject_reference: Option<Reference>,
    #[doc = " An explanatory or alternate title for the library giving additional information about its "]
    #[doc = " content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subtitle: Option<String>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " A short, descriptive, user-friendly title for the library."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[doc = " Descriptive topics related to the content of the library. Topics provide a high-level "]
    #[doc = " categorization of the library that can be useful for filtering and searching."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub topic: Option<Vec<CodeableConcept>>,
    #[doc = " Identifies the type of library such as a Logic Library, Model Definition, Asset Collection, "]
    #[doc = " or Module Definition."]
    #[serde(rename = "type")]
    pub type_: CodeableConcept,
    #[doc = " An absolute URI that is used to identify this library when it is referenced in a "]
    #[doc = " specification, model, design or an instance; also called its canonical identifier. This "]
    #[doc = " SHOULD be globally unique and SHOULD be a literal address at which at which an "]
    #[doc = " authoritative instance of this library is (or will be) published. This URL can be the "]
    #[doc = " target of a canonical reference. It SHALL remain the same when the library is stored on "]
    #[doc = " different servers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
    #[doc = " A detailed description of how the library is used from a clinical perspective."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub usage: Option<String>,
    #[doc = " The content was developed with a focus and intent of supporting the contexts that are "]
    #[doc = " listed. These contexts may be general categories (gender, age, ...) or may be references to "]
    #[doc = " specific programs (insurance plans, studies, ...) and may be used to assist with indexing "]
    #[doc = " and searching for appropriate library instances."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,
    #[doc = " The identifier that is used to identify this version of the library when it is referenced "]
    #[doc = " in a specification, model, design or instance. This is an arbitrary value managed by the "]
    #[doc = " library author and is not expected to be globally unique. For example, it might be a "]
    #[doc = " timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no "]
    #[doc = " expectation that versions can be placed in a lexicographical sequence. To provide a version "]
    #[doc = " consistent with the Decision Support Service specification, use the format "]
    #[doc = " Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, "]
    #[doc = " refer to the Decision Support Service specification. Note that a version is required for "]
    #[doc = " non-experimental active artifacts."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[doc = " Identifies two or more records (resource instances) that refer to the same real-world "]
#[doc = " \"occurrence\"."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Linkage {
    #[doc = " Extensions for active"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _active: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Indicates whether the asserted set of linkages are considered to be \"in effect\"."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub active: Option<Boolean>,
    #[doc = " Identifies the user or organization responsible for asserting the linkages as well as the "]
    #[doc = " user or organization who establishes the context in which the nature of each linkage is "]
    #[doc = " evaluated."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Reference>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " Identifies which record considered as the reference to the same real-world occurrence as "]
    #[doc = " well as how the items should be evaluated within the collection of linked items."]
    pub item: Vec<LinkageItem>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " This is a Linkage resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " Identifies two or more records (resource instances) that refer to the same real-world "]
#[doc = " \"occurrence\"."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Linkage_Item")]
#[serde(deny_unknown_fields)]
pub struct LinkageItem {
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The resource instance being linked as part of the group."]
    pub resource: Reference,
    #[doc = " Distinguishes which item is \"source of truth\" (if any) and which items are no longer "]
    #[doc = " considered to be current representations."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}
#[doc = " A list is a curated collection of resources."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct List {
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for mode"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _mode: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " This code defines the purpose of the list - why it was created."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The date that the list was prepared."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " If the list is empty, why the list is empty."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "emptyReason")]
    pub empty_reason: Option<CodeableConcept>,
    #[doc = " The encounter that is the context in which this list was created."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,
    #[doc = " Entries in this list."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub entry: Option<Vec<ListEntry>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Identifier for the List assigned for business purposes outside the context of FHIR."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " How this list was prepared - whether it is a working list that is suitable for being "]
    #[doc = " maintained on an ongoing basis, or if it represents a snapshot of a list of items from "]
    #[doc = " another source, or whether it is a prepared list where items may be marked as added, "]
    #[doc = " modified or deleted."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub mode: Option<Code>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Comments that apply to the overall list."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " What order applies to the items in the list."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "orderedBy")]
    pub ordered_by: Option<CodeableConcept>,
    #[doc = " This is a List resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The entity responsible for deciding what the contents of the list were. Where the list was "]
    #[doc = " created by a human, this is the same as the author of the list."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub source: Option<Reference>,
    #[doc = " Indicates the current state of this list."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " The common subject (or patient) of the resources that are in the list if there is one."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Reference>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " A label for the list assigned by the author."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}
#[doc = " A list is a curated collection of resources."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "List_Entry")]
#[serde(deny_unknown_fields)]
pub struct ListEntry {
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for deleted"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _deleted: Option<Element>,
    #[doc = " When this item was added to the list."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " True if this item is marked as deleted in the list."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub deleted: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The flag allows the system constructing the list to indicate the role and significance of "]
    #[doc = " the item in the list."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub flag: Option<CodeableConcept>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A reference to the actual resource from which data was derived."]
    pub item: Reference,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " Details and position information for a physical place where services are provided and resources "]
#[doc = " and participants may be stored, found, contained, or accommodated."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Location {
    #[doc = " Extensions for alias"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _alias: Option<Vec<Element>>,
    #[doc = " Extensions for availabilityExceptions"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_availabilityExceptions")]
    pub _availability_exceptions: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for mode"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _mode: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Physical location."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub address: Option<Address>,
    #[doc = " A list of alternate names that the location is known as, or was known as, in the past."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub alias: Option<Vec<String>>,
    #[doc = " A description of when the locations opening ours are different to normal, e.g. public "]
    #[doc = " holiday availability. Succinctly describing all possible exceptions to normal site "]
    #[doc = " availability as detailed in the opening hours Times."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "availabilityExceptions")]
    pub availability_exceptions: Option<String>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " Description of the Location, which helps in finding or referencing the place."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " Technical endpoints providing access to services operated for the location."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<Vec<Reference>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " What days/times during a week is this location usually open."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "hoursOfOperation")]
    pub hours_of_operation: Option<Vec<LocationHoursOfOperation>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Unique code or number identifying the location to its users."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The organization responsible for the provisioning and upkeep of the location."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "managingOrganization")]
    pub managing_organization: Option<Reference>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " Indicates whether a resource instance represents a specific location or a class of "]
    #[doc = " locations."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub mode: Option<Code>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Name of the location as used by humans. Does not need to be unique."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " The operational status covers operation values most relevant to beds (but can also apply to "]
    #[doc = " rooms/units/chairs/etc. such as an isolation unit/dialysis chair). This typically covers "]
    #[doc = " concepts such as contamination, housekeeping, and other activities like maintenance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "operationalStatus")]
    pub operational_status: Option<Coding>,
    #[doc = " Another Location of which this Location is physically a part of."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "partOf")]
    pub part_of: Option<Reference>,
    #[doc = " Physical form of the location, e.g. building, room, vehicle, road."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "physicalType")]
    pub physical_type: Option<CodeableConcept>,
    #[doc = " The absolute geographic location of the Location, expressed using the WGS84 datum (This is "]
    #[doc = " the same co-ordinate system used in KML)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub position: Option<LocationPosition>,
    #[doc = " This is a Location resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The status property covers the general availability of the resource, not the current value "]
    #[doc = " which may be covered by the operationStatus, or by a schedule/slots if they are configured "]
    #[doc = " for the location."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " The contact details of communication devices available at the location. This can include "]
    #[doc = " phone numbers, fax numbers, mobile numbers, email addresses and web sites."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub telecom: Option<Vec<ContactPoint>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " Indicates the type of function performed at the location."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Vec<CodeableConcept>>,
}
#[doc = " Details and position information for a physical place where services are provided and resources "]
#[doc = " and participants may be stored, found, contained, or accommodated."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Location_HoursOfOperation")]
#[serde(deny_unknown_fields)]
pub struct LocationHoursOfOperation {
    #[doc = " Extensions for allDay"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_allDay")]
    pub _all_day: Option<Element>,
    #[doc = " Extensions for closingTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_closingTime")]
    pub _closing_time: Option<Element>,
    #[doc = " Extensions for daysOfWeek"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_daysOfWeek")]
    pub _days_of_week: Option<Vec<Element>>,
    #[doc = " Extensions for openingTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_openingTime")]
    pub _opening_time: Option<Element>,
    #[doc = " The Location is open all day."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "allDay")]
    pub all_day: Option<Boolean>,
    #[doc = " Time that the Location closes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "closingTime")]
    pub closing_time: Option<Time>,
    #[doc = " Indicates which days of the week are available between the start and end Times."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "daysOfWeek")]
    pub days_of_week: Option<Vec<Code>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Time that the Location opens."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "openingTime")]
    pub opening_time: Option<Time>,
}
#[doc = " Details and position information for a physical place where services are provided and resources "]
#[doc = " and participants may be stored, found, contained, or accommodated."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Location_Position")]
#[serde(deny_unknown_fields)]
pub struct LocationPosition {
    #[doc = " Extensions for altitude"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _altitude: Option<Element>,
    #[doc = " Extensions for latitude"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _latitude: Option<Element>,
    #[doc = " Extensions for longitude"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _longitude: Option<Element>,
    #[doc = " Altitude. The value domain and the interpretation are the same as for the text of the "]
    #[doc = " altitude element in KML (see notes below)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub altitude: Option<Decimal>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Latitude. The value domain and the interpretation are the same as for the text of the "]
    #[doc = " latitude element in KML (see notes below)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub latitude: Option<Decimal>,
    #[doc = " Longitude. The value domain and the interpretation are the same as for the text of the "]
    #[doc = " longitude element in KML (see notes below)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub longitude: Option<Decimal>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " The definition and characteristics of a medicinal manufactured item, such as a tablet or "]
#[doc = " capsule, as contained in a packaged medicinal product."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ManufacturedItemDefinition {
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Unique identifier."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The ingredients of this manufactured item. This is only needed if the ingredients are not "]
    #[doc = " specified by incoming references from the Ingredient resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub ingredient: Option<Vec<CodeableConcept>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " Dose form as manufactured and before any transformation into the pharmaceutical product."]
    #[serde(rename = "manufacturedDoseForm")]
    pub manufactured_dose_form: CodeableConcept,
    #[doc = " Manufacturer of the item (Note that this should be named \"manufacturer\" but it currently "]
    #[doc = " causes technical issues)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub manufacturer: Option<Vec<Reference>>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " General characteristics of this item."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub property: Option<Vec<ManufacturedItemDefinitionProperty>>,
    #[doc = " This is a ManufacturedItemDefinition resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The status of this item. Enables tracking the life-cycle of the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " The “real world” units in which the quantity of the manufactured item is described."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "unitOfPresentation")]
    pub unit_of_presentation: Option<CodeableConcept>,
}
#[doc = " The definition and characteristics of a medicinal manufactured item, such as a tablet or "]
#[doc = " capsule, as contained in a packaged medicinal product."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ManufacturedItemDefinition_Property")]
#[serde(deny_unknown_fields)]
pub struct ManufacturedItemDefinitionProperty {
    #[doc = " Extensions for valueBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub _value_boolean: Option<Element>,
    #[doc = " Extensions for valueDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDate")]
    pub _value_date: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A code expressing the type of characteristic."]
    #[serde(rename = "type")]
    pub type_: CodeableConcept,
    #[doc = " A value for the characteristic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAttachment")]
    pub value_attachment: Option<Attachment>,
    #[doc = " A value for the characteristic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,
    #[doc = " A value for the characteristic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,
    #[doc = " A value for the characteristic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDate")]
    pub value_date: Option<String>,
    #[doc = " A value for the characteristic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,
}
#[doc = " The marketing status describes the date when a medicinal product is actually put on the market "]
#[doc = " or the date as of which it is no longer available."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct MarketingStatus {
    #[doc = " Extensions for restoreDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_restoreDate")]
    pub _restore_date: Option<Element>,
    #[doc = " The country in which the marketing authorisation has been granted shall be specified It "]
    #[doc = " should be specified using the ISO 3166 ‑ 1 alpha-2 code elements."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub country: Option<CodeableConcept>,
    #[doc = " The date when the Medicinal Product is placed on the market by the Marketing Authorisation "]
    #[doc = " Holder (or where applicable, the manufacturer/distributor) in a country and/or jurisdiction "]
    #[doc = " shall be provided A complete date consisting of day, month and year shall be specified "]
    #[doc = " using the ISO 8601 date format NOTE “Placed on the market” refers to the release of the "]
    #[doc = " Medicinal Product into the distribution chain."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dateRange")]
    pub date_range: Option<Period>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Where a Medicines Regulatory Agency has granted a marketing authorisation for which "]
    #[doc = " specific provisions within a jurisdiction apply, the jurisdiction can be specified using an "]
    #[doc = " appropriate controlled terminology The controlled term and the controlled term identifier "]
    #[doc = " shall be specified."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The date when the Medicinal Product is placed on the market by the Marketing Authorisation "]
    #[doc = " Holder (or where applicable, the manufacturer/distributor) in a country and/or jurisdiction "]
    #[doc = " shall be provided A complete date consisting of day, month and year shall be specified "]
    #[doc = " using the ISO 8601 date format NOTE “Placed on the market” refers to the release of the "]
    #[doc = " Medicinal Product into the distribution chain."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "restoreDate")]
    pub restore_date: Option<DateTime>,
    #[doc = " This attribute provides information on the status of the marketing of the medicinal product "]
    #[doc = " See ISO/TS 20443 for more information and examples."]
    pub status: CodeableConcept,
}
#[doc = " The Measure resource provides the definition of a quality measure."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Measure {
    #[doc = " Extensions for approvalDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_approvalDate")]
    pub _approval_date: Option<Element>,
    #[doc = " Extensions for clinicalRecommendationStatement"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_clinicalRecommendationStatement")]
    pub _clinical_recommendation_statement: Option<Element>,
    #[doc = " Extensions for copyright"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _copyright: Option<Element>,
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for definition"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _definition: Option<Vec<Element>>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for disclaimer"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _disclaimer: Option<Element>,
    #[doc = " Extensions for experimental"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _experimental: Option<Element>,
    #[doc = " Extensions for guidance"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _guidance: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for lastReviewDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastReviewDate")]
    pub _last_review_date: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for publisher"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _publisher: Option<Element>,
    #[doc = " Extensions for purpose"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _purpose: Option<Element>,
    #[doc = " Extensions for rateAggregation"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_rateAggregation")]
    pub _rate_aggregation: Option<Element>,
    #[doc = " Extensions for rationale"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _rationale: Option<Element>,
    #[doc = " Extensions for riskAdjustment"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_riskAdjustment")]
    pub _risk_adjustment: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for subtitle"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _subtitle: Option<Element>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " Extensions for usage"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _usage: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " The date on which the resource content was approved by the publisher. Approval happens once "]
    #[doc = " when the content is officially approved for usage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "approvalDate")]
    pub approval_date: Option<Date>,
    #[doc = " An individiual or organization primarily involved in the creation and maintenance of the "]
    #[doc = " content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Vec<ContactDetail>>,
    #[doc = " Provides a summary of relevant clinical guidelines or other clinical recommendations "]
    #[doc = " supporting the measure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "clinicalRecommendationStatement")]
    pub clinical_recommendation_statement: Option<Markdown>,
    #[doc = " If this is a composite measure, the scoring method used to combine the component measures "]
    #[doc = " to determine the composite score."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "compositeScoring")]
    pub composite_scoring: Option<CodeableConcept>,
    #[doc = " Contact details to assist a user in finding and communicating with the publisher."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " A copyright statement relating to the measure and/or its contents. Copyright statements are "]
    #[doc = " generally legal restrictions on the use and publishing of the measure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,
    #[doc = " The date  (and optionally time) when the measure was published. The date must change when "]
    #[doc = " the business version changes and it must change if the status code changes. In addition, it "]
    #[doc = " should change when the substantive content of the measure changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " Provides a description of an individual term used within the measure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub definition: Option<Vec<Markdown>>,
    #[doc = " A free text natural language description of the measure from a consumer's perspective."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " Notices and disclaimers regarding the use of the measure or related to intellectual "]
    #[doc = " property (such as code systems) referenced by the measure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub disclaimer: Option<Markdown>,
    #[doc = " An individual or organization primarily responsible for internal coherence of the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub editor: Option<Vec<ContactDetail>>,
    #[doc = " The period during which the measure content was or is planned to be in active use."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectivePeriod")]
    pub effective_period: Option<Period>,
    #[doc = " An individual or organization responsible for officially endorsing the content for use in "]
    #[doc = " some setting."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub endorser: Option<Vec<ContactDetail>>,
    #[doc = " A Boolean value to indicate that this measure is authored for testing purposes (or "]
    #[doc = " education/evaluation/marketing) and is not intended to be used for genuine usage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " A group of population criteria for the measure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub group: Option<Vec<MeasureGroup>>,
    #[doc = " Additional guidance for the measure including how it can be used in a clinical context, and "]
    #[doc = " the intent of the measure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub guidance: Option<Markdown>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A formal identifier that is used to identify this measure when it is represented in other "]
    #[doc = " formats, or referenced in a specification, model, design or an instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " Information on whether an increase or decrease in score is the preferred result (e.g., a "]
    #[doc = " higher score indicates better quality OR a lower score indicates better quality OR quality "]
    #[doc = " is within a range)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "improvementNotation")]
    pub improvement_notation: Option<CodeableConcept>,
    #[doc = " A legal or geographic region in which the measure is intended to be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The date on which the resource content was last reviewed. Review happens periodically after "]
    #[doc = " approval but does not change the original approval date."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastReviewDate")]
    pub last_review_date: Option<Date>,
    #[doc = " A reference to a Library resource containing the formal logic used by the measure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub library: Option<Vec<Canonical>>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A natural language name identifying the measure. This name should be usable as an "]
    #[doc = " identifier for the module by machine processing applications such as code generation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " The name of the organization or individual that published the measure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
    #[doc = " Explanation of why this measure is needed and why it has been designed as it has."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,
    #[doc = " Describes how to combine the information calculated, based on logic in each of several "]
    #[doc = " populations, into one summarized result."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "rateAggregation")]
    pub rate_aggregation: Option<String>,
    #[doc = " Provides a succinct statement of the need for the measure. Usually includes statements "]
    #[doc = " pertaining to importance criterion: impact, gap in care, and evidence."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub rationale: Option<Markdown>,
    #[doc = " Related artifacts such as additional documentation, justification, or bibliographic "]
    #[doc = " references."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatedArtifact")]
    pub related_artifact: Option<Vec<RelatedArtifact>>,
    #[doc = " This is a Measure resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " An individual or organization primarily responsible for review of some aspect of the "]
    #[doc = " content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reviewer: Option<Vec<ContactDetail>>,
    #[doc = " A description of the risk adjustment factors that may impact the resulting score for the "]
    #[doc = " measure and how they may be accounted for when computing and reporting measure results."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "riskAdjustment")]
    pub risk_adjustment: Option<String>,
    #[doc = " Indicates how the calculation is performed for the measure, including proportion, ratio, "]
    #[doc = " continuous-variable, and cohort. The value set is extensible, allowing additional measure "]
    #[doc = " scoring types to be represented."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub scoring: Option<CodeableConcept>,
    #[doc = " The status of this measure. Enables tracking the life-cycle of the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " The intended subjects for the measure. If this element is not provided, a Patient subject "]
    #[doc = " is assumed, but the subject of the measure can be anything."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectCodeableConcept")]
    pub subject_codeable_concept: Option<CodeableConcept>,
    #[doc = " The intended subjects for the measure. If this element is not provided, a Patient subject "]
    #[doc = " is assumed, but the subject of the measure can be anything."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectReference")]
    pub subject_reference: Option<Reference>,
    #[doc = " An explanatory or alternate title for the measure giving additional information about its "]
    #[doc = " content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subtitle: Option<String>,
    #[doc = " The supplemental data criteria for the measure report, specified as either the name of a "]
    #[doc = " valid CQL expression within a referenced library, or a valid FHIR Resource Path."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supplementalData")]
    pub supplemental_data: Option<Vec<MeasureSupplementalData>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " A short, descriptive, user-friendly title for the measure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[doc = " Descriptive topics related to the content of the measure. Topics provide a high-level "]
    #[doc = " categorization grouping types of measures that can be useful for filtering and searching."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub topic: Option<Vec<CodeableConcept>>,
    #[doc = " Indicates whether the measure is used to examine a process, an outcome over time, a "]
    #[doc = " patient-reported outcome, or a structure measure such as utilization."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Vec<CodeableConcept>>,
    #[doc = " An absolute URI that is used to identify this measure when it is referenced in a "]
    #[doc = " specification, model, design or an instance; also called its canonical identifier. This "]
    #[doc = " SHOULD be globally unique and SHOULD be a literal address at which at which an "]
    #[doc = " authoritative instance of this measure is (or will be) published. This URL can be the "]
    #[doc = " target of a canonical reference. It SHALL remain the same when the measure is stored on "]
    #[doc = " different servers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
    #[doc = " A detailed description, from a clinical perspective, of how the measure is used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub usage: Option<String>,
    #[doc = " The content was developed with a focus and intent of supporting the contexts that are "]
    #[doc = " listed. These contexts may be general categories (gender, age, ...) or may be references to "]
    #[doc = " specific programs (insurance plans, studies, ...) and may be used to assist with indexing "]
    #[doc = " and searching for appropriate measure instances."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,
    #[doc = " The identifier that is used to identify this version of the measure when it is referenced "]
    #[doc = " in a specification, model, design or instance. This is an arbitrary value managed by the "]
    #[doc = " measure author and is not expected to be globally unique. For example, it might be a "]
    #[doc = " timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no "]
    #[doc = " expectation that versions can be placed in a lexicographical sequence. To provide a version "]
    #[doc = " consistent with the Decision Support Service specification, use the format "]
    #[doc = " Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, "]
    #[doc = " refer to the Decision Support Service specification. Note that a version is required for "]
    #[doc = " non-experimental active artifacts."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[doc = " The MeasureReport resource contains the results of the calculation of a measure; and optionally "]
#[doc = " a reference to the resources involved in that calculation."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct MeasureReport {
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The date this measure report was generated."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " A reference to a Bundle containing the Resources that were used in the calculation of this "]
    #[doc = " measure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "evaluatedResource")]
    pub evaluated_resource: Option<Vec<Reference>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The results of the calculation, one for each population group in the measure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub group: Option<Vec<MeasureReportGroup>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A formal identifier that is used to identify this MeasureReport when it is represented in "]
    #[doc = " other formats or referenced in a specification, model, design or an instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " Whether improvement in the measure is noted by an increase or decrease in the measure "]
    #[doc = " score."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "improvementNotation")]
    pub improvement_notation: Option<CodeableConcept>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " A reference to the Measure that was calculated to produce this report."]
    pub measure: Canonical,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The reporting period for which the report was calculated."]
    pub period: Period,
    #[doc = " The individual, location, or organization that is reporting the data."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reporter: Option<Reference>,
    #[doc = " This is a MeasureReport resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The MeasureReport status. No data will be available until the MeasureReport status is "]
    #[doc = " complete."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " Optional subject identifying the individual or individuals the report is for."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Reference>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " The type of measure report. This may be an individual report, which provides the score for "]
    #[doc = " the measure for an individual member of the population; a subject-listing, which returns "]
    #[doc = " the list of members that meet the various criteria in the measure; a summary report, which "]
    #[doc = " returns a population count for each of the criteria in the measure; or a data-collection, "]
    #[doc = " which enables the MeasureReport to be used to exchange the data-of-interest for a quality "]
    #[doc = " measure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}
#[doc = " The MeasureReport resource contains the results of the calculation of a measure; and optionally "]
#[doc = " a reference to the resources involved in that calculation."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "MeasureReport_Component")]
#[serde(deny_unknown_fields)]
pub struct MeasureReportComponent {
    #[doc = " The code for the stratum component value."]
    pub code: CodeableConcept,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The stratum component value."]
    pub value: CodeableConcept,
}
#[doc = " The MeasureReport resource contains the results of the calculation of a measure; and optionally "]
#[doc = " a reference to the resources involved in that calculation."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MeasureReport_Group")]
#[serde(deny_unknown_fields)]
pub struct MeasureReportGroup {
    #[doc = " The meaning of the population group as defined in the measure definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The measure score for this population group, calculated as appropriate for the measure type "]
    #[doc = " and scoring method, and based on the contents of the populations defined in the group."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "measureScore")]
    pub measure_score: Option<Quantity>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The populations that make up the population group, one for each type of population "]
    #[doc = " appropriate for the measure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub population: Option<Vec<MeasureReportPopulation>>,
    #[doc = " When a measure includes multiple stratifiers, there will be a stratifier group for each "]
    #[doc = " stratifier defined by the measure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub stratifier: Option<Vec<MeasureReportStratifier>>,
}
#[doc = " The MeasureReport resource contains the results of the calculation of a measure; and optionally "]
#[doc = " a reference to the resources involved in that calculation."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MeasureReport_Population")]
#[serde(deny_unknown_fields)]
pub struct MeasureReportPopulation {
    #[doc = " Extensions for count"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _count: Option<Element>,
    #[doc = " The type of the population."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,
    #[doc = " The number of members of the population."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub count: Option<Integer>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " This element refers to a List of subject level MeasureReport resources, one for each "]
    #[doc = " subject in this population."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectResults")]
    pub subject_results: Option<Reference>,
}
#[doc = " The MeasureReport resource contains the results of the calculation of a measure; and optionally "]
#[doc = " a reference to the resources involved in that calculation."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MeasureReport_Population1")]
#[serde(deny_unknown_fields)]
pub struct MeasureReportPopulation1 {
    #[doc = " Extensions for count"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _count: Option<Element>,
    #[doc = " The type of the population."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,
    #[doc = " The number of members of the population in this stratum."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub count: Option<Integer>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " This element refers to a List of subject level MeasureReport resources, one for each "]
    #[doc = " subject in this population in this stratum."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectResults")]
    pub subject_results: Option<Reference>,
}
#[doc = " The MeasureReport resource contains the results of the calculation of a measure; and optionally "]
#[doc = " a reference to the resources involved in that calculation."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MeasureReport_Stratifier")]
#[serde(deny_unknown_fields)]
pub struct MeasureReportStratifier {
    #[doc = " The meaning of this stratifier, as defined in the measure definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Vec<CodeableConcept>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " This element contains the results for a single stratum within the stratifier. For example, "]
    #[doc = " when stratifying on administrative gender, there will be four strata, one for each possible "]
    #[doc = " gender value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub stratum: Option<Vec<MeasureReportStratum>>,
}
#[doc = " The MeasureReport resource contains the results of the calculation of a measure; and optionally "]
#[doc = " a reference to the resources involved in that calculation."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MeasureReport_Stratum")]
#[serde(deny_unknown_fields)]
pub struct MeasureReportStratum {
    #[doc = " A stratifier component value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub component: Option<Vec<MeasureReportComponent>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The measure score for this stratum, calculated as appropriate for the measure type and "]
    #[doc = " scoring method, and based on only the members of this stratum."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "measureScore")]
    pub measure_score: Option<Quantity>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The populations that make up the stratum, one for each type of population appropriate to "]
    #[doc = " the measure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub population: Option<Vec<MeasureReportPopulation1>>,
    #[doc = " The value for this stratum, expressed as a CodeableConcept. When defining stratifiers on "]
    #[doc = " complex values, the value must be rendered such that the value for each stratum within the "]
    #[doc = " stratifier is unique."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<CodeableConcept>,
}
#[doc = " The Measure resource provides the definition of a quality measure."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Measure_Component")]
#[serde(deny_unknown_fields)]
pub struct MeasureComponent {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Indicates a meaning for the stratifier component. This can be as simple as a unique "]
    #[doc = " identifier, or it can establish meaning in a broader context by drawing from a terminology, "]
    #[doc = " allowing stratifiers to be correlated across measures."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,
    #[doc = " An expression that specifies the criteria for this component of the stratifier. This is "]
    #[doc = " typically the name of an expression defined within a referenced library, but it may also be "]
    #[doc = " a path to a stratifier element."]
    pub criteria: Expression,
    #[doc = " The human readable description of this stratifier criteria component."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " The Measure resource provides the definition of a quality measure."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Measure_Group")]
#[serde(deny_unknown_fields)]
pub struct MeasureGroup {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Indicates a meaning for the group. This can be as simple as a unique identifier, or it can "]
    #[doc = " establish meaning in a broader context by drawing from a terminology, allowing groups to be "]
    #[doc = " correlated across measures."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,
    #[doc = " The human readable description of this population group."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A population criteria for the measure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub population: Option<Vec<MeasurePopulation>>,
    #[doc = " The stratifier criteria for the measure report, specified as either the name of a valid CQL "]
    #[doc = " expression defined within a referenced library or a valid FHIR Resource Path."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub stratifier: Option<Vec<MeasureStratifier>>,
}
#[doc = " The Measure resource provides the definition of a quality measure."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Measure_Population")]
#[serde(deny_unknown_fields)]
pub struct MeasurePopulation {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " The type of population criteria."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,
    #[doc = " An expression that specifies the criteria for the population, typically the name of an "]
    #[doc = " expression in a library."]
    pub criteria: Expression,
    #[doc = " The human readable description of this population criteria."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " The Measure resource provides the definition of a quality measure."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Measure_Stratifier")]
#[serde(deny_unknown_fields)]
pub struct MeasureStratifier {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Indicates a meaning for the stratifier. This can be as simple as a unique identifier, or it "]
    #[doc = " can establish meaning in a broader context by drawing from a terminology, allowing "]
    #[doc = " stratifiers to be correlated across measures."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,
    #[doc = " A component of the stratifier criteria for the measure report, specified as either the name "]
    #[doc = " of a valid CQL expression defined within a referenced library or a valid FHIR Resource "]
    #[doc = " Path."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub component: Option<Vec<MeasureComponent>>,
    #[doc = " An expression that specifies the criteria for the stratifier. This is typically the name of "]
    #[doc = " an expression defined within a referenced library, but it may also be a path to a "]
    #[doc = " stratifier element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub criteria: Option<Expression>,
    #[doc = " The human readable description of this stratifier criteria."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " The Measure resource provides the definition of a quality measure."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Measure_SupplementalData")]
#[serde(deny_unknown_fields)]
pub struct MeasureSupplementalData {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Indicates a meaning for the supplemental data. This can be as simple as a unique "]
    #[doc = " identifier, or it can establish meaning in a broader context by drawing from a terminology, "]
    #[doc = " allowing supplemental data to be correlated across measures."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,
    #[doc = " The criteria for the supplemental data. This is typically the name of a valid expression "]
    #[doc = " defined within a referenced library, but it may also be a path to a specific data element. "]
    #[doc = " The criteria defines the data to be returned for this element."]
    pub criteria: Expression,
    #[doc = " The human readable description of this supplemental data."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " An indicator of the intended usage for the supplemental data element. Supplemental data "]
    #[doc = " indicates the data is additional information requested to augment the measure information. "]
    #[doc = " Risk adjustment factor indicates the data is additional information used to calculate risk "]
    #[doc = " adjustment factors when applying a risk model to the measure calculation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub usage: Option<Vec<CodeableConcept>>,
}
#[doc = " A photo, video, or audio recording acquired or used in healthcare. The actual content may be "]
#[doc = " inline or provided by direct reference."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Media {
    #[doc = " Extensions for createdDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_createdDateTime")]
    pub _created_date_time: Option<Element>,
    #[doc = " Extensions for deviceName"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_deviceName")]
    pub _device_name: Option<Element>,
    #[doc = " Extensions for duration"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _duration: Option<Element>,
    #[doc = " Extensions for frames"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _frames: Option<Element>,
    #[doc = " Extensions for height"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _height: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for issued"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _issued: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for width"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _width: Option<Element>,
    #[doc = " A procedure that is fulfilled in whole or in part by the creation of this media."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Vec<Reference>>,
    #[doc = " Indicates the site on the subject's body where the observation was made (i.e. the target "]
    #[doc = " site)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "bodySite")]
    pub body_site: Option<CodeableConcept>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The actual content of the media - inline or by direct reference to the media source file."]
    pub content: Attachment,
    #[doc = " The date and time(s) at which the media was collected."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<String>,
    #[doc = " The date and time(s) at which the media was collected."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "createdPeriod")]
    pub created_period: Option<Period>,
    #[doc = " The device used to collect the media."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub device: Option<Reference>,
    #[doc = " The name of the device / manufacturer of the device  that was used to make the recording."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "deviceName")]
    pub device_name: Option<String>,
    #[doc = " The duration of the recording in seconds - for audio and video."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub duration: Option<Decimal>,
    #[doc = " The encounter that establishes the context for this media."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The number of frames in a photo. This is used with a multi-page fax, or an imaging "]
    #[doc = " acquisition context that takes multiple slices in a single image, or an animated gif. If "]
    #[doc = " there is more than one frame, this SHALL have a value in order to alert interface software "]
    #[doc = " that a multi-frame capable rendering widget is required."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub frames: Option<PositiveInt>,
    #[doc = " Height of the image in pixels (photo/video)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub height: Option<PositiveInt>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Identifiers associated with the image - these may include identifiers for the image itself, "]
    #[doc = " identifiers for the context of its collection (e.g. series ids) and context ids such as "]
    #[doc = " accession numbers or other workflow identifiers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The date and time this version of the media was made available to providers, typically "]
    #[doc = " after having been reviewed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub issued: Option<Instant>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " Details of the type of the media - usually, how it was acquired (what type of device). If "]
    #[doc = " images sourced from a DICOM system, are wrapped in a Media resource, then this is the "]
    #[doc = " modality."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub modality: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Comments made about the media by the performer, subject or other participants."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " The person who administered the collection of the image."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub operator: Option<Reference>,
    #[doc = " A larger event of which this particular event is a component or step."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "partOf")]
    pub part_of: Option<Vec<Reference>>,
    #[doc = " Describes why the event occurred in coded or textual form."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,
    #[doc = " This is a Media resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The current state of the {{title}}."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " Who/What this Media is a record of."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Reference>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " A code that classifies whether the media is an image, video or audio recording or some "]
    #[doc = " other media category."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
    #[doc = " The name of the imaging view e.g. Lateral or Antero-posterior (AP)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub view: Option<CodeableConcept>,
    #[doc = " Width of the image in pixels (photo/video)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub width: Option<PositiveInt>,
}
#[doc = " This resource is primarily used for the identification and definition of a medication for the "]
#[doc = " purposes of prescribing, dispensing, and administering a medication as well as for making "]
#[doc = " statements about medication use."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Medication {
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Specific amount of the drug in the packaged product.  For example, when specifying a "]
    #[doc = " product that has the same strength (For example, Insulin glargine 100 unit per mL solution "]
    #[doc = " for injection), this attribute provides additional clarification of the package amount (For "]
    #[doc = " example, 3 mL, 10mL, etc.)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub amount: Option<Ratio>,
    #[doc = " Information that only applies to packages (not products)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub batch: Option<MedicationBatch>,
    #[doc = " A code (or set of codes) that specify this medication, or a textual description if no code "]
    #[doc = " is available. Usage note: This could be a standard medication code such as a code from "]
    #[doc = " RxNorm, SNOMED CT, IDMP etc. It could also be a national or local formulary code, "]
    #[doc = " optionally with translations to other code systems."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Describes the form of the item.  Powder; tablets; capsule."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub form: Option<CodeableConcept>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Business identifier for this medication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " Identifies a particular constituent of interest in the product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub ingredient: Option<Vec<MedicationIngredient>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " Describes the details of the manufacturer of the medication product.  This is not intended "]
    #[doc = " to represent the distributor of a medication product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub manufacturer: Option<Reference>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " This is a Medication resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " A code to indicate if the medication is in active use."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " Describes the event of a patient consuming or otherwise being administered a medication.  This "]
#[doc = " may be as simple as swallowing a tablet or it may be a long running infusion.  Related "]
#[doc = " resources tie this event to the authorizing prescription, and the specific encounter between "]
#[doc = " patient and health care practitioner."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct MedicationAdministration {
    #[doc = " Extensions for effectiveDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_effectiveDateTime")]
    pub _effective_date_time: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for instantiates"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _instantiates: Option<Vec<Element>>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Indicates where the medication is expected to be consumed or administered."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<CodeableConcept>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The visit, admission, or other contact between patient and health care provider during "]
    #[doc = " which the medication administration was performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub context: Option<Reference>,
    #[doc = " The device used in administering the medication to the patient.  For example, a particular "]
    #[doc = " infusion pump."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub device: Option<Vec<Reference>>,
    #[doc = " Describes the medication dosage information details e.g. dose, rate, site, route, etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub dosage: Option<MedicationAdministrationDosage>,
    #[doc = " A specific date/time or interval of time during which the administration took place (or did "]
    #[doc = " not take place, when the 'notGiven' attribute is true). For many administrations, such as "]
    #[doc = " swallowing a tablet the use of dateTime is more appropriate."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectiveDateTime")]
    pub effective_date_time: Option<String>,
    #[doc = " A specific date/time or interval of time during which the administration took place (or did "]
    #[doc = " not take place, when the 'notGiven' attribute is true). For many administrations, such as "]
    #[doc = " swallowing a tablet the use of dateTime is more appropriate."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectivePeriod")]
    pub effective_period: Option<Period>,
    #[doc = " A summary of the events of interest that have occurred, such as when the administration was "]
    #[doc = " verified."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "eventHistory")]
    pub event_history: Option<Vec<Reference>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Identifiers associated with this Medication Administration that are defined by business "]
    #[doc = " processes and/or used to refer to it when a direct URL reference to the resource itself is "]
    #[doc = " not appropriate. They are business identifiers assigned to this resource by the performer "]
    #[doc = " or other systems and remain constant as the resource is updated and propagates from server "]
    #[doc = " to server."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " A protocol, guideline, orderset, or other definition that was adhered to in whole or in "]
    #[doc = " part by this event."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub instantiates: Option<Vec<Uri>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " Identifies the medication that was administered. This is either a link to a resource "]
    #[doc = " representing the details of the medication or a simple attribute carrying a code that "]
    #[doc = " identifies the medication from a known list of medications."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "medicationCodeableConcept")]
    pub medication_codeable_concept: Option<CodeableConcept>,
    #[doc = " Identifies the medication that was administered. This is either a link to a resource "]
    #[doc = " representing the details of the medication or a simple attribute carrying a code that "]
    #[doc = " identifies the medication from a known list of medications."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "medicationReference")]
    pub medication_reference: Option<Reference>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Extra information about the medication administration that is not conveyed by the other "]
    #[doc = " attributes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " A larger event of which this particular event is a component or step."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "partOf")]
    pub part_of: Option<Vec<Reference>>,
    #[doc = " Indicates who or what performed the medication administration and how they were involved."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub performer: Option<Vec<MedicationAdministrationPerformer>>,
    #[doc = " A code indicating why the medication was given."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,
    #[doc = " Condition or observation that supports why the medication was administered."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,
    #[doc = " The original request, instruction or authority to perform the administration."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub request: Option<Reference>,
    #[doc = " This is a MedicationAdministration resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " Will generally be set to show that the administration has been completed.  For some long "]
    #[doc = " running administrations such as infusions, it is possible for an administration to be "]
    #[doc = " started but not completed or it may be paused while some other process is under way."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A code indicating why the administration was not performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusReason")]
    pub status_reason: Option<Vec<CodeableConcept>>,
    #[doc = " The person or animal or group receiving the medication."]
    pub subject: Reference,
    #[doc = " Additional information (for example, patient height and weight) that supports the "]
    #[doc = " administration of the medication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportingInformation")]
    pub supporting_information: Option<Vec<Reference>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " Describes the event of a patient consuming or otherwise being administered a medication.  This "]
#[doc = " may be as simple as swallowing a tablet or it may be a long running infusion.  Related "]
#[doc = " resources tie this event to the authorizing prescription, and the specific encounter between "]
#[doc = " patient and health care practitioner."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MedicationAdministration_Dosage")]
#[serde(deny_unknown_fields)]
pub struct MedicationAdministrationDosage {
    #[doc = " Extensions for text"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _text: Option<Element>,
    #[doc = " The amount of the medication given at one administration event.   Use this value when the "]
    #[doc = " administration is essentially an instantaneous event such as a swallowing a tablet or "]
    #[doc = " giving an injection."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub dose: Option<Quantity>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A coded value indicating the method by which the medication is intended to be or was "]
    #[doc = " introduced into or on the body.  This attribute will most often NOT be populated.  It is "]
    #[doc = " most commonly used for injections.  For example, Slow Push, Deep IV."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub method: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Identifies the speed with which the medication was or will be introduced into the patient.  "]
    #[doc = " Typically, the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be "]
    #[doc = " expressed as a rate per unit of time, e.g. 500 ml per 2 hours.  Other examples:  200 "]
    #[doc = " mcg/min or 200 mcg/1 minute; 1 liter/8 hours."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "rateQuantity")]
    pub rate_quantity: Option<Quantity>,
    #[doc = " Identifies the speed with which the medication was or will be introduced into the patient.  "]
    #[doc = " Typically, the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be "]
    #[doc = " expressed as a rate per unit of time, e.g. 500 ml per 2 hours.  Other examples:  200 "]
    #[doc = " mcg/min or 200 mcg/1 minute; 1 liter/8 hours."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "rateRatio")]
    pub rate_ratio: Option<Ratio>,
    #[doc = " A code specifying the route or physiological path of administration of a therapeutic agent "]
    #[doc = " into or onto the patient.  For example, topical, intravenous, etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub route: Option<CodeableConcept>,
    #[doc = " A coded specification of the anatomic site where the medication first entered the body.  "]
    #[doc = " For example, \"left arm\"."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub site: Option<CodeableConcept>,
    #[doc = " Free text dosage can be used for cases where the dosage administered is too complex to "]
    #[doc = " code. When coded dosage is present, the free text dosage may still be present for display "]
    #[doc = " to humans.  The dosage instructions should reflect the dosage of the medication that was "]
    #[doc = " administered."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}
#[doc = " Describes the event of a patient consuming or otherwise being administered a medication.  This "]
#[doc = " may be as simple as swallowing a tablet or it may be a long running infusion.  Related "]
#[doc = " resources tie this event to the authorizing prescription, and the specific encounter between "]
#[doc = " patient and health care practitioner."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "MedicationAdministration_Performer")]
#[serde(deny_unknown_fields)]
pub struct MedicationAdministrationPerformer {
    #[doc = " Indicates who or what performed the medication administration."]
    pub actor: Reference,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Distinguishes the type of involvement of the performer in the medication administration."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub function: Option<CodeableConcept>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " Indicates that a medication product is to be or has been dispensed for a named person/patient.  "]
#[doc = " This includes a description of the medication product (supply) provided and the instructions "]
#[doc = " for administering the medication.  The medication dispense is the result of a pharmacy system "]
#[doc = " responding to a medication order."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct MedicationDispense {
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for whenHandedOver"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_whenHandedOver")]
    pub _when_handed_over: Option<Element>,
    #[doc = " Extensions for whenPrepared"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_whenPrepared")]
    pub _when_prepared: Option<Element>,
    #[doc = " Indicates the medication order that is being dispensed against."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "authorizingPrescription")]
    pub authorizing_prescription: Option<Vec<Reference>>,
    #[doc = " Indicates the type of medication dispense (for example, where the medication is expected to "]
    #[doc = " be consumed or administered (i.e. inpatient or outpatient))."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<CodeableConcept>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The encounter or episode of care that establishes the context for this event."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub context: Option<Reference>,
    #[doc = " The amount of medication expressed as a timing amount."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "daysSupply")]
    pub days_supply: Option<Quantity>,
    #[doc = " Identification of the facility/location where the medication was shipped to, as part of the "]
    #[doc = " dispense event."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub destination: Option<Reference>,
    #[doc = " Indicates an actual or potential clinical issue with or between one or more active or "]
    #[doc = " proposed clinical actions for a patient; e.g. drug-drug interaction, duplicate therapy, "]
    #[doc = " dosage alert etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "detectedIssue")]
    pub detected_issue: Option<Vec<Reference>>,
    #[doc = " Indicates how the medication is to be used by the patient."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dosageInstruction")]
    pub dosage_instruction: Option<Vec<Dosage>>,
    #[doc = " A summary of the events of interest that have occurred, such as when the dispense was "]
    #[doc = " verified."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "eventHistory")]
    pub event_history: Option<Vec<Reference>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Identifiers associated with this Medication Dispense that are defined by business processes "]
    #[doc = " and/or used to refer to it when a direct URL reference to the resource itself is not "]
    #[doc = " appropriate. They are business identifiers assigned to this resource by the performer or "]
    #[doc = " other systems and remain constant as the resource is updated and propagates from server to "]
    #[doc = " server."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The principal physical location where the dispense was performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<Reference>,
    #[doc = " Identifies the medication being administered. This is either a link to a resource "]
    #[doc = " representing the details of the medication or a simple attribute carrying a code that "]
    #[doc = " identifies the medication from a known list of medications."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "medicationCodeableConcept")]
    pub medication_codeable_concept: Option<CodeableConcept>,
    #[doc = " Identifies the medication being administered. This is either a link to a resource "]
    #[doc = " representing the details of the medication or a simple attribute carrying a code that "]
    #[doc = " identifies the medication from a known list of medications."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "medicationReference")]
    pub medication_reference: Option<Reference>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Extra information about the dispense that could not be conveyed in the other attributes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " The procedure that trigger the dispense."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "partOf")]
    pub part_of: Option<Vec<Reference>>,
    #[doc = " Indicates who or what performed the event."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub performer: Option<Vec<MedicationDispensePerformer>>,
    #[doc = " The amount of medication that has been dispensed. Includes unit of measure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,
    #[doc = " Identifies the person who picked up the medication.  This will usually be a patient or "]
    #[doc = " their caregiver, but some cases exist where it can be a healthcare professional."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub receiver: Option<Vec<Reference>>,
    #[doc = " This is a MedicationDispense resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " A code specifying the state of the set of dispense events."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " Indicates the reason why a dispense was not performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusReasonCodeableConcept")]
    pub status_reason_codeable_concept: Option<CodeableConcept>,
    #[doc = " Indicates the reason why a dispense was not performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusReasonReference")]
    pub status_reason_reference: Option<Reference>,
    #[doc = " A link to a resource representing the person or the group to whom the medication will be "]
    #[doc = " given."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Reference>,
    #[doc = " Indicates whether or not substitution was made as part of the dispense.  In some cases, "]
    #[doc = " substitution will be expected but does not happen, in other cases substitution is not "]
    #[doc = " expected but does happen.  This block explains what substitution did or did not happen and "]
    #[doc = " why.  If nothing is specified, substitution was not done."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub substitution: Option<MedicationDispenseSubstitution>,
    #[doc = " Additional information that supports the medication being dispensed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportingInformation")]
    pub supporting_information: Option<Vec<Reference>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " Indicates the type of dispensing event that is performed. For example, Trial Fill, "]
    #[doc = " Completion of Trial, Partial Fill, Emergency Fill, Samples, etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
    #[doc = " The time the dispensed product was provided to the patient or their representative."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "whenHandedOver")]
    pub when_handed_over: Option<DateTime>,
    #[doc = " The time when the dispensed product was packaged and reviewed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "whenPrepared")]
    pub when_prepared: Option<DateTime>,
}
#[doc = " Indicates that a medication product is to be or has been dispensed for a named person/patient.  "]
#[doc = " This includes a description of the medication product (supply) provided and the instructions "]
#[doc = " for administering the medication.  The medication dispense is the result of a pharmacy system "]
#[doc = " responding to a medication order."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "MedicationDispense_Performer")]
#[serde(deny_unknown_fields)]
pub struct MedicationDispensePerformer {
    #[doc = " The device, practitioner, etc. who performed the action.  It should be assumed that the "]
    #[doc = " actor is the dispenser of the medication."]
    pub actor: Reference,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Distinguishes the type of performer in the dispense.  For example, date enterer, packager, "]
    #[doc = " final checker."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub function: Option<CodeableConcept>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " Indicates that a medication product is to be or has been dispensed for a named person/patient.  "]
#[doc = " This includes a description of the medication product (supply) provided and the instructions "]
#[doc = " for administering the medication.  The medication dispense is the result of a pharmacy system "]
#[doc = " responding to a medication order."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MedicationDispense_Substitution")]
#[serde(deny_unknown_fields)]
pub struct MedicationDispenseSubstitution {
    #[doc = " Extensions for wasSubstituted"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_wasSubstituted")]
    pub _was_substituted: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Indicates the reason for the substitution (or lack of substitution) from what was "]
    #[doc = " prescribed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reason: Option<Vec<CodeableConcept>>,
    #[doc = " The person or organization that has primary responsibility for the substitution."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "responsibleParty")]
    pub responsible_party: Option<Vec<Reference>>,
    #[doc = " A code signifying whether a different drug was dispensed from what was prescribed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
    #[doc = " True if the dispenser dispensed a different drug or product from what was prescribed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "wasSubstituted")]
    pub was_substituted: Option<Boolean>,
}
#[doc = " Information about a medication that is used to support knowledge."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct MedicationKnowledge {
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for preparationInstruction"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_preparationInstruction")]
    pub _preparation_instruction: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for synonym"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _synonym: Option<Vec<Element>>,
    #[doc = " Guidelines for the administration of the medication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "administrationGuidelines")]
    pub administration_guidelines: Option<Vec<MedicationKnowledgeAdministrationGuidelines>>,
    #[doc = " Specific amount of the drug in the packaged product.  For example, when specifying a "]
    #[doc = " product that has the same strength (For example, Insulin glargine 100 unit per mL solution "]
    #[doc = " for injection), this attribute provides additional clarification of the package amount (For "]
    #[doc = " example, 3 mL, 10mL, etc.)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub amount: Option<Quantity>,
    #[doc = " Associated or related medications.  For example, if the medication is a branded product "]
    #[doc = " (e.g. Crestor), this is the Therapeutic Moeity (e.g. Rosuvastatin) or if this is a generic "]
    #[doc = " medication (e.g. Rosuvastatin), this would link to a branded product (e.g. Crestor)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "associatedMedication")]
    pub associated_medication: Option<Vec<Reference>>,
    #[doc = " A code that specifies this medication, or a textual description if no code is available. "]
    #[doc = " Usage note: This could be a standard medication code such as a code from RxNorm, SNOMED CT, "]
    #[doc = " IDMP etc. It could also be a national or local formulary code, optionally with translations "]
    #[doc = " to other code systems."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " Potential clinical issue with or between medication(s) (for example, drug-drug interaction, "]
    #[doc = " drug-disease contraindication, drug-allergy interaction, etc.)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contraindication: Option<Vec<Reference>>,
    #[doc = " The price of the medication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub cost: Option<Vec<MedicationKnowledgeCost>>,
    #[doc = " Describes the form of the item.  Powder; tablets; capsule."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "doseForm")]
    pub dose_form: Option<CodeableConcept>,
    #[doc = " Specifies descriptive properties of the medicine, such as color, shape, imprints, etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "drugCharacteristic")]
    pub drug_characteristic: Option<Vec<MedicationKnowledgeDrugCharacteristic>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " Identifies a particular constituent of interest in the product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub ingredient: Option<Vec<MedicationKnowledgeIngredient>>,
    #[doc = " The intended or approved route of administration."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "intendedRoute")]
    pub intended_route: Option<Vec<CodeableConcept>>,
    #[doc = " The time course of drug absorption, distribution, metabolism and excretion of a medication "]
    #[doc = " from the body."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kinetics: Option<Vec<MedicationKnowledgeKinetics>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " Describes the details of the manufacturer of the medication product.  This is not intended "]
    #[doc = " to represent the distributor of a medication product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub manufacturer: Option<Reference>,
    #[doc = " Categorization of the medication within a formulary or classification system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "medicineClassification")]
    pub medicine_classification: Option<Vec<MedicationKnowledgeMedicineClassification>>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The program under which the medication is reviewed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "monitoringProgram")]
    pub monitoring_program: Option<Vec<MedicationKnowledgeMonitoringProgram>>,
    #[doc = " Associated documentation about the medication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub monograph: Option<Vec<MedicationKnowledgeMonograph>>,
    #[doc = " Information that only applies to packages (not products)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub packaging: Option<MedicationKnowledgePackaging>,
    #[doc = " The instructions for preparing the medication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "preparationInstruction")]
    pub preparation_instruction: Option<Markdown>,
    #[doc = " Category of the medication or product (e.g. branded product, therapeutic moeity, generic "]
    #[doc = " product, innovator product, etc.)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "productType")]
    pub product_type: Option<Vec<CodeableConcept>>,
    #[doc = " Regulatory information about a medication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub regulatory: Option<Vec<MedicationKnowledgeRegulatory>>,
    #[doc = " Associated or related knowledge about a medication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatedMedicationKnowledge")]
    pub related_medication_knowledge: Option<Vec<MedicationKnowledgeRelatedMedicationKnowledge>>,
    #[doc = " This is a MedicationKnowledge resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " A code to indicate if the medication is in active use.  The status refers to the validity "]
    #[doc = " about the information of the medication and not to its medicinal properties."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " Additional names for a medication, for example, the name(s) given to a medication in "]
    #[doc = " different countries.  For example, acetaminophen and paracetamol or salbutamol and "]
    #[doc = " albuterol."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub synonym: Option<Vec<String>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " Information about a medication that is used to support knowledge."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MedicationKnowledge_AdministrationGuidelines")]
#[serde(deny_unknown_fields)]
pub struct MedicationKnowledgeAdministrationGuidelines {
    #[doc = " Dosage for the medication for the specific guidelines."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub dosage: Option<Vec<MedicationKnowledgeDosage>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Indication for use that apply to the specific administration guidelines."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "indicationCodeableConcept")]
    pub indication_codeable_concept: Option<CodeableConcept>,
    #[doc = " Indication for use that apply to the specific administration guidelines."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "indicationReference")]
    pub indication_reference: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Characteristics of the patient that are relevant to the administration guidelines (for "]
    #[doc = " example, height, weight, gender, etc.)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patientCharacteristics")]
    pub patient_characteristics: Option<Vec<MedicationKnowledgePatientCharacteristics>>,
}
#[doc = " Information about a medication that is used to support knowledge."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "MedicationKnowledge_Cost")]
#[serde(deny_unknown_fields)]
pub struct MedicationKnowledgeCost {
    #[doc = " Extensions for source"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _source: Option<Element>,
    #[doc = " The price of the medication."]
    pub cost: Money,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The source or owner that assigns the price to the medication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
    #[doc = " The category of the cost information.  For example, manufacturers' cost, patient cost, "]
    #[doc = " claim reimbursement cost, actual acquisition cost."]
    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}
#[doc = " Information about a medication that is used to support knowledge."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "MedicationKnowledge_Dosage")]
#[serde(deny_unknown_fields)]
pub struct MedicationKnowledgeDosage {
    #[doc = " Dosage for the medication for the specific guidelines."]
    pub dosage: Vec<Dosage>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The type of dosage (for example, prophylaxis, maintenance, therapeutic, etc.)."]
    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}
#[doc = " Information about a medication that is used to support knowledge."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MedicationKnowledge_DrugCharacteristic")]
#[serde(deny_unknown_fields)]
pub struct MedicationKnowledgeDrugCharacteristic {
    #[doc = " Extensions for valueBase64Binary"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBase64Binary")]
    pub _value_base_64_binary: Option<Element>,
    #[doc = " Extensions for valueString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueString")]
    pub _value_string: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A code specifying which characteristic of the medicine is being described (for example, "]
    #[doc = " colour, shape, imprint)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
    #[doc = " Description of the characteristic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBase64Binary")]
    pub value_base_64_binary: Option<String>,
    #[doc = " Description of the characteristic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,
    #[doc = " Description of the characteristic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,
    #[doc = " Description of the characteristic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueString")]
    pub value_string: Option<String>,
}
#[doc = " Information about a medication that is used to support knowledge."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MedicationKnowledge_Ingredient")]
#[serde(deny_unknown_fields)]
pub struct MedicationKnowledgeIngredient {
    #[doc = " Extensions for isActive"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_isActive")]
    pub _is_active: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Indication of whether this ingredient affects the therapeutic action of the drug."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "isActive")]
    pub is_active: Option<Boolean>,
    #[doc = " The actual ingredient - either a substance (simple ingredient) or another medication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "itemCodeableConcept")]
    pub item_codeable_concept: Option<CodeableConcept>,
    #[doc = " The actual ingredient - either a substance (simple ingredient) or another medication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "itemReference")]
    pub item_reference: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Specifies how many (or how much) of the items there are in this Medication.  For example, "]
    #[doc = " 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the "]
    #[doc = " denominator is 1 tablet."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub strength: Option<Ratio>,
}
#[doc = " Information about a medication that is used to support knowledge."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MedicationKnowledge_Kinetics")]
#[serde(deny_unknown_fields)]
pub struct MedicationKnowledgeKinetics {
    #[doc = " The drug concentration measured at certain discrete points in time."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "areaUnderCurve")]
    pub area_under_curve: Option<Vec<Quantity>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The time required for any specified property (e.g., the concentration of a substance in the "]
    #[doc = " body) to decrease by half."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "halfLifePeriod")]
    pub half_life_period: Option<Duration>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The median lethal dose of a drug."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lethalDose50")]
    pub lethal_dose_50: Option<Vec<Quantity>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " Information about a medication that is used to support knowledge."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "MedicationKnowledge_MaxDispense")]
#[serde(deny_unknown_fields)]
pub struct MedicationKnowledgeMaxDispense {
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The period that applies to the maximum number of units."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Duration>,
    #[doc = " The maximum number of units of the medication that can be dispensed."]
    pub quantity: Quantity,
}
#[doc = " Information about a medication that is used to support knowledge."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "MedicationKnowledge_MedicineClassification")]
#[serde(deny_unknown_fields)]
pub struct MedicationKnowledgeMedicineClassification {
    #[doc = " Specific category assigned to the medication (e.g. anti-infective, anti-hypertensive, "]
    #[doc = " antibiotic, etc.)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub classification: Option<Vec<CodeableConcept>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The type of category for the medication (for example, therapeutic classification, "]
    #[doc = " therapeutic sub-classification)."]
    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}
#[doc = " Information about a medication that is used to support knowledge."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MedicationKnowledge_MonitoringProgram")]
#[serde(deny_unknown_fields)]
pub struct MedicationKnowledgeMonitoringProgram {
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Name of the reviewing program."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " Type of program under which the medication is monitored."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " Information about a medication that is used to support knowledge."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MedicationKnowledge_Monograph")]
#[serde(deny_unknown_fields)]
pub struct MedicationKnowledgeMonograph {
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Associated documentation about the medication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub source: Option<Reference>,
    #[doc = " The category of documentation about the medication. (e.g. professional monograph, patient "]
    #[doc = " education monograph)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " Information about a medication that is used to support knowledge."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MedicationKnowledge_Packaging")]
#[serde(deny_unknown_fields)]
pub struct MedicationKnowledgePackaging {
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The number of product units the package would contain if fully loaded."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,
    #[doc = " A code that defines the specific type of packaging that the medication can be found in "]
    #[doc = " (e.g. blister sleeve, tube, bottle)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " Information about a medication that is used to support knowledge."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MedicationKnowledge_PatientCharacteristics")]
#[serde(deny_unknown_fields)]
pub struct MedicationKnowledgePatientCharacteristics {
    #[doc = " Extensions for value"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _value: Option<Vec<Element>>,
    #[doc = " Specific characteristic that is relevant to the administration guideline (e.g. height, "]
    #[doc = " weight, gender)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "characteristicCodeableConcept")]
    pub characteristic_codeable_concept: Option<CodeableConcept>,
    #[doc = " Specific characteristic that is relevant to the administration guideline (e.g. height, "]
    #[doc = " weight, gender)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "characteristicQuantity")]
    pub characteristic_quantity: Option<Quantity>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The specific characteristic (e.g. height, weight, gender, etc.)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Vec<String>>,
}
#[doc = " Information about a medication that is used to support knowledge."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "MedicationKnowledge_Regulatory")]
#[serde(deny_unknown_fields)]
pub struct MedicationKnowledgeRegulatory {
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The maximum number of units of the medication that can be dispensed in a period."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxDispense")]
    pub max_dispense: Option<MedicationKnowledgeMaxDispense>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The authority that is specifying the regulations."]
    #[serde(rename = "regulatoryAuthority")]
    pub regulatory_authority: Reference,
    #[doc = " Specifies the schedule of a medication in jurisdiction."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub schedule: Option<Vec<MedicationKnowledgeSchedule>>,
    #[doc = " Specifies if changes are allowed when dispensing a medication from a regulatory "]
    #[doc = " perspective."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub substitution: Option<Vec<MedicationKnowledgeSubstitution>>,
}
#[doc = " Information about a medication that is used to support knowledge."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "MedicationKnowledge_RelatedMedicationKnowledge")]
#[serde(deny_unknown_fields)]
pub struct MedicationKnowledgeRelatedMedicationKnowledge {
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Associated documentation about the associated medication knowledge."]
    pub reference: Vec<Reference>,
    #[doc = " The category of the associated medication knowledge reference."]
    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}
#[doc = " Information about a medication that is used to support knowledge."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "MedicationKnowledge_Schedule")]
#[serde(deny_unknown_fields)]
pub struct MedicationKnowledgeSchedule {
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Specifies the specific drug schedule."]
    pub schedule: CodeableConcept,
}
#[doc = " Information about a medication that is used to support knowledge."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "MedicationKnowledge_Substitution")]
#[serde(deny_unknown_fields)]
pub struct MedicationKnowledgeSubstitution {
    #[doc = " Extensions for allowed"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _allowed: Option<Element>,
    #[doc = " Specifies if regulation allows for changes in the medication when dispensing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub allowed: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Specifies the type of substitution allowed."]
    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}
#[doc = " An order or request for both supply of the medication and the instructions for administration "]
#[doc = " of the medication to a patient. The resource is called \"MedicationRequest\" rather than "]
#[doc = " \"MedicationPrescription\" or \"MedicationOrder\" to generalize the use across inpatient and "]
#[doc = " outpatient settings, including care plans, etc., and to harmonize with workflow patterns."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct MedicationRequest {
    #[doc = " Extensions for authoredOn"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_authoredOn")]
    pub _authored_on: Option<Element>,
    #[doc = " Extensions for doNotPerform"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_doNotPerform")]
    pub _do_not_perform: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for instantiatesCanonical"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_instantiatesCanonical")]
    pub _instantiates_canonical: Option<Vec<Element>>,
    #[doc = " Extensions for instantiatesUri"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_instantiatesUri")]
    pub _instantiates_uri: Option<Vec<Element>>,
    #[doc = " Extensions for intent"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _intent: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for priority"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _priority: Option<Element>,
    #[doc = " Extensions for reportedBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_reportedBoolean")]
    pub _reported_boolean: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " The date (and perhaps time) when the prescription was initially written or authored on."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "authoredOn")]
    pub authored_on: Option<DateTime>,
    #[doc = " A plan or request that is fulfilled in whole or in part by this medication request."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Vec<Reference>>,
    #[doc = " Indicates the type of medication request (for example, where the medication is expected to "]
    #[doc = " be consumed or administered (i.e. inpatient or outpatient))."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The description of the overall patte3rn of the administration of the medication to the "]
    #[doc = " patient."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "courseOfTherapyType")]
    pub course_of_therapy_type: Option<CodeableConcept>,
    #[doc = " Indicates an actual or potential clinical issue with or between one or more active or "]
    #[doc = " proposed clinical actions for a patient; e.g. Drug-drug interaction, duplicate therapy, "]
    #[doc = " dosage alert etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "detectedIssue")]
    pub detected_issue: Option<Vec<Reference>>,
    #[doc = " Indicates the specific details for the dispense or medication supply part of a medication "]
    #[doc = " request (also known as a Medication Prescription or Medication Order).  Note that this "]
    #[doc = " information is not always sent with the order.  There may be in some settings (e.g. "]
    #[doc = " hospitals) institutional or system support for completing the dispense details in the "]
    #[doc = " pharmacy department."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dispenseRequest")]
    pub dispense_request: Option<MedicationRequestDispenseRequest>,
    #[doc = " If true indicates that the provider is asking for the medication request not to occur."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "doNotPerform")]
    pub do_not_perform: Option<Boolean>,
    #[doc = " Indicates how the medication is to be used by the patient."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dosageInstruction")]
    pub dosage_instruction: Option<Vec<Dosage>>,
    #[doc = " The Encounter during which this [x] was created or to which the creation of this record is "]
    #[doc = " tightly associated."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,
    #[doc = " Links to Provenance records for past versions of this resource or fulfilling request or "]
    #[doc = " event resources that identify key state transitions or updates that are likely to be "]
    #[doc = " relevant to a user looking at the current version of the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "eventHistory")]
    pub event_history: Option<Vec<Reference>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " A shared identifier common to all requests that were authorized more or less simultaneously "]
    #[doc = " by a single author, representing the identifier of the requisition or prescription."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "groupIdentifier")]
    pub group_identifier: Option<Identifier>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Identifiers associated with this medication request that are defined by business processes "]
    #[doc = " and/or used to refer to it when a direct URL reference to the resource itself is not "]
    #[doc = " appropriate. They are business identifiers assigned to this resource by the performer or "]
    #[doc = " other systems and remain constant as the resource is updated and propagates from server to "]
    #[doc = " server."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The URL pointing to a protocol, guideline, orderset, or other definition that is adhered to "]
    #[doc = " in whole or in part by this MedicationRequest."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesCanonical")]
    pub instantiates_canonical: Option<Vec<Canonical>>,
    #[doc = " The URL pointing to an externally maintained protocol, guideline, orderset or other "]
    #[doc = " definition that is adhered to in whole or in part by this MedicationRequest."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesUri")]
    pub instantiates_uri: Option<Vec<Uri>>,
    #[doc = " Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may "]
    #[doc = " be required for delivering the requested service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub insurance: Option<Vec<Reference>>,
    #[doc = " Whether the request is a proposal, plan, or an original order."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub intent: Option<Code>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " Identifies the medication being requested. This is a link to a resource that represents the "]
    #[doc = " medication which may be the details of the medication or simply an attribute carrying a "]
    #[doc = " code that identifies the medication from a known list of medications."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "medicationCodeableConcept")]
    pub medication_codeable_concept: Option<CodeableConcept>,
    #[doc = " Identifies the medication being requested. This is a link to a resource that represents the "]
    #[doc = " medication which may be the details of the medication or simply an attribute carrying a "]
    #[doc = " code that identifies the medication from a known list of medications."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "medicationReference")]
    pub medication_reference: Option<Reference>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Extra information about the prescription that could not be conveyed by the other "]
    #[doc = " attributes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " The specified desired performer of the medication treatment (e.g. the performer of the "]
    #[doc = " medication administration)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub performer: Option<Reference>,
    #[doc = " Indicates the type of performer of the administration of the medication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "performerType")]
    pub performer_type: Option<CodeableConcept>,
    #[doc = " A link to a resource representing an earlier order related order or prescription."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "priorPrescription")]
    pub prior_prescription: Option<Reference>,
    #[doc = " Indicates how quickly the Medication Request should be addressed with respect to other "]
    #[doc = " requests."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub priority: Option<Code>,
    #[doc = " The reason or the indication for ordering or not ordering the medication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,
    #[doc = " Condition or observation that supports why the medication was ordered."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,
    #[doc = " The person who entered the order on behalf of another individual for example in the case of "]
    #[doc = " a verbal or a telephone order."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub recorder: Option<Reference>,
    #[doc = " Indicates if this record was captured as a secondary 'reported' record rather than as an "]
    #[doc = " original primary source-of-truth record.  It may also indicate the source of the report."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reportedBoolean")]
    pub reported_boolean: Option<bool>,
    #[doc = " Indicates if this record was captured as a secondary 'reported' record rather than as an "]
    #[doc = " original primary source-of-truth record.  It may also indicate the source of the report."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reportedReference")]
    pub reported_reference: Option<Reference>,
    #[doc = " The individual, organization, or device that initiated the request and has responsibility "]
    #[doc = " for its activation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub requester: Option<Reference>,
    #[doc = " This is a MedicationRequest resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " A code specifying the current state of the order.  Generally, this will be active or "]
    #[doc = " completed state."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " Captures the reason for the current state of the MedicationRequest."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusReason")]
    pub status_reason: Option<CodeableConcept>,
    #[doc = " A link to a resource representing the person or set of individuals to whom the medication "]
    #[doc = " will be given."]
    pub subject: Reference,
    #[doc = " Indicates whether or not substitution can or should be part of the dispense. In some cases, "]
    #[doc = " substitution must happen, in other cases substitution must not happen. This block explains "]
    #[doc = " the prescriber's intent. If nothing is specified substitution may be done."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub substitution: Option<MedicationRequestSubstitution>,
    #[doc = " Include additional information (for example, patient height and weight) that supports the "]
    #[doc = " ordering of the medication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportingInformation")]
    pub supporting_information: Option<Vec<Reference>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " An order or request for both supply of the medication and the instructions for administration "]
#[doc = " of the medication to a patient. The resource is called \"MedicationRequest\" rather than "]
#[doc = " \"MedicationPrescription\" or \"MedicationOrder\" to generalize the use across inpatient and "]
#[doc = " outpatient settings, including care plans, etc., and to harmonize with workflow patterns."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MedicationRequest_DispenseRequest")]
#[serde(deny_unknown_fields)]
pub struct MedicationRequestDispenseRequest {
    #[doc = " Extensions for numberOfRepeatsAllowed"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_numberOfRepeatsAllowed")]
    pub _number_of_repeats_allowed: Option<Element>,
    #[doc = " The minimum period of time that must occur between dispenses of the medication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dispenseInterval")]
    pub dispense_interval: Option<Duration>,
    #[doc = " Identifies the period time over which the supplied product is expected to be used, or the "]
    #[doc = " length of time the dispense is expected to last."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "expectedSupplyDuration")]
    pub expected_supply_duration: Option<Duration>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Indicates the quantity or duration for the first dispense of the medication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "initialFill")]
    pub initial_fill: Option<MedicationRequestInitialFill>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " An integer indicating the number of times, in addition to the original dispense, (aka "]
    #[doc = " refills or repeats) that the patient can receive the prescribed medication. Usage Notes: "]
    #[doc = " This integer does not include the original order dispense. This means that if an order "]
    #[doc = " indicates dispense 30 tablets plus \"3 repeats\", then the order can be dispensed a total of "]
    #[doc = " 4 times and the patient can receive a total of 120 tablets.  A prescriber may explicitly "]
    #[doc = " say that zero refills are permitted after the initial dispense."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "numberOfRepeatsAllowed")]
    pub number_of_repeats_allowed: Option<UnsignedInt>,
    #[doc = " Indicates the intended dispensing Organization specified by the prescriber."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub performer: Option<Reference>,
    #[doc = " The amount that is to be dispensed for one fill."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,
    #[doc = " This indicates the validity period of a prescription (stale dating the Prescription)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "validityPeriod")]
    pub validity_period: Option<Period>,
}
#[doc = " An order or request for both supply of the medication and the instructions for administration "]
#[doc = " of the medication to a patient. The resource is called \"MedicationRequest\" rather than "]
#[doc = " \"MedicationPrescription\" or \"MedicationOrder\" to generalize the use across inpatient and "]
#[doc = " outpatient settings, including care plans, etc., and to harmonize with workflow patterns."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MedicationRequest_InitialFill")]
#[serde(deny_unknown_fields)]
pub struct MedicationRequestInitialFill {
    #[doc = " The length of time that the first dispense is expected to last."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub duration: Option<Duration>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The amount or quantity to provide as part of the first dispense."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,
}
#[doc = " An order or request for both supply of the medication and the instructions for administration "]
#[doc = " of the medication to a patient. The resource is called \"MedicationRequest\" rather than "]
#[doc = " \"MedicationPrescription\" or \"MedicationOrder\" to generalize the use across inpatient and "]
#[doc = " outpatient settings, including care plans, etc., and to harmonize with workflow patterns."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MedicationRequest_Substitution")]
#[serde(deny_unknown_fields)]
pub struct MedicationRequestSubstitution {
    #[doc = " Extensions for allowedBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_allowedBoolean")]
    pub _allowed_boolean: Option<Element>,
    #[doc = " True if the prescriber allows a different drug to be dispensed from what was prescribed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "allowedBoolean")]
    pub allowed_boolean: Option<bool>,
    #[doc = " True if the prescriber allows a different drug to be dispensed from what was prescribed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "allowedCodeableConcept")]
    pub allowed_codeable_concept: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Indicates the reason for the substitution, or why substitution must or must not be "]
    #[doc = " performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reason: Option<CodeableConcept>,
}
#[doc = " A record of a medication that is being consumed by a patient.   A MedicationStatement may "]
#[doc = " indicate that the patient may be taking the medication now or has taken the medication in the "]
#[doc = " past or will be taking the medication in the future.  The source of this information can be the "]
#[doc = " patient, significant other (such as a family member or spouse), or a clinician.  A common "]
#[doc = " scenario where this information is captured is during the history taking process during a "]
#[doc = " patient visit or stay.   The medication information may come from sources such as the patient's "]
#[doc = " memory, from a prescription bottle,  or from a list of medications the patient, clinician or "]
#[doc = " other party maintains. "]
#[doc = " "]
#[doc = " The primary difference between a medication statement and a medication administration is that "]
#[doc = " the medication administration has complete administration information and is based on actual "]
#[doc = " administration information from the person who administered the medication.  A medication "]
#[doc = " statement is often, if not always, less specific.  There is no required date/time when the "]
#[doc = " medication was administered, in fact we only know that a source has reported the patient is "]
#[doc = " taking this medication, where details such as time, quantity, or rate or even medication "]
#[doc = " product may be incomplete or missing or less precise.  As stated earlier, the medication "]
#[doc = " statement information may come from the patient's memory, from a prescription bottle or from a "]
#[doc = " list of medications the patient, clinician or other party maintains.  Medication administration "]
#[doc = " is more formal and is not missing detailed information."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct MedicationStatement {
    #[doc = " Extensions for dateAsserted"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_dateAsserted")]
    pub _date_asserted: Option<Element>,
    #[doc = " Extensions for effectiveDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_effectiveDateTime")]
    pub _effective_date_time: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " A plan, proposal or order that is fulfilled in whole or in part by this event."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Vec<Reference>>,
    #[doc = " Indicates where the medication is expected to be consumed or administered."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<CodeableConcept>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The encounter or episode of care that establishes the context for this MedicationStatement."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub context: Option<Reference>,
    #[doc = " The date when the medication statement was asserted by the information source."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dateAsserted")]
    pub date_asserted: Option<DateTime>,
    #[doc = " Allows linking the MedicationStatement to the underlying MedicationRequest, or to other "]
    #[doc = " information that supports or is used to derive the MedicationStatement."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "derivedFrom")]
    pub derived_from: Option<Vec<Reference>>,
    #[doc = " Indicates how the medication is/was or should be taken by the patient."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub dosage: Option<Vec<Dosage>>,
    #[doc = " The interval of time during which it is being asserted that the patient is/was/will be "]
    #[doc = " taking the medication (or was not taking, when the MedicationStatement.taken element is "]
    #[doc = " No)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectiveDateTime")]
    pub effective_date_time: Option<String>,
    #[doc = " The interval of time during which it is being asserted that the patient is/was/will be "]
    #[doc = " taking the medication (or was not taking, when the MedicationStatement.taken element is "]
    #[doc = " No)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectivePeriod")]
    pub effective_period: Option<Period>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Identifiers associated with this Medication Statement that are defined by business "]
    #[doc = " processes and/or used to refer to it when a direct URL reference to the resource itself is "]
    #[doc = " not appropriate. They are business identifiers assigned to this resource by the performer "]
    #[doc = " or other systems and remain constant as the resource is updated and propagates from server "]
    #[doc = " to server."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The person or organization that provided the information about the taking of this "]
    #[doc = " medication. Note: Use derivedFrom when a MedicationStatement is derived from other "]
    #[doc = " resources, e.g. Claim or MedicationRequest."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "informationSource")]
    pub information_source: Option<Reference>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " Identifies the medication being administered. This is either a link to a resource "]
    #[doc = " representing the details of the medication or a simple attribute carrying a code that "]
    #[doc = " identifies the medication from a known list of medications."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "medicationCodeableConcept")]
    pub medication_codeable_concept: Option<CodeableConcept>,
    #[doc = " Identifies the medication being administered. This is either a link to a resource "]
    #[doc = " representing the details of the medication or a simple attribute carrying a code that "]
    #[doc = " identifies the medication from a known list of medications."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "medicationReference")]
    pub medication_reference: Option<Reference>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Provides extra information about the medication statement that is not conveyed by the other "]
    #[doc = " attributes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " A larger event of which this particular event is a component or step."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "partOf")]
    pub part_of: Option<Vec<Reference>>,
    #[doc = " A reason for why the medication is being/was taken."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,
    #[doc = " Condition or observation that supports why the medication is being/was taken."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,
    #[doc = " This is a MedicationStatement resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " A code representing the patient or other source's judgment about the state of the "]
    #[doc = " medication used that this statement is about.  Generally, this will be active or completed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " Captures the reason for the current state of the MedicationStatement."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusReason")]
    pub status_reason: Option<Vec<CodeableConcept>>,
    #[doc = " The person, animal or group who is/was taking the medication."]
    pub subject: Reference,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " This resource is primarily used for the identification and definition of a medication for the "]
#[doc = " purposes of prescribing, dispensing, and administering a medication as well as for making "]
#[doc = " statements about medication use."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Medication_Batch")]
#[serde(deny_unknown_fields)]
pub struct MedicationBatch {
    #[doc = " Extensions for expirationDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_expirationDate")]
    pub _expiration_date: Option<Element>,
    #[doc = " Extensions for lotNumber"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lotNumber")]
    pub _lot_number: Option<Element>,
    #[doc = " When this specific batch of product will expire."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "expirationDate")]
    pub expiration_date: Option<DateTime>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The assigned lot number of a batch of the specified product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lotNumber")]
    pub lot_number: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " This resource is primarily used for the identification and definition of a medication for the "]
#[doc = " purposes of prescribing, dispensing, and administering a medication as well as for making "]
#[doc = " statements about medication use."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Medication_Ingredient")]
#[serde(deny_unknown_fields)]
pub struct MedicationIngredient {
    #[doc = " Extensions for isActive"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_isActive")]
    pub _is_active: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Indication of whether this ingredient affects the therapeutic action of the drug."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "isActive")]
    pub is_active: Option<Boolean>,
    #[doc = " The actual ingredient - either a substance (simple ingredient) or another medication of a "]
    #[doc = " medication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "itemCodeableConcept")]
    pub item_codeable_concept: Option<CodeableConcept>,
    #[doc = " The actual ingredient - either a substance (simple ingredient) or another medication of a "]
    #[doc = " medication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "itemReference")]
    pub item_reference: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Specifies how many (or how much) of the items there are in this Medication.  For example, "]
    #[doc = " 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the "]
    #[doc = " denominator is 1 tablet."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub strength: Option<Ratio>,
}
#[doc = " A medicinal product, being a substance or combination of substances that is intended to treat, "]
#[doc = " prevent or diagnose a disease, or to restore, correct or modify physiological functions by "]
#[doc = " exerting a pharmacological, immunological or metabolic action. This resource is intended to "]
#[doc = " define and detail such products and their properties, for uses other than direct patient care "]
#[doc = " (e.g. regulatory use, or drug catalogs)."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct MedicinalProductDefinition {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for indication"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _indication: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for statusDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_statusDate")]
    pub _status_date: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " Whether the Medicinal Product is subject to additional monitoring for regulatory reasons, "]
    #[doc = " such as heightened reporting requirements."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "additionalMonitoringIndicator")]
    pub additional_monitoring_indicator: Option<CodeableConcept>,
    #[doc = " Additional information or supporting documentation about the medicinal product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "attachedDocument")]
    pub attached_document: Option<Vec<Reference>>,
    #[doc = " Allows the key product features to be recorded, such as \"sugar free\", \"modified release\", "]
    #[doc = " \"parallel import\"."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub characteristic: Option<Vec<MedicinalProductDefinitionCharacteristic>>,
    #[doc = " Allows the product to be classified by various systems, commonly WHO ATC."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub classification: Option<Vec<CodeableConcept>>,
    #[doc = " Clinical trials or studies that this product is involved in."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "clinicalTrial")]
    pub clinical_trial: Option<Vec<Reference>>,
    #[doc = " A code that this product is known by, usually within some formal terminology, perhaps "]
    #[doc = " assigned by a third party (i.e. not the manufacturer or regulator). Products (types of "]
    #[doc = " medications) tend to be known by identifiers during development and within regulatory "]
    #[doc = " process. However when they are prescribed they tend to be identified by codes. The same "]
    #[doc = " product may be have multiple codes, applied to it by multiple organizations."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Vec<Coding>>,
    #[doc = " The dose form for a single part product, or combined form of a multiple part product. This "]
    #[doc = " is one concept that describes all the components. It does not represent the form with "]
    #[doc = " components physically mixed, if that might be necessary, for which see "]
    #[doc = " (AdministrableProductDefinition.administrableDoseForm)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "combinedPharmaceuticalDoseForm")]
    pub combined_pharmaceutical_dose_form: Option<CodeableConcept>,
    #[doc = " A product specific contact, person (in a role), or an organization."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<MedicinalProductDefinitionContact>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " Reference to another product, e.g. for linking authorised to investigational product, or a "]
    #[doc = " virtual product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "crossReference")]
    pub cross_reference: Option<Vec<MedicinalProductDefinitionCrossReference>>,
    #[doc = " General description of this product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " If this medicine applies to human or veterinary uses."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub domain: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Business identifier for this product. Could be an MPID. When in development or being "]
    #[doc = " regulated, products are typically referenced by official identifiers, assigned by a "]
    #[doc = " manufacturer or regulator, and unique to a product (which, when compared to a product "]
    #[doc = " instance being prescribed, is actually a product type). See also "]
    #[doc = " MedicinalProductDefinition.code."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " Any component of the drug product which is not the chemical entity defined as the drug "]
    #[doc = " substance, or an excipient in the drug product. This includes process-related impurities "]
    #[doc = " and contaminants, product-related impurities including degradation products."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub impurity: Option<Vec<CodeableReference>>,
    #[doc = " Description of indication(s) for this product, used when structured indications are not "]
    #[doc = " required. In cases where structured indications are required, they are captured using the "]
    #[doc = " ClinicalUseDefinition resource. An indication is a medical situation for which using the "]
    #[doc = " product is appropriate."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub indication: Option<Markdown>,
    #[doc = " The ingredients of this medicinal product - when not detailed in other resources. This is "]
    #[doc = " only needed if the ingredients are not specified by incoming references from the Ingredient "]
    #[doc = " resource, or indirectly via incoming AdministrableProductDefinition, "]
    #[doc = " PackagedProductDefinition or ManufacturedItemDefinition references. In cases where those "]
    #[doc = " levels of detail are not used, the ingredients may be specified directly here as codes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub ingredient: Option<Vec<CodeableConcept>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The legal status of supply of the medicinal product as classified by the regulator."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "legalStatusOfSupply")]
    pub legal_status_of_supply: Option<CodeableConcept>,
    #[doc = " Marketing status of the medicinal product, in contrast to marketing authorization. This "]
    #[doc = " refers to the product being actually 'on the market' as opposed to being allowed to be on "]
    #[doc = " the market (which is an authorization)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "marketingStatus")]
    pub marketing_status: Option<Vec<MarketingStatus>>,
    #[doc = " A master file for the medicinal product (e.g. Pharmacovigilance System Master File). Drug "]
    #[doc = " master files (DMFs) are documents submitted to regulatory agencies to provide confidential "]
    #[doc = " detailed information about facilities, processes or articles used in the manufacturing, "]
    #[doc = " processing, packaging and storing of drug products."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "masterFile")]
    pub master_file: Option<Vec<Reference>>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The product's name, including full name and possibly coded parts."]
    pub name: Vec<MedicinalProductDefinitionName>,
    #[doc = " A manufacturing or administrative process or step associated with (or performed on) the "]
    #[doc = " medicinal product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub operation: Option<Vec<MedicinalProductDefinitionOperation>>,
    #[doc = " Package type for the product. See also the PackagedProductDefinition resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "packagedMedicinalProduct")]
    pub packaged_medicinal_product: Option<Vec<CodeableConcept>>,
    #[doc = " If authorised for use in children, or infants, neonates etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "pediatricUseIndicator")]
    pub pediatric_use_indicator: Option<CodeableConcept>,
    #[doc = " This is a MedicinalProductDefinition resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The path by which the product is taken into or makes contact with the body. In some regions "]
    #[doc = " this is referred to as the licenced or approved route. See also "]
    #[doc = " AdministrableProductDefinition resource. MedicinalProductDefinition.route is the same "]
    #[doc = " concept as AdministrableProductDefinition.routeOfAdministration.code, and they cannot be "]
    #[doc = " used together."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub route: Option<Vec<CodeableConcept>>,
    #[doc = " Whether the Medicinal Product is subject to special measures for regulatory reasons, such "]
    #[doc = " as a requirement to conduct post-authorisation studies."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "specialMeasures")]
    pub special_measures: Option<Vec<CodeableConcept>>,
    #[doc = " The status within the lifecycle of this product record. A high-level status, this is not "]
    #[doc = " intended to duplicate details carried elsewhere such as legal status, or authorization "]
    #[doc = " status."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<CodeableConcept>,
    #[doc = " The date at which the given status became applicable."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusDate")]
    pub status_date: Option<DateTime>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " Regulatory type, e.g. Investigational or Authorized."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
    #[doc = " A business identifier relating to a specific version of the product, this is commonly used "]
    #[doc = " to support revisions to an existing product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[doc = " A medicinal product, being a substance or combination of substances that is intended to treat, "]
#[doc = " prevent or diagnose a disease, or to restore, correct or modify physiological functions by "]
#[doc = " exerting a pharmacological, immunological or metabolic action. This resource is intended to "]
#[doc = " define and detail such products and their properties, for uses other than direct patient care "]
#[doc = " (e.g. regulatory use, or drug catalogs)."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "MedicinalProductDefinition_Characteristic")]
#[serde(deny_unknown_fields)]
pub struct MedicinalProductDefinitionCharacteristic {
    #[doc = " Extensions for valueBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub _value_boolean: Option<Element>,
    #[doc = " Extensions for valueDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDate")]
    pub _value_date: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A code expressing the type of characteristic."]
    #[serde(rename = "type")]
    pub type_: CodeableConcept,
    #[doc = " A value for the characteristic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAttachment")]
    pub value_attachment: Option<Attachment>,
    #[doc = " A value for the characteristic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,
    #[doc = " A value for the characteristic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,
    #[doc = " A value for the characteristic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDate")]
    pub value_date: Option<String>,
    #[doc = " A value for the characteristic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,
}
#[doc = " A medicinal product, being a substance or combination of substances that is intended to treat, "]
#[doc = " prevent or diagnose a disease, or to restore, correct or modify physiological functions by "]
#[doc = " exerting a pharmacological, immunological or metabolic action. This resource is intended to "]
#[doc = " define and detail such products and their properties, for uses other than direct patient care "]
#[doc = " (e.g. regulatory use, or drug catalogs)."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "MedicinalProductDefinition_Contact")]
#[serde(deny_unknown_fields)]
pub struct MedicinalProductDefinitionContact {
    #[doc = " A product specific contact, person (in a role), or an organization."]
    pub contact: Reference,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Allows the contact to be classified, for example QPPV, Pharmacovigilance Enquiry "]
    #[doc = " Information."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " A medicinal product, being a substance or combination of substances that is intended to treat, "]
#[doc = " prevent or diagnose a disease, or to restore, correct or modify physiological functions by "]
#[doc = " exerting a pharmacological, immunological or metabolic action. This resource is intended to "]
#[doc = " define and detail such products and their properties, for uses other than direct patient care "]
#[doc = " (e.g. regulatory use, or drug catalogs)."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "MedicinalProductDefinition_CountryLanguage")]
#[serde(deny_unknown_fields)]
pub struct MedicinalProductDefinitionCountryLanguage {
    #[doc = " Country code for where this name applies."]
    pub country: CodeableConcept,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Jurisdiction code for where this name applies. A jurisdiction may be a sub- or "]
    #[doc = " supra-national entity (e.g. a state or a geographic region)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<CodeableConcept>,
    #[doc = " Language code for this name."]
    pub language: CodeableConcept,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " A medicinal product, being a substance or combination of substances that is intended to treat, "]
#[doc = " prevent or diagnose a disease, or to restore, correct or modify physiological functions by "]
#[doc = " exerting a pharmacological, immunological or metabolic action. This resource is intended to "]
#[doc = " define and detail such products and their properties, for uses other than direct patient care "]
#[doc = " (e.g. regulatory use, or drug catalogs)."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "MedicinalProductDefinition_CrossReference")]
#[serde(deny_unknown_fields)]
pub struct MedicinalProductDefinitionCrossReference {
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Reference to another product, e.g. for linking authorised to investigational product."]
    pub product: CodeableReference,
    #[doc = " The type of relationship, for instance branded to generic, virtual to actual product, "]
    #[doc = " product to development product (investigational), parallel import version."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " A medicinal product, being a substance or combination of substances that is intended to treat, "]
#[doc = " prevent or diagnose a disease, or to restore, correct or modify physiological functions by "]
#[doc = " exerting a pharmacological, immunological or metabolic action. This resource is intended to "]
#[doc = " define and detail such products and their properties, for uses other than direct patient care "]
#[doc = " (e.g. regulatory use, or drug catalogs)."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MedicinalProductDefinition_Name")]
#[serde(deny_unknown_fields)]
pub struct MedicinalProductDefinitionName {
    #[doc = " Extensions for productName"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_productName")]
    pub _product_name: Option<Element>,
    #[doc = " Country and jurisdiction where the name applies, and associated language."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "countryLanguage")]
    pub country_language: Option<Vec<MedicinalProductDefinitionCountryLanguage>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Coding words or phrases of the name."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "namePart")]
    pub name_part: Option<Vec<MedicinalProductDefinitionNamePart>>,
    #[doc = " The full product name."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "productName")]
    pub product_name: Option<String>,
    #[doc = " Type of product name, such as rINN, BAN, Proprietary, Non-Proprietary."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " A medicinal product, being a substance or combination of substances that is intended to treat, "]
#[doc = " prevent or diagnose a disease, or to restore, correct or modify physiological functions by "]
#[doc = " exerting a pharmacological, immunological or metabolic action. This resource is intended to "]
#[doc = " define and detail such products and their properties, for uses other than direct patient care "]
#[doc = " (e.g. regulatory use, or drug catalogs)."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "MedicinalProductDefinition_NamePart")]
#[serde(deny_unknown_fields)]
pub struct MedicinalProductDefinitionNamePart {
    #[doc = " Extensions for part"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _part: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A fragment of a product name."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub part: Option<String>,
    #[doc = " Identifying type for this part of the name (e.g. strength part)."]
    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}
#[doc = " A medicinal product, being a substance or combination of substances that is intended to treat, "]
#[doc = " prevent or diagnose a disease, or to restore, correct or modify physiological functions by "]
#[doc = " exerting a pharmacological, immunological or metabolic action. This resource is intended to "]
#[doc = " define and detail such products and their properties, for uses other than direct patient care "]
#[doc = " (e.g. regulatory use, or drug catalogs)."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MedicinalProductDefinition_Operation")]
#[serde(deny_unknown_fields)]
pub struct MedicinalProductDefinitionOperation {
    #[doc = " Specifies whether this particular business or manufacturing process is considered "]
    #[doc = " proprietary or confidential."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "confidentialityIndicator")]
    pub confidentiality_indicator: Option<CodeableConcept>,
    #[doc = " Date range of applicability."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectiveDate")]
    pub effective_date: Option<Period>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The organization or establishment responsible for (or associated with) the particular "]
    #[doc = " process or step, examples include the manufacturer, importer, agent."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub organization: Option<Vec<Reference>>,
    #[doc = " The type of manufacturing operation e.g. manufacturing itself, re-packaging. For the "]
    #[doc = " authorization of this, a RegulatedAuthorization would point to the same plan or activity "]
    #[doc = " referenced here."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableReference>,
}
#[doc = " Defines the characteristics of a message that can be shared between systems, including the type "]
#[doc = " of event that initiates the message, the content to be transmitted and what response(s), if "]
#[doc = " any, are permitted."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct MessageDefinition {
    #[doc = " Extensions for category"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _category: Option<Element>,
    #[doc = " Extensions for copyright"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _copyright: Option<Element>,
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for eventUri"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_eventUri")]
    pub _event_uri: Option<Element>,
    #[doc = " Extensions for experimental"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _experimental: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for publisher"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _publisher: Option<Element>,
    #[doc = " Extensions for purpose"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _purpose: Option<Element>,
    #[doc = " Extensions for responseRequired"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_responseRequired")]
    pub _response_required: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " Indicates what types of messages may be sent as an application-level response to this "]
    #[doc = " message."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "allowedResponse")]
    pub allowed_response: Option<Vec<MessageDefinitionAllowedResponse>>,
    #[doc = " The MessageDefinition that is the basis for the contents of this resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub base: Option<Canonical>,
    #[doc = " The impact of the content of the message."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Code>,
    #[doc = " Contact details to assist a user in finding and communicating with the publisher."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " A copyright statement relating to the message definition and/or its contents. Copyright "]
    #[doc = " statements are generally legal restrictions on the use and publishing of the message "]
    #[doc = " definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,
    #[doc = " The date  (and optionally time) when the message definition was published. The date must "]
    #[doc = " change when the business version changes and it must change if the status code changes. In "]
    #[doc = " addition, it should change when the substantive content of the message definition changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " A free text natural language description of the message definition from a consumer's "]
    #[doc = " perspective."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " Event code or link to the EventDefinition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "eventCoding")]
    pub event_coding: Option<Coding>,
    #[doc = " Event code or link to the EventDefinition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "eventUri")]
    pub event_uri: Option<String>,
    #[doc = " A Boolean value to indicate that this message definition is authored for testing purposes "]
    #[doc = " (or education/evaluation/marketing) and is not intended to be used for genuine usage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Identifies the resource (or resources) that are being addressed by the event.  For example, "]
    #[doc = " the Encounter for an admit message or two Account records for a merge."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub focus: Option<Vec<MessageDefinitionFocus>>,
    #[doc = " Canonical reference to a GraphDefinition. If a URL is provided, it is the canonical "]
    #[doc = " reference to a [GraphDefinition](graphdefinition.html) that it controls what resources are "]
    #[doc = " to be added to the bundle when building the document. The GraphDefinition can also specify "]
    #[doc = " profiles that apply to the various resources."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub graph: Option<Vec<Canonical>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A formal identifier that is used to identify this message definition when it is represented "]
    #[doc = " in other formats, or referenced in a specification, model, design or an instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " A legal or geographic region in which the message definition is intended to be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A natural language name identifying the message definition. This name should be usable as "]
    #[doc = " an identifier for the module by machine processing applications such as code generation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " Identifies a protocol or workflow that this MessageDefinition represents a step in."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub parent: Option<Vec<Canonical>>,
    #[doc = " The name of the organization or individual that published the message definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
    #[doc = " Explanation of why this message definition is needed and why it has been designed as it "]
    #[doc = " has."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,
    #[doc = " A MessageDefinition that is superseded by this definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub replaces: Option<Vec<Canonical>>,
    #[doc = " This is a MessageDefinition resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " Declare at a message definition level whether a response is required or only upon error or "]
    #[doc = " success, or never."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "responseRequired")]
    pub response_required: Option<Code>,
    #[doc = " The status of this message definition. Enables tracking the life-cycle of the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " A short, descriptive, user-friendly title for the message definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[doc = " The business identifier that is used to reference the MessageDefinition and *is* expected "]
    #[doc = " to be consistent from server to server."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
    #[doc = " The content was developed with a focus and intent of supporting the contexts that are "]
    #[doc = " listed. These contexts may be general categories (gender, age, ...) or may be references to "]
    #[doc = " specific programs (insurance plans, studies, ...) and may be used to assist with indexing "]
    #[doc = " and searching for appropriate message definition instances."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,
    #[doc = " The identifier that is used to identify this version of the message definition when it is "]
    #[doc = " referenced in a specification, model, design or instance. This is an arbitrary value "]
    #[doc = " managed by the message definition author and is not expected to be globally unique. For "]
    #[doc = " example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. "]
    #[doc = " There is also no expectation that versions can be placed in a lexicographical sequence."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[doc = " Defines the characteristics of a message that can be shared between systems, including the type "]
#[doc = " of event that initiates the message, the content to be transmitted and what response(s), if "]
#[doc = " any, are permitted."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "MessageDefinition_AllowedResponse")]
#[serde(deny_unknown_fields)]
pub struct MessageDefinitionAllowedResponse {
    #[doc = " Extensions for situation"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _situation: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A reference to the message definition that must be adhered to by this supported response."]
    pub message: Canonical,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Provides a description of the circumstances in which this response should be used (as "]
    #[doc = " opposed to one of the alternative responses)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub situation: Option<Markdown>,
}
#[doc = " Defines the characteristics of a message that can be shared between systems, including the type "]
#[doc = " of event that initiates the message, the content to be transmitted and what response(s), if "]
#[doc = " any, are permitted."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MessageDefinition_Focus")]
#[serde(deny_unknown_fields)]
pub struct MessageDefinitionFocus {
    #[doc = " Extensions for code"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _code: Option<Element>,
    #[doc = " Extensions for max"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _max: Option<Element>,
    #[doc = " Extensions for min"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _min: Option<Element>,
    #[doc = " The kind of resource that must be the focus for this message."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Identifies the maximum number of resources of this type that must be pointed to by a "]
    #[doc = " message in order for it to be valid against this MessageDefinition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub max: Option<String>,
    #[doc = " Identifies the minimum number of resources of this type that must be pointed to by a "]
    #[doc = " message in order for it to be valid against this MessageDefinition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub min: Option<UnsignedInt>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A profile that reflects constraints for the focal resource (and potentially for related "]
    #[doc = " resources)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub profile: Option<Canonical>,
}
#[doc = " The header for a message exchange that is either requesting or responding to an action.  The "]
#[doc = " reference(s) that are the subject of the action as well as other information related to the "]
#[doc = " action are typically transmitted in a bundle in which the MessageHeader resource instance is "]
#[doc = " the first resource in the bundle."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct MessageHeader {
    #[doc = " Extensions for eventUri"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_eventUri")]
    pub _event_uri: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " The logical author of the message - the person or device that decided the described event "]
    #[doc = " should happen. When there is more than one candidate, pick the most proximal to the "]
    #[doc = " MessageHeader. Can provide other authors in extensions."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Reference>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " Permanent link to the MessageDefinition for this message."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub definition: Option<Canonical>,
    #[doc = " The destination application which the message is intended for."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub destination: Option<Vec<MessageHeaderDestination>>,
    #[doc = " The person or device that performed the data entry leading to this message. When there is "]
    #[doc = " more than one candidate, pick the most proximal to the message. Can provide other enterers "]
    #[doc = " in extensions."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub enterer: Option<Reference>,
    #[doc = " Code that identifies the event this message represents and connects it with its definition. "]
    #[doc = " Events defined as part of the FHIR specification have the system value "]
    #[doc = " \"http://terminology.hl7.org/CodeSystem/message-events\".  Alternatively uri to the "]
    #[doc = " EventDefinition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "eventCoding")]
    pub event_coding: Option<Coding>,
    #[doc = " Code that identifies the event this message represents and connects it with its definition. "]
    #[doc = " Events defined as part of the FHIR specification have the system value "]
    #[doc = " \"http://terminology.hl7.org/CodeSystem/message-events\".  Alternatively uri to the "]
    #[doc = " EventDefinition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "eventUri")]
    pub event_uri: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The actual data of the message - a reference to the root/focus class of the event."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub focus: Option<Vec<Reference>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Coded indication of the cause for the event - indicates  a reason for the occurrence of the "]
    #[doc = " event that is a focus of this message."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reason: Option<CodeableConcept>,
    #[doc = " This is a MessageHeader resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " Information about the message that this message is a response to.  Only present if this "]
    #[doc = " message is a response."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub response: Option<MessageHeaderResponse>,
    #[doc = " The person or organization that accepts overall responsibility for the contents of the "]
    #[doc = " message. The implication is that the message event happened under the policies of the "]
    #[doc = " responsible party."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub responsible: Option<Reference>,
    #[doc = " Identifies the sending system to allow the use of a trust relationship."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sender: Option<Reference>,
    #[doc = " The source application from which this message originated."]
    pub source: MessageHeaderSource,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " The header for a message exchange that is either requesting or responding to an action.  The "]
#[doc = " reference(s) that are the subject of the action as well as other information related to the "]
#[doc = " action are typically transmitted in a bundle in which the MessageHeader resource instance is "]
#[doc = " the first resource in the bundle."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MessageHeader_Destination")]
#[serde(deny_unknown_fields)]
pub struct MessageHeaderDestination {
    #[doc = " Extensions for endpoint"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _endpoint: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Indicates where the message should be routed to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<Url>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Human-readable name for the target system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " Allows data conveyed by a message to be addressed to a particular person or department when "]
    #[doc = " routing to a specific application isn't sufficient."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub receiver: Option<Reference>,
    #[doc = " Identifies the target end system in situations where the initial message transmission is to "]
    #[doc = " an intermediary system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub target: Option<Reference>,
}
#[doc = " The header for a message exchange that is either requesting or responding to an action.  The "]
#[doc = " reference(s) that are the subject of the action as well as other information related to the "]
#[doc = " action are typically transmitted in a bundle in which the MessageHeader resource instance is "]
#[doc = " the first resource in the bundle."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MessageHeader_Response")]
#[serde(deny_unknown_fields)]
pub struct MessageHeaderResponse {
    #[doc = " Extensions for code"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _code: Option<Element>,
    #[doc = " Extensions for identifier"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _identifier: Option<Element>,
    #[doc = " Code that identifies the type of response to the message - whether it was successful or "]
    #[doc = " not, and whether it should be resent or not."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,
    #[doc = " Full details of any issues found in the message."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub details: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The MessageHeader.id of the message to which this message is a response."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Id>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " The header for a message exchange that is either requesting or responding to an action.  The "]
#[doc = " reference(s) that are the subject of the action as well as other information related to the "]
#[doc = " action are typically transmitted in a bundle in which the MessageHeader resource instance is "]
#[doc = " the first resource in the bundle."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MessageHeader_Source")]
#[serde(deny_unknown_fields)]
pub struct MessageHeaderSource {
    #[doc = " Extensions for endpoint"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _endpoint: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for software"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _software: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " An e-mail, phone, website or other contact point to use to resolve issues with message "]
    #[doc = " communications."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<ContactPoint>,
    #[doc = " Identifies the routing target to send acknowledgements to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<Url>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Human-readable name for the source system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " May include configuration or other information useful in debugging."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub software: Option<String>,
    #[doc = " Can convey versions of multiple systems in situations where a message passes through "]
    #[doc = " multiple hands."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[doc = " The metadata about a resource. This is content in the resource that is maintained by the "]
#[doc = " infrastructure. Changes to the content might not always be associated with version changes to "]
#[doc = " the resource."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Meta {
    #[doc = " Extensions for lastUpdated"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastUpdated")]
    pub _last_updated: Option<Element>,
    #[doc = " Extensions for source"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _source: Option<Element>,
    #[doc = " Extensions for versionId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_versionId")]
    pub _version_id: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " When the resource last changed - e.g. when the version changed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastUpdated")]
    pub last_updated: Option<Instant>,
    #[doc = " A list of profiles (references to [[[StructureDefinition]]] resources) that this resource "]
    #[doc = " claims to conform to. The URL is a reference to [[[StructureDefinition.url]]]."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub profile: Option<Vec<Canonical>>,
    #[doc = " Security labels applied to this resource. These tags connect specific resources to the "]
    #[doc = " overall security policy and infrastructure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub security: Option<Vec<Coding>>,
    #[doc = " A uri that identifies the source system of the resource. This provides a minimal amount of "]
    #[doc = " [[[Provenance]]] information that can be used to track or differentiate the source of "]
    #[doc = " information in the resource. The source may identify another FHIR server, document, "]
    #[doc = " message, database, etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub source: Option<Uri>,
    #[doc = " Tags applied to this resource. Tags are intended to be used to identify and relate "]
    #[doc = " resources to process and workflow, and applications are not required to consider the tags "]
    #[doc = " when interpreting the meaning of a resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tag: Option<Vec<Coding>>,
    #[doc = " The version specific identifier, as it appears in the version portion of the URL. This "]
    #[doc = " value changes when the resource is created, updated, or deleted."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "versionId")]
    pub version_id: Option<Id>,
}
#[doc = " Raw data describing a biological sequence."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct MolecularSequence {
    #[doc = " Extensions for coordinateSystem"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_coordinateSystem")]
    pub _coordinate_system: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for observedSeq"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_observedSeq")]
    pub _observed_seq: Option<Element>,
    #[doc = " Extensions for readCoverage"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_readCoverage")]
    pub _read_coverage: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " Whether the sequence is numbered starting at 0 (0-based numbering or coordinates, inclusive "]
    #[doc = " start, exclusive end) or starting at 1 (1-based numbering, inclusive start and inclusive "]
    #[doc = " end)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "coordinateSystem")]
    pub coordinate_system: Option<Integer>,
    #[doc = " The method for sequencing, for example, chip information."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub device: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A unique identifier for this particular sequence instance. This is a FHIR-defined id."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Sequence that was observed. It is the result marked by referenceSeq along with variant "]
    #[doc = " records on referenceSeq. This shall start from referenceSeq.windowStart and end by "]
    #[doc = " referenceSeq.windowEnd."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "observedSeq")]
    pub observed_seq: Option<String>,
    #[doc = " The patient whose sequencing results are described by this resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub patient: Option<Reference>,
    #[doc = " The organization or lab that should be responsible for this result."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub performer: Option<Reference>,
    #[doc = " Pointer to next atomic sequence which at most contains one variant."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub pointer: Option<Vec<Reference>>,
    #[doc = " An experimental feature attribute that defines the quality of the feature in a quantitative "]
    #[doc = " way, such as a phred quality score "]
    #[doc = " ([SO:0001686](http://www.sequenceontology.org/browser/current_svn/term/SO:0001686))."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quality: Option<Vec<MolecularSequenceQuality>>,
    #[doc = " The number of copies of the sequence of interest. (RNASeq)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,
    #[doc = " Coverage (read depth or depth) is the average number of reads representing a given "]
    #[doc = " nucleotide in the reconstructed sequence."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "readCoverage")]
    pub read_coverage: Option<Integer>,
    #[doc = " A sequence that is used as a reference to describe variants that are present in a sequence "]
    #[doc = " analyzed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "referenceSeq")]
    pub reference_seq: Option<MolecularSequenceReferenceSeq>,
    #[doc = " Configurations of the external repository. The repository shall store target's observedSeq "]
    #[doc = " or records related with target's observedSeq."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub repository: Option<Vec<MolecularSequenceRepository>>,
    #[doc = " This is a MolecularSequence resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " Specimen used for sequencing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub specimen: Option<Reference>,
    #[doc = " Information about chromosome structure variation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "structureVariant")]
    pub structure_variant: Option<Vec<MolecularSequenceStructureVariant>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " Amino Acid Sequence/ DNA Sequence / RNA Sequence."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
    #[doc = " The definition of variant here originates from Sequence ontology "]
    #[doc = " ([variant_of](http://www.sequenceontology.org/browser/current_svn/term/variant_of)). This "]
    #[doc = " element can represent amino acid or nucleic sequence change(including "]
    #[doc = " insertion,deletion,SNP,etc.)  It can represent some complex mutation or segment variation "]
    #[doc = " with the assist of CIGAR string."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub variant: Option<Vec<MolecularSequenceVariant>>,
}
#[doc = " Raw data describing a biological sequence."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MolecularSequence_Inner")]
#[serde(deny_unknown_fields)]
pub struct MolecularSequenceInner {
    #[doc = " Extensions for end"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _end: Option<Element>,
    #[doc = " Extensions for start"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _start: Option<Element>,
    #[doc = " Structural variant inner end. If the coordinate system is 0-based then end is exclusive and "]
    #[doc = " does not include the last position. If the coordinate system is 1-base, then end is "]
    #[doc = " inclusive and includes the last position."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub end: Option<Integer>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Structural variant inner start. If the coordinate system is either 0-based or 1-based, then "]
    #[doc = " start position is inclusive."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub start: Option<Integer>,
}
#[doc = " Raw data describing a biological sequence."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MolecularSequence_Outer")]
#[serde(deny_unknown_fields)]
pub struct MolecularSequenceOuter {
    #[doc = " Extensions for end"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _end: Option<Element>,
    #[doc = " Extensions for start"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _start: Option<Element>,
    #[doc = " Structural variant outer end. If the coordinate system is 0-based then end is exclusive and "]
    #[doc = " does not include the last position. If the coordinate system is 1-base, then end is "]
    #[doc = " inclusive and includes the last position."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub end: Option<Integer>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Structural variant outer start. If the coordinate system is either 0-based or 1-based, then "]
    #[doc = " start position is inclusive."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub start: Option<Integer>,
}
#[doc = " Raw data describing a biological sequence."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MolecularSequence_Quality")]
#[serde(deny_unknown_fields)]
pub struct MolecularSequenceQuality {
    #[doc = " Extensions for end"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _end: Option<Element>,
    #[doc = " Extensions for fScore"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fScore")]
    pub _f_score: Option<Element>,
    #[doc = " Extensions for gtFP"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_gtFP")]
    pub _gt_fp: Option<Element>,
    #[doc = " Extensions for precision"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _precision: Option<Element>,
    #[doc = " Extensions for queryFP"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_queryFP")]
    pub _query_fp: Option<Element>,
    #[doc = " Extensions for queryTP"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_queryTP")]
    pub _query_tp: Option<Element>,
    #[doc = " Extensions for recall"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _recall: Option<Element>,
    #[doc = " Extensions for start"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _start: Option<Element>,
    #[doc = " Extensions for truthFN"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_truthFN")]
    pub _truth_fn: Option<Element>,
    #[doc = " Extensions for truthTP"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_truthTP")]
    pub _truth_tp: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " End position of the sequence. If the coordinate system is 0-based then end is exclusive and "]
    #[doc = " does not include the last position. If the coordinate system is 1-base, then end is "]
    #[doc = " inclusive and includes the last position."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub end: Option<Integer>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Harmonic mean of Recall and Precision, computed as: 2 * precision * recall / (precision + "]
    #[doc = " recall)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fScore")]
    pub f_score: Option<Decimal>,
    #[doc = " The number of false positives where the non-REF alleles in the Truth and Query Call Sets "]
    #[doc = " match (i.e. cases where the truth is 1/1 and the query is 0/1 or similar)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "gtFP")]
    pub gt_fp: Option<Decimal>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Which method is used to get sequence quality."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub method: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " QUERY.TP / (QUERY.TP + QUERY.FP)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub precision: Option<Decimal>,
    #[doc = " False positives, i.e. the number of sites in the Query Call Set for which there is no path "]
    #[doc = " through the Truth Call Set that is consistent with this site. Sites with correct variant "]
    #[doc = " but incorrect genotype are counted here."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "queryFP")]
    pub query_fp: Option<Decimal>,
    #[doc = " True positives, from the perspective of the query data, i.e. the number of sites in the "]
    #[doc = " Query Call Set for which there are paths through the Truth Call Set that are consistent "]
    #[doc = " with all of the alleles at this site, and for which there is an accurate genotype call for "]
    #[doc = " the event."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "queryTP")]
    pub query_tp: Option<Decimal>,
    #[doc = " TRUTH.TP / (TRUTH.TP + TRUTH.FN)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub recall: Option<Decimal>,
    #[doc = " Receiver Operator Characteristic (ROC) Curve  to give sensitivity/specificity tradeoff."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub roc: Option<MolecularSequenceRoc>,
    #[doc = " The score of an experimentally derived feature such as a p-value "]
    #[doc = " ([SO:0001685](http://www.sequenceontology.org/browser/current_svn/term/SO:0001685))."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub score: Option<Quantity>,
    #[doc = " Gold standard sequence used for comparing against."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "standardSequence")]
    pub standard_sequence: Option<CodeableConcept>,
    #[doc = " Start position of the sequence. If the coordinate system is either 0-based or 1-based, then "]
    #[doc = " start position is inclusive."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub start: Option<Integer>,
    #[doc = " False negatives, i.e. the number of sites in the Truth Call Set for which there is no path "]
    #[doc = " through the Query Call Set that is consistent with all of the alleles at this site, or "]
    #[doc = " sites for which there is an inaccurate genotype call for the event. Sites with correct "]
    #[doc = " variant but incorrect genotype are counted here."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "truthFN")]
    pub truth_fn: Option<Decimal>,
    #[doc = " True positives, from the perspective of the truth data, i.e. the number of sites in the "]
    #[doc = " Truth Call Set for which there are paths through the Query Call Set that are consistent "]
    #[doc = " with all of the alleles at this site, and for which there is an accurate genotype call for "]
    #[doc = " the event."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "truthTP")]
    pub truth_tp: Option<Decimal>,
    #[doc = " INDEL / SNP / Undefined variant."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}
#[doc = " Raw data describing a biological sequence."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MolecularSequence_ReferenceSeq")]
#[serde(deny_unknown_fields)]
pub struct MolecularSequenceReferenceSeq {
    #[doc = " Extensions for genomeBuild"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_genomeBuild")]
    pub _genome_build: Option<Element>,
    #[doc = " Extensions for orientation"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _orientation: Option<Element>,
    #[doc = " Extensions for referenceSeqString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_referenceSeqString")]
    pub _reference_seq_string: Option<Element>,
    #[doc = " Extensions for strand"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _strand: Option<Element>,
    #[doc = " Extensions for windowEnd"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_windowEnd")]
    pub _window_end: Option<Element>,
    #[doc = " Extensions for windowStart"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_windowStart")]
    pub _window_start: Option<Element>,
    #[doc = " Structural unit composed of a nucleic acid molecule which controls its own replication "]
    #[doc = " through the interaction of specific proteins at one or more origins of replication "]
    #[doc = " ([SO:0000340](http://www.sequenceontology.org/browser/current_svn/term/SO:0000340))."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub chromosome: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The Genome Build used for reference, following GRCh build versions e.g. 'GRCh 37'.  Version "]
    #[doc = " number must be included if a versioned release of a primary build was used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "genomeBuild")]
    pub genome_build: Option<String>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A relative reference to a DNA strand based on gene orientation. The strand that contains "]
    #[doc = " the open reading frame of the gene is the \"sense\" strand, and the opposite complementary "]
    #[doc = " strand is the \"antisense\" strand."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub orientation: Option<Code>,
    #[doc = " Reference identifier of reference sequence submitted to NCBI. It must match the type in the "]
    #[doc = " MolecularSequence.type field. For example, the prefix, “NG_” identifies reference "]
    #[doc = " sequence for genes, “NM_” for messenger RNA transcripts, and “NP_” for amino acid "]
    #[doc = " sequences."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "referenceSeqId")]
    pub reference_seq_id: Option<CodeableConcept>,
    #[doc = " A pointer to another MolecularSequence entity as reference sequence."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "referenceSeqPointer")]
    pub reference_seq_pointer: Option<Reference>,
    #[doc = " A string like \"ACGT\"."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "referenceSeqString")]
    pub reference_seq_string: Option<String>,
    #[doc = " An absolute reference to a strand. The Watson strand is the strand whose 5'-end is on the "]
    #[doc = " short arm of the chromosome, and the Crick strand as the one whose 5'-end is on the long "]
    #[doc = " arm."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub strand: Option<Code>,
    #[doc = " End position of the window on the reference sequence. If the coordinate system is 0-based "]
    #[doc = " then end is exclusive and does not include the last position. If the coordinate system is "]
    #[doc = " 1-base, then end is inclusive and includes the last position."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "windowEnd")]
    pub window_end: Option<Integer>,
    #[doc = " Start position of the window on the reference sequence. If the coordinate system is either "]
    #[doc = " 0-based or 1-based, then start position is inclusive."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "windowStart")]
    pub window_start: Option<Integer>,
}
#[doc = " Raw data describing a biological sequence."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MolecularSequence_Repository")]
#[serde(deny_unknown_fields)]
pub struct MolecularSequenceRepository {
    #[doc = " Extensions for datasetId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_datasetId")]
    pub _dataset_id: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for readsetId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_readsetId")]
    pub _readset_id: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " Extensions for variantsetId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_variantsetId")]
    pub _variantset_id: Option<Element>,
    #[doc = " Id of the variant in this external repository. The server will understand how to use this "]
    #[doc = " id to call for more info about datasets in external repository."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "datasetId")]
    pub dataset_id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " URI of an external repository which contains further details about the genetics data."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " Id of the read in this external repository."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "readsetId")]
    pub readset_id: Option<String>,
    #[doc = " Click and see / RESTful API / Need login to see / RESTful API with authentication / Other "]
    #[doc = " ways to see resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
    #[doc = " URI of an external repository which contains further details about the genetics data."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
    #[doc = " Id of the variantset in this external repository. The server will understand how to use "]
    #[doc = " this id to call for more info about variantsets in external repository."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "variantsetId")]
    pub variantset_id: Option<String>,
}
#[doc = " Raw data describing a biological sequence."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MolecularSequence_Roc")]
#[serde(deny_unknown_fields)]
pub struct MolecularSequenceRoc {
    #[doc = " Extensions for fMeasure"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fMeasure")]
    pub _f_measure: Option<Vec<Element>>,
    #[doc = " Extensions for numFN"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_numFN")]
    pub _num_fn: Option<Vec<Element>>,
    #[doc = " Extensions for numFP"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_numFP")]
    pub _num_fp: Option<Vec<Element>>,
    #[doc = " Extensions for numTP"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_numTP")]
    pub _num_tp: Option<Vec<Element>>,
    #[doc = " Extensions for precision"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _precision: Option<Vec<Element>>,
    #[doc = " Extensions for score"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _score: Option<Vec<Element>>,
    #[doc = " Extensions for sensitivity"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _sensitivity: Option<Vec<Element>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Calculated fScore if the GQ score threshold was set to \"score\" field value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fMeasure")]
    pub f_measure: Option<Vec<Decimal>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The number of false negatives if the GQ score threshold was set to \"score\" field value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "numFN")]
    pub num_fn: Option<Vec<Integer>>,
    #[doc = " The number of false positives if the GQ score threshold was set to \"score\" field value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "numFP")]
    pub num_fp: Option<Vec<Integer>>,
    #[doc = " The number of true positives if the GQ score threshold was set to \"score\" field value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "numTP")]
    pub num_tp: Option<Vec<Integer>>,
    #[doc = " Calculated precision if the GQ score threshold was set to \"score\" field value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub precision: Option<Vec<Decimal>>,
    #[doc = " Invidual data point representing the GQ (genotype quality) score threshold."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub score: Option<Vec<Integer>>,
    #[doc = " Calculated sensitivity if the GQ score threshold was set to \"score\" field value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sensitivity: Option<Vec<Decimal>>,
}
#[doc = " Raw data describing a biological sequence."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MolecularSequence_StructureVariant")]
#[serde(deny_unknown_fields)]
pub struct MolecularSequenceStructureVariant {
    #[doc = " Extensions for exact"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _exact: Option<Element>,
    #[doc = " Extensions for length"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _length: Option<Element>,
    #[doc = " Used to indicate if the outer and inner start-end values have the same meaning."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub exact: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Structural variant inner."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub inner: Option<MolecularSequenceInner>,
    #[doc = " Length of the variant chromosome."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub length: Option<Integer>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Structural variant outer."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub outer: Option<MolecularSequenceOuter>,
    #[doc = " Information about chromosome structure variation DNA change type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "variantType")]
    pub variant_type: Option<CodeableConcept>,
}
#[doc = " Raw data describing a biological sequence."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MolecularSequence_Variant")]
#[serde(deny_unknown_fields)]
pub struct MolecularSequenceVariant {
    #[doc = " Extensions for cigar"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _cigar: Option<Element>,
    #[doc = " Extensions for end"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _end: Option<Element>,
    #[doc = " Extensions for observedAllele"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_observedAllele")]
    pub _observed_allele: Option<Element>,
    #[doc = " Extensions for referenceAllele"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_referenceAllele")]
    pub _reference_allele: Option<Element>,
    #[doc = " Extensions for start"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _start: Option<Element>,
    #[doc = " Extended CIGAR string for aligning the sequence with reference bases. See detailed "]
    #[doc = " documentation "]
    #[doc = " [here](http://support.illumina.com/help/SequencingAnalysisWorkflow/Content/Vault/Informatics/Sequencing_Analysis/CASAVA/swSEQ_mCA_ExtendedCIGARFormat.htm)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub cigar: Option<String>,
    #[doc = " End position of the variant on the reference sequence. If the coordinate system is 0-based "]
    #[doc = " then end is exclusive and does not include the last position. If the coordinate system is "]
    #[doc = " 1-base, then end is inclusive and includes the last position."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub end: Option<Integer>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " An allele is one of a set of coexisting sequence variants of a gene "]
    #[doc = " ([SO:0001023](http://www.sequenceontology.org/browser/current_svn/term/SO:0001023)).  "]
    #[doc = " Nucleotide(s)/amino acids from start position of sequence to stop position of sequence on "]
    #[doc = " the positive (+) strand of the observed  sequence. When the sequence  type is DNA, it "]
    #[doc = " should be the sequence on the positive (+) strand. This will lay in the range between "]
    #[doc = " variant.start and variant.end."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "observedAllele")]
    pub observed_allele: Option<String>,
    #[doc = " An allele is one of a set of coexisting sequence variants of a gene "]
    #[doc = " ([SO:0001023](http://www.sequenceontology.org/browser/current_svn/term/SO:0001023)). "]
    #[doc = " Nucleotide(s)/amino acids from start position of sequence to stop position of sequence on "]
    #[doc = " the positive (+) strand of the reference sequence. When the sequence  type is DNA, it "]
    #[doc = " should be the sequence on the positive (+) strand. This will lay in the range between "]
    #[doc = " variant.start and variant.end."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "referenceAllele")]
    pub reference_allele: Option<String>,
    #[doc = " Start position of the variant on the  reference sequence. If the coordinate system is "]
    #[doc = " either 0-based or 1-based, then start position is inclusive."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub start: Option<Integer>,
    #[doc = " A pointer to an Observation containing variant information."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "variantPointer")]
    pub variant_pointer: Option<Reference>,
}
#[doc = " An amount of economic utility in some recognized currency."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Money {
    #[doc = " Extensions for currency"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _currency: Option<Element>,
    #[doc = " Extensions for value"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _value: Option<Element>,
    #[doc = " ISO 4217 Currency Code."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub currency: Option<Code>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Numerical value (with implicit precision)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Decimal>,
}
#[doc = " A curated namespace that issues unique symbols within that namespace for the identification of "]
#[doc = " concepts, people, devices, etc.  Represents a \"System\" used within the Identifier and Coding "]
#[doc = " data types."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct NamingSystem {
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for kind"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _kind: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for publisher"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _publisher: Option<Element>,
    #[doc = " Extensions for responsible"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _responsible: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for usage"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _usage: Option<Element>,
    #[doc = " Contact details to assist a user in finding and communicating with the publisher."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The date  (and optionally time) when the naming system was published. The date must change "]
    #[doc = " when the business version changes and it must change if the status code changes. In "]
    #[doc = " addition, it should change when the substantive content of the naming system changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " A free text natural language description of the naming system from a consumer's "]
    #[doc = " perspective. Details about what the namespace identifies including scope, granularity, "]
    #[doc = " version labeling, etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " A legal or geographic region in which the naming system is intended to be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,
    #[doc = " Indicates the purpose for the naming system - what kinds of things does it make unique?"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<Code>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A natural language name identifying the naming system. This name should be usable as an "]
    #[doc = " identifier for the module by machine processing applications such as code generation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " The name of the organization or individual that published the naming system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
    #[doc = " This is a NamingSystem resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The name of the organization that is responsible for issuing identifiers or codes for this "]
    #[doc = " namespace and ensuring their non-collision."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub responsible: Option<String>,
    #[doc = " The status of this naming system. Enables tracking the life-cycle of the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " Categorizes a naming system for easier search by grouping related naming systems."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
    #[doc = " Indicates how the system may be identified when referenced in electronic exchange."]
    #[serde(rename = "uniqueId")]
    pub unique_id: Vec<NamingSystemUniqueId>,
    #[doc = " Provides guidance on the use of the namespace, including the handling of formatting "]
    #[doc = " characters, use of upper vs. lower case, etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub usage: Option<String>,
    #[doc = " The content was developed with a focus and intent of supporting the contexts that are "]
    #[doc = " listed. These contexts may be general categories (gender, age, ...) or may be references to "]
    #[doc = " specific programs (insurance plans, studies, ...) and may be used to assist with indexing "]
    #[doc = " and searching for appropriate naming system instances."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,
}
#[doc = " A curated namespace that issues unique symbols within that namespace for the identification of "]
#[doc = " concepts, people, devices, etc.  Represents a \"System\" used within the Identifier and Coding "]
#[doc = " data types."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "NamingSystem_UniqueId")]
#[serde(deny_unknown_fields)]
pub struct NamingSystemUniqueId {
    #[doc = " Extensions for comment"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _comment: Option<Element>,
    #[doc = " Extensions for preferred"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _preferred: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " Extensions for value"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _value: Option<Element>,
    #[doc = " Notes about the past or intended usage of this identifier."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Identifies the period of time over which this identifier is considered appropriate to refer "]
    #[doc = " to the naming system.  Outside of this window, the identifier might be non-deterministic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
    #[doc = " Indicates whether this identifier is the \"preferred\" identifier of this type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub preferred: Option<Boolean>,
    #[doc = " Identifies the unique identifier scheme used for this particular identifier."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
    #[doc = " The string that should be sent over the wire to identify the code system or identifier "]
    #[doc = " system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[doc = " A human-readable summary of the resource conveying the essential clinical and business "]
#[doc = " information for the resource."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Narrative {
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " The actual narrative content, a stripped down version of XHTML."]
    pub div: Xhtml,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The status of the narrative - whether it's entirely generated (from just the defined data "]
    #[doc = " or the extensions too), or whether a human authored it and it may contain additional data."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<serde_json::Value>,
}
#[doc = " A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a "]
#[doc = " patient/resident."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct NutritionOrder {
    #[doc = " Extensions for dateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_dateTime")]
    pub _date_time: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for instantiates"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _instantiates: Option<Vec<Element>>,
    #[doc = " Extensions for instantiatesUri"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_instantiatesUri")]
    pub _instantiates_uri: Option<Vec<Element>>,
    #[doc = " Extensions for intent"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _intent: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " A link to a record of allergies or intolerances  which should be included in the nutrition "]
    #[doc = " order."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "allergyIntolerance")]
    pub allergy_intolerance: Option<Vec<Reference>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The date and time that this nutrition order was requested."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dateTime")]
    pub date_time: Option<DateTime>,
    #[doc = " An encounter that provides additional information about the healthcare context in which "]
    #[doc = " this request is made."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,
    #[doc = " Feeding provided through the gastrointestinal tract via a tube, catheter, or stoma that "]
    #[doc = " delivers nutrition distal to the oral cavity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "enteralFormula")]
    pub enteral_formula: Option<NutritionOrderEnteralFormula>,
    #[doc = " This modifier is used to convey Order-specific modifier about the type of oral food or oral "]
    #[doc = " fluids that should not be given. These can be derived from patient allergies, intolerances, "]
    #[doc = " or preferences such as No Red Meat, No Soy or No Wheat or  Gluten-Free.  While it should "]
    #[doc = " not be necessary to repeat allergy or intolerance information captured in the referenced "]
    #[doc = " AllergyIntolerance resource in the excludeFoodModifier, this element may be used to convey "]
    #[doc = " additional specificity related to foods that should be eliminated from the patient’s diet "]
    #[doc = " for any reason.  This modifier applies to the entire nutrition order inclusive of the oral "]
    #[doc = " diet, nutritional supplements and enteral formula feedings."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "excludeFoodModifier")]
    pub exclude_food_modifier: Option<Vec<CodeableConcept>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " This modifier is used to convey order-specific modifiers about the type of food that should "]
    #[doc = " be given. These can be derived from patient allergies, intolerances, or preferences such as "]
    #[doc = " Halal, Vegan or Kosher. This modifier applies to the entire nutrition order inclusive of "]
    #[doc = " the oral diet, nutritional supplements and enteral formula feedings."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "foodPreferenceModifier")]
    pub food_preference_modifier: Option<Vec<CodeableConcept>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Identifiers assigned to this order by the order sender or by the order receiver."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The URL pointing to a protocol, guideline, orderset or other definition that is adhered to "]
    #[doc = " in whole or in part by this NutritionOrder."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub instantiates: Option<Vec<Uri>>,
    #[doc = " The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that "]
    #[doc = " is adhered to in whole or in part by this NutritionOrder."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesCanonical")]
    pub instantiates_canonical: Option<Vec<Canonical>>,
    #[doc = " The URL pointing to an externally maintained protocol, guideline, orderset or other "]
    #[doc = " definition that is adhered to in whole or in part by this NutritionOrder."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesUri")]
    pub instantiates_uri: Option<Vec<Uri>>,
    #[doc = " Indicates the level of authority/intentionality associated with the NutrionOrder and where "]
    #[doc = " the request fits into the workflow chain."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub intent: Option<Code>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Comments made about the {{title}} by the requester, performer, subject or other "]
    #[doc = " participants."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " Diet given orally in contrast to enteral (tube) feeding."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "oralDiet")]
    pub oral_diet: Option<NutritionOrderOralDiet>,
    #[doc = " The practitioner that holds legal responsibility for ordering the diet, nutritional "]
    #[doc = " supplement, or formula feedings."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub orderer: Option<Reference>,
    #[doc = " The person (patient) who needs the nutrition order for an oral diet, nutritional supplement "]
    #[doc = " and/or enteral or formula feeding."]
    pub patient: Reference,
    #[doc = " This is a NutritionOrder resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The workflow status of the nutrition order/request."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " Oral nutritional products given in order to add further nutritional value to the patient's "]
    #[doc = " diet."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub supplement: Option<Vec<NutritionOrderSupplement>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a "]
#[doc = " patient/resident."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "NutritionOrder_Administration")]
#[serde(deny_unknown_fields)]
pub struct NutritionOrderAdministration {
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The volume of formula to provide to the patient per the specified administration schedule."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,
    #[doc = " The rate of administration of formula via a feeding pump, e.g. 60 mL per hour, according to "]
    #[doc = " the specified schedule."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "rateQuantity")]
    pub rate_quantity: Option<Quantity>,
    #[doc = " The rate of administration of formula via a feeding pump, e.g. 60 mL per hour, according to "]
    #[doc = " the specified schedule."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "rateRatio")]
    pub rate_ratio: Option<Ratio>,
    #[doc = " The time period and frequency at which the enteral formula should be delivered to the "]
    #[doc = " patient."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub schedule: Option<Timing>,
}
#[doc = " A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a "]
#[doc = " patient/resident."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "NutritionOrder_EnteralFormula")]
#[serde(deny_unknown_fields)]
pub struct NutritionOrderEnteralFormula {
    #[doc = " Extensions for additiveProductName"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_additiveProductName")]
    pub _additive_product_name: Option<Element>,
    #[doc = " Extensions for administrationInstruction"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_administrationInstruction")]
    pub _administration_instruction: Option<Element>,
    #[doc = " Extensions for baseFormulaProductName"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_baseFormulaProductName")]
    pub _base_formula_product_name: Option<Element>,
    #[doc = " The product or brand name of the type of modular component to be added to the formula."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "additiveProductName")]
    pub additive_product_name: Option<String>,
    #[doc = " Indicates the type of modular component such as protein, carbohydrate, fat or fiber to be "]
    #[doc = " provided in addition to or mixed with the base formula."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "additiveType")]
    pub additive_type: Option<CodeableConcept>,
    #[doc = " Formula administration instructions as structured data.  This repeating structure allows "]
    #[doc = " for changing the administration rate or volume over time for both bolus and continuous "]
    #[doc = " feeding.  An example of this would be an instruction to increase the rate of continuous "]
    #[doc = " feeding every 2 hours."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub administration: Option<Vec<NutritionOrderAdministration>>,
    #[doc = " Free text formula administration, feeding instructions or additional instructions or "]
    #[doc = " information."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "administrationInstruction")]
    pub administration_instruction: Option<String>,
    #[doc = " The product or brand name of the enteral or infant formula product such as \"ACME Adult "]
    #[doc = " Standard Formula\"."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "baseFormulaProductName")]
    pub base_formula_product_name: Option<String>,
    #[doc = " The type of enteral or infant formula such as an adult standard formula with fiber or a "]
    #[doc = " soy-based infant formula."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "baseFormulaType")]
    pub base_formula_type: Option<CodeableConcept>,
    #[doc = " The amount of energy (calories) that the formula should provide per specified volume, "]
    #[doc = " typically per mL or fluid oz.  For example, an infant may require a formula that provides "]
    #[doc = " 24 calories per fluid ounce or an adult may require an enteral formula that provides 1.5 "]
    #[doc = " calorie/mL."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "caloricDensity")]
    pub caloric_density: Option<Quantity>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The maximum total quantity of formula that may be administered to a subject over the period "]
    #[doc = " of time, e.g. 1440 mL over 24 hours."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxVolumeToDeliver")]
    pub max_volume_to_deliver: Option<Quantity>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The route or physiological path of administration into the patient's gastrointestinal  "]
    #[doc = " tract for purposes of providing the formula feeding, e.g. nasogastric tube."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "routeofAdministration")]
    pub routeof_administration: Option<CodeableConcept>,
}
#[doc = " A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a "]
#[doc = " patient/resident."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "NutritionOrder_Nutrient")]
#[serde(deny_unknown_fields)]
pub struct NutritionOrderNutrient {
    #[doc = " The quantity of the specified nutrient to include in diet."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub amount: Option<Quantity>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The nutrient that is being modified such as carbohydrate or sodium."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub modifier: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a "]
#[doc = " patient/resident."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "NutritionOrder_OralDiet")]
#[serde(deny_unknown_fields)]
pub struct NutritionOrderOralDiet {
    #[doc = " Extensions for instruction"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _instruction: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The required consistency (e.g. honey-thick, nectar-thick, thin, thickened.) of liquids or "]
    #[doc = " fluids served to the patient."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fluidConsistencyType")]
    pub fluid_consistency_type: Option<Vec<CodeableConcept>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Free text or additional instructions or information pertaining to the oral diet."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub instruction: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Class that defines the quantity and type of nutrient modifications (for example "]
    #[doc = " carbohydrate, fiber or sodium) required for the oral diet."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub nutrient: Option<Vec<NutritionOrderNutrient>>,
    #[doc = " The time period and frequency at which the diet should be given.  The diet should be given "]
    #[doc = " for the combination of all schedules if more than one schedule is present."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub schedule: Option<Vec<Timing>>,
    #[doc = " Class that describes any texture modifications required for the patient to safely consume "]
    #[doc = " various types of solid foods."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub texture: Option<Vec<NutritionOrderTexture>>,
    #[doc = " The kind of diet or dietary restriction such as fiber restricted diet or diabetic diet."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Vec<CodeableConcept>>,
}
#[doc = " A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a "]
#[doc = " patient/resident."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "NutritionOrder_Supplement")]
#[serde(deny_unknown_fields)]
pub struct NutritionOrderSupplement {
    #[doc = " Extensions for instruction"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _instruction: Option<Element>,
    #[doc = " Extensions for productName"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_productName")]
    pub _product_name: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Free text or additional instructions or information pertaining to the oral supplement."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub instruction: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The product or brand name of the nutritional supplement such as \"Acme Protein Shake\"."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "productName")]
    pub product_name: Option<String>,
    #[doc = " The amount of the nutritional supplement to be given."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,
    #[doc = " The time period and frequency at which the supplement(s) should be given.  The supplement "]
    #[doc = " should be given for the combination of all schedules if more than one schedule is present."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub schedule: Option<Vec<Timing>>,
    #[doc = " The kind of nutritional supplement product required such as a high protein or pediatric "]
    #[doc = " clear liquid supplement."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a "]
#[doc = " patient/resident."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "NutritionOrder_Texture")]
#[serde(deny_unknown_fields)]
pub struct NutritionOrderTexture {
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The food type(s) (e.g. meats, all foods)  that the texture modification applies to.  This "]
    #[doc = " could be all foods types."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "foodType")]
    pub food_type: Option<CodeableConcept>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Any texture modifications (for solid foods) that should be made, e.g. easy to chew, "]
    #[doc = " chopped, ground, and pureed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub modifier: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " A food or fluid product that is consumed by patients."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct NutritionProduct {
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Nutrition products can have different classifications - according to its nutritional "]
    #[doc = " properties, preparation methods, etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,
    #[doc = " The code assigned to the product, for example a manufacturer number or other terminology."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " Ingredients contained in this product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub ingredient: Option<Vec<NutritionProductIngredient>>,
    #[doc = " Conveys instance-level information about this product item. One or several physical, "]
    #[doc = " countable instances or occurrences of the product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub instance: Option<NutritionProductInstance>,
    #[doc = " Allergens that are known or suspected to be a part of this nutrition product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "knownAllergen")]
    pub known_allergen: Option<Vec<CodeableReference>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The organisation (manufacturer, representative or legal authorisation holder) that is "]
    #[doc = " responsible for the device."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub manufacturer: Option<Vec<Reference>>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Comments made about the product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " The product's nutritional information expressed by the nutrients."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub nutrient: Option<Vec<NutritionProductNutrient>>,
    #[doc = " Specifies descriptive properties of the nutrition product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "productCharacteristic")]
    pub product_characteristic: Option<Vec<NutritionProductProductCharacteristic>>,
    #[doc = " This is a NutritionProduct resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The current state of the product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " A food or fluid product that is consumed by patients."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "NutritionProduct_Ingredient")]
#[serde(deny_unknown_fields)]
pub struct NutritionProductIngredient {
    #[doc = " The amount of ingredient that is in the product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub amount: Option<Vec<Ratio>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The ingredient contained in the product."]
    pub item: CodeableReference,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " A food or fluid product that is consumed by patients."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "NutritionProduct_Instance")]
#[serde(deny_unknown_fields)]
pub struct NutritionProductInstance {
    #[doc = " Extensions for expiry"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _expiry: Option<Element>,
    #[doc = " Extensions for lotNumber"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lotNumber")]
    pub _lot_number: Option<Element>,
    #[doc = " Extensions for useBy"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_useBy")]
    pub _use_by: Option<Element>,
    #[doc = " The time after which the product is no longer expected to be in proper condition, or its "]
    #[doc = " use is not advised or not allowed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expiry: Option<DateTime>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The identifier for the physical instance, typically a serial number."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " The identification of the batch or lot of the product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lotNumber")]
    pub lot_number: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The amount of items or instances that the resource considers, for instance when referring "]
    #[doc = " to 2 identical units together."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,
    #[doc = " The time after which the product is no longer expected to be in proper condition, or its "]
    #[doc = " use is not advised or not allowed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useBy")]
    pub use_by: Option<DateTime>,
}
#[doc = " A food or fluid product that is consumed by patients."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "NutritionProduct_Nutrient")]
#[serde(deny_unknown_fields)]
pub struct NutritionProductNutrient {
    #[doc = " The amount of nutrient expressed in one or more units: X per pack / per serving / per dose."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub amount: Option<Vec<Ratio>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The (relevant) nutrients in the product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub item: Option<CodeableReference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " A food or fluid product that is consumed by patients."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "NutritionProduct_ProductCharacteristic")]
#[serde(deny_unknown_fields)]
pub struct NutritionProductProductCharacteristic {
    #[doc = " Extensions for valueBase64Binary"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBase64Binary")]
    pub _value_base_64_binary: Option<Element>,
    #[doc = " Extensions for valueBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub _value_boolean: Option<Element>,
    #[doc = " Extensions for valueString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueString")]
    pub _value_string: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A code specifying which characteristic of the product is being described (for example, "]
    #[doc = " colour, shape)."]
    #[serde(rename = "type")]
    pub type_: CodeableConcept,
    #[doc = " The actual characteristic value corresponding to the type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAttachment")]
    pub value_attachment: Option<Attachment>,
    #[doc = " The actual characteristic value corresponding to the type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBase64Binary")]
    pub value_base_64_binary: Option<String>,
    #[doc = " The actual characteristic value corresponding to the type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,
    #[doc = " The actual characteristic value corresponding to the type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,
    #[doc = " The actual characteristic value corresponding to the type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,
    #[doc = " The actual characteristic value corresponding to the type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueString")]
    pub value_string: Option<String>,
}
#[doc = " Measurements and simple assertions made about a patient, device or other subject."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Observation {
    #[doc = " Extensions for effectiveDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_effectiveDateTime")]
    pub _effective_date_time: Option<Element>,
    #[doc = " Extensions for effectiveInstant"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_effectiveInstant")]
    pub _effective_instant: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for issued"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _issued: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for valueBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub _value_boolean: Option<Element>,
    #[doc = " Extensions for valueDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDateTime")]
    pub _value_date_time: Option<Element>,
    #[doc = " Extensions for valueInteger"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueInteger")]
    pub _value_integer: Option<Element>,
    #[doc = " Extensions for valueString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueString")]
    pub _value_string: Option<Element>,
    #[doc = " Extensions for valueTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueTime")]
    pub _value_time: Option<Element>,
    #[doc = " A plan, proposal or order that is fulfilled in whole or in part by this event.  For "]
    #[doc = " example, a MedicationRequest may require a patient to have laboratory test performed before "]
    #[doc = "  it is dispensed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Vec<Reference>>,
    #[doc = " Indicates the site on the subject's body where the observation was made (i.e. the target "]
    #[doc = " site)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "bodySite")]
    pub body_site: Option<CodeableConcept>,
    #[doc = " A code that classifies the general type of observation being made."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,
    #[doc = " Describes what was observed. Sometimes this is called the observation \"name\"."]
    pub code: CodeableConcept,
    #[doc = " Some observations have multiple component observations.  These component observations are "]
    #[doc = " expressed as separate code value pairs that share the same attributes.  Examples include "]
    #[doc = " systolic and diastolic component observations for blood pressure measurement and multiple "]
    #[doc = " component observations for genetics observations."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub component: Option<Vec<ObservationComponent>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " Provides a reason why the expected value in the element Observation.value[x] is missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dataAbsentReason")]
    pub data_absent_reason: Option<CodeableConcept>,
    #[doc = " The target resource that represents a measurement from which this observation value is "]
    #[doc = " derived. For example, a calculated anion gap or a fetal measurement based on an ultrasound "]
    #[doc = " image."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "derivedFrom")]
    pub derived_from: Option<Vec<Reference>>,
    #[doc = " The device used to generate the observation data."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub device: Option<Reference>,
    #[doc = " The time or time-period the observed value is asserted as being true. For biological "]
    #[doc = " subjects - e.g. human patients - this is usually called the \"physiologically relevant "]
    #[doc = " time\". This is usually either the time of the procedure or of specimen collection, but very "]
    #[doc = " often the source of the date/time is not known, only the date/time itself."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectiveDateTime")]
    pub effective_date_time: Option<String>,
    #[doc = " The time or time-period the observed value is asserted as being true. For biological "]
    #[doc = " subjects - e.g. human patients - this is usually called the \"physiologically relevant "]
    #[doc = " time\". This is usually either the time of the procedure or of specimen collection, but very "]
    #[doc = " often the source of the date/time is not known, only the date/time itself."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectiveInstant")]
    pub effective_instant: Option<String>,
    #[doc = " The time or time-period the observed value is asserted as being true. For biological "]
    #[doc = " subjects - e.g. human patients - this is usually called the \"physiologically relevant "]
    #[doc = " time\". This is usually either the time of the procedure or of specimen collection, but very "]
    #[doc = " often the source of the date/time is not known, only the date/time itself."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectivePeriod")]
    pub effective_period: Option<Period>,
    #[doc = " The time or time-period the observed value is asserted as being true. For biological "]
    #[doc = " subjects - e.g. human patients - this is usually called the \"physiologically relevant "]
    #[doc = " time\". This is usually either the time of the procedure or of specimen collection, but very "]
    #[doc = " often the source of the date/time is not known, only the date/time itself."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectiveTiming")]
    pub effective_timing: Option<Timing>,
    #[doc = " The healthcare event  (e.g. a patient and healthcare provider interaction) during which "]
    #[doc = " this observation is made."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The actual focus of an observation when it is not the patient of record representing "]
    #[doc = " something or someone associated with the patient such as a spouse, parent, fetus, or donor. "]
    #[doc = " For example, fetus observations in a mother's record.  The focus of an observation could "]
    #[doc = " also be an existing condition,  an intervention, the subject's diet,  another observation "]
    #[doc = " of the subject,  or a body structure such as tumor or implanted device.   An example use "]
    #[doc = " case would be using the Observation resource to capture whether the mother is trained to "]
    #[doc = " change her child's tracheostomy tube. In this example, the child is the patient of record "]
    #[doc = " and the mother is the focus."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub focus: Option<Vec<Reference>>,
    #[doc = " This observation is a group observation (e.g. a battery, a panel of tests, a set of vital "]
    #[doc = " sign measurements) that includes the target as a member of the group."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "hasMember")]
    pub has_member: Option<Vec<Reference>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A unique identifier assigned to this observation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " A categorical assessment of an observation value.  For example, high, low, normal."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub interpretation: Option<Vec<CodeableConcept>>,
    #[doc = " The date and time this version of the observation was made available to providers, "]
    #[doc = " typically after the results have been reviewed and verified."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub issued: Option<Instant>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " Indicates the mechanism used to perform the observation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub method: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Comments about the observation or the results."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " A larger event of which this particular Observation is a component or step.  For example,  "]
    #[doc = " an observation as part of a procedure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "partOf")]
    pub part_of: Option<Vec<Reference>>,
    #[doc = " Who was responsible for asserting the observed value as \"true\"."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub performer: Option<Vec<Reference>>,
    #[doc = " Guidance on how to interpret the value by comparison to a normal or recommended range.  "]
    #[doc = " Multiple reference ranges are interpreted as an \"OR\".   In other words, to represent two "]
    #[doc = " distinct target populations, two `referenceRange` elements would be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "referenceRange")]
    pub reference_range: Option<Vec<ObservationReferenceRange>>,
    #[doc = " This is a Observation resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The specimen that was used when this observation was made."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub specimen: Option<Reference>,
    #[doc = " The status of the result value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " The patient, or group of patients, location, or device this observation is about and into "]
    #[doc = " whose record the observation is placed. If the actual focus of the observation is different "]
    #[doc = " from the subject (or a sample of, part, or region of the subject), the `focus` element or "]
    #[doc = " the `code` itself specifies the actual focus of the observation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Reference>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " The information determined as a result of making the observation, if the information has a "]
    #[doc = " simple value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,
    #[doc = " The information determined as a result of making the observation, if the information has a "]
    #[doc = " simple value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,
    #[doc = " The information determined as a result of making the observation, if the information has a "]
    #[doc = " simple value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDateTime")]
    pub value_date_time: Option<String>,
    #[doc = " The information determined as a result of making the observation, if the information has a "]
    #[doc = " simple value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueInteger")]
    pub value_integer: Option<f64>,
    #[doc = " The information determined as a result of making the observation, if the information has a "]
    #[doc = " simple value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valuePeriod")]
    pub value_period: Option<Period>,
    #[doc = " The information determined as a result of making the observation, if the information has a "]
    #[doc = " simple value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,
    #[doc = " The information determined as a result of making the observation, if the information has a "]
    #[doc = " simple value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRange")]
    pub value_range: Option<Range>,
    #[doc = " The information determined as a result of making the observation, if the information has a "]
    #[doc = " simple value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRatio")]
    pub value_ratio: Option<Ratio>,
    #[doc = " The information determined as a result of making the observation, if the information has a "]
    #[doc = " simple value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueSampledData")]
    pub value_sampled_data: Option<SampledData>,
    #[doc = " The information determined as a result of making the observation, if the information has a "]
    #[doc = " simple value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueString")]
    pub value_string: Option<String>,
    #[doc = " The information determined as a result of making the observation, if the information has a "]
    #[doc = " simple value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTime")]
    pub value_time: Option<String>,
}
#[doc = " Set of definitional characteristics for a kind of observation or measurement produced or "]
#[doc = " consumed by an orderable health care service."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ObservationDefinition {
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for multipleResultsAllowed"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_multipleResultsAllowed")]
    pub _multiple_results_allowed: Option<Element>,
    #[doc = " Extensions for permittedDataType"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_permittedDataType")]
    pub _permitted_data_type: Option<Vec<Element>>,
    #[doc = " Extensions for preferredReportName"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_preferredReportName")]
    pub _preferred_report_name: Option<Element>,
    #[doc = " The set of abnormal coded results for the observation conforming to this "]
    #[doc = " ObservationDefinition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "abnormalCodedValueSet")]
    pub abnormal_coded_value_set: Option<Reference>,
    #[doc = " A code that classifies the general type of observation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,
    #[doc = " Describes what will be observed. Sometimes this is called the observation \"name\"."]
    pub code: CodeableConcept,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The set of critical coded results for the observation conforming to this "]
    #[doc = " ObservationDefinition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "criticalCodedValueSet")]
    pub critical_coded_value_set: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A unique identifier assigned to this ObservationDefinition artifact."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " The method or technique used to perform the observation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub method: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Multiple results allowed for observations conforming to this ObservationDefinition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "multipleResultsAllowed")]
    pub multiple_results_allowed: Option<Boolean>,
    #[doc = " The set of normal coded results for the observations conforming to this "]
    #[doc = " ObservationDefinition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "normalCodedValueSet")]
    pub normal_coded_value_set: Option<Reference>,
    #[doc = " The data types allowed for the value element of the instance observations conforming to "]
    #[doc = " this ObservationDefinition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "permittedDataType")]
    pub permitted_data_type: Option<Vec<Code>>,
    #[doc = " The preferred name to be used when reporting the results of observations conforming to this "]
    #[doc = " ObservationDefinition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "preferredReportName")]
    pub preferred_report_name: Option<String>,
    #[doc = " Multiple  ranges of results qualified by different contexts for ordinal or continuous "]
    #[doc = " observations conforming to this ObservationDefinition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "qualifiedInterval")]
    pub qualified_interval: Option<Vec<ObservationDefinitionQualifiedInterval>>,
    #[doc = " Characteristics for quantitative results of this observation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "quantitativeDetails")]
    pub quantitative_details: Option<ObservationDefinitionQuantitativeDetails>,
    #[doc = " This is a ObservationDefinition resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " The set of valid coded results for the observations  conforming to this "]
    #[doc = " ObservationDefinition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "validCodedValueSet")]
    pub valid_coded_value_set: Option<Reference>,
}
#[doc = " Set of definitional characteristics for a kind of observation or measurement produced or "]
#[doc = " consumed by an orderable health care service."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ObservationDefinition_QualifiedInterval")]
#[serde(deny_unknown_fields)]
pub struct ObservationDefinitionQualifiedInterval {
    #[doc = " Extensions for category"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _category: Option<Element>,
    #[doc = " Extensions for condition"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _condition: Option<Element>,
    #[doc = " Extensions for gender"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _gender: Option<Element>,
    #[doc = " The age at which this reference range is applicable. This is a neonatal age (e.g. number of "]
    #[doc = " weeks at term) if the meaning says so."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub age: Option<Range>,
    #[doc = " Codes to indicate the target population this reference range applies to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "appliesTo")]
    pub applies_to: Option<Vec<CodeableConcept>>,
    #[doc = " The category of interval of values for continuous or ordinal observations conforming to "]
    #[doc = " this ObservationDefinition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Code>,
    #[doc = " Text based condition for which the reference range is valid."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub condition: Option<String>,
    #[doc = " Codes to indicate the health context the range applies to. For example, the normal or "]
    #[doc = " therapeutic range."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub context: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Sex of the population the range applies to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub gender: Option<Code>,
    #[doc = " The gestational age to which this reference range is applicable, in the context of "]
    #[doc = " pregnancy."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "gestationalAge")]
    pub gestational_age: Option<Range>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The low and high values determining the interval. There may be only one of the two."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub range: Option<Range>,
}
#[doc = " Set of definitional characteristics for a kind of observation or measurement produced or "]
#[doc = " consumed by an orderable health care service."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ObservationDefinition_QuantitativeDetails")]
#[serde(deny_unknown_fields)]
pub struct ObservationDefinitionQuantitativeDetails {
    #[doc = " Extensions for conversionFactor"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_conversionFactor")]
    pub _conversion_factor: Option<Element>,
    #[doc = " Extensions for decimalPrecision"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_decimalPrecision")]
    pub _decimal_precision: Option<Element>,
    #[doc = " Factor for converting value expressed with SI unit to value expressed with customary unit."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "conversionFactor")]
    pub conversion_factor: Option<Decimal>,
    #[doc = " Customary unit used to report quantitative results of observations conforming to this "]
    #[doc = " ObservationDefinition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "customaryUnit")]
    pub customary_unit: Option<CodeableConcept>,
    #[doc = " Number of digits after decimal separator when the results of such observations are of type "]
    #[doc = " Quantity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "decimalPrecision")]
    pub decimal_precision: Option<Integer>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " SI unit used to report quantitative results of observations conforming to this "]
    #[doc = " ObservationDefinition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub unit: Option<CodeableConcept>,
}
#[doc = " Measurements and simple assertions made about a patient, device or other subject."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Observation_Component")]
#[serde(deny_unknown_fields)]
pub struct ObservationComponent {
    #[doc = " Extensions for valueBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub _value_boolean: Option<Element>,
    #[doc = " Extensions for valueDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDateTime")]
    pub _value_date_time: Option<Element>,
    #[doc = " Extensions for valueInteger"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueInteger")]
    pub _value_integer: Option<Element>,
    #[doc = " Extensions for valueString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueString")]
    pub _value_string: Option<Element>,
    #[doc = " Extensions for valueTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueTime")]
    pub _value_time: Option<Element>,
    #[doc = " Describes what was observed. Sometimes this is called the observation \"code\"."]
    pub code: CodeableConcept,
    #[doc = " Provides a reason why the expected value in the element Observation.component.value[x] is "]
    #[doc = " missing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dataAbsentReason")]
    pub data_absent_reason: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A categorical assessment of an observation value.  For example, high, low, normal."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub interpretation: Option<Vec<CodeableConcept>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Guidance on how to interpret the value by comparison to a normal or recommended range."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "referenceRange")]
    pub reference_range: Option<Vec<ObservationReferenceRange>>,
    #[doc = " The information determined as a result of making the observation, if the information has a "]
    #[doc = " simple value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,
    #[doc = " The information determined as a result of making the observation, if the information has a "]
    #[doc = " simple value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,
    #[doc = " The information determined as a result of making the observation, if the information has a "]
    #[doc = " simple value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDateTime")]
    pub value_date_time: Option<String>,
    #[doc = " The information determined as a result of making the observation, if the information has a "]
    #[doc = " simple value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueInteger")]
    pub value_integer: Option<f64>,
    #[doc = " The information determined as a result of making the observation, if the information has a "]
    #[doc = " simple value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valuePeriod")]
    pub value_period: Option<Period>,
    #[doc = " The information determined as a result of making the observation, if the information has a "]
    #[doc = " simple value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,
    #[doc = " The information determined as a result of making the observation, if the information has a "]
    #[doc = " simple value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRange")]
    pub value_range: Option<Range>,
    #[doc = " The information determined as a result of making the observation, if the information has a "]
    #[doc = " simple value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRatio")]
    pub value_ratio: Option<Ratio>,
    #[doc = " The information determined as a result of making the observation, if the information has a "]
    #[doc = " simple value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueSampledData")]
    pub value_sampled_data: Option<SampledData>,
    #[doc = " The information determined as a result of making the observation, if the information has a "]
    #[doc = " simple value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueString")]
    pub value_string: Option<String>,
    #[doc = " The information determined as a result of making the observation, if the information has a "]
    #[doc = " simple value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTime")]
    pub value_time: Option<String>,
}
#[doc = " Measurements and simple assertions made about a patient, device or other subject."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Observation_ReferenceRange")]
#[serde(deny_unknown_fields)]
pub struct ObservationReferenceRange {
    #[doc = " Extensions for text"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _text: Option<Element>,
    #[doc = " The age at which this reference range is applicable. This is a neonatal age (e.g. number of "]
    #[doc = " weeks at term) if the meaning says so."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub age: Option<Range>,
    #[doc = " Codes to indicate the target population this reference range applies to.  For example, a "]
    #[doc = " reference range may be based on the normal population or a particular sex or race.  "]
    #[doc = " Multiple `appliesTo`  are interpreted as an \"AND\" of the target populations.  For example, "]
    #[doc = " to represent a target population of African American females, both a code of female and a "]
    #[doc = " code for African American would be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "appliesTo")]
    pub applies_to: Option<Vec<CodeableConcept>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The value of the high bound of the reference range.  The high bound of the reference range "]
    #[doc = " endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9). If the high bound "]
    #[doc = " is omitted,  it is assumed to be meaningless (e.g. reference range is >= 2.3)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub high: Option<Quantity>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The value of the low bound of the reference range.  The low bound of the reference range "]
    #[doc = " endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9). If the low bound "]
    #[doc = " is omitted,  it is assumed to be meaningless (e.g. reference range is <=2.3)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub low: Option<Quantity>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Text based reference range in an observation which may be used when a quantitative range is "]
    #[doc = " not appropriate for an observation.  An example would be a reference value of \"Negative\" or "]
    #[doc = " a list or table of \"normals\"."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    #[doc = " Codes to indicate the what part of the targeted reference population it applies to. For "]
    #[doc = " example, the normal or therapeutic range."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " A formal computable definition of an operation (on the RESTful interface) or a named query "]
#[doc = " (using the search interaction)."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct OperationDefinition {
    #[doc = " Extensions for affectsState"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_affectsState")]
    pub _affects_state: Option<Element>,
    #[doc = " Extensions for code"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _code: Option<Element>,
    #[doc = " Extensions for comment"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _comment: Option<Element>,
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for experimental"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _experimental: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for instance"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _instance: Option<Element>,
    #[doc = " Extensions for kind"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _kind: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for publisher"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _publisher: Option<Element>,
    #[doc = " Extensions for purpose"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _purpose: Option<Element>,
    #[doc = " Extensions for resource"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _resource: Option<Vec<Element>>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for system"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _system: Option<Element>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " Whether the operation affects state. Side effects such as producing audit trail entries do "]
    #[doc = " not count as 'affecting  state'."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "affectsState")]
    pub affects_state: Option<Boolean>,
    #[doc = " Indicates that this operation definition is a constraining profile on the base."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub base: Option<Canonical>,
    #[doc = " The name used to invoke the operation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,
    #[doc = " Additional information about how to use this operation or named query."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<Markdown>,
    #[doc = " Contact details to assist a user in finding and communicating with the publisher."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The date  (and optionally time) when the operation definition was published. The date must "]
    #[doc = " change when the business version changes and it must change if the status code changes. In "]
    #[doc = " addition, it should change when the substantive content of the operation definition "]
    #[doc = " changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " A free text natural language description of the operation definition from a consumer's "]
    #[doc = " perspective."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " A Boolean value to indicate that this operation definition is authored for testing purposes "]
    #[doc = " (or education/evaluation/marketing) and is not intended to be used for genuine usage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " Additional validation information for the in parameters - a single profile that covers all "]
    #[doc = " the parameters. The profile is a constraint on the parameters resource as a whole."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "inputProfile")]
    pub input_profile: Option<Canonical>,
    #[doc = " Indicates whether this operation can be invoked on a particular instance of one of the "]
    #[doc = " given types."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub instance: Option<Boolean>,
    #[doc = " A legal or geographic region in which the operation definition is intended to be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,
    #[doc = " Whether this is an operation or a named query."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<Code>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A natural language name identifying the operation definition. This name should be usable as "]
    #[doc = " an identifier for the module by machine processing applications such as code generation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " Additional validation information for the out parameters - a single profile that covers all "]
    #[doc = " the parameters. The profile is a constraint on the parameters resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "outputProfile")]
    pub output_profile: Option<Canonical>,
    #[doc = " Defines an appropriate combination of parameters to use when invoking this operation, to "]
    #[doc = " help code generators when generating overloaded parameter sets for this operation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub overload: Option<Vec<OperationDefinitionOverload>>,
    #[doc = " The parameters for the operation/query."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub parameter: Option<Vec<OperationDefinitionParameter>>,
    #[doc = " The name of the organization or individual that published the operation definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
    #[doc = " Explanation of why this operation definition is needed and why it has been designed as it "]
    #[doc = " has."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,
    #[doc = " The types on which this operation can be executed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource: Option<Vec<Code>>,
    #[doc = " This is a OperationDefinition resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The status of this operation definition. Enables tracking the life-cycle of the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " Indicates whether this operation or named query can be invoked at the system level (e.g. "]
    #[doc = " without needing to choose a resource type for the context)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub system: Option<Boolean>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " A short, descriptive, user-friendly title for the operation definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[doc = " Indicates whether this operation or named query can be invoked at the resource type level "]
    #[doc = " for any given resource type level (e.g. without needing to choose a specific resource id "]
    #[doc = " for the context)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Boolean>,
    #[doc = " An absolute URI that is used to identify this operation definition when it is referenced in "]
    #[doc = " a specification, model, design or an instance; also called its canonical identifier. This "]
    #[doc = " SHOULD be globally unique and SHOULD be a literal address at which at which an "]
    #[doc = " authoritative instance of this operation definition is (or will be) published. This URL can "]
    #[doc = " be the target of a canonical reference. It SHALL remain the same when the operation "]
    #[doc = " definition is stored on different servers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
    #[doc = " The content was developed with a focus and intent of supporting the contexts that are "]
    #[doc = " listed. These contexts may be general categories (gender, age, ...) or may be references to "]
    #[doc = " specific programs (insurance plans, studies, ...) and may be used to assist with indexing "]
    #[doc = " and searching for appropriate operation definition instances."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,
    #[doc = " The identifier that is used to identify this version of the operation definition when it is "]
    #[doc = " referenced in a specification, model, design or instance. This is an arbitrary value "]
    #[doc = " managed by the operation definition author and is not expected to be globally unique. For "]
    #[doc = " example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. "]
    #[doc = " There is also no expectation that versions can be placed in a lexicographical sequence."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[doc = " A formal computable definition of an operation (on the RESTful interface) or a named query "]
#[doc = " (using the search interaction)."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "OperationDefinition_Binding")]
#[serde(deny_unknown_fields)]
pub struct OperationDefinitionBinding {
    #[doc = " Extensions for strength"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _strength: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Indicates the degree of conformance expectations associated with this binding - that is, "]
    #[doc = " the degree to which the provided value set must be adhered to in the instances."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub strength: Option<Code>,
    #[doc = " Points to the value set or external definition (e.g. implicit value set) that identifies "]
    #[doc = " the set of codes to be used."]
    #[serde(rename = "valueSet")]
    pub value_set: Canonical,
}
#[doc = " A formal computable definition of an operation (on the RESTful interface) or a named query "]
#[doc = " (using the search interaction)."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "OperationDefinition_Overload")]
#[serde(deny_unknown_fields)]
pub struct OperationDefinitionOverload {
    #[doc = " Extensions for comment"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _comment: Option<Element>,
    #[doc = " Extensions for parameterName"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_parameterName")]
    pub _parameter_name: Option<Vec<Element>>,
    #[doc = " Comments to go on overload."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Name of parameter to include in overload."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "parameterName")]
    pub parameter_name: Option<Vec<String>>,
}
#[doc = " A formal computable definition of an operation (on the RESTful interface) or a named query "]
#[doc = " (using the search interaction)."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "OperationDefinition_Parameter")]
#[serde(deny_unknown_fields)]
pub struct OperationDefinitionParameter {
    #[doc = " Extensions for documentation"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _documentation: Option<Element>,
    #[doc = " Extensions for max"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _max: Option<Element>,
    #[doc = " Extensions for min"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _min: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for searchType"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_searchType")]
    pub _search_type: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " Extensions for use"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _use: Option<Element>,
    #[doc = " Binds to a value set if this parameter is coded (code, Coding, CodeableConcept)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub binding: Option<OperationDefinitionBinding>,
    #[doc = " Describes the meaning or use of this parameter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub documentation: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The maximum number of times this element is permitted to appear in the request or response."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub max: Option<String>,
    #[doc = " The minimum number of times this parameter SHALL appear in the request or response."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub min: Option<Integer>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The name of used to identify the parameter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<Code>,
    #[doc = " The parts of a nested Parameter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub part: Option<Vec<OperationDefinitionParameter>>,
    #[doc = " Identifies other resource parameters within the operation invocation that are expected to "]
    #[doc = " resolve to this resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "referencedFrom")]
    pub referenced_from: Option<Vec<OperationDefinitionReferencedFrom>>,
    #[doc = " How the parameter is understood as a search parameter. This is only used if the parameter "]
    #[doc = " type is 'string'."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "searchType")]
    pub search_type: Option<Code>,
    #[doc = " Used when the type is \"Reference\" or \"canonical\", and identifies a profile structure or "]
    #[doc = " implementation Guide that applies to the target of the reference this parameter refers to. "]
    #[doc = " If any profiles are specified, then the content must conform to at least one of them. The "]
    #[doc = " URL can be a local reference - to a contained StructureDefinition, or a reference to "]
    #[doc = " another StructureDefinition or Implementation Guide by a canonical URL. When an "]
    #[doc = " implementation guide is specified, the target resource SHALL conform to at least one "]
    #[doc = " profile defined in the implementation guide."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetProfile")]
    pub target_profile: Option<Vec<Canonical>>,
    #[doc = " The type for this parameter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
    #[doc = " Whether this is an input or an output parameter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "use")]
    pub use_: Option<Code>,
}
#[doc = " A formal computable definition of an operation (on the RESTful interface) or a named query "]
#[doc = " (using the search interaction)."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "OperationDefinition_ReferencedFrom")]
#[serde(deny_unknown_fields)]
pub struct OperationDefinitionReferencedFrom {
    #[doc = " Extensions for source"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _source: Option<Element>,
    #[doc = " Extensions for sourceId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sourceId")]
    pub _source_id: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The name of the parameter or dot-separated path of parameter names pointing to the resource "]
    #[doc = " parameter that is expected to contain a reference to this resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
    #[doc = " The id of the element in the referencing resource that is expected to resolve to this "]
    #[doc = " resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "sourceId")]
    pub source_id: Option<String>,
}
#[doc = " A collection of error, warning, or information messages that result from a system action."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct OperationOutcome {
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " An error, warning, or information message that results from a system action."]
    pub issue: Vec<OperationOutcomeIssue>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " This is a OperationOutcome resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " A collection of error, warning, or information messages that result from a system action."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "OperationOutcome_Issue")]
#[serde(deny_unknown_fields)]
pub struct OperationOutcomeIssue {
    #[doc = " Extensions for code"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _code: Option<Element>,
    #[doc = " Extensions for diagnostics"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _diagnostics: Option<Element>,
    #[doc = " Extensions for expression"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _expression: Option<Vec<Element>>,
    #[doc = " Extensions for location"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _location: Option<Vec<Element>>,
    #[doc = " Extensions for severity"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _severity: Option<Element>,
    #[doc = " Describes the type of the issue. The system that creates an OperationOutcome SHALL choose "]
    #[doc = " the most applicable code from the IssueType value set, and may additional provide its own "]
    #[doc = " code for the error in the details element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,
    #[doc = " Additional details about the error. This may be a text description of the error or a system "]
    #[doc = " code that identifies the error."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub details: Option<CodeableConcept>,
    #[doc = " Additional diagnostic information about the issue."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub diagnostics: Option<String>,
    #[doc = " A [simple subset of FHIRPath](fhirpath.html#simple) limited to element names, repetition "]
    #[doc = " indicators and the default child accessor that identifies one of the elements in the "]
    #[doc = " resource that caused this issue to be raised."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expression: Option<Vec<String>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " This element is deprecated because it is XML specific. It is replaced by issue.expression, "]
    #[doc = " which is format independent, and simpler to parse. "]
    #[doc = " "]
    #[doc = " For resource issues, this will be a simple XPath limited to element names, repetition "]
    #[doc = " indicators and the default child accessor that identifies one of the elements in the "]
    #[doc = " resource that caused this issue to be raised.  For HTTP errors, will be \"http.\" + the "]
    #[doc = " parameter name."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<Vec<String>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Indicates whether the issue indicates a variation from successful processing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub severity: Option<Code>,
}
#[doc = " A formally or informally recognized grouping of people or organizations formed for the purpose "]
#[doc = " of achieving some form of collective action.  Includes companies, institutions, corporations, "]
#[doc = " departments, community groups, healthcare practice groups, payer/insurer, etc."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Organization {
    #[doc = " Extensions for active"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _active: Option<Element>,
    #[doc = " Extensions for alias"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _alias: Option<Vec<Element>>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Whether the organization's record is still in active use."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub active: Option<Boolean>,
    #[doc = " An address for the organization."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub address: Option<Vec<Address>>,
    #[doc = " A list of alternate names that the organization is known as, or was known as in the past."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub alias: Option<Vec<String>>,
    #[doc = " Contact for the organization for a certain purpose."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<OrganizationContact>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " Technical endpoints providing access to services operated for the organization."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<Vec<Reference>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Identifier for the organization that is used to identify the organization across multiple "]
    #[doc = " disparate systems."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A name associated with the organization."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " The organization of which this organization forms a part."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "partOf")]
    pub part_of: Option<Reference>,
    #[doc = " This is a Organization resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " A contact detail for the organization."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub telecom: Option<Vec<ContactPoint>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " The kind(s) of organization that this is."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Vec<CodeableConcept>>,
}
#[doc = " Defines an affiliation/assotiation/relationship between 2 distinct oganizations, that is not a "]
#[doc = " part-of relationship/sub-division relationship."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct OrganizationAffiliation {
    #[doc = " Extensions for active"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _active: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Whether this organization affiliation record is in active use."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub active: Option<Boolean>,
    #[doc = " Definition of the role the participatingOrganization plays in the association."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Vec<CodeableConcept>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " Technical endpoints providing access to services operated for this role."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<Vec<Reference>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Healthcare services provided through the role."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "healthcareService")]
    pub healthcare_service: Option<Vec<Reference>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Business identifiers that are specific to this role."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The location(s) at which the role occurs."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<Vec<Reference>>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Health insurance provider network in which the participatingOrganization provides the "]
    #[doc = " role's services (if defined) at the indicated locations (if defined)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub network: Option<Vec<Reference>>,
    #[doc = " Organization where the role is available (primary organization/has members)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub organization: Option<Reference>,
    #[doc = " The Participating Organization provides/performs the role(s) defined by the code to the "]
    #[doc = " Primary Organization (e.g. providing services or is a member of)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "participatingOrganization")]
    pub participating_organization: Option<Reference>,
    #[doc = " The period during which the participatingOrganization is affiliated with the primary "]
    #[doc = " organization."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
    #[doc = " This is a OrganizationAffiliation resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " Specific specialty of the participatingOrganization in the context of the role."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub specialty: Option<Vec<CodeableConcept>>,
    #[doc = " Contact details at the participatingOrganization relevant to this Affiliation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub telecom: Option<Vec<ContactPoint>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " A formally or informally recognized grouping of people or organizations formed for the purpose "]
#[doc = " of achieving some form of collective action.  Includes companies, institutions, corporations, "]
#[doc = " departments, community groups, healthcare practice groups, payer/insurer, etc."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Organization_Contact")]
#[serde(deny_unknown_fields)]
pub struct OrganizationContact {
    #[doc = " Visiting or postal addresses for the contact."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub address: Option<Address>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A name associated with the contact."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<HumanName>,
    #[doc = " Indicates a purpose for which the contact can be reached."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<CodeableConcept>,
    #[doc = " A contact detail (e.g. a telephone number or an email address) by which the party may be "]
    #[doc = " contacted."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub telecom: Option<Vec<ContactPoint>>,
}
#[doc = " A medically related item or items, in a container or package."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct PackagedProductDefinition {
    #[doc = " Extensions for copackagedIndicator"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_copackagedIndicator")]
    pub _copackaged_indicator: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for statusDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_statusDate")]
    pub _status_date: Option<Element>,
    #[doc = " Allows the key features to be recorded, such as \"hospital pack\", \"nurse prescribable\", "]
    #[doc = " \"calendar pack\"."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub characteristic: Option<Vec<CodeableConcept>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " A total of the complete count of contained items of a particular type/form, independent of "]
    #[doc = " sub-packaging or organization. This can be considered as the pack size. This attribute "]
    #[doc = " differs from containedItem.amount in that it can give a single aggregated count of all "]
    #[doc = " tablet types in a pack, even when these are different manufactured items. For example a "]
    #[doc = " pill pack of 21 tablets plus 7 sugar tablets, can be denoted here as '28 tablets'. This "]
    #[doc = " attribute is repeatable so that the different item types in one pack type can be counted "]
    #[doc = " (e.g. a count of vials and count of syringes). Each repeat must have different units, so "]
    #[doc = " that it is clear what the different sets of counted items are, and it is not intended to "]
    #[doc = " allow different counts of similar items (e.g. not '2 tubes and 3 tubes'). Repeats are not "]
    #[doc = " to be used to represent different pack sizes (e.g. 20 pack vs. 50 pack) - which would be "]
    #[doc = " different instances of this resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "containedItemQuantity")]
    pub contained_item_quantity: Option<Vec<Quantity>>,
    #[doc = " States whether a drug product is supplied with another item such as a diluent or adjuvant."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "copackagedIndicator")]
    pub copackaged_indicator: Option<Boolean>,
    #[doc = " Textual description. Note that this is not the name of the package or product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A unique identifier for this package as whole. Unique instance identifiers assigned to a "]
    #[doc = " package by manufacturers, regulators, drug catalogue custodians or other organizations."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The legal status of supply of the packaged item as classified by the regulator."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "legalStatusOfSupply")]
    pub legal_status_of_supply: Option<Vec<PackagedProductDefinitionLegalStatusOfSupply>>,
    #[doc = " Manufacturer of this package type. When there are multiple it means these are all possible "]
    #[doc = " manufacturers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub manufacturer: Option<Vec<Reference>>,
    #[doc = " Allows specifying that an item is on the market for sale, or that it is not available, and "]
    #[doc = " the dates and locations associated."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "marketingStatus")]
    pub marketing_status: Option<Vec<MarketingStatus>>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A name for this package. Typically what it would be listed as in a drug formulary or "]
    #[doc = " catalogue, inventory etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " A packaging item, as a container for medically related items, possibly with other packaging "]
    #[doc = " items within, or a packaging component, such as bottle cap (which is not a device or a "]
    #[doc = " medication manufactured item)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub package: Option<PackagedProductDefinitionPackage>,
    #[doc = " The product that this is a pack for."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "packageFor")]
    pub package_for: Option<Vec<Reference>>,
    #[doc = " This is a PackagedProductDefinition resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The status within the lifecycle of this item. A high level status, this is not intended to "]
    #[doc = " duplicate details carried elsewhere such as legal status, or authorization or marketing "]
    #[doc = " status."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<CodeableConcept>,
    #[doc = " The date at which the given status became applicable."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusDate")]
    pub status_date: Option<DateTime>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " A high level category e.g. medicinal product, raw material, shipping/transport container, "]
    #[doc = " etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " A medically related item or items, in a container or package."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "PackagedProductDefinition_ContainedItem")]
#[serde(deny_unknown_fields)]
pub struct PackagedProductDefinitionContainedItem {
    #[doc = " The number of this type of item within this packaging."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub amount: Option<Quantity>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The actual item(s) of medication, as manufactured, or a device (typically, but not "]
    #[doc = " necessarily, a co-packaged one), or other medically related item (such as food, "]
    #[doc = " biologicals, raw materials, medical fluids, gases etc.), as contained in the package. This "]
    #[doc = " also allows another whole packaged product to be included, which is solely for the case "]
    #[doc = " where a package of other entire packages is wanted - such as a wholesale or distribution "]
    #[doc = " pack (for layers within one package, use PackagedProductDefinition.package.package)."]
    pub item: CodeableReference,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " A medically related item or items, in a container or package."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "PackagedProductDefinition_LegalStatusOfSupply")]
#[serde(deny_unknown_fields)]
pub struct PackagedProductDefinitionLegalStatusOfSupply {
    #[doc = " The actual status of supply. Conveys in what situation this package type may be supplied "]
    #[doc = " for use."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The place where the legal status of supply applies. When not specified, this indicates it "]
    #[doc = " is unknown in this context."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " A medically related item or items, in a container or package."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "PackagedProductDefinition_Package")]
#[serde(deny_unknown_fields)]
pub struct PackagedProductDefinitionPackage {
    #[doc = " Extensions for quantity"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _quantity: Option<Element>,
    #[doc = " A possible alternate material for this part of the packaging, that is allowed to be used "]
    #[doc = " instead of the usual material (e.g. different types of plastic for a blister sleeve)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "alternateMaterial")]
    pub alternate_material: Option<Vec<CodeableConcept>>,
    #[doc = " The item(s) within the packaging."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "containedItem")]
    pub contained_item: Option<Vec<PackagedProductDefinitionContainedItem>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " An identifier that is specific to this particular part of the packaging. Including possibly "]
    #[doc = " Data Carrier Identifier (a GS1 barcode)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " Manufacturer of this package Item. When there are multiple it means these are all possible "]
    #[doc = " manufacturers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub manufacturer: Option<Vec<Reference>>,
    #[doc = " Material type of the package item."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub material: Option<Vec<CodeableConcept>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Allows containers (and parts of containers) parwithin containers, still a single packaged "]
    #[doc = " product.  See also "]
    #[doc = " PackagedProductDefinition.package.containedItem.item(PackagedProductDefinition)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub package: Option<Vec<PackagedProductDefinitionPackage>>,
    #[doc = " General characteristics of this item."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub property: Option<Vec<PackagedProductDefinitionProperty>>,
    #[doc = " The quantity of this level of packaging in the package that contains it. If specified, the "]
    #[doc = " outermost level is always 1."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Integer>,
    #[doc = " Shelf Life and storage information."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "shelfLifeStorage")]
    pub shelf_life_storage: Option<Vec<PackagedProductDefinitionShelfLifeStorage>>,
    #[doc = " The physical type of the container of the items."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " A medically related item or items, in a container or package."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "PackagedProductDefinition_Property")]
#[serde(deny_unknown_fields)]
pub struct PackagedProductDefinitionProperty {
    #[doc = " Extensions for valueBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub _value_boolean: Option<Element>,
    #[doc = " Extensions for valueDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDate")]
    pub _value_date: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A code expressing the type of characteristic."]
    #[serde(rename = "type")]
    pub type_: CodeableConcept,
    #[doc = " A value for the characteristic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAttachment")]
    pub value_attachment: Option<Attachment>,
    #[doc = " A value for the characteristic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,
    #[doc = " A value for the characteristic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,
    #[doc = " A value for the characteristic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDate")]
    pub value_date: Option<String>,
    #[doc = " A value for the characteristic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,
}
#[doc = " A medically related item or items, in a container or package."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "PackagedProductDefinition_ShelfLifeStorage")]
#[serde(deny_unknown_fields)]
pub struct PackagedProductDefinitionShelfLifeStorage {
    #[doc = " Extensions for periodString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_periodString")]
    pub _period_string: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The shelf life time period can be specified using a numerical value for the period of time "]
    #[doc = " and its unit of time measurement The unit of measurement shall be specified in accordance "]
    #[doc = " with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be "]
    #[doc = " used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "periodDuration")]
    pub period_duration: Option<Duration>,
    #[doc = " The shelf life time period can be specified using a numerical value for the period of time "]
    #[doc = " and its unit of time measurement The unit of measurement shall be specified in accordance "]
    #[doc = " with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be "]
    #[doc = " used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "periodString")]
    pub period_string: Option<String>,
    #[doc = " Special precautions for storage, if any, can be specified using an appropriate controlled "]
    #[doc = " vocabulary. The controlled term and the controlled term identifier shall be specified."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "specialPrecautionsForStorage")]
    pub special_precautions_for_storage: Option<Vec<CodeableConcept>>,
    #[doc = " This describes the shelf life, taking into account various scenarios such as shelf life of "]
    #[doc = " the packaged Medicinal Product itself, shelf life after transformation where necessary and "]
    #[doc = " shelf life after the first opening of a bottle, etc. The shelf life type shall be specified "]
    #[doc = " using an appropriate controlled vocabulary The controlled term and the controlled term "]
    #[doc = " identifier shall be specified."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " The parameters to the module. This collection specifies both the input and output parameters. "]
#[doc = " Input parameters are provided by the caller as part of the $evaluate operation. Output "]
#[doc = " parameters are included in the GuidanceResponse."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ParameterDefinition {
    #[doc = " Extensions for documentation"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _documentation: Option<Element>,
    #[doc = " Extensions for max"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _max: Option<Element>,
    #[doc = " Extensions for min"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _min: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " Extensions for use"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _use: Option<Element>,
    #[doc = " A brief discussion of what the parameter is for and how it is used by the module."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub documentation: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The maximum number of times this element is permitted to appear in the request or response."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub max: Option<String>,
    #[doc = " The minimum number of times this parameter SHALL appear in the request or response."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub min: Option<Integer>,
    #[doc = " The name of the parameter used to allow access to the value of the parameter in evaluation "]
    #[doc = " contexts."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<Code>,
    #[doc = " If specified, this indicates a profile that the input data must conform to, or that the "]
    #[doc = " output data will conform to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub profile: Option<Canonical>,
    #[doc = " The type of the parameter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
    #[doc = " Whether the parameter is input or output for the module."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "use")]
    pub use_: Option<Code>,
}
#[doc = " This resource is a non-persisted resource used to pass information into and back from an "]
#[doc = " [operation](operations.html). It has no other use, and there is no RESTful endpoint associated "]
#[doc = " with it."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Parameters {
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " A parameter passed to or received from the operation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub parameter: Option<Vec<ParametersParameter>>,
    #[doc = " This is a Parameters resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
}
#[doc = " This resource is a non-persisted resource used to pass information into and back from an "]
#[doc = " [operation](operations.html). It has no other use, and there is no RESTful endpoint associated "]
#[doc = " with it."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Parameters_Parameter")]
#[serde(deny_unknown_fields)]
pub struct ParametersParameter {
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for valueBase64Binary"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBase64Binary")]
    pub _value_base_64_binary: Option<Element>,
    #[doc = " Extensions for valueBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub _value_boolean: Option<Element>,
    #[doc = " Extensions for valueCanonical"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueCanonical")]
    pub _value_canonical: Option<Element>,
    #[doc = " Extensions for valueCode"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueCode")]
    pub _value_code: Option<Element>,
    #[doc = " Extensions for valueDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDate")]
    pub _value_date: Option<Element>,
    #[doc = " Extensions for valueDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDateTime")]
    pub _value_date_time: Option<Element>,
    #[doc = " Extensions for valueDecimal"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDecimal")]
    pub _value_decimal: Option<Element>,
    #[doc = " Extensions for valueId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueId")]
    pub _value_id: Option<Element>,
    #[doc = " Extensions for valueInstant"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueInstant")]
    pub _value_instant: Option<Element>,
    #[doc = " Extensions for valueInteger"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueInteger")]
    pub _value_integer: Option<Element>,
    #[doc = " Extensions for valueMarkdown"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueMarkdown")]
    pub _value_markdown: Option<Element>,
    #[doc = " Extensions for valueOid"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueOid")]
    pub _value_oid: Option<Element>,
    #[doc = " Extensions for valuePositiveInt"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valuePositiveInt")]
    pub _value_positive_int: Option<Element>,
    #[doc = " Extensions for valueString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueString")]
    pub _value_string: Option<Element>,
    #[doc = " Extensions for valueTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueTime")]
    pub _value_time: Option<Element>,
    #[doc = " Extensions for valueUnsignedInt"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUnsignedInt")]
    pub _value_unsigned_int: Option<Element>,
    #[doc = " Extensions for valueUri"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUri")]
    pub _value_uri: Option<Element>,
    #[doc = " Extensions for valueUrl"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUrl")]
    pub _value_url: Option<Element>,
    #[doc = " Extensions for valueUuid"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUuid")]
    pub _value_uuid: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The name of the parameter (reference to the operation definition)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " A named part of a multi-part parameter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub part: Option<Vec<ParametersParameter>>,
    #[doc = " If the parameter is a whole resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource: Option<ResourceList>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAddress")]
    pub value_address: Option<Address>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAge")]
    pub value_age: Option<Age>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAnnotation")]
    pub value_annotation: Option<Annotation>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAttachment")]
    pub value_attachment: Option<Attachment>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBase64Binary")]
    pub value_base_64_binary: Option<String>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCanonical")]
    pub value_canonical: Option<String>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCode")]
    pub value_code: Option<String>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCoding")]
    pub value_coding: Option<Coding>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueContactDetail")]
    pub value_contact_detail: Option<ContactDetail>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueContactPoint")]
    pub value_contact_point: Option<ContactPoint>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueContributor")]
    pub value_contributor: Option<Contributor>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCount")]
    pub value_count: Option<Count>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDataRequirement")]
    pub value_data_requirement: Option<DataRequirement>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDate")]
    pub value_date: Option<String>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDateTime")]
    pub value_date_time: Option<String>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDecimal")]
    pub value_decimal: Option<f64>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDistance")]
    pub value_distance: Option<Distance>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDosage")]
    pub value_dosage: Option<Dosage>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDuration")]
    pub value_duration: Option<Duration>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueExpression")]
    pub value_expression: Option<Expression>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueHumanName")]
    pub value_human_name: Option<HumanName>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueId")]
    pub value_id: Option<String>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueIdentifier")]
    pub value_identifier: Option<Identifier>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueInstant")]
    pub value_instant: Option<String>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueInteger")]
    pub value_integer: Option<f64>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueMarkdown")]
    pub value_markdown: Option<String>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueMeta")]
    pub value_meta: Option<Meta>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueMoney")]
    pub value_money: Option<Money>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueOid")]
    pub value_oid: Option<String>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueParameterDefinition")]
    pub value_parameter_definition: Option<ParameterDefinition>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valuePeriod")]
    pub value_period: Option<Period>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valuePositiveInt")]
    pub value_positive_int: Option<f64>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRange")]
    pub value_range: Option<Range>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRatio")]
    pub value_ratio: Option<Ratio>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueReference")]
    pub value_reference: Option<Reference>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRelatedArtifact")]
    pub value_related_artifact: Option<RelatedArtifact>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueSampledData")]
    pub value_sampled_data: Option<SampledData>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueSignature")]
    pub value_signature: Option<Signature>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueString")]
    pub value_string: Option<String>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTime")]
    pub value_time: Option<String>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTiming")]
    pub value_timing: Option<Timing>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTriggerDefinition")]
    pub value_trigger_definition: Option<TriggerDefinition>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUnsignedInt")]
    pub value_unsigned_int: Option<f64>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUri")]
    pub value_uri: Option<String>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUrl")]
    pub value_url: Option<String>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUsageContext")]
    pub value_usage_context: Option<UsageContext>,
    #[doc = " Conveys the content if the parameter is a data type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUuid")]
    pub value_uuid: Option<String>,
}
#[doc = " Demographics and other administrative information about an individual or animal receiving care "]
#[doc = " or other health-related services."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Patient {
    #[doc = " Extensions for active"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _active: Option<Element>,
    #[doc = " Extensions for birthDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_birthDate")]
    pub _birth_date: Option<Element>,
    #[doc = " Extensions for deceasedBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_deceasedBoolean")]
    pub _deceased_boolean: Option<Element>,
    #[doc = " Extensions for deceasedDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_deceasedDateTime")]
    pub _deceased_date_time: Option<Element>,
    #[doc = " Extensions for gender"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _gender: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for multipleBirthBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_multipleBirthBoolean")]
    pub _multiple_birth_boolean: Option<Element>,
    #[doc = " Extensions for multipleBirthInteger"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_multipleBirthInteger")]
    pub _multiple_birth_integer: Option<Element>,
    #[doc = " Whether this patient record is in active use. "]
    #[doc = " Many systems use this property to mark as non-current patients, such as those that have not "]
    #[doc = " been seen for a period of time based on an organization's business rules."]
    #[doc = " "]
    #[doc = " It is often used to filter patient lists to exclude inactive patients"]
    #[doc = " "]
    #[doc = " Deceased patients may also be marked as inactive for the same reasons, but may be active "]
    #[doc = " for some time after death."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub active: Option<Boolean>,
    #[doc = " An address for the individual."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub address: Option<Vec<Address>>,
    #[doc = " The date of birth for the individual."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "birthDate")]
    pub birth_date: Option<Date>,
    #[doc = " A language which may be used to communicate with the patient about his or her health."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub communication: Option<Vec<PatientCommunication>>,
    #[doc = " A contact party (e.g. guardian, partner, friend) for the patient."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<PatientContact>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " Indicates if the individual is deceased or not."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "deceasedBoolean")]
    pub deceased_boolean: Option<bool>,
    #[doc = " Indicates if the individual is deceased or not."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "deceasedDateTime")]
    pub deceased_date_time: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Administrative Gender - the gender that the patient is considered to have for "]
    #[doc = " administration and record keeping purposes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub gender: Option<Code>,
    #[doc = " Patient's nominated care provider."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "generalPractitioner")]
    pub general_practitioner: Option<Vec<Reference>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " An identifier for this patient."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " Link to another patient resource that concerns the same actual patient."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub link: Option<Vec<PatientLink>>,
    #[doc = " Organization that is the custodian of the patient record."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "managingOrganization")]
    pub managing_organization: Option<Reference>,
    #[doc = " This field contains a patient's most recent marital (civil) status."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maritalStatus")]
    pub marital_status: Option<CodeableConcept>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Indicates whether the patient is part of a multiple (boolean) or indicates the actual birth "]
    #[doc = " order (integer)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "multipleBirthBoolean")]
    pub multiple_birth_boolean: Option<bool>,
    #[doc = " Indicates whether the patient is part of a multiple (boolean) or indicates the actual birth "]
    #[doc = " order (integer)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "multipleBirthInteger")]
    pub multiple_birth_integer: Option<f64>,
    #[doc = " A name associated with the individual."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<Vec<HumanName>>,
    #[doc = " Image of the patient."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub photo: Option<Vec<Attachment>>,
    #[doc = " This is a Patient resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " A contact detail (e.g. a telephone number or an email address) by which the individual may "]
    #[doc = " be contacted."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub telecom: Option<Vec<ContactPoint>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " Demographics and other administrative information about an individual or animal receiving care "]
#[doc = " or other health-related services."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Patient_Communication")]
#[serde(deny_unknown_fields)]
pub struct PatientCommunication {
    #[doc = " Extensions for preferred"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _preferred: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen "]
    #[doc = " and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. \"en\" for English, or "]
    #[doc = " \"en-US\" for American English versus \"en-EN\" for England English."]
    pub language: CodeableConcept,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Indicates whether or not the patient prefers this language (over other languages he masters "]
    #[doc = " up a certain level)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub preferred: Option<Boolean>,
}
#[doc = " Demographics and other administrative information about an individual or animal receiving care "]
#[doc = " or other health-related services."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Patient_Contact")]
#[serde(deny_unknown_fields)]
pub struct PatientContact {
    #[doc = " Extensions for gender"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _gender: Option<Element>,
    #[doc = " Address for the contact person."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub address: Option<Address>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Administrative Gender - the gender that the contact person is considered to have for "]
    #[doc = " administration and record keeping purposes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub gender: Option<Code>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A name associated with the contact person."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<HumanName>,
    #[doc = " Organization on behalf of which the contact is acting or for which the contact is working."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub organization: Option<Reference>,
    #[doc = " The period during which this contact person or organization is valid to be contacted "]
    #[doc = " relating to this patient."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
    #[doc = " The nature of the relationship between the patient and the contact person."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub relationship: Option<Vec<CodeableConcept>>,
    #[doc = " A contact detail for the person, e.g. a telephone number or an email address."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub telecom: Option<Vec<ContactPoint>>,
}
#[doc = " Demographics and other administrative information about an individual or animal receiving care "]
#[doc = " or other health-related services."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Patient_Link")]
#[serde(deny_unknown_fields)]
pub struct PatientLink {
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The other patient resource that the link refers to."]
    pub other: Reference,
    #[doc = " The type of link between this patient resource and another patient resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}
#[doc = " This resource provides the status of the payment for goods and services rendered, and the "]
#[doc = " request and response resource references."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct PaymentNotice {
    #[doc = " Extensions for created"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _created: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for paymentDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_paymentDate")]
    pub _payment_date: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " The amount sent to the payee."]
    pub amount: Money,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The date when this resource was created."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub created: Option<DateTime>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A unique identifier assigned to this payment notice."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The party who will receive or has received payment that is the subject of this "]
    #[doc = " notification."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub payee: Option<Reference>,
    #[doc = " A reference to the payment which is the subject of this notice."]
    pub payment: Reference,
    #[doc = " The date when the above payment action occurred."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "paymentDate")]
    pub payment_date: Option<Date>,
    #[doc = " A code indicating whether payment has been sent or cleared."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "paymentStatus")]
    pub payment_status: Option<CodeableConcept>,
    #[doc = " The practitioner who is responsible for the services rendered to the patient."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub provider: Option<Reference>,
    #[doc = " The party who is notified of the payment status."]
    pub recipient: Reference,
    #[doc = " Reference of resource for which payment is being made."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub request: Option<Reference>,
    #[doc = " This is a PaymentNotice resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " Reference of response to resource for which payment is being made."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub response: Option<Reference>,
    #[doc = " The status of the resource instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " This resource provides the details including amount of a payment and allocates the payment "]
#[doc = " items being paid."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct PaymentReconciliation {
    #[doc = " Extensions for created"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _created: Option<Element>,
    #[doc = " Extensions for disposition"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _disposition: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for outcome"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _outcome: Option<Element>,
    #[doc = " Extensions for paymentDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_paymentDate")]
    pub _payment_date: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The date when the resource was created."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub created: Option<DateTime>,
    #[doc = " Distribution of the payment amount for a previously acknowledged payable."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub detail: Option<Vec<PaymentReconciliationDetail>>,
    #[doc = " A human readable description of the status of the request for the reconciliation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub disposition: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " A code for the form to be used for printing the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "formCode")]
    pub form_code: Option<CodeableConcept>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A unique identifier assigned to this payment reconciliation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The outcome of a request for a reconciliation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub outcome: Option<Code>,
    #[doc = " Total payment amount as indicated on the financial instrument."]
    #[serde(rename = "paymentAmount")]
    pub payment_amount: Money,
    #[doc = " The date of payment as indicated on the financial instrument."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "paymentDate")]
    pub payment_date: Option<Date>,
    #[doc = " Issuer's unique identifier for the payment instrument."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "paymentIdentifier")]
    pub payment_identifier: Option<Identifier>,
    #[doc = " The party who generated the payment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "paymentIssuer")]
    pub payment_issuer: Option<Reference>,
    #[doc = " The period of time for which payments have been gathered into this bulk payment for "]
    #[doc = " settlement."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
    #[doc = " A note that describes or explains the processing in a human readable form."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "processNote")]
    pub process_note: Option<Vec<PaymentReconciliationProcessNote>>,
    #[doc = " Original request resource reference."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub request: Option<Reference>,
    #[doc = " The practitioner who is responsible for the services rendered to the patient."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub requestor: Option<Reference>,
    #[doc = " This is a PaymentReconciliation resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The status of the resource instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " This resource provides the details including amount of a payment and allocates the payment "]
#[doc = " items being paid."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "PaymentReconciliation_Detail")]
#[serde(deny_unknown_fields)]
pub struct PaymentReconciliationDetail {
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " The monetary amount allocated from the total payment to the payable."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub amount: Option<Money>,
    #[doc = " The date from the response resource containing a commitment to pay."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<Date>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Unique identifier for the current payment item for the referenced payable."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The party which is receiving the payment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub payee: Option<Reference>,
    #[doc = " Unique identifier for the prior payment item for the referenced payable."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub predecessor: Option<Identifier>,
    #[doc = " A resource, such as a Claim, the evaluation of which could lead to payment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub request: Option<Reference>,
    #[doc = " A resource, such as a ClaimResponse, which contains a commitment to payment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub response: Option<Reference>,
    #[doc = " A reference to the individual who is responsible for inquiries regarding the response and "]
    #[doc = " its payment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub responsible: Option<Reference>,
    #[doc = " The party which submitted the claim or financial transaction."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub submitter: Option<Reference>,
    #[doc = " Code to indicate the nature of the payment."]
    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}
#[doc = " This resource provides the details including amount of a payment and allocates the payment "]
#[doc = " items being paid."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "PaymentReconciliation_ProcessNote")]
#[serde(deny_unknown_fields)]
pub struct PaymentReconciliationProcessNote {
    #[doc = " Extensions for text"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _text: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The explanation or description associated with the processing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    #[doc = " The business purpose of the note text."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}
#[doc = " A time period defined by a start and end date and optionally time."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Period {
    #[doc = " Extensions for end"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _end: Option<Element>,
    #[doc = " Extensions for start"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _start: Option<Element>,
    #[doc = " The end of the period. If the end of the period is missing, it means no end was known or "]
    #[doc = " planned at the time the instance was created. The start may be in the past, and the end "]
    #[doc = " date in the future, which means that period is expected/planned to end at that time."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub end: Option<DateTime>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The start of the period. The boundary is inclusive."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub start: Option<DateTime>,
}
#[doc = " Demographics and administrative information about a person independent of a specific "]
#[doc = " health-related context."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Person {
    #[doc = " Extensions for active"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _active: Option<Element>,
    #[doc = " Extensions for birthDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_birthDate")]
    pub _birth_date: Option<Element>,
    #[doc = " Extensions for gender"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _gender: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Whether this person's record is in active use."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub active: Option<Boolean>,
    #[doc = " One or more addresses for the person."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub address: Option<Vec<Address>>,
    #[doc = " The birth date for the person."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "birthDate")]
    pub birth_date: Option<Date>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Administrative Gender."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub gender: Option<Code>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Identifier for a person within a particular scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " Link to a resource that concerns the same actual person."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub link: Option<Vec<PersonLink>>,
    #[doc = " The organization that is the custodian of the person record."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "managingOrganization")]
    pub managing_organization: Option<Reference>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A name associated with the person."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<Vec<HumanName>>,
    #[doc = " An image that can be displayed as a thumbnail of the person to enhance the identification "]
    #[doc = " of the individual."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub photo: Option<Attachment>,
    #[doc = " This is a Person resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " A contact detail for the person, e.g. a telephone number or an email address."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub telecom: Option<Vec<ContactPoint>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " Demographics and administrative information about a person independent of a specific "]
#[doc = " health-related context."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Person_Link")]
#[serde(deny_unknown_fields)]
pub struct PersonLink {
    #[doc = " Extensions for assurance"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _assurance: Option<Element>,
    #[doc = " Level of assurance that this link is associated with the target resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub assurance: Option<Code>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The resource to which this actual person is associated."]
    pub target: Reference,
}
#[doc = " This resource allows for the definition of various types of plans as a sharable, consumable, "]
#[doc = " and executable artifact. The resource is general enough to support the description of a broad "]
#[doc = " range of clinical and non-clinical artifacts such as clinical decision support rules, order "]
#[doc = " sets, protocols, and drug quality specifications."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct PlanDefinition {
    #[doc = " Extensions for approvalDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_approvalDate")]
    pub _approval_date: Option<Element>,
    #[doc = " Extensions for copyright"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _copyright: Option<Element>,
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for experimental"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _experimental: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for lastReviewDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastReviewDate")]
    pub _last_review_date: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for publisher"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _publisher: Option<Element>,
    #[doc = " Extensions for purpose"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _purpose: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for subjectCanonical"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_subjectCanonical")]
    pub _subject_canonical: Option<Element>,
    #[doc = " Extensions for subtitle"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _subtitle: Option<Element>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " Extensions for usage"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _usage: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " An action or group of actions to be taken as part of the plan. For example, in clinical "]
    #[doc = " care, an action would be to prescribe a particular indicated medication, or perform a "]
    #[doc = " particular test as appropriate. In pharmaceutical quality, an action would be the test that "]
    #[doc = " needs to be performed on a drug product as defined in the quality specification."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub action: Option<Vec<PlanDefinitionAction>>,
    #[doc = " The date on which the resource content was approved by the publisher. Approval happens once "]
    #[doc = " when the content is officially approved for usage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "approvalDate")]
    pub approval_date: Option<Date>,
    #[doc = " An individiual or organization primarily involved in the creation and maintenance of the "]
    #[doc = " content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Vec<ContactDetail>>,
    #[doc = " Contact details to assist a user in finding and communicating with the publisher."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " A copyright statement relating to the plan definition and/or its contents. Copyright "]
    #[doc = " statements are generally legal restrictions on the use and publishing of the plan "]
    #[doc = " definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,
    #[doc = " The date  (and optionally time) when the plan definition was published. The date must "]
    #[doc = " change when the business version changes and it must change if the status code changes. In "]
    #[doc = " addition, it should change when the substantive content of the plan definition changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " A free text natural language description of the plan definition from a consumer's "]
    #[doc = " perspective."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " An individual or organization primarily responsible for internal coherence of the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub editor: Option<Vec<ContactDetail>>,
    #[doc = " The period during which the plan definition content was or is planned to be in active use."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectivePeriod")]
    pub effective_period: Option<Period>,
    #[doc = " An individual or organization responsible for officially endorsing the content for use in "]
    #[doc = " some setting."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub endorser: Option<Vec<ContactDetail>>,
    #[doc = " A Boolean value to indicate that this plan definition is authored for testing purposes (or "]
    #[doc = " education/evaluation/marketing) and is not intended to be used for genuine usage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " A goal describes an expected outcome that activities within the plan are intended to "]
    #[doc = " achieve. For example, weight loss, restoring an activity of daily living, obtaining herd "]
    #[doc = " immunity via immunization, meeting a process improvement objective, meeting the acceptance "]
    #[doc = " criteria for a test as specified by a quality specification, etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub goal: Option<Vec<PlanDefinitionGoal>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A formal identifier that is used to identify this plan definition when it is represented in "]
    #[doc = " other formats, or referenced in a specification, model, design or an instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " A legal or geographic region in which the plan definition is intended to be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The date on which the resource content was last reviewed. Review happens periodically after "]
    #[doc = " approval but does not change the original approval date."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastReviewDate")]
    pub last_review_date: Option<Date>,
    #[doc = " A reference to a Library resource containing any formal logic used by the plan definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub library: Option<Vec<Canonical>>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A natural language name identifying the plan definition. This name should be usable as an "]
    #[doc = " identifier for the module by machine processing applications such as code generation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " The name of the organization or individual that published the plan definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
    #[doc = " Explanation of why this plan definition is needed and why it has been designed as it has."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,
    #[doc = " Related artifacts such as additional documentation, justification, or bibliographic "]
    #[doc = " references."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatedArtifact")]
    pub related_artifact: Option<Vec<RelatedArtifact>>,
    #[doc = " This is a PlanDefinition resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " An individual or organization primarily responsible for review of some aspect of the "]
    #[doc = " content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reviewer: Option<Vec<ContactDetail>>,
    #[doc = " The status of this plan definition. Enables tracking the life-cycle of the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A code, group definition, or canonical reference that describes  or identifies the intended "]
    #[doc = " subject of the plan definition. Canonical references are allowed to support the definition "]
    #[doc = " of protocols for drug and substance quality specifications, and is allowed to reference a "]
    #[doc = " MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, "]
    #[doc = " ManufacturedItemDefinition, or PackagedProductDefinition resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectCanonical")]
    pub subject_canonical: Option<String>,
    #[doc = " A code, group definition, or canonical reference that describes  or identifies the intended "]
    #[doc = " subject of the plan definition. Canonical references are allowed to support the definition "]
    #[doc = " of protocols for drug and substance quality specifications, and is allowed to reference a "]
    #[doc = " MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, "]
    #[doc = " ManufacturedItemDefinition, or PackagedProductDefinition resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectCodeableConcept")]
    pub subject_codeable_concept: Option<CodeableConcept>,
    #[doc = " A code, group definition, or canonical reference that describes  or identifies the intended "]
    #[doc = " subject of the plan definition. Canonical references are allowed to support the definition "]
    #[doc = " of protocols for drug and substance quality specifications, and is allowed to reference a "]
    #[doc = " MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, "]
    #[doc = " ManufacturedItemDefinition, or PackagedProductDefinition resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectReference")]
    pub subject_reference: Option<Reference>,
    #[doc = " An explanatory or alternate title for the plan definition giving additional information "]
    #[doc = " about its content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subtitle: Option<String>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " A short, descriptive, user-friendly title for the plan definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[doc = " Descriptive topics related to the content of the plan definition. Topics provide a "]
    #[doc = " high-level categorization of the definition that can be useful for filtering and searching."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub topic: Option<Vec<CodeableConcept>>,
    #[doc = " A high-level category for the plan definition that distinguishes the kinds of systems that "]
    #[doc = " would be interested in the plan definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
    #[doc = " An absolute URI that is used to identify this plan definition when it is referenced in a "]
    #[doc = " specification, model, design or an instance; also called its canonical identifier. This "]
    #[doc = " SHOULD be globally unique and SHOULD be a literal address at which at which an "]
    #[doc = " authoritative instance of this plan definition is (or will be) published. This URL can be "]
    #[doc = " the target of a canonical reference. It SHALL remain the same when the plan definition is "]
    #[doc = " stored on different servers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
    #[doc = " A detailed description of how the plan definition is used from a clinical perspective."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub usage: Option<String>,
    #[doc = " The content was developed with a focus and intent of supporting the contexts that are "]
    #[doc = " listed. These contexts may be general categories (gender, age, ...) or may be references to "]
    #[doc = " specific programs (insurance plans, studies, ...) and may be used to assist with indexing "]
    #[doc = " and searching for appropriate plan definition instances."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,
    #[doc = " The identifier that is used to identify this version of the plan definition when it is "]
    #[doc = " referenced in a specification, model, design or instance. This is an arbitrary value "]
    #[doc = " managed by the plan definition author and is not expected to be globally unique. For "]
    #[doc = " example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. "]
    #[doc = " There is also no expectation that versions can be placed in a lexicographical sequence. To "]
    #[doc = " provide a version consistent with the Decision Support Service specification, use the "]
    #[doc = " format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge "]
    #[doc = " assets, refer to the Decision Support Service specification. Note that a version is "]
    #[doc = " required for non-experimental active artifacts."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[doc = " This resource allows for the definition of various types of plans as a sharable, consumable, "]
#[doc = " and executable artifact. The resource is general enough to support the description of a broad "]
#[doc = " range of clinical and non-clinical artifacts such as clinical decision support rules, order "]
#[doc = " sets, protocols, and drug quality specifications."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "PlanDefinition_Action")]
#[serde(deny_unknown_fields)]
pub struct PlanDefinitionAction {
    #[doc = " Extensions for cardinalityBehavior"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_cardinalityBehavior")]
    pub _cardinality_behavior: Option<Element>,
    #[doc = " Extensions for definitionCanonical"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_definitionCanonical")]
    pub _definition_canonical: Option<Element>,
    #[doc = " Extensions for definitionUri"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_definitionUri")]
    pub _definition_uri: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for goalId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_goalId")]
    pub _goal_id: Option<Vec<Element>>,
    #[doc = " Extensions for groupingBehavior"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_groupingBehavior")]
    pub _grouping_behavior: Option<Element>,
    #[doc = " Extensions for precheckBehavior"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_precheckBehavior")]
    pub _precheck_behavior: Option<Element>,
    #[doc = " Extensions for prefix"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _prefix: Option<Element>,
    #[doc = " Extensions for priority"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _priority: Option<Element>,
    #[doc = " Extensions for requiredBehavior"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_requiredBehavior")]
    pub _required_behavior: Option<Element>,
    #[doc = " Extensions for selectionBehavior"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_selectionBehavior")]
    pub _selection_behavior: Option<Element>,
    #[doc = " Extensions for subjectCanonical"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_subjectCanonical")]
    pub _subject_canonical: Option<Element>,
    #[doc = " Extensions for textEquivalent"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_textEquivalent")]
    pub _text_equivalent: Option<Element>,
    #[doc = " Extensions for timingDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_timingDateTime")]
    pub _timing_date_time: Option<Element>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " Sub actions that are contained within the action. The behavior of this action determines "]
    #[doc = " the functionality of the sub-actions. For example, a selection behavior of at-most-one "]
    #[doc = " indicates that of the sub-actions, at most one may be chosen as part of realizing the "]
    #[doc = " action definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub action: Option<Vec<PlanDefinitionAction>>,
    #[doc = " Defines whether the action can be selected multiple times."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "cardinalityBehavior")]
    pub cardinality_behavior: Option<Code>,
    #[doc = " A code that provides a meaning, grouping, or classification for the action or action group. "]
    #[doc = " For example, a section may have a LOINC code for the section of a documentation template. "]
    #[doc = " In pharmaceutical quality, an action (Test) such as pH could be classified as a physical "]
    #[doc = " property."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Vec<CodeableConcept>>,
    #[doc = " An expression that describes applicability criteria or start/stop conditions for the "]
    #[doc = " action."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub condition: Option<Vec<PlanDefinitionCondition>>,
    #[doc = " A reference to an ActivityDefinition that describes the action to be taken in detail, or a "]
    #[doc = " PlanDefinition that describes a series of actions to be taken."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "definitionCanonical")]
    pub definition_canonical: Option<String>,
    #[doc = " A reference to an ActivityDefinition that describes the action to be taken in detail, or a "]
    #[doc = " PlanDefinition that describes a series of actions to be taken."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "definitionUri")]
    pub definition_uri: Option<String>,
    #[doc = " A brief description of the action used to provide a summary to display to the user."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " Didactic or other informational resources associated with the action that can be provided "]
    #[doc = " to the CDS recipient. Information resources can include inline text commentary and links to "]
    #[doc = " web resources."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub documentation: Option<Vec<RelatedArtifact>>,
    #[doc = " Customizations that should be applied to the statically defined resource. For example, if "]
    #[doc = " the dosage of a medication must be computed based on the patient's weight, a customization "]
    #[doc = " would be used to specify an expression that calculated the weight, and the path on the "]
    #[doc = " resource that would contain the result."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dynamicValue")]
    pub dynamic_value: Option<Vec<PlanDefinitionDynamicValue>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Identifies goals that this action supports. The reference must be to a goal element defined "]
    #[doc = " within this plan definition. In pharmaceutical quality, a goal represents acceptance "]
    #[doc = " criteria (Goal) for a given action (Test), so the goalId would be the unique id of a "]
    #[doc = " defined goal element establishing the acceptance criteria for the action."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "goalId")]
    pub goal_id: Option<Vec<Id>>,
    #[doc = " Defines the grouping behavior for the action and its children."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "groupingBehavior")]
    pub grouping_behavior: Option<Code>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Defines input data requirements for the action."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub input: Option<Vec<DataRequirement>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Defines the outputs of the action, if any."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub output: Option<Vec<DataRequirement>>,
    #[doc = " Indicates who should participate in performing the action described."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub participant: Option<Vec<PlanDefinitionParticipant>>,
    #[doc = " Defines whether the action should usually be preselected."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "precheckBehavior")]
    pub precheck_behavior: Option<Code>,
    #[doc = " A user-visible prefix for the action."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[doc = " Indicates how quickly the action should be addressed with respect to other actions."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub priority: Option<Code>,
    #[doc = " A description of why this action is necessary or appropriate."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reason: Option<Vec<CodeableConcept>>,
    #[doc = " A relationship to another action such as \"before\" or \"30-60 minutes after start of\"."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatedAction")]
    pub related_action: Option<Vec<PlanDefinitionRelatedAction>>,
    #[doc = " Defines the required behavior for the action."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "requiredBehavior")]
    pub required_behavior: Option<Code>,
    #[doc = " Defines the selection behavior for the action and its children."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "selectionBehavior")]
    pub selection_behavior: Option<Code>,
    #[doc = " A code, group definition, or canonical reference that describes the intended subject of the "]
    #[doc = " action and its children, if any. Canonical references are allowed to support the definition "]
    #[doc = " of protocols for drug and substance quality specifications, and is allowed to reference a "]
    #[doc = " MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, "]
    #[doc = " ManufacturedItemDefinition, or PackagedProductDefinition resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectCanonical")]
    pub subject_canonical: Option<String>,
    #[doc = " A code, group definition, or canonical reference that describes the intended subject of the "]
    #[doc = " action and its children, if any. Canonical references are allowed to support the definition "]
    #[doc = " of protocols for drug and substance quality specifications, and is allowed to reference a "]
    #[doc = " MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, "]
    #[doc = " ManufacturedItemDefinition, or PackagedProductDefinition resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectCodeableConcept")]
    pub subject_codeable_concept: Option<CodeableConcept>,
    #[doc = " A code, group definition, or canonical reference that describes the intended subject of the "]
    #[doc = " action and its children, if any. Canonical references are allowed to support the definition "]
    #[doc = " of protocols for drug and substance quality specifications, and is allowed to reference a "]
    #[doc = " MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, "]
    #[doc = " ManufacturedItemDefinition, or PackagedProductDefinition resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectReference")]
    pub subject_reference: Option<Reference>,
    #[doc = " A text equivalent of the action to be performed. This provides a human-interpretable "]
    #[doc = " description of the action when the definition is consumed by a system that might not be "]
    #[doc = " capable of interpreting it dynamically."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "textEquivalent")]
    pub text_equivalent: Option<String>,
    #[doc = " An optional value describing when the action should be performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingAge")]
    pub timing_age: Option<Age>,
    #[doc = " An optional value describing when the action should be performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingDateTime")]
    pub timing_date_time: Option<String>,
    #[doc = " An optional value describing when the action should be performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingDuration")]
    pub timing_duration: Option<Duration>,
    #[doc = " An optional value describing when the action should be performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingPeriod")]
    pub timing_period: Option<Period>,
    #[doc = " An optional value describing when the action should be performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingRange")]
    pub timing_range: Option<Range>,
    #[doc = " An optional value describing when the action should be performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingTiming")]
    pub timing_timing: Option<Timing>,
    #[doc = " The textual description of the action displayed to a user. For example, when the action is "]
    #[doc = " a test to be performed, the title would be the title of the test such as Assay by HPLC."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[doc = " A reference to a StructureMap resource that defines a transform that can be executed to "]
    #[doc = " produce the intent resource using the ActivityDefinition instance as the input."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub transform: Option<Canonical>,
    #[doc = " A description of when the action should be triggered."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub trigger: Option<Vec<TriggerDefinition>>,
    #[doc = " The type of action to perform (create, update, remove)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " This resource allows for the definition of various types of plans as a sharable, consumable, "]
#[doc = " and executable artifact. The resource is general enough to support the description of a broad "]
#[doc = " range of clinical and non-clinical artifacts such as clinical decision support rules, order "]
#[doc = " sets, protocols, and drug quality specifications."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "PlanDefinition_Condition")]
#[serde(deny_unknown_fields)]
pub struct PlanDefinitionCondition {
    #[doc = " Extensions for kind"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _kind: Option<Element>,
    #[doc = " An expression that returns true or false, indicating whether the condition is satisfied."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expression: Option<Expression>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The kind of condition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<Code>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " This resource allows for the definition of various types of plans as a sharable, consumable, "]
#[doc = " and executable artifact. The resource is general enough to support the description of a broad "]
#[doc = " range of clinical and non-clinical artifacts such as clinical decision support rules, order "]
#[doc = " sets, protocols, and drug quality specifications."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "PlanDefinition_DynamicValue")]
#[serde(deny_unknown_fields)]
pub struct PlanDefinitionDynamicValue {
    #[doc = " Extensions for path"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _path: Option<Element>,
    #[doc = " An expression specifying the value of the customized element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expression: Option<Expression>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The path to the element to be customized. This is the path on the resource that will hold "]
    #[doc = " the result of the calculation defined by the expression. The specified path SHALL be a "]
    #[doc = " FHIRPath resolveable on the specified target type of the ActivityDefinition, and SHALL "]
    #[doc = " consist only of identifiers, constant indexers, and a restricted subset of functions. The "]
    #[doc = " path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers "]
    #[doc = " ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath "]
    #[doc = " Profile](fhirpath.html#simple) for full details)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}
#[doc = " This resource allows for the definition of various types of plans as a sharable, consumable, "]
#[doc = " and executable artifact. The resource is general enough to support the description of a broad "]
#[doc = " range of clinical and non-clinical artifacts such as clinical decision support rules, order "]
#[doc = " sets, protocols, and drug quality specifications."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "PlanDefinition_Goal")]
#[serde(deny_unknown_fields)]
pub struct PlanDefinitionGoal {
    #[doc = " Identifies problems, conditions, issues, or concerns the goal is intended to address."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub addresses: Option<Vec<CodeableConcept>>,
    #[doc = " Indicates a category the goal falls within."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<CodeableConcept>,
    #[doc = " Human-readable and/or coded description of a specific desired objective of care, such as "]
    #[doc = " \"control blood pressure\" or \"negotiate an obstacle course\" or \"dance with child at "]
    #[doc = " wedding\"."]
    pub description: CodeableConcept,
    #[doc = " Didactic or other informational resources associated with the goal that provide further "]
    #[doc = " supporting information about the goal. Information resources can include inline text "]
    #[doc = " commentary and links to web resources."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub documentation: Option<Vec<RelatedArtifact>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Identifies the expected level of importance associated with reaching/sustaining the defined "]
    #[doc = " goal."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub priority: Option<CodeableConcept>,
    #[doc = " The event after which the goal should begin being pursued."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub start: Option<CodeableConcept>,
    #[doc = " Indicates what should be done and within what timeframe."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub target: Option<Vec<PlanDefinitionTarget>>,
}
#[doc = " This resource allows for the definition of various types of plans as a sharable, consumable, "]
#[doc = " and executable artifact. The resource is general enough to support the description of a broad "]
#[doc = " range of clinical and non-clinical artifacts such as clinical decision support rules, order "]
#[doc = " sets, protocols, and drug quality specifications."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "PlanDefinition_Participant")]
#[serde(deny_unknown_fields)]
pub struct PlanDefinitionParticipant {
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The role the participant should play in performing the described action."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub role: Option<CodeableConcept>,
    #[doc = " The type of participant in the action."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}
#[doc = " This resource allows for the definition of various types of plans as a sharable, consumable, "]
#[doc = " and executable artifact. The resource is general enough to support the description of a broad "]
#[doc = " range of clinical and non-clinical artifacts such as clinical decision support rules, order "]
#[doc = " sets, protocols, and drug quality specifications."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "PlanDefinition_RelatedAction")]
#[serde(deny_unknown_fields)]
pub struct PlanDefinitionRelatedAction {
    #[doc = " Extensions for actionId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_actionId")]
    pub _action_id: Option<Element>,
    #[doc = " Extensions for relationship"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _relationship: Option<Element>,
    #[doc = " The element id of the related action."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "actionId")]
    pub action_id: Option<Id>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A duration or range of durations to apply to the relationship. For example, 30-60 minutes "]
    #[doc = " before."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "offsetDuration")]
    pub offset_duration: Option<Duration>,
    #[doc = " A duration or range of durations to apply to the relationship. For example, 30-60 minutes "]
    #[doc = " before."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "offsetRange")]
    pub offset_range: Option<Range>,
    #[doc = " The relationship of this action to the related action."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub relationship: Option<Code>,
}
#[doc = " This resource allows for the definition of various types of plans as a sharable, consumable, "]
#[doc = " and executable artifact. The resource is general enough to support the description of a broad "]
#[doc = " range of clinical and non-clinical artifacts such as clinical decision support rules, order "]
#[doc = " sets, protocols, and drug quality specifications."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "PlanDefinition_Target")]
#[serde(deny_unknown_fields)]
pub struct PlanDefinitionTarget {
    #[doc = " The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 "]
    #[doc = " pounds or 7.0%, or in the case of pharmaceutical quality - NMT 0.6%, Clear solution, etc. "]
    #[doc = " Either the high or low or both values of the range can be specified. When a low value is "]
    #[doc = " missing, it indicates that the goal is achieved at any value at or below the high value. "]
    #[doc = " Similarly, if the high value is missing, it indicates that the goal is achieved at any "]
    #[doc = " value at or above the low value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "detailCodeableConcept")]
    pub detail_codeable_concept: Option<CodeableConcept>,
    #[doc = " The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 "]
    #[doc = " pounds or 7.0%, or in the case of pharmaceutical quality - NMT 0.6%, Clear solution, etc. "]
    #[doc = " Either the high or low or both values of the range can be specified. When a low value is "]
    #[doc = " missing, it indicates that the goal is achieved at any value at or below the high value. "]
    #[doc = " Similarly, if the high value is missing, it indicates that the goal is achieved at any "]
    #[doc = " value at or above the low value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "detailQuantity")]
    pub detail_quantity: Option<Quantity>,
    #[doc = " The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 "]
    #[doc = " pounds or 7.0%, or in the case of pharmaceutical quality - NMT 0.6%, Clear solution, etc. "]
    #[doc = " Either the high or low or both values of the range can be specified. When a low value is "]
    #[doc = " missing, it indicates that the goal is achieved at any value at or below the high value. "]
    #[doc = " Similarly, if the high value is missing, it indicates that the goal is achieved at any "]
    #[doc = " value at or above the low value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "detailRange")]
    pub detail_range: Option<Range>,
    #[doc = " Indicates the timeframe after the start of the goal in which the goal should be met."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub due: Option<Duration>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The parameter whose value is to be tracked, e.g. body weight, blood pressure, or hemoglobin "]
    #[doc = " A1c level."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub measure: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " A populatioof people with some set of grouping criteria."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Population {
    #[doc = " The age of the specific population."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "ageCodeableConcept")]
    pub age_codeable_concept: Option<CodeableConcept>,
    #[doc = " The age of the specific population."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "ageRange")]
    pub age_range: Option<Range>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The gender of the specific population."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub gender: Option<CodeableConcept>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The existing physiological conditions of the specific population to which this applies."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "physiologicalCondition")]
    pub physiological_condition: Option<CodeableConcept>,
    #[doc = " Race of the specific population."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub race: Option<CodeableConcept>,
}
#[doc = " A person who is directly or indirectly involved in the provisioning of healthcare."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Practitioner {
    #[doc = " Extensions for active"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _active: Option<Element>,
    #[doc = " Extensions for birthDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_birthDate")]
    pub _birth_date: Option<Element>,
    #[doc = " Extensions for gender"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _gender: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Whether this practitioner's record is in active use."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub active: Option<Boolean>,
    #[doc = " Address(es) of the practitioner that are not role specific (typically home address).  Work "]
    #[doc = " addresses are not typically entered in this property as they are usually role dependent."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub address: Option<Vec<Address>>,
    #[doc = " The date of birth for the practitioner."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "birthDate")]
    pub birth_date: Option<Date>,
    #[doc = " A language the practitioner can use in patient communication."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub communication: Option<Vec<CodeableConcept>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Administrative Gender - the gender that the person is considered to have for administration "]
    #[doc = " and record keeping purposes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub gender: Option<Code>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " An identifier that applies to this person in this role."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The name(s) associated with the practitioner."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<Vec<HumanName>>,
    #[doc = " Image of the person."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub photo: Option<Vec<Attachment>>,
    #[doc = " The official certifications, training, and licenses that authorize or otherwise pertain to "]
    #[doc = " the provision of care by the practitioner.  For example, a medical license issued by a "]
    #[doc = " medical board authorizing the practitioner to practice medicine within a certian locality."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub qualification: Option<Vec<PractitionerQualification>>,
    #[doc = " This is a Practitioner resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " A contact detail for the practitioner, e.g. a telephone number or an email address."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub telecom: Option<Vec<ContactPoint>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " A specific set of Roles/Locations/specialties/services that a practitioner may perform at an "]
#[doc = " organization for a period of time."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct PractitionerRole {
    #[doc = " Extensions for active"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _active: Option<Element>,
    #[doc = " Extensions for availabilityExceptions"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_availabilityExceptions")]
    pub _availability_exceptions: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Whether this practitioner role record is in active use."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub active: Option<Boolean>,
    #[doc = " A description of site availability exceptions, e.g. public holiday availability. Succinctly "]
    #[doc = " describing all possible exceptions to normal site availability as details in the available "]
    #[doc = " Times and not available Times."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "availabilityExceptions")]
    pub availability_exceptions: Option<String>,
    #[doc = " A collection of times the practitioner is available or performing this role at the location "]
    #[doc = " and/or healthcareservice."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "availableTime")]
    pub available_time: Option<Vec<PractitionerRoleAvailableTime>>,
    #[doc = " Roles which this practitioner is authorized to perform for the organization."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Vec<CodeableConcept>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " Technical endpoints providing access to services operated for the practitioner with this "]
    #[doc = " role."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<Vec<Reference>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The list of healthcare services that this worker provides for this role's "]
    #[doc = " Organization/Location(s)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "healthcareService")]
    pub healthcare_service: Option<Vec<Reference>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Business Identifiers that are specific to a role/location."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The location(s) at which this practitioner provides care."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<Vec<Reference>>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The practitioner is not available or performing this role during this period of time due to "]
    #[doc = " the provided reason."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "notAvailable")]
    pub not_available: Option<Vec<PractitionerRoleNotAvailable>>,
    #[doc = " The organization where the Practitioner performs the roles associated."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub organization: Option<Reference>,
    #[doc = " The period during which the person is authorized to act as a practitioner in these role(s) "]
    #[doc = " for the organization."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
    #[doc = " Practitioner that is able to provide the defined services for the organization."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub practitioner: Option<Reference>,
    #[doc = " This is a PractitionerRole resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " Specific specialty of the practitioner."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub specialty: Option<Vec<CodeableConcept>>,
    #[doc = " Contact details that are specific to the role/location/service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub telecom: Option<Vec<ContactPoint>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " A specific set of Roles/Locations/specialties/services that a practitioner may perform at an "]
#[doc = " organization for a period of time."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "PractitionerRole_AvailableTime")]
#[serde(deny_unknown_fields)]
pub struct PractitionerRoleAvailableTime {
    #[doc = " Extensions for allDay"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_allDay")]
    pub _all_day: Option<Element>,
    #[doc = " Extensions for availableEndTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_availableEndTime")]
    pub _available_end_time: Option<Element>,
    #[doc = " Extensions for availableStartTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_availableStartTime")]
    pub _available_start_time: Option<Element>,
    #[doc = " Extensions for daysOfWeek"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_daysOfWeek")]
    pub _days_of_week: Option<Vec<Element>>,
    #[doc = " Is this always available? (hence times are irrelevant) e.g. 24 hour service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "allDay")]
    pub all_day: Option<Boolean>,
    #[doc = " The closing time of day. Note: If the AllDay flag is set, then this time is ignored."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "availableEndTime")]
    pub available_end_time: Option<Time>,
    #[doc = " The opening time of day. Note: If the AllDay flag is set, then this time is ignored."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "availableStartTime")]
    pub available_start_time: Option<Time>,
    #[doc = " Indicates which days of the week are available between the start and end Times."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "daysOfWeek")]
    pub days_of_week: Option<Vec<Code>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " A specific set of Roles/Locations/specialties/services that a practitioner may perform at an "]
#[doc = " organization for a period of time."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "PractitionerRole_NotAvailable")]
#[serde(deny_unknown_fields)]
pub struct PractitionerRoleNotAvailable {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " The reason that can be presented to the user as to why this time is not available."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " Service is not available (seasonally or for a public holiday) from this date."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub during: Option<Period>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " A person who is directly or indirectly involved in the provisioning of healthcare."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Practitioner_Qualification")]
#[serde(deny_unknown_fields)]
pub struct PractitionerQualification {
    #[doc = " Coded representation of the qualification."]
    pub code: CodeableConcept,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " An identifier that applies to this person's qualification in this role."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " Organization that regulates and issues the qualification."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub issuer: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Period during which the qualification is valid."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
}
#[doc = " An action that is or was performed on or for a patient. This can be a physical intervention "]
#[doc = " like an operation, or less invasive like long term services, counseling, or hypnotherapy."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Procedure {
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for instantiatesUri"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_instantiatesUri")]
    pub _instantiates_uri: Option<Vec<Element>>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for performedDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_performedDateTime")]
    pub _performed_date_time: Option<Element>,
    #[doc = " Extensions for performedString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_performedString")]
    pub _performed_string: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Individual who is making the procedure statement."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub asserter: Option<Reference>,
    #[doc = " A reference to a resource that contains details of the request for this procedure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Vec<Reference>>,
    #[doc = " Detailed and structured anatomical location information. Multiple locations are allowed - "]
    #[doc = " e.g. multiple punch biopsies of a lesion."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "bodySite")]
    pub body_site: Option<Vec<CodeableConcept>>,
    #[doc = " A code that classifies the procedure for searching, sorting and display purposes (e.g. "]
    #[doc = " \"Surgical Procedure\")."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<CodeableConcept>,
    #[doc = " The specific procedure that is performed. Use text if the exact nature of the procedure "]
    #[doc = " cannot be coded (e.g. \"Laparoscopic Appendectomy\")."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,
    #[doc = " Any complications that occurred during the procedure, or in the immediate post-performance "]
    #[doc = " period. These are generally tracked separately from the notes, which will typically "]
    #[doc = " describe the procedure itself rather than any 'post procedure' issues."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub complication: Option<Vec<CodeableConcept>>,
    #[doc = " Any complications that occurred during the procedure, or in the immediate post-performance "]
    #[doc = " period."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "complicationDetail")]
    pub complication_detail: Option<Vec<Reference>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The Encounter during which this Procedure was created or performed or to which the creation "]
    #[doc = " of this record is tightly associated."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " A device that is implanted, removed or otherwise manipulated (calibration, battery "]
    #[doc = " replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a focal portion of the "]
    #[doc = " Procedure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "focalDevice")]
    pub focal_device: Option<Vec<ProcedureFocalDevice>>,
    #[doc = " If the procedure required specific follow up - e.g. removal of sutures. The follow up may "]
    #[doc = " be represented as a simple note or could potentially be more complex, in which case the "]
    #[doc = " CarePlan resource can be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "followUp")]
    pub follow_up: Option<Vec<CodeableConcept>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Business identifiers assigned to this procedure by the performer or other systems which "]
    #[doc = " remain constant as the resource is updated and is propagated from server to server."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The URL pointing to a FHIR-defined protocol, guideline, order set or other definition that "]
    #[doc = " is adhered to in whole or in part by this Procedure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesCanonical")]
    pub instantiates_canonical: Option<Vec<Canonical>>,
    #[doc = " The URL pointing to an externally maintained protocol, guideline, order set or other "]
    #[doc = " definition that is adhered to in whole or in part by this Procedure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesUri")]
    pub instantiates_uri: Option<Vec<Uri>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The location where the procedure actually happened.  E.g. a newborn at home, a tracheostomy "]
    #[doc = " at a restaurant."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<Reference>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Any other notes and comments about the procedure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " The outcome of the procedure - did it resolve the reasons for the procedure being "]
    #[doc = " performed?"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub outcome: Option<CodeableConcept>,
    #[doc = " A larger event of which this particular procedure is a component or step."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "partOf")]
    pub part_of: Option<Vec<Reference>>,
    #[doc = " Estimated or actual date, date-time, period, or age when the procedure was performed.  "]
    #[doc = " Allows a period to support complex procedures that span more than one date, and also allows "]
    #[doc = " for the length of the procedure to be captured."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "performedAge")]
    pub performed_age: Option<Age>,
    #[doc = " Estimated or actual date, date-time, period, or age when the procedure was performed.  "]
    #[doc = " Allows a period to support complex procedures that span more than one date, and also allows "]
    #[doc = " for the length of the procedure to be captured."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "performedDateTime")]
    pub performed_date_time: Option<String>,
    #[doc = " Estimated or actual date, date-time, period, or age when the procedure was performed.  "]
    #[doc = " Allows a period to support complex procedures that span more than one date, and also allows "]
    #[doc = " for the length of the procedure to be captured."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "performedPeriod")]
    pub performed_period: Option<Period>,
    #[doc = " Estimated or actual date, date-time, period, or age when the procedure was performed.  "]
    #[doc = " Allows a period to support complex procedures that span more than one date, and also allows "]
    #[doc = " for the length of the procedure to be captured."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "performedRange")]
    pub performed_range: Option<Range>,
    #[doc = " Estimated or actual date, date-time, period, or age when the procedure was performed.  "]
    #[doc = " Allows a period to support complex procedures that span more than one date, and also allows "]
    #[doc = " for the length of the procedure to be captured."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "performedString")]
    pub performed_string: Option<String>,
    #[doc = " Limited to \"real\" people rather than equipment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub performer: Option<Vec<ProcedurePerformer>>,
    #[doc = " The coded reason why the procedure was performed. This may be a coded entity of some type, "]
    #[doc = " or may simply be present as text."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,
    #[doc = " The justification of why the procedure was performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,
    #[doc = " Individual who recorded the record and takes responsibility for its content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub recorder: Option<Reference>,
    #[doc = " This could be a histology result, pathology report, surgical report, etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub report: Option<Vec<Reference>>,
    #[doc = " This is a Procedure resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " A code specifying the state of the procedure. Generally, this will be the in-progress or "]
    #[doc = " completed state."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " Captures the reason for the current state of the procedure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusReason")]
    pub status_reason: Option<CodeableConcept>,
    #[doc = " The person, animal or group on which the procedure was performed."]
    pub subject: Reference,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " Identifies coded items that were used as part of the procedure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "usedCode")]
    pub used_code: Option<Vec<CodeableConcept>>,
    #[doc = " Identifies medications, devices and any other substance used as part of the procedure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "usedReference")]
    pub used_reference: Option<Vec<Reference>>,
}
#[doc = " An action that is or was performed on or for a patient. This can be a physical intervention "]
#[doc = " like an operation, or less invasive like long term services, counseling, or hypnotherapy."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Procedure_FocalDevice")]
#[serde(deny_unknown_fields)]
pub struct ProcedureFocalDevice {
    #[doc = " The kind of change that happened to the device during the procedure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub action: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The device that was manipulated (changed) during the procedure."]
    pub manipulated: Reference,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " An action that is or was performed on or for a patient. This can be a physical intervention "]
#[doc = " like an operation, or less invasive like long term services, counseling, or hypnotherapy."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Procedure_Performer")]
#[serde(deny_unknown_fields)]
pub struct ProcedurePerformer {
    #[doc = " The practitioner who was involved in the procedure."]
    pub actor: Reference,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Distinguishes the type of involvement of the performer in the procedure. For example, "]
    #[doc = " surgeon, anaesthetist, endoscopist."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub function: Option<CodeableConcept>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The organization the device or practitioner was acting on behalf of."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onBehalfOf")]
    pub on_behalf_of: Option<Reference>,
}
#[doc = " The marketing status describes the date when a medicinal product is actually put on the market "]
#[doc = " or the date as of which it is no longer available."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ProdCharacteristic {
    #[doc = " Extensions for color"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _color: Option<Vec<Element>>,
    #[doc = " Extensions for imprint"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _imprint: Option<Vec<Element>>,
    #[doc = " Extensions for shape"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _shape: Option<Element>,
    #[doc = " Where applicable, the color can be specified An appropriate controlled vocabulary shall be "]
    #[doc = " used The term and the term identifier shall be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub color: Option<Vec<String>>,
    #[doc = " Where applicable, the depth can be specified using a numerical value and its unit of "]
    #[doc = " measurement The unit of measurement shall be specified in accordance with ISO 11240 and the "]
    #[doc = " resulting terminology The symbol and the symbol identifier shall be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub depth: Option<Quantity>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Where applicable, the external diameter can be specified using a numerical value and its "]
    #[doc = " unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 "]
    #[doc = " and the resulting terminology The symbol and the symbol identifier shall be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "externalDiameter")]
    pub external_diameter: Option<Quantity>,
    #[doc = " Where applicable, the height can be specified using a numerical value and its unit of "]
    #[doc = " measurement The unit of measurement shall be specified in accordance with ISO 11240 and the "]
    #[doc = " resulting terminology The symbol and the symbol identifier shall be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub height: Option<Quantity>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Where applicable, the image can be provided The format of the image attachment shall be "]
    #[doc = " specified by regional implementations."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub image: Option<Vec<Attachment>>,
    #[doc = " Where applicable, the imprint can be specified as text."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub imprint: Option<Vec<String>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Where applicable, the nominal volume can be specified using a numerical value and its unit "]
    #[doc = " of measurement The unit of measurement shall be specified in accordance with ISO 11240 and "]
    #[doc = " the resulting terminology The symbol and the symbol identifier shall be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "nominalVolume")]
    pub nominal_volume: Option<Quantity>,
    #[doc = " Where applicable, the scoring can be specified An appropriate controlled vocabulary shall "]
    #[doc = " be used The term and the term identifier shall be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub scoring: Option<CodeableConcept>,
    #[doc = " Where applicable, the shape can be specified An appropriate controlled vocabulary shall be "]
    #[doc = " used The term and the term identifier shall be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub shape: Option<String>,
    #[doc = " Where applicable, the weight can be specified using a numerical value and its unit of "]
    #[doc = " measurement The unit of measurement shall be specified in accordance with ISO 11240 and the "]
    #[doc = " resulting terminology The symbol and the symbol identifier shall be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub weight: Option<Quantity>,
    #[doc = " Where applicable, the width can be specified using a numerical value and its unit of "]
    #[doc = " measurement The unit of measurement shall be specified in accordance with ISO 11240 and the "]
    #[doc = " resulting terminology The symbol and the symbol identifier shall be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub width: Option<Quantity>,
}
#[doc = " The shelf-life and storage information for a medicinal product item or container can be "]
#[doc = " described using this class."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ProductShelfLife {
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Unique identifier for the packaged Medicinal Product."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The shelf life time period can be specified using a numerical value for the period of time "]
    #[doc = " and its unit of time measurement The unit of measurement shall be specified in accordance "]
    #[doc = " with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be "]
    #[doc = " used."]
    pub period: Quantity,
    #[doc = " Special precautions for storage, if any, can be specified using an appropriate controlled "]
    #[doc = " vocabulary The controlled term and the controlled term identifier shall be specified."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "specialPrecautionsForStorage")]
    pub special_precautions_for_storage: Option<Vec<CodeableConcept>>,
    #[doc = " This describes the shelf life, taking into account various scenarios such as shelf life of "]
    #[doc = " the packaged Medicinal Product itself, shelf life after transformation where necessary and "]
    #[doc = " shelf life after the first opening of a bottle, etc. The shelf life type shall be specified "]
    #[doc = " using an appropriate controlled vocabulary The controlled term and the controlled term "]
    #[doc = " identifier shall be specified."]
    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}
#[doc = " Provenance of a resource is a record that describes entities and processes involved in "]
#[doc = " producing and delivering or otherwise influencing that resource. Provenance provides a critical "]
#[doc = " foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance "]
#[doc = " assertions are a form of contextual metadata and can themselves become important records with "]
#[doc = " their own provenance. Provenance statement indicates clinical significance in terms of "]
#[doc = " confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle "]
#[doc = " (e.g. Document Completion - has the artifact been legally authenticated), all of which may "]
#[doc = " impact security, privacy, and trust policies."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Provenance {
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for occurredDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_occurredDateTime")]
    pub _occurred_date_time: Option<Element>,
    #[doc = " Extensions for policy"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _policy: Option<Vec<Element>>,
    #[doc = " Extensions for recorded"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _recorded: Option<Element>,
    #[doc = " An activity is something that occurs over a period of time and acts upon or with entities; "]
    #[doc = " it may include consuming, processing, transforming, modifying, relocating, using, or "]
    #[doc = " generating entities."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub activity: Option<CodeableConcept>,
    #[doc = " An actor taking a role in an activity  for which it can be assigned some degree of "]
    #[doc = " responsibility for the activity taking place."]
    pub agent: Vec<ProvenanceAgent>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " An entity used in this activity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub entity: Option<Vec<ProvenanceEntity>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " Where the activity occurred, if relevant."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<Reference>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The period during which the activity occurred."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurredDateTime")]
    pub occurred_date_time: Option<String>,
    #[doc = " The period during which the activity occurred."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurredPeriod")]
    pub occurred_period: Option<Period>,
    #[doc = " Policy or plan the activity was defined by. Typically, a single activity may have multiple "]
    #[doc = " applicable policy documents, such as patient consent, guarantor funding, etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub policy: Option<Vec<Uri>>,
    #[doc = " The reason that the activity was taking place."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reason: Option<Vec<CodeableConcept>>,
    #[doc = " The instant of time at which the activity was recorded."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub recorded: Option<Instant>,
    #[doc = " This is a Provenance resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " A digital signature on the target Reference(s). The signer should match a Provenance.agent. "]
    #[doc = " The purpose of the signature is indicated."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub signature: Option<Vec<Signature>>,
    #[doc = " The Reference(s) that were generated or updated by  the activity described in this "]
    #[doc = " resource. A provenance can point to more than one target if multiple resources were "]
    #[doc = " created/updated by the same activity."]
    pub target: Vec<Reference>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " Provenance of a resource is a record that describes entities and processes involved in "]
#[doc = " producing and delivering or otherwise influencing that resource. Provenance provides a critical "]
#[doc = " foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance "]
#[doc = " assertions are a form of contextual metadata and can themselves become important records with "]
#[doc = " their own provenance. Provenance statement indicates clinical significance in terms of "]
#[doc = " confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle "]
#[doc = " (e.g. Document Completion - has the artifact been legally authenticated), all of which may "]
#[doc = " impact security, privacy, and trust policies."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Provenance_Agent")]
#[serde(deny_unknown_fields)]
pub struct ProvenanceAgent {
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The individual, device, or organization for whom the change was made."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onBehalfOf")]
    pub on_behalf_of: Option<Reference>,
    #[doc = " The function of the agent with respect to the activity. The security role enabling the "]
    #[doc = " agent with respect to the activity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub role: Option<Vec<CodeableConcept>>,
    #[doc = " The participation the agent had with respect to the activity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
    #[doc = " The individual, device or organization that participated in the event."]
    pub who: Reference,
}
#[doc = " Provenance of a resource is a record that describes entities and processes involved in "]
#[doc = " producing and delivering or otherwise influencing that resource. Provenance provides a critical "]
#[doc = " foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance "]
#[doc = " assertions are a form of contextual metadata and can themselves become important records with "]
#[doc = " their own provenance. Provenance statement indicates clinical significance in terms of "]
#[doc = " confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle "]
#[doc = " (e.g. Document Completion - has the artifact been legally authenticated), all of which may "]
#[doc = " impact security, privacy, and trust policies."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Provenance_Entity")]
#[serde(deny_unknown_fields)]
pub struct ProvenanceEntity {
    #[doc = " Extensions for role"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _role: Option<Element>,
    #[doc = " The entity is attributed to an agent to express the agent's responsibility for that entity, "]
    #[doc = " possibly along with other agents. This description can be understood as shorthand for "]
    #[doc = " saying that the agent was responsible for the activity which generated the entity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub agent: Option<Vec<ProvenanceAgent>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " How the entity was used during the activity."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub role: Option<Code>,
    #[doc = " Identity of the  Entity used. May be a logical or physical uri and maybe absolute or "]
    #[doc = " relative."]
    pub what: Reference,
}
#[doc = " A measured amount (or an amount that can potentially be measured). Note that measured amounts "]
#[doc = " include amounts that are not precisely quantified, including amounts involving arbitrary units "]
#[doc = " and floating currencies."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Quantity {
    #[doc = " Extensions for code"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _code: Option<Element>,
    #[doc = " Extensions for comparator"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _comparator: Option<Element>,
    #[doc = " Extensions for system"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _system: Option<Element>,
    #[doc = " Extensions for unit"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _unit: Option<Element>,
    #[doc = " Extensions for value"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _value: Option<Element>,
    #[doc = " A computer processable form of the unit in some unit representation system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,
    #[doc = " How the value should be understood and represented - whether the actual value is greater or "]
    #[doc = " less than the stated value due to measurement issues; e.g. if the comparator is \"<\" , then "]
    #[doc = " the real value is < stated value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comparator: Option<serde_json::Value>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The identification of the system that provides the coded form of the unit."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub system: Option<Uri>,
    #[doc = " A human-readable form of the unit."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
    #[doc = " The value of the measured amount. The value includes an implicit precision in the "]
    #[doc = " presentation of the value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Decimal>,
}
#[doc = " A structured set of questions intended to guide the collection of answers from end-users. "]
#[doc = " Questionnaires provide detailed control over order, presentation, phraseology and grouping to "]
#[doc = " allow coherent, consistent data collection."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Questionnaire {
    #[doc = " Extensions for approvalDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_approvalDate")]
    pub _approval_date: Option<Element>,
    #[doc = " Extensions for copyright"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _copyright: Option<Element>,
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for experimental"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _experimental: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for lastReviewDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastReviewDate")]
    pub _last_review_date: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for publisher"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _publisher: Option<Element>,
    #[doc = " Extensions for purpose"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _purpose: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for subjectType"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_subjectType")]
    pub _subject_type: Option<Vec<Element>>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " The date on which the resource content was approved by the publisher. Approval happens once "]
    #[doc = " when the content is officially approved for usage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "approvalDate")]
    pub approval_date: Option<Date>,
    #[doc = " An identifier for this question or group of questions in a particular terminology such as "]
    #[doc = " LOINC."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Vec<Coding>>,
    #[doc = " Contact details to assist a user in finding and communicating with the publisher."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " A copyright statement relating to the questionnaire and/or its contents. Copyright "]
    #[doc = " statements are generally legal restrictions on the use and publishing of the questionnaire."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,
    #[doc = " The date  (and optionally time) when the questionnaire was published. The date must change "]
    #[doc = " when the business version changes and it must change if the status code changes. In "]
    #[doc = " addition, it should change when the substantive content of the questionnaire changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " The URL of a Questionnaire that this Questionnaire is based on."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "derivedFrom")]
    pub derived_from: Option<Vec<Canonical>>,
    #[doc = " A free text natural language description of the questionnaire from a consumer's "]
    #[doc = " perspective."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " The period during which the questionnaire content was or is planned to be in active use."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectivePeriod")]
    pub effective_period: Option<Period>,
    #[doc = " A Boolean value to indicate that this questionnaire is authored for testing purposes (or "]
    #[doc = " education/evaluation/marketing) and is not intended to be used for genuine usage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A formal identifier that is used to identify this questionnaire when it is represented in "]
    #[doc = " other formats, or referenced in a specification, model, design or an instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " A particular question, question grouping or display text that is part of the questionnaire."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub item: Option<Vec<QuestionnaireItem>>,
    #[doc = " A legal or geographic region in which the questionnaire is intended to be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The date on which the resource content was last reviewed. Review happens periodically after "]
    #[doc = " approval but does not change the original approval date."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastReviewDate")]
    pub last_review_date: Option<Date>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A natural language name identifying the questionnaire. This name should be usable as an "]
    #[doc = " identifier for the module by machine processing applications such as code generation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " The name of the organization or individual that published the questionnaire."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
    #[doc = " Explanation of why this questionnaire is needed and why it has been designed as it has."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,
    #[doc = " This is a Questionnaire resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The status of this questionnaire. Enables tracking the life-cycle of the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " The types of subjects that can be the subject of responses created for the questionnaire."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectType")]
    pub subject_type: Option<Vec<Code>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " A short, descriptive, user-friendly title for the questionnaire."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[doc = " An absolute URI that is used to identify this questionnaire when it is referenced in a "]
    #[doc = " specification, model, design or an instance; also called its canonical identifier. This "]
    #[doc = " SHOULD be globally unique and SHOULD be a literal address at which at which an "]
    #[doc = " authoritative instance of this questionnaire is (or will be) published. This URL can be the "]
    #[doc = " target of a canonical reference. It SHALL remain the same when the questionnaire is stored "]
    #[doc = " on different servers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
    #[doc = " The content was developed with a focus and intent of supporting the contexts that are "]
    #[doc = " listed. These contexts may be general categories (gender, age, ...) or may be references to "]
    #[doc = " specific programs (insurance plans, studies, ...) and may be used to assist with indexing "]
    #[doc = " and searching for appropriate questionnaire instances."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,
    #[doc = " The identifier that is used to identify this version of the questionnaire when it is "]
    #[doc = " referenced in a specification, model, design or instance. This is an arbitrary value "]
    #[doc = " managed by the questionnaire author and is not expected to be globally unique. For example, "]
    #[doc = " it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is "]
    #[doc = " also no expectation that versions can be placed in a lexicographical sequence."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[doc = " A structured set of questions and their answers. The questions are ordered and grouped into "]
#[doc = " coherent subsets, corresponding to the structure of the grouping of the questionnaire being "]
#[doc = " responded to."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct QuestionnaireResponse {
    #[doc = " Extensions for authored"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _authored: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Person who received the answers to the questions in the QuestionnaireResponse and recorded "]
    #[doc = " them in the system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Reference>,
    #[doc = " The date and/or time that this set of answers were last changed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub authored: Option<DateTime>,
    #[doc = " The order, proposal or plan that is fulfilled in whole or in part by this "]
    #[doc = " QuestionnaireResponse.  For example, a ServiceRequest seeking an intake assessment or a "]
    #[doc = " decision support recommendation to assess for post-partum depression."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Vec<Reference>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The Encounter during which this questionnaire response was created or to which the creation "]
    #[doc = " of this record is tightly associated."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A business identifier assigned to a particular completed (or partially completed) "]
    #[doc = " questionnaire."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " A group or question item from the original questionnaire for which answers are provided."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub item: Option<Vec<QuestionnaireResponseItem>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A procedure or observation that this questionnaire was performed as part of the execution "]
    #[doc = " of.  For example, the surgery a checklist was executed as part of."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "partOf")]
    pub part_of: Option<Vec<Reference>>,
    #[doc = " The Questionnaire that defines and organizes the questions for which answers are being "]
    #[doc = " provided."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub questionnaire: Option<Canonical>,
    #[doc = " This is a QuestionnaireResponse resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The person who answered the questions about the subject."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub source: Option<Reference>,
    #[doc = " The position of the questionnaire response within its overall lifecycle."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " The subject of the questionnaire response.  This could be a patient, organization, "]
    #[doc = " practitioner, device, etc.  This is who/what the answers apply to, but is not necessarily "]
    #[doc = " the source of information."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Reference>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " A structured set of questions and their answers. The questions are ordered and grouped into "]
#[doc = " coherent subsets, corresponding to the structure of the grouping of the questionnaire being "]
#[doc = " responded to."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "QuestionnaireResponse_Answer")]
#[serde(deny_unknown_fields)]
pub struct QuestionnaireResponseAnswer {
    #[doc = " Extensions for valueBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub _value_boolean: Option<Element>,
    #[doc = " Extensions for valueDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDate")]
    pub _value_date: Option<Element>,
    #[doc = " Extensions for valueDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDateTime")]
    pub _value_date_time: Option<Element>,
    #[doc = " Extensions for valueDecimal"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDecimal")]
    pub _value_decimal: Option<Element>,
    #[doc = " Extensions for valueInteger"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueInteger")]
    pub _value_integer: Option<Element>,
    #[doc = " Extensions for valueString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueString")]
    pub _value_string: Option<Element>,
    #[doc = " Extensions for valueTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueTime")]
    pub _value_time: Option<Element>,
    #[doc = " Extensions for valueUri"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUri")]
    pub _value_uri: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Nested groups and/or questions found within this particular answer."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub item: Option<Vec<QuestionnaireResponseItem>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The answer (or one of the answers) provided by the respondent to the question."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAttachment")]
    pub value_attachment: Option<Attachment>,
    #[doc = " The answer (or one of the answers) provided by the respondent to the question."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,
    #[doc = " The answer (or one of the answers) provided by the respondent to the question."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCoding")]
    pub value_coding: Option<Coding>,
    #[doc = " The answer (or one of the answers) provided by the respondent to the question."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDate")]
    pub value_date: Option<String>,
    #[doc = " The answer (or one of the answers) provided by the respondent to the question."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDateTime")]
    pub value_date_time: Option<String>,
    #[doc = " The answer (or one of the answers) provided by the respondent to the question."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDecimal")]
    pub value_decimal: Option<f64>,
    #[doc = " The answer (or one of the answers) provided by the respondent to the question."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueInteger")]
    pub value_integer: Option<f64>,
    #[doc = " The answer (or one of the answers) provided by the respondent to the question."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,
    #[doc = " The answer (or one of the answers) provided by the respondent to the question."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueReference")]
    pub value_reference: Option<Reference>,
    #[doc = " The answer (or one of the answers) provided by the respondent to the question."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueString")]
    pub value_string: Option<String>,
    #[doc = " The answer (or one of the answers) provided by the respondent to the question."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTime")]
    pub value_time: Option<String>,
    #[doc = " The answer (or one of the answers) provided by the respondent to the question."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUri")]
    pub value_uri: Option<String>,
}
#[doc = " A structured set of questions and their answers. The questions are ordered and grouped into "]
#[doc = " coherent subsets, corresponding to the structure of the grouping of the questionnaire being "]
#[doc = " responded to."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "QuestionnaireResponse_Item")]
#[serde(deny_unknown_fields)]
pub struct QuestionnaireResponseItem {
    #[doc = " Extensions for definition"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _definition: Option<Element>,
    #[doc = " Extensions for linkId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_linkId")]
    pub _link_id: Option<Element>,
    #[doc = " Extensions for text"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _text: Option<Element>,
    #[doc = " The respondent's answer(s) to the question."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub answer: Option<Vec<QuestionnaireResponseAnswer>>,
    #[doc = " A reference to an [ElementDefinition](elementdefinition.html) that provides the details for "]
    #[doc = " the item."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub definition: Option<Uri>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Questions or sub-groups nested beneath a question or group."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub item: Option<Vec<QuestionnaireResponseItem>>,
    #[doc = " The item from the Questionnaire that corresponds to this item in the QuestionnaireResponse "]
    #[doc = " resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "linkId")]
    pub link_id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Text that is displayed above the contents of the group or as the text of the question being "]
    #[doc = " answered."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}
#[doc = " A structured set of questions intended to guide the collection of answers from end-users. "]
#[doc = " Questionnaires provide detailed control over order, presentation, phraseology and grouping to "]
#[doc = " allow coherent, consistent data collection."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Questionnaire_AnswerOption")]
#[serde(deny_unknown_fields)]
pub struct QuestionnaireAnswerOption {
    #[doc = " Extensions for initialSelected"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_initialSelected")]
    pub _initial_selected: Option<Element>,
    #[doc = " Extensions for valueDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDate")]
    pub _value_date: Option<Element>,
    #[doc = " Extensions for valueInteger"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueInteger")]
    pub _value_integer: Option<Element>,
    #[doc = " Extensions for valueString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueString")]
    pub _value_string: Option<Element>,
    #[doc = " Extensions for valueTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueTime")]
    pub _value_time: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Indicates whether the answer value is selected when the list of possible answers is "]
    #[doc = " initially shown."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "initialSelected")]
    pub initial_selected: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A potential answer that's allowed as the answer to this question."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCoding")]
    pub value_coding: Option<Coding>,
    #[doc = " A potential answer that's allowed as the answer to this question."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDate")]
    pub value_date: Option<String>,
    #[doc = " A potential answer that's allowed as the answer to this question."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueInteger")]
    pub value_integer: Option<f64>,
    #[doc = " A potential answer that's allowed as the answer to this question."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueReference")]
    pub value_reference: Option<Reference>,
    #[doc = " A potential answer that's allowed as the answer to this question."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueString")]
    pub value_string: Option<String>,
    #[doc = " A potential answer that's allowed as the answer to this question."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTime")]
    pub value_time: Option<String>,
}
#[doc = " A structured set of questions intended to guide the collection of answers from end-users. "]
#[doc = " Questionnaires provide detailed control over order, presentation, phraseology and grouping to "]
#[doc = " allow coherent, consistent data collection."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Questionnaire_EnableWhen")]
#[serde(deny_unknown_fields)]
pub struct QuestionnaireEnableWhen {
    #[doc = " Extensions for answerBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_answerBoolean")]
    pub _answer_boolean: Option<Element>,
    #[doc = " Extensions for answerDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_answerDate")]
    pub _answer_date: Option<Element>,
    #[doc = " Extensions for answerDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_answerDateTime")]
    pub _answer_date_time: Option<Element>,
    #[doc = " Extensions for answerDecimal"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_answerDecimal")]
    pub _answer_decimal: Option<Element>,
    #[doc = " Extensions for answerInteger"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_answerInteger")]
    pub _answer_integer: Option<Element>,
    #[doc = " Extensions for answerString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_answerString")]
    pub _answer_string: Option<Element>,
    #[doc = " Extensions for answerTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_answerTime")]
    pub _answer_time: Option<Element>,
    #[doc = " Extensions for operator"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _operator: Option<Element>,
    #[doc = " Extensions for question"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _question: Option<Element>,
    #[doc = " A value that the referenced question is tested using the specified operator in order for "]
    #[doc = " the item to be enabled."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "answerBoolean")]
    pub answer_boolean: Option<bool>,
    #[doc = " A value that the referenced question is tested using the specified operator in order for "]
    #[doc = " the item to be enabled."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "answerCoding")]
    pub answer_coding: Option<Coding>,
    #[doc = " A value that the referenced question is tested using the specified operator in order for "]
    #[doc = " the item to be enabled."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "answerDate")]
    pub answer_date: Option<String>,
    #[doc = " A value that the referenced question is tested using the specified operator in order for "]
    #[doc = " the item to be enabled."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "answerDateTime")]
    pub answer_date_time: Option<String>,
    #[doc = " A value that the referenced question is tested using the specified operator in order for "]
    #[doc = " the item to be enabled."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "answerDecimal")]
    pub answer_decimal: Option<f64>,
    #[doc = " A value that the referenced question is tested using the specified operator in order for "]
    #[doc = " the item to be enabled."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "answerInteger")]
    pub answer_integer: Option<f64>,
    #[doc = " A value that the referenced question is tested using the specified operator in order for "]
    #[doc = " the item to be enabled."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "answerQuantity")]
    pub answer_quantity: Option<Quantity>,
    #[doc = " A value that the referenced question is tested using the specified operator in order for "]
    #[doc = " the item to be enabled."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "answerReference")]
    pub answer_reference: Option<Reference>,
    #[doc = " A value that the referenced question is tested using the specified operator in order for "]
    #[doc = " the item to be enabled."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "answerString")]
    pub answer_string: Option<String>,
    #[doc = " A value that the referenced question is tested using the specified operator in order for "]
    #[doc = " the item to be enabled."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "answerTime")]
    pub answer_time: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Specifies the criteria by which the question is enabled."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub operator: Option<Code>,
    #[doc = " The linkId for the question whose answer (or lack of answer) governs whether this item is "]
    #[doc = " enabled."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub question: Option<String>,
}
#[doc = " A structured set of questions intended to guide the collection of answers from end-users. "]
#[doc = " Questionnaires provide detailed control over order, presentation, phraseology and grouping to "]
#[doc = " allow coherent, consistent data collection."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Questionnaire_Initial")]
#[serde(deny_unknown_fields)]
pub struct QuestionnaireInitial {
    #[doc = " Extensions for valueBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub _value_boolean: Option<Element>,
    #[doc = " Extensions for valueDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDate")]
    pub _value_date: Option<Element>,
    #[doc = " Extensions for valueDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDateTime")]
    pub _value_date_time: Option<Element>,
    #[doc = " Extensions for valueDecimal"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDecimal")]
    pub _value_decimal: Option<Element>,
    #[doc = " Extensions for valueInteger"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueInteger")]
    pub _value_integer: Option<Element>,
    #[doc = " Extensions for valueString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueString")]
    pub _value_string: Option<Element>,
    #[doc = " Extensions for valueTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueTime")]
    pub _value_time: Option<Element>,
    #[doc = " Extensions for valueUri"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUri")]
    pub _value_uri: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The actual value to for an initial answer."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAttachment")]
    pub value_attachment: Option<Attachment>,
    #[doc = " The actual value to for an initial answer."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,
    #[doc = " The actual value to for an initial answer."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCoding")]
    pub value_coding: Option<Coding>,
    #[doc = " The actual value to for an initial answer."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDate")]
    pub value_date: Option<String>,
    #[doc = " The actual value to for an initial answer."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDateTime")]
    pub value_date_time: Option<String>,
    #[doc = " The actual value to for an initial answer."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDecimal")]
    pub value_decimal: Option<f64>,
    #[doc = " The actual value to for an initial answer."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueInteger")]
    pub value_integer: Option<f64>,
    #[doc = " The actual value to for an initial answer."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,
    #[doc = " The actual value to for an initial answer."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueReference")]
    pub value_reference: Option<Reference>,
    #[doc = " The actual value to for an initial answer."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueString")]
    pub value_string: Option<String>,
    #[doc = " The actual value to for an initial answer."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTime")]
    pub value_time: Option<String>,
    #[doc = " The actual value to for an initial answer."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUri")]
    pub value_uri: Option<String>,
}
#[doc = " A structured set of questions intended to guide the collection of answers from end-users. "]
#[doc = " Questionnaires provide detailed control over order, presentation, phraseology and grouping to "]
#[doc = " allow coherent, consistent data collection."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Questionnaire_Item")]
#[serde(deny_unknown_fields)]
pub struct QuestionnaireItem {
    #[doc = " Extensions for definition"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _definition: Option<Element>,
    #[doc = " Extensions for enableBehavior"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_enableBehavior")]
    pub _enable_behavior: Option<Element>,
    #[doc = " Extensions for linkId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_linkId")]
    pub _link_id: Option<Element>,
    #[doc = " Extensions for maxLength"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_maxLength")]
    pub _max_length: Option<Element>,
    #[doc = " Extensions for prefix"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _prefix: Option<Element>,
    #[doc = " Extensions for readOnly"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_readOnly")]
    pub _read_only: Option<Element>,
    #[doc = " Extensions for repeats"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _repeats: Option<Element>,
    #[doc = " Extensions for required"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _required: Option<Element>,
    #[doc = " Extensions for text"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _text: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " One of the permitted answers for a \"choice\" or \"open-choice\" question."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "answerOption")]
    pub answer_option: Option<Vec<QuestionnaireAnswerOption>>,
    #[doc = " A reference to a value set containing a list of codes representing permitted answers for a "]
    #[doc = " \"choice\" or \"open-choice\" question."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "answerValueSet")]
    pub answer_value_set: Option<Canonical>,
    #[doc = " A terminology code that corresponds to this group or question (e.g. a code from LOINC, "]
    #[doc = " which defines many questions and answers)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Vec<Coding>>,
    #[doc = " This element is a URI that refers to an [ElementDefinition](elementdefinition.html) that "]
    #[doc = " provides information about this item, including information that might otherwise be "]
    #[doc = " included in the instance of the Questionnaire resource. A detailed description of the "]
    #[doc = " construction of the URI is shown in Comments, below. If this element is present then the "]
    #[doc = " following element values MAY be derived from the Element Definition if the corresponding "]
    #[doc = " elements of this Questionnaire resource instance have no value:"]
    #[doc = " "]
    #[doc = " * code (ElementDefinition.code) "]
    #[doc = " * type (ElementDefinition.type) "]
    #[doc = " * required (ElementDefinition.min) "]
    #[doc = " * repeats (ElementDefinition.max) "]
    #[doc = " * maxLength (ElementDefinition.maxLength) "]
    #[doc = " * answerValueSet (ElementDefinition.binding)"]
    #[doc = " * options (ElementDefinition.binding)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub definition: Option<Uri>,
    #[doc = " Controls how multiple enableWhen values are interpreted -  whether all or any must be true."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "enableBehavior")]
    pub enable_behavior: Option<Code>,
    #[doc = " A constraint indicating that this item should only be enabled (displayed/allow answers to "]
    #[doc = " be captured) when the specified condition is true."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "enableWhen")]
    pub enable_when: Option<Vec<QuestionnaireEnableWhen>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " One or more values that should be pre-populated in the answer when initially rendering the "]
    #[doc = " questionnaire for user input."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub initial: Option<Vec<QuestionnaireInitial>>,
    #[doc = " Text, questions and other groups to be nested beneath a question or group."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub item: Option<Vec<QuestionnaireItem>>,
    #[doc = " An identifier that is unique within the Questionnaire allowing linkage to the equivalent "]
    #[doc = " item in a QuestionnaireResponse resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "linkId")]
    pub link_id: Option<String>,
    #[doc = " The maximum number of characters that are permitted in the answer to be considered a "]
    #[doc = " \"valid\" QuestionnaireResponse."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxLength")]
    pub max_length: Option<Integer>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A short label for a particular group, question or set of display text within the "]
    #[doc = " questionnaire used for reference by the individual completing the questionnaire."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[doc = " An indication, when true, that the value cannot be changed by a human respondent to the "]
    #[doc = " Questionnaire."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "readOnly")]
    pub read_only: Option<Boolean>,
    #[doc = " An indication, if true, that the item may occur multiple times in the response, collecting "]
    #[doc = " multiple answers for questions or multiple sets of answers for groups."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub repeats: Option<Boolean>,
    #[doc = " An indication, if true, that the item must be present in a \"completed\" "]
    #[doc = " QuestionnaireResponse.  If false, the item may be skipped when answering the questionnaire."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub required: Option<Boolean>,
    #[doc = " The name of a section, the text of a question or text content for a display item."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    #[doc = " The type of questionnaire item this is - whether text for display, a grouping of other "]
    #[doc = " items or a particular type of data to be captured (string, integer, coded choice, etc.)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}
#[doc = " A set of ordered Quantities defined by a low and high limit."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Range {
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The high limit. The boundary is inclusive."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub high: Option<Quantity>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The low limit. The boundary is inclusive."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub low: Option<Quantity>,
}
#[doc = " A relationship of two Quantity values - expressed as a numerator and a denominator."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Ratio {
    #[doc = " The value of the denominator."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub denominator: Option<Quantity>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The value of the numerator."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub numerator: Option<Quantity>,
}
#[doc = " A range of ratios expressed as a low and high numerator and a denominator."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct RatioRange {
    #[doc = " The value of the denominator."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub denominator: Option<Quantity>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The value of the high limit numerator."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "highNumerator")]
    pub high_numerator: Option<Quantity>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The value of the low limit numerator."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lowNumerator")]
    pub low_numerator: Option<Quantity>,
}
#[doc = " A reference from one resource to another."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Reference {
    #[doc = " Extensions for display"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _display: Option<Element>,
    #[doc = " Extensions for reference"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _reference: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " Plain text narrative that identifies the resource in addition to the resource reference."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " An identifier for the target resource. This is used when there is no way to reference the "]
    #[doc = " other resource directly, either because the entity it represents is not available through a "]
    #[doc = " FHIR server, or because there is no way for the author of the resource to convert a known "]
    #[doc = " identifier to an actual location. There is no requirement that a Reference.identifier point "]
    #[doc = " to something that is actually exposed as a FHIR instance, but it SHALL point to a business "]
    #[doc = " concept that would be expected to be exposed as a FHIR instance, and that instance would "]
    #[doc = " need to be of a FHIR resource type allowed by the reference."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,
    #[doc = " A reference to a location at which the other resource is found. The reference may be a "]
    #[doc = " relative reference, in which case it is relative to the service base URL, or an absolute "]
    #[doc = " URL that resolves to the location where the resource is found. The reference may be version "]
    #[doc = " specific or not. If the reference is not to a FHIR RESTful server, then it should be "]
    #[doc = " assumed to be version specific. Internal fragment references (start with '#') refer to "]
    #[doc = " contained resources."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reference: Option<String>,
    #[doc = " The expected type of the target of the reference. If both Reference.type and "]
    #[doc = " Reference.reference are populated and Reference.reference is a FHIR URL, both SHALL be "]
    #[doc = " consistent."]
    #[doc = " "]
    #[doc = " The type is the Canonical URL of Resource Definition that is the type this reference refers "]
    #[doc = " to. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition/ e.g. "]
    #[doc = " \"Patient\" is a reference to http://hl7.org/fhir/StructureDefinition/Patient. Absolute URLs "]
    #[doc = " are only allowed for logical models (and can only be used in references in logical models, "]
    #[doc = " not resources)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Uri>,
}
#[doc = " Regulatory approval, clearance or licencing related to a regulated product, treatment, facility "]
#[doc = " or activity that is cited in a guidance, regulation, rule or legislative act. An example is "]
#[doc = " Market Authorization relating to a Medicinal Product."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct RegulatedAuthorization {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for statusDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_statusDate")]
    pub _status_date: Option<Element>,
    #[doc = " The legal or regulatory framework against which this authorization is granted, or other "]
    #[doc = " reasons for it."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub basis: Option<Vec<CodeableConcept>>,
    #[doc = " The case or regulatory procedure for granting or amending a regulated authorization. An "]
    #[doc = " authorization is granted in response to submissions/applications by those seeking "]
    #[doc = " authorization. A case is the administrative process that deals with the application(s) that "]
    #[doc = " relate to this and assesses them. Note: This area is subject to ongoing review and the "]
    #[doc = " workgroup is seeking implementer feedback on its use (see link at bottom of page)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub case: Option<RegulatedAuthorizationCase>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " General textual supporting information."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The organization that has been granted this authorization, by some authoritative body (the "]
    #[doc = " 'regulator')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub holder: Option<Reference>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Business identifier for the authorization, typically assigned by the authorizing body."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " Condition for which the use of the regulated product applies."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub indication: Option<CodeableReference>,
    #[doc = " The intended use of the product, e.g. prevention, treatment, diagnosis."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "intendedUse")]
    pub intended_use: Option<CodeableConcept>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The territory (e.g., country, jurisdiction etc.) in which the authorization has been "]
    #[doc = " granted."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub region: Option<Vec<CodeableConcept>>,
    #[doc = " The regulatory authority or authorizing body granting the authorization. For example, "]
    #[doc = " European Medicines Agency (EMA), Food and Drug Administration (FDA), Health Canada (HC), "]
    #[doc = " etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub regulator: Option<Reference>,
    #[doc = " This is a RegulatedAuthorization resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The status that is authorised e.g. approved. Intermediate states and actions can be tracked "]
    #[doc = " with cases and applications."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<CodeableConcept>,
    #[doc = " The date at which the current status was assigned."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusDate")]
    pub status_date: Option<DateTime>,
    #[doc = " The product type, treatment, facility or activity that is being authorized."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Vec<Reference>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " Overall type of this authorization, for example drug marketing approval, orphan drug "]
    #[doc = " designation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
    #[doc = " The time period in which the regulatory approval, clearance or licencing is in effect. As "]
    #[doc = " an example, a Marketing Authorization includes the date of authorization and/or an "]
    #[doc = " expiration date."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "validityPeriod")]
    pub validity_period: Option<Period>,
}
#[doc = " Regulatory approval, clearance or licencing related to a regulated product, treatment, facility "]
#[doc = " or activity that is cited in a guidance, regulation, rule or legislative act. An example is "]
#[doc = " Market Authorization relating to a Medicinal Product."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "RegulatedAuthorization_Case")]
#[serde(deny_unknown_fields)]
pub struct RegulatedAuthorizationCase {
    #[doc = " Extensions for dateDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_dateDateTime")]
    pub _date_date_time: Option<Element>,
    #[doc = " A regulatory submission from an organization to a regulator, as part of an assessing case. "]
    #[doc = " Multiple applications may occur over time, with more or different information to support or "]
    #[doc = " modify the submission or the authorization. The applications can be considered as steps "]
    #[doc = " within the longer running case or procedure for this authorization process."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub application: Option<Vec<RegulatedAuthorizationCase>>,
    #[doc = " Relevant date for this case."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dateDateTime")]
    pub date_date_time: Option<String>,
    #[doc = " Relevant date for this case."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "datePeriod")]
    pub date_period: Option<Period>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Identifier by which this case can be referenced."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The status associated with the case."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<CodeableConcept>,
    #[doc = " The defining type of case."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " Related artifacts such as additional documentation, justification, or bibliographic references."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct RelatedArtifact {
    #[doc = " Extensions for citation"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _citation: Option<Element>,
    #[doc = " Extensions for display"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _display: Option<Element>,
    #[doc = " Extensions for label"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _label: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " A bibliographic citation for the related artifact. This text SHOULD be formatted according "]
    #[doc = " to an accepted citation format."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub citation: Option<Markdown>,
    #[doc = " A brief description of the document or knowledge resource being referenced, suitable for "]
    #[doc = " display to a consumer."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,
    #[doc = " The document being referenced, represented as an attachment. This is exclusive with the "]
    #[doc = " resource element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub document: Option<Attachment>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A short label that can be used to reference the citation from elsewhere in the containing "]
    #[doc = " artifact, such as a footnote index."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    #[doc = " The related resource, such as a library, value set, profile, or other knowledge resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource: Option<Canonical>,
    #[doc = " The type of relationship to the related artifact."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<serde_json::Value>,
    #[doc = " A url for the artifact that can be followed to access the actual content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Url>,
}
#[doc = " Information about a person that is involved in the care for a patient, but who is not the "]
#[doc = " target of healthcare, nor has a formal responsibility in the care process."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct RelatedPerson {
    #[doc = " Extensions for active"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _active: Option<Element>,
    #[doc = " Extensions for birthDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_birthDate")]
    pub _birth_date: Option<Element>,
    #[doc = " Extensions for gender"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _gender: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Whether this related person record is in active use."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub active: Option<Boolean>,
    #[doc = " Address where the related person can be contacted or visited."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub address: Option<Vec<Address>>,
    #[doc = " The date on which the related person was born."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "birthDate")]
    pub birth_date: Option<Date>,
    #[doc = " A language which may be used to communicate with about the patient's health."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub communication: Option<Vec<RelatedPersonCommunication>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Administrative Gender - the gender that the person is considered to have for administration "]
    #[doc = " and record keeping purposes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub gender: Option<Code>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Identifier for a person within a particular scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A name associated with the person."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<Vec<HumanName>>,
    #[doc = " The patient this person is related to."]
    pub patient: Reference,
    #[doc = " The period of time during which this relationship is or was active. If there are no dates "]
    #[doc = " defined, then the interval is unknown."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
    #[doc = " Image of the person."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub photo: Option<Vec<Attachment>>,
    #[doc = " The nature of the relationship between a patient and the related person."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub relationship: Option<Vec<CodeableConcept>>,
    #[doc = " This is a RelatedPerson resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " A contact detail for the person, e.g. a telephone number or an email address."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub telecom: Option<Vec<ContactPoint>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " Information about a person that is involved in the care for a patient, but who is not the "]
#[doc = " target of healthcare, nor has a formal responsibility in the care process."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "RelatedPerson_Communication")]
#[serde(deny_unknown_fields)]
pub struct RelatedPersonCommunication {
    #[doc = " Extensions for preferred"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _preferred: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen "]
    #[doc = " and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. \"en\" for English, or "]
    #[doc = " \"en-US\" for American English versus \"en-EN\" for England English."]
    pub language: CodeableConcept,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Indicates whether or not the patient prefers this language (over other languages he masters "]
    #[doc = " up a certain level)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub preferred: Option<Boolean>,
}
#[doc = " A group of related requests that can be used to capture intended activities that have "]
#[doc = " inter-dependencies such as \"give this medication after that one\"."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct RequestGroup {
    #[doc = " Extensions for authoredOn"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_authoredOn")]
    pub _authored_on: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for instantiatesCanonical"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_instantiatesCanonical")]
    pub _instantiates_canonical: Option<Vec<Element>>,
    #[doc = " Extensions for instantiatesUri"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_instantiatesUri")]
    pub _instantiates_uri: Option<Vec<Element>>,
    #[doc = " Extensions for intent"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _intent: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for priority"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _priority: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " The actions, if any, produced by the evaluation of the artifact."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub action: Option<Vec<RequestGroupAction>>,
    #[doc = " Provides a reference to the author of the request group."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Reference>,
    #[doc = " Indicates when the request group was created."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "authoredOn")]
    pub authored_on: Option<DateTime>,
    #[doc = " A plan, proposal or order that is fulfilled in whole or in part by this request."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Vec<Reference>>,
    #[doc = " A code that identifies what the overall request group is."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " Describes the context of the request group, if any."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " A shared identifier common to all requests that were authorized more or less simultaneously "]
    #[doc = " by a single author, representing the identifier of the requisition, prescription or similar "]
    #[doc = " form."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "groupIdentifier")]
    pub group_identifier: Option<Identifier>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Allows a service to provide a unique, business identifier for the request."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " A canonical URL referencing a FHIR-defined protocol, guideline, orderset or other "]
    #[doc = " definition that is adhered to in whole or in part by this request."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesCanonical")]
    pub instantiates_canonical: Option<Vec<Canonical>>,
    #[doc = " A URL referencing an externally defined protocol, guideline, orderset or other definition "]
    #[doc = " that is adhered to in whole or in part by this request."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesUri")]
    pub instantiates_uri: Option<Vec<Uri>>,
    #[doc = " Indicates the level of authority/intentionality associated with the request and where the "]
    #[doc = " request fits into the workflow chain."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub intent: Option<Code>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Provides a mechanism to communicate additional information about the response."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " Indicates how quickly the request should be addressed with respect to other requests."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub priority: Option<Code>,
    #[doc = " Describes the reason for the request group in coded or textual form."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,
    #[doc = " Indicates another resource whose existence justifies this request group."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,
    #[doc = " Completed or terminated request(s) whose function is taken by this new request."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub replaces: Option<Vec<Reference>>,
    #[doc = " This is a RequestGroup resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The current state of the request. For request groups, the status reflects the status of all "]
    #[doc = " the requests in the group."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " The subject for which the request group was created."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Reference>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " A group of related requests that can be used to capture intended activities that have "]
#[doc = " inter-dependencies such as \"give this medication after that one\"."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "RequestGroup_Action")]
#[serde(deny_unknown_fields)]
pub struct RequestGroupAction {
    #[doc = " Extensions for cardinalityBehavior"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_cardinalityBehavior")]
    pub _cardinality_behavior: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for groupingBehavior"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_groupingBehavior")]
    pub _grouping_behavior: Option<Element>,
    #[doc = " Extensions for precheckBehavior"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_precheckBehavior")]
    pub _precheck_behavior: Option<Element>,
    #[doc = " Extensions for prefix"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _prefix: Option<Element>,
    #[doc = " Extensions for priority"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _priority: Option<Element>,
    #[doc = " Extensions for requiredBehavior"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_requiredBehavior")]
    pub _required_behavior: Option<Element>,
    #[doc = " Extensions for selectionBehavior"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_selectionBehavior")]
    pub _selection_behavior: Option<Element>,
    #[doc = " Extensions for textEquivalent"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_textEquivalent")]
    pub _text_equivalent: Option<Element>,
    #[doc = " Extensions for timingDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_timingDateTime")]
    pub _timing_date_time: Option<Element>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " Sub actions."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub action: Option<Vec<RequestGroupAction>>,
    #[doc = " Defines whether the action can be selected multiple times."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "cardinalityBehavior")]
    pub cardinality_behavior: Option<Code>,
    #[doc = " A code that provides meaning for the action or action group. For example, a section may "]
    #[doc = " have a LOINC code for a section of a documentation template."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Vec<CodeableConcept>>,
    #[doc = " An expression that describes applicability criteria, or start/stop conditions for the "]
    #[doc = " action."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub condition: Option<Vec<RequestGroupCondition>>,
    #[doc = " A short description of the action used to provide a summary to display to the user."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " Didactic or other informational resources associated with the action that can be provided "]
    #[doc = " to the CDS recipient. Information resources can include inline text commentary and links to "]
    #[doc = " web resources."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub documentation: Option<Vec<RelatedArtifact>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Defines the grouping behavior for the action and its children."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "groupingBehavior")]
    pub grouping_behavior: Option<Code>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The participant that should perform or be responsible for this action."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub participant: Option<Vec<Reference>>,
    #[doc = " Defines whether the action should usually be preselected."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "precheckBehavior")]
    pub precheck_behavior: Option<Code>,
    #[doc = " A user-visible prefix for the action."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[doc = " Indicates how quickly the action should be addressed with respect to other actions."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub priority: Option<Code>,
    #[doc = " A relationship to another action such as \"before\" or \"30-60 minutes after start of\"."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatedAction")]
    pub related_action: Option<Vec<RequestGroupRelatedAction>>,
    #[doc = " Defines expectations around whether an action is required."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "requiredBehavior")]
    pub required_behavior: Option<Code>,
    #[doc = " The resource that is the target of the action (e.g. CommunicationRequest)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource: Option<Reference>,
    #[doc = " Defines the selection behavior for the action and its children."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "selectionBehavior")]
    pub selection_behavior: Option<Code>,
    #[doc = " A text equivalent of the action to be performed. This provides a human-interpretable "]
    #[doc = " description of the action when the definition is consumed by a system that might not be "]
    #[doc = " capable of interpreting it dynamically."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "textEquivalent")]
    pub text_equivalent: Option<String>,
    #[doc = " An optional value describing when the action should be performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingAge")]
    pub timing_age: Option<Age>,
    #[doc = " An optional value describing when the action should be performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingDateTime")]
    pub timing_date_time: Option<String>,
    #[doc = " An optional value describing when the action should be performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingDuration")]
    pub timing_duration: Option<Duration>,
    #[doc = " An optional value describing when the action should be performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingPeriod")]
    pub timing_period: Option<Period>,
    #[doc = " An optional value describing when the action should be performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingRange")]
    pub timing_range: Option<Range>,
    #[doc = " An optional value describing when the action should be performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingTiming")]
    pub timing_timing: Option<Timing>,
    #[doc = " The title of the action displayed to a user."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[doc = " The type of action to perform (create, update, remove)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " A group of related requests that can be used to capture intended activities that have "]
#[doc = " inter-dependencies such as \"give this medication after that one\"."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "RequestGroup_Condition")]
#[serde(deny_unknown_fields)]
pub struct RequestGroupCondition {
    #[doc = " Extensions for kind"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _kind: Option<Element>,
    #[doc = " An expression that returns true or false, indicating whether or not the condition is "]
    #[doc = " satisfied."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expression: Option<Expression>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The kind of condition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<Code>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " A group of related requests that can be used to capture intended activities that have "]
#[doc = " inter-dependencies such as \"give this medication after that one\"."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "RequestGroup_RelatedAction")]
#[serde(deny_unknown_fields)]
pub struct RequestGroupRelatedAction {
    #[doc = " Extensions for actionId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_actionId")]
    pub _action_id: Option<Element>,
    #[doc = " Extensions for relationship"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _relationship: Option<Element>,
    #[doc = " The element id of the action this is related to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "actionId")]
    pub action_id: Option<Id>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A duration or range of durations to apply to the relationship. For example, 30-60 minutes "]
    #[doc = " before."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "offsetDuration")]
    pub offset_duration: Option<Duration>,
    #[doc = " A duration or range of durations to apply to the relationship. For example, 30-60 minutes "]
    #[doc = " before."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "offsetRange")]
    pub offset_range: Option<Range>,
    #[doc = " The relationship of this action to the related action."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub relationship: Option<Code>,
}
#[doc = " The ResearchDefinition resource describes the conditional state (population and any exposures "]
#[doc = " being compared within the population) and outcome (if specified) that the knowledge (evidence, "]
#[doc = " assertion, recommendation) is about."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ResearchDefinition {
    #[doc = " Extensions for approvalDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_approvalDate")]
    pub _approval_date: Option<Element>,
    #[doc = " Extensions for comment"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _comment: Option<Vec<Element>>,
    #[doc = " Extensions for copyright"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _copyright: Option<Element>,
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for experimental"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _experimental: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for lastReviewDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastReviewDate")]
    pub _last_review_date: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for publisher"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _publisher: Option<Element>,
    #[doc = " Extensions for purpose"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _purpose: Option<Element>,
    #[doc = " Extensions for shortTitle"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_shortTitle")]
    pub _short_title: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for subtitle"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _subtitle: Option<Element>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " Extensions for usage"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _usage: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " The date on which the resource content was approved by the publisher. Approval happens once "]
    #[doc = " when the content is officially approved for usage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "approvalDate")]
    pub approval_date: Option<Date>,
    #[doc = " An individiual or organization primarily involved in the creation and maintenance of the "]
    #[doc = " content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Vec<ContactDetail>>,
    #[doc = " A human-readable string to clarify or explain concepts about the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<Vec<String>>,
    #[doc = " Contact details to assist a user in finding and communicating with the publisher."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " A copyright statement relating to the research definition and/or its contents. Copyright "]
    #[doc = " statements are generally legal restrictions on the use and publishing of the research "]
    #[doc = " definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,
    #[doc = " The date  (and optionally time) when the research definition was published. The date must "]
    #[doc = " change when the business version changes and it must change if the status code changes. In "]
    #[doc = " addition, it should change when the substantive content of the research definition changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " A free text natural language description of the research definition from a consumer's "]
    #[doc = " perspective."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " An individual or organization primarily responsible for internal coherence of the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub editor: Option<Vec<ContactDetail>>,
    #[doc = " The period during which the research definition content was or is planned to be in active "]
    #[doc = " use."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectivePeriod")]
    pub effective_period: Option<Period>,
    #[doc = " An individual or organization responsible for officially endorsing the content for use in "]
    #[doc = " some setting."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub endorser: Option<Vec<ContactDetail>>,
    #[doc = " A Boolean value to indicate that this research definition is authored for testing purposes "]
    #[doc = " (or education/evaluation/marketing) and is not intended to be used for genuine usage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,
    #[doc = " A reference to a ResearchElementDefinition resource that defines the exposure for the "]
    #[doc = " research."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub exposure: Option<Reference>,
    #[doc = " A reference to a ResearchElementDefinition resource that defines the exposureAlternative "]
    #[doc = " for the research."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "exposureAlternative")]
    pub exposure_alternative: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A formal identifier that is used to identify this research definition when it is "]
    #[doc = " represented in other formats, or referenced in a specification, model, design or an "]
    #[doc = " instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " A legal or geographic region in which the research definition is intended to be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The date on which the resource content was last reviewed. Review happens periodically after "]
    #[doc = " approval but does not change the original approval date."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastReviewDate")]
    pub last_review_date: Option<Date>,
    #[doc = " A reference to a Library resource containing the formal logic used by the "]
    #[doc = " ResearchDefinition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub library: Option<Vec<Canonical>>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A natural language name identifying the research definition. This name should be usable as "]
    #[doc = " an identifier for the module by machine processing applications such as code generation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " A reference to a ResearchElementDefinition resomece that defines the outcome for the "]
    #[doc = " research."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub outcome: Option<Reference>,
    #[doc = " A reference to a ResearchElementDefinition resource that defines the population for the "]
    #[doc = " research."]
    pub population: Reference,
    #[doc = " The name of the organization or individual that published the research definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
    #[doc = " Explanation of why this research definition is needed and why it has been designed as it "]
    #[doc = " has."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,
    #[doc = " Related artifacts such as additional documentation, justification, or bibliographic "]
    #[doc = " references."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatedArtifact")]
    pub related_artifact: Option<Vec<RelatedArtifact>>,
    #[doc = " This is a ResearchDefinition resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " An individual or organization primarily responsible for review of some aspect of the "]
    #[doc = " content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reviewer: Option<Vec<ContactDetail>>,
    #[doc = " The short title provides an alternate title for use in informal descriptive contexts where "]
    #[doc = " the full, formal title is not necessary."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "shortTitle")]
    pub short_title: Option<String>,
    #[doc = " The status of this research definition. Enables tracking the life-cycle of the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " The intended subjects for the ResearchDefinition. If this element is not provided, a "]
    #[doc = " Patient subject is assumed, but the subject of the ResearchDefinition can be anything."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectCodeableConcept")]
    pub subject_codeable_concept: Option<CodeableConcept>,
    #[doc = " The intended subjects for the ResearchDefinition. If this element is not provided, a "]
    #[doc = " Patient subject is assumed, but the subject of the ResearchDefinition can be anything."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectReference")]
    pub subject_reference: Option<Reference>,
    #[doc = " An explanatory or alternate title for the ResearchDefinition giving additional information "]
    #[doc = " about its content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subtitle: Option<String>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " A short, descriptive, user-friendly title for the research definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[doc = " Descriptive topics related to the content of the ResearchDefinition. Topics provide a "]
    #[doc = " high-level categorization grouping types of ResearchDefinitions that can be useful for "]
    #[doc = " filtering and searching."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub topic: Option<Vec<CodeableConcept>>,
    #[doc = " An absolute URI that is used to identify this research definition when it is referenced in "]
    #[doc = " a specification, model, design or an instance; also called its canonical identifier. This "]
    #[doc = " SHOULD be globally unique and SHOULD be a literal address at which at which an "]
    #[doc = " authoritative instance of this research definition is (or will be) published. This URL can "]
    #[doc = " be the target of a canonical reference. It SHALL remain the same when the research "]
    #[doc = " definition is stored on different servers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
    #[doc = " A detailed description, from a clinical perspective, of how the ResearchDefinition is used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub usage: Option<String>,
    #[doc = " The content was developed with a focus and intent of supporting the contexts that are "]
    #[doc = " listed. These contexts may be general categories (gender, age, ...) or may be references to "]
    #[doc = " specific programs (insurance plans, studies, ...) and may be used to assist with indexing "]
    #[doc = " and searching for appropriate research definition instances."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,
    #[doc = " The identifier that is used to identify this version of the research definition when it is "]
    #[doc = " referenced in a specification, model, design or instance. This is an arbitrary value "]
    #[doc = " managed by the research definition author and is not expected to be globally unique. For "]
    #[doc = " example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. "]
    #[doc = " There is also no expectation that versions can be placed in a lexicographical sequence. To "]
    #[doc = " provide a version consistent with the Decision Support Service specification, use the "]
    #[doc = " format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge "]
    #[doc = " assets, refer to the Decision Support Service specification. Note that a version is "]
    #[doc = " required for non-experimental active artifacts."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[doc = " The ResearchElementDefinition resource describes a \"PICO\" element that knowledge (evidence, "]
#[doc = " assertion, recommendation) is about."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ResearchElementDefinition {
    #[doc = " Extensions for approvalDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_approvalDate")]
    pub _approval_date: Option<Element>,
    #[doc = " Extensions for comment"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _comment: Option<Vec<Element>>,
    #[doc = " Extensions for copyright"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _copyright: Option<Element>,
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for experimental"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _experimental: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for lastReviewDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastReviewDate")]
    pub _last_review_date: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for publisher"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _publisher: Option<Element>,
    #[doc = " Extensions for purpose"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _purpose: Option<Element>,
    #[doc = " Extensions for shortTitle"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_shortTitle")]
    pub _short_title: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for subtitle"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _subtitle: Option<Element>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " Extensions for usage"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _usage: Option<Element>,
    #[doc = " Extensions for variableType"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_variableType")]
    pub _variable_type: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " The date on which the resource content was approved by the publisher. Approval happens once "]
    #[doc = " when the content is officially approved for usage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "approvalDate")]
    pub approval_date: Option<Date>,
    #[doc = " An individiual or organization primarily involved in the creation and maintenance of the "]
    #[doc = " content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Vec<ContactDetail>>,
    #[doc = " A characteristic that defines the members of the research element. Multiple characteristics "]
    #[doc = " are applied with \"and\" semantics."]
    pub characteristic: Vec<ResearchElementDefinitionCharacteristic>,
    #[doc = " A human-readable string to clarify or explain concepts about the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<Vec<String>>,
    #[doc = " Contact details to assist a user in finding and communicating with the publisher."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " A copyright statement relating to the research element definition and/or its contents. "]
    #[doc = " Copyright statements are generally legal restrictions on the use and publishing of the "]
    #[doc = " research element definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,
    #[doc = " The date  (and optionally time) when the research element definition was published. The "]
    #[doc = " date must change when the business version changes and it must change if the status code "]
    #[doc = " changes. In addition, it should change when the substantive content of the research element "]
    #[doc = " definition changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " A free text natural language description of the research element definition from a "]
    #[doc = " consumer's perspective."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " An individual or organization primarily responsible for internal coherence of the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub editor: Option<Vec<ContactDetail>>,
    #[doc = " The period during which the research element definition content was or is planned to be in "]
    #[doc = " active use."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectivePeriod")]
    pub effective_period: Option<Period>,
    #[doc = " An individual or organization responsible for officially endorsing the content for use in "]
    #[doc = " some setting."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub endorser: Option<Vec<ContactDetail>>,
    #[doc = " A Boolean value to indicate that this research element definition is authored for testing "]
    #[doc = " purposes (or education/evaluation/marketing) and is not intended to be used for genuine "]
    #[doc = " usage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A formal identifier that is used to identify this research element definition when it is "]
    #[doc = " represented in other formats, or referenced in a specification, model, design or an "]
    #[doc = " instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " A legal or geographic region in which the research element definition is intended to be "]
    #[doc = " used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The date on which the resource content was last reviewed. Review happens periodically after "]
    #[doc = " approval but does not change the original approval date."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastReviewDate")]
    pub last_review_date: Option<Date>,
    #[doc = " A reference to a Library resource containing the formal logic used by the "]
    #[doc = " ResearchElementDefinition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub library: Option<Vec<Canonical>>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A natural language name identifying the research element definition. This name should be "]
    #[doc = " usable as an identifier for the module by machine processing applications such as code "]
    #[doc = " generation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " The name of the organization or individual that published the research element definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
    #[doc = " Explanation of why this research element definition is needed and why it has been designed "]
    #[doc = " as it has."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,
    #[doc = " Related artifacts such as additional documentation, justification, or bibliographic "]
    #[doc = " references."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatedArtifact")]
    pub related_artifact: Option<Vec<RelatedArtifact>>,
    #[doc = " This is a ResearchElementDefinition resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " An individual or organization primarily responsible for review of some aspect of the "]
    #[doc = " content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reviewer: Option<Vec<ContactDetail>>,
    #[doc = " The short title provides an alternate title for use in informal descriptive contexts where "]
    #[doc = " the full, formal title is not necessary."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "shortTitle")]
    pub short_title: Option<String>,
    #[doc = " The status of this research element definition. Enables tracking the life-cycle of the "]
    #[doc = " content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " The intended subjects for the ResearchElementDefinition. If this element is not provided, a "]
    #[doc = " Patient subject is assumed, but the subject of the ResearchElementDefinition can be "]
    #[doc = " anything."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectCodeableConcept")]
    pub subject_codeable_concept: Option<CodeableConcept>,
    #[doc = " The intended subjects for the ResearchElementDefinition. If this element is not provided, a "]
    #[doc = " Patient subject is assumed, but the subject of the ResearchElementDefinition can be "]
    #[doc = " anything."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectReference")]
    pub subject_reference: Option<Reference>,
    #[doc = " An explanatory or alternate title for the ResearchElementDefinition giving additional "]
    #[doc = " information about its content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subtitle: Option<String>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " A short, descriptive, user-friendly title for the research element definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[doc = " Descriptive topics related to the content of the ResearchElementDefinition. Topics provide "]
    #[doc = " a high-level categorization grouping types of ResearchElementDefinitions that can be useful "]
    #[doc = " for filtering and searching."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub topic: Option<Vec<CodeableConcept>>,
    #[doc = " The type of research element, a population, an exposure, or an outcome."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
    #[doc = " An absolute URI that is used to identify this research element definition when it is "]
    #[doc = " referenced in a specification, model, design or an instance; also called its canonical "]
    #[doc = " identifier. This SHOULD be globally unique and SHOULD be a literal address at which at "]
    #[doc = " which an authoritative instance of this research element definition is (or will be) "]
    #[doc = " published. This URL can be the target of a canonical reference. It SHALL remain the same "]
    #[doc = " when the research element definition is stored on different servers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
    #[doc = " A detailed description, from a clinical perspective, of how the ResearchElementDefinition "]
    #[doc = " is used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub usage: Option<String>,
    #[doc = " The content was developed with a focus and intent of supporting the contexts that are "]
    #[doc = " listed. These contexts may be general categories (gender, age, ...) or may be references to "]
    #[doc = " specific programs (insurance plans, studies, ...) and may be used to assist with indexing "]
    #[doc = " and searching for appropriate research element definition instances."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,
    #[doc = " The type of the outcome (e.g. Dichotomous, Continuous, or Descriptive)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "variableType")]
    pub variable_type: Option<Code>,
    #[doc = " The identifier that is used to identify this version of the research element definition "]
    #[doc = " when it is referenced in a specification, model, design or instance. This is an arbitrary "]
    #[doc = " value managed by the research element definition author and is not expected to be globally "]
    #[doc = " unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not "]
    #[doc = " available. There is also no expectation that versions can be placed in a lexicographical "]
    #[doc = " sequence. To provide a version consistent with the Decision Support Service specification, "]
    #[doc = " use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning "]
    #[doc = " knowledge assets, refer to the Decision Support Service specification. Note that a version "]
    #[doc = " is required for non-experimental active artifacts."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[doc = " The ResearchElementDefinition resource describes a \"PICO\" element that knowledge (evidence, "]
#[doc = " assertion, recommendation) is about."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ResearchElementDefinition_Characteristic")]
#[serde(deny_unknown_fields)]
pub struct ResearchElementDefinitionCharacteristic {
    #[doc = " Extensions for definitionCanonical"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_definitionCanonical")]
    pub _definition_canonical: Option<Element>,
    #[doc = " Extensions for exclude"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _exclude: Option<Element>,
    #[doc = " Extensions for participantEffectiveDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_participantEffectiveDateTime")]
    pub _participant_effective_date_time: Option<Element>,
    #[doc = " Extensions for participantEffectiveDescription"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_participantEffectiveDescription")]
    pub _participant_effective_description: Option<Element>,
    #[doc = " Extensions for participantEffectiveGroupMeasure"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_participantEffectiveGroupMeasure")]
    pub _participant_effective_group_measure: Option<Element>,
    #[doc = " Extensions for studyEffectiveDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_studyEffectiveDateTime")]
    pub _study_effective_date_time: Option<Element>,
    #[doc = " Extensions for studyEffectiveDescription"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_studyEffectiveDescription")]
    pub _study_effective_description: Option<Element>,
    #[doc = " Extensions for studyEffectiveGroupMeasure"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_studyEffectiveGroupMeasure")]
    pub _study_effective_group_measure: Option<Element>,
    #[doc = " Define members of the research element using Codes (such as condition, medication, or "]
    #[doc = " observation), Expressions ( using an expression language such as FHIRPath or CQL) or "]
    #[doc = " DataRequirements (such as Diabetes diagnosis onset in the last year)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "definitionCanonical")]
    pub definition_canonical: Option<String>,
    #[doc = " Define members of the research element using Codes (such as condition, medication, or "]
    #[doc = " observation), Expressions ( using an expression language such as FHIRPath or CQL) or "]
    #[doc = " DataRequirements (such as Diabetes diagnosis onset in the last year)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "definitionCodeableConcept")]
    pub definition_codeable_concept: Option<CodeableConcept>,
    #[doc = " Define members of the research element using Codes (such as condition, medication, or "]
    #[doc = " observation), Expressions ( using an expression language such as FHIRPath or CQL) or "]
    #[doc = " DataRequirements (such as Diabetes diagnosis onset in the last year)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "definitionDataRequirement")]
    pub definition_data_requirement: Option<DataRequirement>,
    #[doc = " Define members of the research element using Codes (such as condition, medication, or "]
    #[doc = " observation), Expressions ( using an expression language such as FHIRPath or CQL) or "]
    #[doc = " DataRequirements (such as Diabetes diagnosis onset in the last year)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "definitionExpression")]
    pub definition_expression: Option<Expression>,
    #[doc = " When true, members with this characteristic are excluded from the element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub exclude: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Indicates what effective period the study covers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "participantEffectiveDateTime")]
    pub participant_effective_date_time: Option<String>,
    #[doc = " A narrative description of the time period the study covers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "participantEffectiveDescription")]
    pub participant_effective_description: Option<String>,
    #[doc = " Indicates what effective period the study covers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "participantEffectiveDuration")]
    pub participant_effective_duration: Option<Duration>,
    #[doc = " Indicates how elements are aggregated within the study effective period."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "participantEffectiveGroupMeasure")]
    pub participant_effective_group_measure: Option<Code>,
    #[doc = " Indicates what effective period the study covers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "participantEffectivePeriod")]
    pub participant_effective_period: Option<Period>,
    #[doc = " Indicates duration from the participant's study entry."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "participantEffectiveTimeFromStart")]
    pub participant_effective_time_from_start: Option<Duration>,
    #[doc = " Indicates what effective period the study covers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "participantEffectiveTiming")]
    pub participant_effective_timing: Option<Timing>,
    #[doc = " Indicates what effective period the study covers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "studyEffectiveDateTime")]
    pub study_effective_date_time: Option<String>,
    #[doc = " A narrative description of the time period the study covers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "studyEffectiveDescription")]
    pub study_effective_description: Option<String>,
    #[doc = " Indicates what effective period the study covers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "studyEffectiveDuration")]
    pub study_effective_duration: Option<Duration>,
    #[doc = " Indicates how elements are aggregated within the study effective period."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "studyEffectiveGroupMeasure")]
    pub study_effective_group_measure: Option<Code>,
    #[doc = " Indicates what effective period the study covers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "studyEffectivePeriod")]
    pub study_effective_period: Option<Period>,
    #[doc = " Indicates duration from the study initiation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "studyEffectiveTimeFromStart")]
    pub study_effective_time_from_start: Option<Duration>,
    #[doc = " Indicates what effective period the study covers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "studyEffectiveTiming")]
    pub study_effective_timing: Option<Timing>,
    #[doc = " Specifies the UCUM unit for the outcome."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "unitOfMeasure")]
    pub unit_of_measure: Option<CodeableConcept>,
    #[doc = " Use UsageContext to define the members of the population, such as Age Ranges, Genders, "]
    #[doc = " Settings."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "usageContext")]
    pub usage_context: Option<Vec<UsageContext>>,
}
#[doc = " A process where a researcher or organization plans and then executes a series of steps intended "]
#[doc = " to increase the field of healthcare-related knowledge.  This includes studies of safety, "]
#[doc = " efficacy, comparative effectiveness and other information about medications, devices, therapies "]
#[doc = " and other interventional and investigative techniques.  A ResearchStudy involves the gathering "]
#[doc = " of information about human or animal subjects."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ResearchStudy {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " Describes an expected sequence of events for one of the participants of a study.  E.g. "]
    #[doc = " Exposure to drug A, wash-out, exposure to drug B, wash-out, follow-up."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub arm: Option<Vec<ResearchStudyArm>>,
    #[doc = " Codes categorizing the type of study such as investigational vs. observational, type of "]
    #[doc = " blinding, type of randomization, safety vs. efficacy, etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,
    #[doc = " The condition that is the focus of the study.  For example, In a study to examine risk "]
    #[doc = " factors for Lupus, might have as an inclusion criterion \"healthy volunteer\", but the target "]
    #[doc = " condition code would be a Lupus SNOMED code."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub condition: Option<Vec<CodeableConcept>>,
    #[doc = " Contact details to assist a user in learning more about or engaging with the study."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " A full description of how the study is being conducted."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " Reference to a Group that defines the criteria for and quantity of subjects participating "]
    #[doc = " in the study.  E.g. \" 200 female Europeans between the ages of 20 and 45 with early onset "]
    #[doc = " diabetes\"."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub enrollment: Option<Vec<Reference>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The medication(s), food(s), therapy(ies), device(s) or other concerns or interventions that "]
    #[doc = " the study is seeking to gain more information about."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub focus: Option<Vec<CodeableConcept>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Identifiers assigned to this research study by the sponsor or other systems."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " Key terms to aid in searching for or filtering the study."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub keyword: Option<Vec<CodeableConcept>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " Indicates a country, state or other region where the study is taking place."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<Vec<CodeableConcept>>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Comments made about the study by the performer, subject or other participants."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " A goal that the study is aiming to achieve in terms of a scientific question to be answered "]
    #[doc = " by the analysis of data collected during the study."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub objective: Option<Vec<ResearchStudyObjective>>,
    #[doc = " A larger research study of which this particular study is a component or step."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "partOf")]
    pub part_of: Option<Vec<Reference>>,
    #[doc = " Identifies the start date and the expected (or actual, depending on status) end date for "]
    #[doc = " the study."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
    #[doc = " The stage in the progression of a therapy from initial experimental use in humans in "]
    #[doc = " clinical trials to post-market evaluation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub phase: Option<CodeableConcept>,
    #[doc = " The type of study based upon the intent of the study's activities. A classification of the "]
    #[doc = " intent of the study."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "primaryPurposeType")]
    pub primary_purpose_type: Option<CodeableConcept>,
    #[doc = " A researcher in a study who oversees multiple aspects of the study, such as concept "]
    #[doc = " development, protocol writing, protocol submission for IRB approval, participant "]
    #[doc = " recruitment, informed consent, data collection, analysis, interpretation and presentation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "principalInvestigator")]
    pub principal_investigator: Option<Reference>,
    #[doc = " The set of steps expected to be performed as part of the execution of the study."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub protocol: Option<Vec<Reference>>,
    #[doc = " A description and/or code explaining the premature termination of the study."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonStopped")]
    pub reason_stopped: Option<CodeableConcept>,
    #[doc = " Citations, references and other related documents."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatedArtifact")]
    pub related_artifact: Option<Vec<RelatedArtifact>>,
    #[doc = " This is a ResearchStudy resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " A facility in which study activities are conducted."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub site: Option<Vec<Reference>>,
    #[doc = " An organization that initiates the investigation and is legally responsible for the study."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sponsor: Option<Reference>,
    #[doc = " The current state of the study."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " A short, descriptive user-friendly label for the study."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}
#[doc = " A process where a researcher or organization plans and then executes a series of steps intended "]
#[doc = " to increase the field of healthcare-related knowledge.  This includes studies of safety, "]
#[doc = " efficacy, comparative effectiveness and other information about medications, devices, therapies "]
#[doc = " and other interventional and investigative techniques.  A ResearchStudy involves the gathering "]
#[doc = " of information about human or animal subjects."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ResearchStudy_Arm")]
#[serde(deny_unknown_fields)]
pub struct ResearchStudyArm {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " A succinct description of the path through the study that would be followed by a subject "]
    #[doc = " adhering to this arm."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Unique, human-readable label for this arm of the study."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " Categorization of study arm, e.g. experimental, active comparator, placebo comparater."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " A process where a researcher or organization plans and then executes a series of steps intended "]
#[doc = " to increase the field of healthcare-related knowledge.  This includes studies of safety, "]
#[doc = " efficacy, comparative effectiveness and other information about medications, devices, therapies "]
#[doc = " and other interventional and investigative techniques.  A ResearchStudy involves the gathering "]
#[doc = " of information about human or animal subjects."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ResearchStudy_Objective")]
#[serde(deny_unknown_fields)]
pub struct ResearchStudyObjective {
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Unique, human-readable label for this objective of the study."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " The kind of study objective."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " A physical entity which is the primary unit of operational and/or administrative interest in a "]
#[doc = " study."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ResearchSubject {
    #[doc = " Extensions for actualArm"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_actualArm")]
    pub _actual_arm: Option<Element>,
    #[doc = " Extensions for assignedArm"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_assignedArm")]
    pub _assigned_arm: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " The name of the arm in the study the subject actually followed as part of this study."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "actualArm")]
    pub actual_arm: Option<String>,
    #[doc = " The name of the arm in the study the subject is expected to follow as part of this study."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "assignedArm")]
    pub assigned_arm: Option<String>,
    #[doc = " A record of the patient's informed agreement to participate in the study."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub consent: Option<Reference>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Identifiers assigned to this research subject for a study."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The record of the person or animal who is involved in the study."]
    pub individual: Reference,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The dates the subject began and ended their participation in the study."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
    #[doc = " This is a ResearchSubject resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The current state of the subject."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " Reference to the study the subject is participating in."]
    pub study: Reference,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(untagged)]
pub enum ResourceListText {
    Variant0(Account),
    Variant1(ActivityDefinition),
    Variant2(AdministrableProductDefinition),
    Variant3(AdverseEvent),
    Variant4(AllergyIntolerance),
    Variant5(Appointment),
    Variant6(AppointmentResponse),
    Variant7(AuditEvent),
    Variant8(Basic),
    Variant9(Binary),
    Variant10(BiologicallyDerivedProduct),
    Variant11(BodyStructure),
    Variant12(Bundle),
    Variant13(CapabilityStatement),
    Variant14(CarePlan),
    Variant15(CareTeam),
    Variant16(CatalogEntry),
    Variant17(ChargeItem),
    Variant18(ChargeItemDefinition),
    Variant19(Citation),
    Variant20(Claim),
    Variant21(ClaimResponse),
    Variant22(ClinicalImpression),
    Variant23(ClinicalUseDefinition),
    Variant24(CodeSystem),
    Variant25(Communication),
    Variant26(CommunicationRequest),
    Variant27(CompartmentDefinition),
    Variant28(Composition),
    Variant29(ConceptMap),
    Variant30(Condition),
    Variant31(Consent),
    Variant32(Contract),
    Variant33(Coverage),
    Variant34(CoverageEligibilityRequest),
    Variant35(CoverageEligibilityResponse),
    Variant36(DetectedIssue),
    Variant37(Device),
    Variant38(DeviceDefinition),
    Variant39(DeviceMetric),
    Variant40(DeviceRequest),
    Variant41(DeviceUseStatement),
    Variant42(DiagnosticReport),
    Variant43(DocumentManifest),
    Variant44(DocumentReference),
    Variant45(Encounter),
    Variant46(Endpoint),
    Variant47(EnrollmentRequest),
    Variant48(EnrollmentResponse),
    Variant49(EpisodeOfCare),
    Variant50(EventDefinition),
    Variant51(Evidence),
    Variant52(EvidenceReport),
    Variant53(EvidenceVariable),
    Variant54(ExampleScenario),
    Variant55(ExplanationOfBenefit),
    Variant56(FamilyMemberHistory),
    Variant57(Flag),
    Variant58(Goal),
    Variant59(GraphDefinition),
    Variant60(Group),
    Variant61(GuidanceResponse),
    Variant62(HealthcareService),
    Variant63(ImagingStudy),
    Variant64(Immunization),
    Variant65(ImmunizationEvaluation),
    Variant66(ImmunizationRecommendation),
    Variant67(ImplementationGuide),
    Variant68(Ingredient),
    Variant69(InsurancePlan),
    Variant70(Invoice),
    Variant71(Library),
    Variant72(Linkage),
    Variant73(List),
    Variant74(Location),
    Variant75(ManufacturedItemDefinition),
    Variant76(Measure),
    Variant77(MeasureReport),
    Variant78(Media),
    Variant79(Medication),
    Variant80(MedicationAdministration),
    Variant81(MedicationDispense),
    Variant82(MedicationKnowledge),
    Variant83(MedicationRequest),
    Variant84(MedicationStatement),
    Variant85(MedicinalProductDefinition),
    Variant86(MessageDefinition),
    Variant87(MessageHeader),
    Variant88(MolecularSequence),
    Variant89(NamingSystem),
    Variant90(NutritionOrder),
    Variant91(NutritionProduct),
    Variant92(Observation),
    Variant93(ObservationDefinition),
    Variant94(OperationDefinition),
    Variant95(OperationOutcome),
    Variant96(Organization),
    Variant97(OrganizationAffiliation),
    Variant98(PackagedProductDefinition),
    Variant99(Parameters),
    Variant100(Patient),
    Variant101(PaymentNotice),
    Variant102(PaymentReconciliation),
    Variant103(Person),
    Variant104(PlanDefinition),
    Variant105(Practitioner),
    Variant106(PractitionerRole),
    Variant107(Procedure),
    Variant108(Provenance),
    Variant109(Questionnaire),
    Variant110(QuestionnaireResponse),
    Variant111(RegulatedAuthorization),
    Variant112(RelatedPerson),
    Variant113(RequestGroup),
    Variant114(ResearchDefinition),
    Variant115(ResearchElementDefinition),
    Variant116(ResearchStudy),
    Variant117(ResearchSubject),
    Variant118(RiskAssessment),
    Variant119(Schedule),
    Variant120(SearchParameter),
    Variant121(ServiceRequest),
    Variant122(Slot),
    Variant123(Specimen),
    Variant124(SpecimenDefinition),
    Variant125(StructureDefinition),
    Variant126(StructureMap),
    Variant127(Subscription),
    Variant128(SubscriptionStatus),
    Variant129(SubscriptionTopic),
    Variant130(Substance),
    Variant131(SubstanceDefinition),
    Variant132(SupplyDelivery),
    Variant133(SupplyRequest),
    Variant134(Task),
    Variant135(TerminologyCapabilities),
    Variant136(TestReport),
    Variant137(TestScript),
    Variant138(ValueSet),
    Variant139(VerificationResult),
    Variant140(VisionPrescription),
}
pub type ResourceList = ResourceListText;
#[doc = " An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood "]
#[doc = " of each outcome."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct RiskAssessment {
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for mitigation"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _mitigation: Option<Element>,
    #[doc = " Extensions for occurrenceDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_occurrenceDateTime")]
    pub _occurrence_date_time: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " A reference to the request that is fulfilled by this risk assessment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Reference>,
    #[doc = " Indicates the source data considered as part of the assessment (for example, FamilyHistory, "]
    #[doc = " Observations, Procedures, Conditions, etc.)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub basis: Option<Vec<Reference>>,
    #[doc = " The type of the risk assessment performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,
    #[doc = " For assessments or prognosis specific to a particular condition, indicates the condition "]
    #[doc = " being assessed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub condition: Option<Reference>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The encounter where the assessment was performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Business identifier assigned to the risk assessment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " The algorithm, process or mechanism used to evaluate the risk."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub method: Option<CodeableConcept>,
    #[doc = " A description of the steps that might be taken to reduce the identified risk(s)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub mitigation: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Additional comments about the risk assessment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " The date (and possibly time) the risk assessment was performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrenceDateTime")]
    pub occurrence_date_time: Option<String>,
    #[doc = " The date (and possibly time) the risk assessment was performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrencePeriod")]
    pub occurrence_period: Option<Period>,
    #[doc = " A reference to a resource that this risk assessment is part of, such as a Procedure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub parent: Option<Reference>,
    #[doc = " The provider or software application that performed the assessment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub performer: Option<Reference>,
    #[doc = " Describes the expected outcome for the subject."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub prediction: Option<Vec<RiskAssessmentPrediction>>,
    #[doc = " The reason the risk assessment was performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,
    #[doc = " Resources supporting the reason the risk assessment was performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,
    #[doc = " This is a RiskAssessment resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The status of the RiskAssessment, using the same statuses as an Observation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " The patient or group the risk assessment applies to."]
    pub subject: Reference,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood "]
#[doc = " of each outcome."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "RiskAssessment_Prediction")]
#[serde(deny_unknown_fields)]
pub struct RiskAssessmentPrediction {
    #[doc = " Extensions for probabilityDecimal"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_probabilityDecimal")]
    pub _probability_decimal: Option<Element>,
    #[doc = " Extensions for rationale"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _rationale: Option<Element>,
    #[doc = " Extensions for relativeRisk"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_relativeRisk")]
    pub _relative_risk: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " One of the potential outcomes for the patient (e.g. remission, death,  a particular "]
    #[doc = " condition)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub outcome: Option<CodeableConcept>,
    #[doc = " Indicates how likely the outcome is (in the specified timeframe)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "probabilityDecimal")]
    pub probability_decimal: Option<f64>,
    #[doc = " Indicates how likely the outcome is (in the specified timeframe)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "probabilityRange")]
    pub probability_range: Option<Range>,
    #[doc = " Indicates how likely the outcome is (in the specified timeframe), expressed as a "]
    #[doc = " qualitative value (e.g. low, medium, or high)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "qualitativeRisk")]
    pub qualitative_risk: Option<CodeableConcept>,
    #[doc = " Additional information explaining the basis for the prediction."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub rationale: Option<String>,
    #[doc = " Indicates the risk for this particular subject (with their specific characteristics) "]
    #[doc = " divided by the risk of the population in general.  (Numbers greater than 1 = higher risk "]
    #[doc = " than the population, numbers less than 1 = lower risk.)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relativeRisk")]
    pub relative_risk: Option<Decimal>,
    #[doc = " Indicates the period of time or age range of the subject to which the specified probability "]
    #[doc = " applies."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "whenPeriod")]
    pub when_period: Option<Period>,
    #[doc = " Indicates the period of time or age range of the subject to which the specified probability "]
    #[doc = " applies."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "whenRange")]
    pub when_range: Option<Range>,
}
#[doc = " A series of measurements taken by a device, with upper and lower limits. There may be more than "]
#[doc = " one dimension in the data."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct SampledData {
    #[doc = " Extensions for data"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _data: Option<Element>,
    #[doc = " Extensions for dimensions"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _dimensions: Option<Element>,
    #[doc = " Extensions for factor"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _factor: Option<Element>,
    #[doc = " Extensions for lowerLimit"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lowerLimit")]
    pub _lower_limit: Option<Element>,
    #[doc = " Extensions for period"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _period: Option<Element>,
    #[doc = " Extensions for upperLimit"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_upperLimit")]
    pub _upper_limit: Option<Element>,
    #[doc = " A series of data points which are decimal values separated by a single space (character "]
    #[doc = " u20). The special values \"E\" (error), \"L\" (below detection limit) and \"U\" (above detection "]
    #[doc = " limit) can also be used in place of a decimal value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub data: Option<String>,
    #[doc = " The number of sample points at each time point. If this value is greater than one, then the "]
    #[doc = " dimensions will be interlaced - all the sample points for a point in time will be recorded "]
    #[doc = " at once."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub dimensions: Option<PositiveInt>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " A correction factor that is applied to the sampled data points before they are added to the "]
    #[doc = " origin."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub factor: Option<Decimal>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The lower limit of detection of the measured points. This is needed if any of the data "]
    #[doc = " points have the value \"L\" (lower than detection limit)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lowerLimit")]
    pub lower_limit: Option<Decimal>,
    #[doc = " The base quantity that a measured value of zero represents. In addition, this provides the "]
    #[doc = " units of the entire measurement series."]
    pub origin: Quantity,
    #[doc = " The length of time between sampling times, measured in milliseconds."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Decimal>,
    #[doc = " The upper limit of detection of the measured points. This is needed if any of the data "]
    #[doc = " points have the value \"U\" (higher than detection limit)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "upperLimit")]
    pub upper_limit: Option<Decimal>,
}
#[doc = " A container for slots of time that may be available for booking appointments."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Schedule {
    #[doc = " Extensions for active"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _active: Option<Element>,
    #[doc = " Extensions for comment"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _comment: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Whether this schedule record is in active use or should not be used (such as was entered in "]
    #[doc = " error)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub active: Option<Boolean>,
    #[doc = " Slots that reference this schedule resource provide the availability details to these "]
    #[doc = " referenced resource(s)."]
    pub actor: Vec<Reference>,
    #[doc = " Comments on the availability to describe any extended information. Such as custom "]
    #[doc = " constraints on the slots that may be associated."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " External Ids for this item."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The period of time that the slots that reference this Schedule resource cover (even if none "]
    #[doc = " exist). These  cover the amount of time that an organization's planning horizon; the "]
    #[doc = " interval for which they are currently accepting appointments. This does not define a "]
    #[doc = " \"template\" for planning outside these dates."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "planningHorizon")]
    pub planning_horizon: Option<Period>,
    #[doc = " This is a Schedule resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " A broad categorization of the service that is to be performed during this appointment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "serviceCategory")]
    pub service_category: Option<Vec<CodeableConcept>>,
    #[doc = " The specific service that is to be performed during this appointment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "serviceType")]
    pub service_type: Option<Vec<CodeableConcept>>,
    #[doc = " The specialty of a practitioner that would be required to perform the service requested in "]
    #[doc = " this appointment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub specialty: Option<Vec<CodeableConcept>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " A search parameter that defines a named search item that can be used to search/filter on a "]
#[doc = " resource."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct SearchParameter {
    #[doc = " Extensions for base"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _base: Option<Vec<Element>>,
    #[doc = " Extensions for chain"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _chain: Option<Vec<Element>>,
    #[doc = " Extensions for code"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _code: Option<Element>,
    #[doc = " Extensions for comparator"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _comparator: Option<Vec<Element>>,
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for experimental"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _experimental: Option<Element>,
    #[doc = " Extensions for expression"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _expression: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for modifier"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _modifier: Option<Vec<Element>>,
    #[doc = " Extensions for multipleAnd"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_multipleAnd")]
    pub _multiple_and: Option<Element>,
    #[doc = " Extensions for multipleOr"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_multipleOr")]
    pub _multiple_or: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for publisher"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _publisher: Option<Element>,
    #[doc = " Extensions for purpose"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _purpose: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for target"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _target: Option<Vec<Element>>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " Extensions for xpath"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _xpath: Option<Element>,
    #[doc = " Extensions for xpathUsage"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_xpathUsage")]
    pub _xpath_usage: Option<Element>,
    #[doc = " The base resource type(s) that this search parameter can be used against."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub base: Option<Vec<Code>>,
    #[doc = " Contains the names of any search parameters which may be chained to the containing search "]
    #[doc = " parameter. Chained parameters may be added to search parameters of type reference and "]
    #[doc = " specify that resources will only be returned if they contain a reference to a resource "]
    #[doc = " which matches the chained parameter value. Values for this field should be drawn from "]
    #[doc = " SearchParameter.code for a parameter on the target resource type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub chain: Option<Vec<String>>,
    #[doc = " The code used in the URL or the parameter name in a parameters resource for this search "]
    #[doc = " parameter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,
    #[doc = " Comparators supported for the search parameter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comparator: Option<Vec<Code>>,
    #[doc = " Used to define the parts of a composite search parameter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub component: Option<Vec<SearchParameterComponent>>,
    #[doc = " Contact details to assist a user in finding and communicating with the publisher."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The date  (and optionally time) when the search parameter was published. The date must "]
    #[doc = " change when the business version changes and it must change if the status code changes. In "]
    #[doc = " addition, it should change when the substantive content of the search parameter changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " Where this search parameter is originally defined. If a derivedFrom is provided, then the "]
    #[doc = " details in the search parameter must be consistent with the definition from which it is "]
    #[doc = " defined. i.e. the parameter should have the same meaning, and (usually) the functionality "]
    #[doc = " should be a proper subset of the underlying search parameter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "derivedFrom")]
    pub derived_from: Option<Canonical>,
    #[doc = " And how it used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " A Boolean value to indicate that this search parameter is authored for testing purposes (or "]
    #[doc = " education/evaluation/marketing) and is not intended to be used for genuine usage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,
    #[doc = " A FHIRPath expression that returns a set of elements for the search parameter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " A legal or geographic region in which the search parameter is intended to be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " A modifier supported for the search parameter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub modifier: Option<Vec<Code>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Whether multiple parameters are allowed - e.g. more than one parameter with the same name. "]
    #[doc = " The search matches if all the parameters match."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "multipleAnd")]
    pub multiple_and: Option<Boolean>,
    #[doc = " Whether multiple values are allowed for each time the parameter exists. Values are "]
    #[doc = " separated by commas, and the parameter matches if any of the values match."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "multipleOr")]
    pub multiple_or: Option<Boolean>,
    #[doc = " A natural language name identifying the search parameter. This name should be usable as an "]
    #[doc = " identifier for the module by machine processing applications such as code generation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " The name of the organization or individual that published the search parameter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
    #[doc = " Explanation of why this search parameter is needed and why it has been designed as it has."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,
    #[doc = " This is a SearchParameter resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The status of this search parameter. Enables tracking the life-cycle of the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " Types of resource (if a resource is referenced)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub target: Option<Vec<Code>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " The type of value that a search parameter may contain, and how the content is interpreted."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
    #[doc = " An absolute URI that is used to identify this search parameter when it is referenced in a "]
    #[doc = " specification, model, design or an instance; also called its canonical identifier. This "]
    #[doc = " SHOULD be globally unique and SHOULD be a literal address at which at which an "]
    #[doc = " authoritative instance of this search parameter is (or will be) published. This URL can be "]
    #[doc = " the target of a canonical reference. It SHALL remain the same when the search parameter is "]
    #[doc = " stored on different servers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
    #[doc = " The content was developed with a focus and intent of supporting the contexts that are "]
    #[doc = " listed. These contexts may be general categories (gender, age, ...) or may be references to "]
    #[doc = " specific programs (insurance plans, studies, ...) and may be used to assist with indexing "]
    #[doc = " and searching for appropriate search parameter instances."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,
    #[doc = " The identifier that is used to identify this version of the search parameter when it is "]
    #[doc = " referenced in a specification, model, design or instance. This is an arbitrary value "]
    #[doc = " managed by the search parameter author and is not expected to be globally unique. For "]
    #[doc = " example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. "]
    #[doc = " There is also no expectation that versions can be placed in a lexicographical sequence."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[doc = " An XPath expression that returns a set of elements for the search parameter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub xpath: Option<String>,
    #[doc = " How the search parameter relates to the set of elements returned by evaluating the xpath "]
    #[doc = " query."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "xpathUsage")]
    pub xpath_usage: Option<Code>,
}
#[doc = " A search parameter that defines a named search item that can be used to search/filter on a "]
#[doc = " resource."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "SearchParameter_Component")]
#[serde(deny_unknown_fields)]
pub struct SearchParameterComponent {
    #[doc = " Extensions for expression"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _expression: Option<Element>,
    #[doc = " The definition of the search parameter that describes this part."]
    pub definition: Canonical,
    #[doc = " A sub-expression that defines how to extract values for this component from the output of "]
    #[doc = " the main SearchParameter.expression."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " A record of a request for service such as diagnostic investigations, treatments, or operations "]
#[doc = " to be performed."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ServiceRequest {
    #[doc = " Extensions for asNeededBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_asNeededBoolean")]
    pub _as_needed_boolean: Option<Element>,
    #[doc = " Extensions for authoredOn"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_authoredOn")]
    pub _authored_on: Option<Element>,
    #[doc = " Extensions for doNotPerform"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_doNotPerform")]
    pub _do_not_perform: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for instantiatesUri"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_instantiatesUri")]
    pub _instantiates_uri: Option<Vec<Element>>,
    #[doc = " Extensions for intent"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _intent: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for occurrenceDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_occurrenceDateTime")]
    pub _occurrence_date_time: Option<Element>,
    #[doc = " Extensions for patientInstruction"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patientInstruction")]
    pub _patient_instruction: Option<Element>,
    #[doc = " Extensions for priority"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _priority: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " If a CodeableConcept is present, it indicates the pre-condition for performing the service. "]
    #[doc = "  For example \"pain\", \"on flare-up\", etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "asNeededBoolean")]
    pub as_needed_boolean: Option<bool>,
    #[doc = " If a CodeableConcept is present, it indicates the pre-condition for performing the service. "]
    #[doc = "  For example \"pain\", \"on flare-up\", etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "asNeededCodeableConcept")]
    pub as_needed_codeable_concept: Option<CodeableConcept>,
    #[doc = " When the request transitioned to being actionable."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "authoredOn")]
    pub authored_on: Option<DateTime>,
    #[doc = " Plan/proposal/order fulfilled by this request."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Vec<Reference>>,
    #[doc = " Anatomic location where the procedure should be performed. This is the target site."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "bodySite")]
    pub body_site: Option<Vec<CodeableConcept>>,
    #[doc = " A code that classifies the service for searching, sorting and display purposes (e.g. "]
    #[doc = " \"Surgical Procedure\")."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,
    #[doc = " A code that identifies a particular service (i.e., procedure, diagnostic investigation, or "]
    #[doc = " panel of investigations) that have been requested."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " Set this to true if the record is saying that the service/procedure should NOT be "]
    #[doc = " performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "doNotPerform")]
    pub do_not_perform: Option<Boolean>,
    #[doc = " An encounter that provides additional information about the healthcare context in which "]
    #[doc = " this request is made."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Identifiers assigned to this order instance by the orderer and/or the receiver and/or order "]
    #[doc = " fulfiller."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that "]
    #[doc = " is adhered to in whole or in part by this ServiceRequest."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesCanonical")]
    pub instantiates_canonical: Option<Vec<Canonical>>,
    #[doc = " The URL pointing to an externally maintained protocol, guideline, orderset or other "]
    #[doc = " definition that is adhered to in whole or in part by this ServiceRequest."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesUri")]
    pub instantiates_uri: Option<Vec<Uri>>,
    #[doc = " Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may "]
    #[doc = " be needed for delivering the requested service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub insurance: Option<Vec<Reference>>,
    #[doc = " Whether the request is a proposal, plan, an original order or a reflex order."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub intent: Option<Code>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The preferred location(s) where the procedure should actually happen in coded or free text "]
    #[doc = " form. E.g. at home or nursing day care center."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "locationCode")]
    pub location_code: Option<Vec<CodeableConcept>>,
    #[doc = " A reference to the the preferred location(s) where the procedure should actually happen. "]
    #[doc = " E.g. at home or nursing day care center."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "locationReference")]
    pub location_reference: Option<Vec<Reference>>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Any other notes and comments made about the service request. For example, internal billing "]
    #[doc = " notes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " The date/time at which the requested service should occur."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrenceDateTime")]
    pub occurrence_date_time: Option<String>,
    #[doc = " The date/time at which the requested service should occur."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrencePeriod")]
    pub occurrence_period: Option<Period>,
    #[doc = " The date/time at which the requested service should occur."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrenceTiming")]
    pub occurrence_timing: Option<Timing>,
    #[doc = " Additional details and instructions about the how the services are to be delivered.   For "]
    #[doc = " example, and order for a urinary catheter may have an order detail for an external or "]
    #[doc = " indwelling catheter, or an order for a bandage may require additional instructions "]
    #[doc = " specifying how the bandage should be applied."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "orderDetail")]
    pub order_detail: Option<Vec<CodeableConcept>>,
    #[doc = " Instructions in terms that are understood by the patient or consumer."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patientInstruction")]
    pub patient_instruction: Option<String>,
    #[doc = " The desired performer for doing the requested service.  For example, the surgeon, "]
    #[doc = " dermatopathologist, endoscopist, etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub performer: Option<Vec<Reference>>,
    #[doc = " Desired type of performer for doing the requested service."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "performerType")]
    pub performer_type: Option<CodeableConcept>,
    #[doc = " Indicates how quickly the ServiceRequest should be addressed with respect to other "]
    #[doc = " requests."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub priority: Option<Code>,
    #[doc = " An amount of service being requested which can be a quantity ( for example $1,500 home "]
    #[doc = " modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 "]
    #[doc = " Gy per fraction)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "quantityQuantity")]
    pub quantity_quantity: Option<Quantity>,
    #[doc = " An amount of service being requested which can be a quantity ( for example $1,500 home "]
    #[doc = " modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 "]
    #[doc = " Gy per fraction)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "quantityRange")]
    pub quantity_range: Option<Range>,
    #[doc = " An amount of service being requested which can be a quantity ( for example $1,500 home "]
    #[doc = " modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 "]
    #[doc = " Gy per fraction)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "quantityRatio")]
    pub quantity_ratio: Option<Ratio>,
    #[doc = " An explanation or justification for why this service is being requested in coded or textual "]
    #[doc = " form.   This is often for billing purposes.  May relate to the resources referred to in "]
    #[doc = " `supportingInfo`."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,
    #[doc = " Indicates another resource that provides a justification for why this service is being "]
    #[doc = " requested.   May relate to the resources referred to in `supportingInfo`."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,
    #[doc = " Key events in the history of the request."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relevantHistory")]
    pub relevant_history: Option<Vec<Reference>>,
    #[doc = " The request takes the place of the referenced completed or terminated request(s)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub replaces: Option<Vec<Reference>>,
    #[doc = " The individual who initiated the request and has responsibility for its activation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub requester: Option<Reference>,
    #[doc = " A shared identifier common to all service requests that were authorized more or less "]
    #[doc = " simultaneously by a single author, representing the composite or group identifier."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub requisition: Option<Identifier>,
    #[doc = " This is a ServiceRequest resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " One or more specimens that the laboratory procedure will use."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub specimen: Option<Vec<Reference>>,
    #[doc = " The status of the order."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " On whom or what the service is to be performed. This is usually a human patient, but can "]
    #[doc = " also be requested on animals, groups of humans or animals, devices such as dialysis "]
    #[doc = " machines, or even locations (typically for environmental scans)."]
    pub subject: Reference,
    #[doc = " Additional clinical information about the patient or specimen that may influence the "]
    #[doc = " services or their interpretations.     This information includes diagnosis, clinical "]
    #[doc = " findings and other observations.  In laboratory ordering these are typically referred to as "]
    #[doc = " \"ask at order entry questions (AOEs)\".  This includes observations explicitly requested by "]
    #[doc = " the producer (filler) to provide context or supporting information needed to complete the "]
    #[doc = " order. For example,  reporting the amount of inspired oxygen for blood gas measurements."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportingInfo")]
    pub supporting_info: Option<Vec<Reference>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " A signature along with supporting context. The signature may be a digital signature that is "]
#[doc = " cryptographic in nature, or some other signature acceptable to the domain. This other signature "]
#[doc = " may be as simple as a graphical image representing a hand-written signature, or a signature "]
#[doc = " ceremony Different signature approaches have different utilities."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Signature {
    #[doc = " Extensions for data"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _data: Option<Element>,
    #[doc = " Extensions for sigFormat"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sigFormat")]
    pub _sig_format: Option<Element>,
    #[doc = " Extensions for targetFormat"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_targetFormat")]
    pub _target_format: Option<Element>,
    #[doc = " Extensions for when"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _when: Option<Element>,
    #[doc = " The base64 encoding of the Signature content. When signature is not recorded electronically "]
    #[doc = " this element would be empty."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub data: Option<Base64Binary>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A reference to an application-usable description of the identity that is represented by the "]
    #[doc = " signature."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onBehalfOf")]
    pub on_behalf_of: Option<Reference>,
    #[doc = " A mime type that indicates the technical format of the signature. Important mime types are "]
    #[doc = " application/signature+xml for X ML DigSig, application/jose for JWS, and image/* for a "]
    #[doc = " graphical image of a signature, etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "sigFormat")]
    pub sig_format: Option<Code>,
    #[doc = " A mime type that indicates the technical format of the target resources signed by the "]
    #[doc = " signature."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetFormat")]
    pub target_format: Option<Code>,
    #[doc = " An indication of the reason that the entity signed this document. This may be explicitly "]
    #[doc = " included as part of the signature information and can be used when determining "]
    #[doc = " accountability for various actions concerning the document."]
    #[serde(rename = "type")]
    pub type_: Vec<Coding>,
    #[doc = " When the digital signature was signed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub when: Option<Instant>,
    #[doc = " A reference to an application-usable description of the identity that signed  (e.g. the "]
    #[doc = " signature used their private key)."]
    pub who: Reference,
}
#[doc = " A slot of time on a schedule that may be available for booking appointments."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Slot {
    #[doc = " Extensions for comment"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _comment: Option<Element>,
    #[doc = " Extensions for end"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _end: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for overbooked"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _overbooked: Option<Element>,
    #[doc = " Extensions for start"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _start: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " The style of appointment or patient that may be booked in the slot (not service type)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "appointmentType")]
    pub appointment_type: Option<CodeableConcept>,
    #[doc = " Comments on the slot to describe any extended information. Such as custom constraints on "]
    #[doc = " the slot."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " Date/Time that the slot is to conclude."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub end: Option<Instant>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " External Ids for this item."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " This slot has already been overbooked, appointments are unlikely to be accepted for this "]
    #[doc = " time."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub overbooked: Option<Boolean>,
    #[doc = " This is a Slot resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The schedule resource that this slot defines an interval of status information."]
    pub schedule: Reference,
    #[doc = " A broad categorization of the service that is to be performed during this appointment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "serviceCategory")]
    pub service_category: Option<Vec<CodeableConcept>>,
    #[doc = " The type of appointments that can be booked into this slot (ideally this would be an "]
    #[doc = " identifiable service - which is at a location, rather than the location itself). If "]
    #[doc = " provided then this overrides the value provided on the availability resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "serviceType")]
    pub service_type: Option<Vec<CodeableConcept>>,
    #[doc = " The specialty of a practitioner that would be required to perform the service requested in "]
    #[doc = " this appointment."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub specialty: Option<Vec<CodeableConcept>>,
    #[doc = " Date/Time that the slot is to begin."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub start: Option<Instant>,
    #[doc = " busy | free | busy-unavailable | busy-tentative | entered-in-error."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " A sample to be used for analysis."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Specimen {
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for receivedTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_receivedTime")]
    pub _received_time: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " The identifier assigned by the lab when accessioning specimen(s). This is not necessarily "]
    #[doc = " the same as the specimen identifier, depending on local lab procedures."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "accessionIdentifier")]
    pub accession_identifier: Option<Identifier>,
    #[doc = " Details concerning the specimen collection."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub collection: Option<SpecimenCollection>,
    #[doc = " A mode or state of being that describes the nature of the specimen."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub condition: Option<Vec<CodeableConcept>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The container holding the specimen.  The recursive nature of containers; i.e. blood in tube "]
    #[doc = " in tray in rack is not addressed here."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub container: Option<Vec<SpecimenContainer>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Id for specimen."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " To communicate any details or issues about the specimen or during the specimen collection. "]
    #[doc = " (for example: broken vial, sent with patient, frozen)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " Reference to the parent (source) specimen which is used when the specimen was either "]
    #[doc = " derived from or a component of another specimen."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub parent: Option<Vec<Reference>>,
    #[doc = " Details concerning processing and processing steps for the specimen."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub processing: Option<Vec<SpecimenProcessing>>,
    #[doc = " Time when specimen was received for processing or testing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "receivedTime")]
    pub received_time: Option<DateTime>,
    #[doc = " Details concerning a service request that required a specimen to be collected."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub request: Option<Vec<Reference>>,
    #[doc = " This is a Specimen resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The availability of the specimen."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " Where the specimen came from. This may be from patient(s), from a location (e.g., the "]
    #[doc = " source of an environmental sample), or a sampling of a substance or a device."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Reference>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " The kind of material that forms the specimen."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " A kind of specimen with associated set of requirements."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct SpecimenDefinition {
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for timeAspect"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_timeAspect")]
    pub _time_aspect: Option<Element>,
    #[doc = " The action to be performed for collecting the specimen."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub collection: Option<Vec<CodeableConcept>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A business identifier associated with the kind of specimen."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Preparation of the patient for specimen collection."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patientPreparation")]
    pub patient_preparation: Option<Vec<CodeableConcept>>,
    #[doc = " This is a SpecimenDefinition resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " Time aspect of specimen collection (duration or offset)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timeAspect")]
    pub time_aspect: Option<String>,
    #[doc = " The kind of material to be collected."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "typeCollected")]
    pub type_collected: Option<CodeableConcept>,
    #[doc = " Specimen conditioned in a container as expected by the testing laboratory."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "typeTested")]
    pub type_tested: Option<Vec<SpecimenDefinitionTypeTested>>,
}
#[doc = " A kind of specimen with associated set of requirements."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "SpecimenDefinition_Additive")]
#[serde(deny_unknown_fields)]
pub struct SpecimenDefinitionAdditive {
    #[doc = " Substance introduced in the kind of container to preserve, maintain or enhance the "]
    #[doc = " specimen. Examples: Formalin, Citrate, EDTA."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "additiveCodeableConcept")]
    pub additive_codeable_concept: Option<CodeableConcept>,
    #[doc = " Substance introduced in the kind of container to preserve, maintain or enhance the "]
    #[doc = " specimen. Examples: Formalin, Citrate, EDTA."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "additiveReference")]
    pub additive_reference: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " A kind of specimen with associated set of requirements."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "SpecimenDefinition_Container")]
#[serde(deny_unknown_fields)]
pub struct SpecimenDefinitionContainer {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for minimumVolumeString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_minimumVolumeString")]
    pub _minimum_volume_string: Option<Element>,
    #[doc = " Extensions for preparation"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _preparation: Option<Element>,
    #[doc = " Substance introduced in the kind of container to preserve, maintain or enhance the "]
    #[doc = " specimen. Examples: Formalin, Citrate, EDTA."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub additive: Option<Vec<SpecimenDefinitionAdditive>>,
    #[doc = " Color of container cap."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub cap: Option<CodeableConcept>,
    #[doc = " The capacity (volume or other measure) of this kind of container."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub capacity: Option<Quantity>,
    #[doc = " The textual description of the kind of container."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The type of material of the container."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub material: Option<CodeableConcept>,
    #[doc = " The minimum volume to be conditioned in the container."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "minimumVolumeQuantity")]
    pub minimum_volume_quantity: Option<Quantity>,
    #[doc = " The minimum volume to be conditioned in the container."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "minimumVolumeString")]
    pub minimum_volume_string: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Special processing that should be applied to the container for this kind of specimen."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub preparation: Option<String>,
    #[doc = " The type of container used to contain this kind of specimen."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " A kind of specimen with associated set of requirements."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "SpecimenDefinition_Handling")]
#[serde(deny_unknown_fields)]
pub struct SpecimenDefinitionHandling {
    #[doc = " Extensions for instruction"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _instruction: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Additional textual instructions for the preservation or transport of the specimen. For "]
    #[doc = " instance, 'Protect from light exposure'."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub instruction: Option<String>,
    #[doc = " The maximum time interval of preservation of the specimen with these conditions."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxDuration")]
    pub max_duration: Option<Duration>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " It qualifies the interval of temperature, which characterizes an occurrence of handling. "]
    #[doc = " Conditions that are not related to temperature may be handled in the instruction element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "temperatureQualifier")]
    pub temperature_qualifier: Option<CodeableConcept>,
    #[doc = " The temperature interval for this set of handling instructions."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "temperatureRange")]
    pub temperature_range: Option<Range>,
}
#[doc = " A kind of specimen with associated set of requirements."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "SpecimenDefinition_TypeTested")]
#[serde(deny_unknown_fields)]
pub struct SpecimenDefinitionTypeTested {
    #[doc = " Extensions for isDerived"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_isDerived")]
    pub _is_derived: Option<Element>,
    #[doc = " Extensions for preference"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _preference: Option<Element>,
    #[doc = " Extensions for requirement"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _requirement: Option<Element>,
    #[doc = " The specimen's container."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub container: Option<SpecimenDefinitionContainer>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Set of instructions for preservation/transport of the specimen at a defined temperature "]
    #[doc = " interval, prior the testing process."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub handling: Option<Vec<SpecimenDefinitionHandling>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Primary of secondary specimen."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "isDerived")]
    pub is_derived: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The preference for this type of conditioned specimen."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub preference: Option<Code>,
    #[doc = " Criterion for rejection of the specimen in its container by the laboratory."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "rejectionCriterion")]
    pub rejection_criterion: Option<Vec<CodeableConcept>>,
    #[doc = " Requirements for delivery and special handling of this kind of conditioned specimen."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub requirement: Option<String>,
    #[doc = " The usual time that a specimen of this kind is retained after the ordered tests are "]
    #[doc = " completed, for the purpose of additional testing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "retentionTime")]
    pub retention_time: Option<Duration>,
    #[doc = " The kind of specimen conditioned for testing expected by lab."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " A sample to be used for analysis."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Specimen_Collection")]
#[serde(deny_unknown_fields)]
pub struct SpecimenCollection {
    #[doc = " Extensions for collectedDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_collectedDateTime")]
    pub _collected_date_time: Option<Element>,
    #[doc = " Anatomical location from which the specimen was collected (if subject is a patient). This "]
    #[doc = " is the target site.  This element is not used for environmental specimens."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "bodySite")]
    pub body_site: Option<CodeableConcept>,
    #[doc = " Time when specimen was collected from subject - the physiologically relevant time."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "collectedDateTime")]
    pub collected_date_time: Option<String>,
    #[doc = " Time when specimen was collected from subject - the physiologically relevant time."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "collectedPeriod")]
    pub collected_period: Option<Period>,
    #[doc = " Person who collected the specimen."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub collector: Option<Reference>,
    #[doc = " The span of time over which the collection of a specimen occurred."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub duration: Option<Duration>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Abstinence or reduction from some or all food, drink, or both, for a period of time prior "]
    #[doc = " to sample collection."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fastingStatusCodeableConcept")]
    pub fasting_status_codeable_concept: Option<CodeableConcept>,
    #[doc = " Abstinence or reduction from some or all food, drink, or both, for a period of time prior "]
    #[doc = " to sample collection."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fastingStatusDuration")]
    pub fasting_status_duration: Option<Duration>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A coded value specifying the technique that is used to perform the procedure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub method: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The quantity of specimen collected; for instance the volume of a blood sample, or the "]
    #[doc = " physical measurement of an anatomic pathology sample."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,
}
#[doc = " A sample to be used for analysis."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Specimen_Container")]
#[serde(deny_unknown_fields)]
pub struct SpecimenContainer {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Introduced substance to preserve, maintain or enhance the specimen. Examples: Formalin, "]
    #[doc = " Citrate, EDTA."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "additiveCodeableConcept")]
    pub additive_codeable_concept: Option<CodeableConcept>,
    #[doc = " Introduced substance to preserve, maintain or enhance the specimen. Examples: Formalin, "]
    #[doc = " Citrate, EDTA."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "additiveReference")]
    pub additive_reference: Option<Reference>,
    #[doc = " The capacity (volume or other measure) the container may contain."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub capacity: Option<Quantity>,
    #[doc = " Textual description of the container."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Id for container. There may be multiple; a manufacturer's bar code, lab assigned "]
    #[doc = " identifier, etc. The container ID may differ from the specimen id in some circumstances."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The quantity of specimen in the container; may be volume, dimensions, or other appropriate "]
    #[doc = " measurements, depending on the specimen type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "specimenQuantity")]
    pub specimen_quantity: Option<Quantity>,
    #[doc = " The type of container associated with the specimen (e.g. slide, aliquot, etc.)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " A sample to be used for analysis."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Specimen_Processing")]
#[serde(deny_unknown_fields)]
pub struct SpecimenProcessing {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for timeDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_timeDateTime")]
    pub _time_date_time: Option<Element>,
    #[doc = " Material used in the processing step."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub additive: Option<Vec<Reference>>,
    #[doc = " Textual description of procedure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A coded value specifying the procedure used to process the specimen."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub procedure: Option<CodeableConcept>,
    #[doc = " A record of the time or period when the specimen processing occurred.  For example the time "]
    #[doc = " of sample fixation or the period of time the sample was in formalin."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timeDateTime")]
    pub time_date_time: Option<String>,
    #[doc = " A record of the time or period when the specimen processing occurred.  For example the time "]
    #[doc = " of sample fixation or the period of time the sample was in formalin."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timePeriod")]
    pub time_period: Option<Period>,
}
#[doc = " A definition of a FHIR structure. This resource is used to describe the underlying resources, "]
#[doc = " data types defined in FHIR, and also for describing extensions and constraints on resources and "]
#[doc = " data types."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct StructureDefinition {
    #[doc = " Extensions for abstract"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _abstract: Option<Element>,
    #[doc = " Extensions for contextInvariant"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_contextInvariant")]
    pub _context_invariant: Option<Vec<Element>>,
    #[doc = " Extensions for copyright"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _copyright: Option<Element>,
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for derivation"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _derivation: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for experimental"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _experimental: Option<Element>,
    #[doc = " Extensions for fhirVersion"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fhirVersion")]
    pub _fhir_version: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for kind"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _kind: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for publisher"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _publisher: Option<Element>,
    #[doc = " Extensions for purpose"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _purpose: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " Whether structure this definition describes is abstract or not  - that is, whether the "]
    #[doc = " structure is not intended to be instantiated. For Resources and Data types, abstract types "]
    #[doc = " will never be exchanged  between systems."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "abstract")]
    pub abstract_: Option<Boolean>,
    #[doc = " An absolute URI that is the base structure from which this type is derived, either by "]
    #[doc = " specialization or constraint."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "baseDefinition")]
    pub base_definition: Option<Canonical>,
    #[doc = " Contact details to assist a user in finding and communicating with the publisher."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " Identifies the types of resource or data type elements to which the extension can be "]
    #[doc = " applied."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub context: Option<Vec<StructureDefinitionContext>>,
    #[doc = " A set of rules as FHIRPath Invariants about when the extension can be used (e.g. "]
    #[doc = " co-occurrence variants for the extension). All the rules must be true."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contextInvariant")]
    pub context_invariant: Option<Vec<String>>,
    #[doc = " A copyright statement relating to the structure definition and/or its contents. Copyright "]
    #[doc = " statements are generally legal restrictions on the use and publishing of the structure "]
    #[doc = " definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,
    #[doc = " The date  (and optionally time) when the structure definition was published. The date must "]
    #[doc = " change when the business version changes and it must change if the status code changes. In "]
    #[doc = " addition, it should change when the substantive content of the structure definition "]
    #[doc = " changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " How the type relates to the baseDefinition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub derivation: Option<Code>,
    #[doc = " A free text natural language description of the structure definition from a consumer's "]
    #[doc = " perspective."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " A differential view is expressed relative to the base StructureDefinition - a statement of "]
    #[doc = " differences that it applies."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub differential: Option<StructureDefinitionDifferential>,
    #[doc = " A Boolean value to indicate that this structure definition is authored for testing purposes "]
    #[doc = " (or education/evaluation/marketing) and is not intended to be used for genuine usage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The version of the FHIR specification on which this StructureDefinition is based - this is "]
    #[doc = " the formal version of the specification, without the revision number, e.g. "]
    #[doc = " [publication].[major].[minor], which is 4.3.0-cibuild for this version."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fhirVersion")]
    pub fhir_version: Option<Code>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A formal identifier that is used to identify this structure definition when it is "]
    #[doc = " represented in other formats, or referenced in a specification, model, design or an "]
    #[doc = " instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " A legal or geographic region in which the structure definition is intended to be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,
    #[doc = " A set of key words or terms from external terminologies that may be used to assist with "]
    #[doc = " indexing and searching of templates nby describing the use of this structure definition, or "]
    #[doc = " the content it describes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub keyword: Option<Vec<Coding>>,
    #[doc = " Defines the kind of structure that this definition is describing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<Code>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " An external specification that the content is mapped to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub mapping: Option<Vec<StructureDefinitionMapping>>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A natural language name identifying the structure definition. This name should be usable as "]
    #[doc = " an identifier for the module by machine processing applications such as code generation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " The name of the organization or individual that published the structure definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
    #[doc = " Explanation of why this structure definition is needed and why it has been designed as it "]
    #[doc = " has."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,
    #[doc = " This is a StructureDefinition resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " A snapshot view is expressed in a standalone form that can be used and interpreted without "]
    #[doc = " considering the base StructureDefinition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub snapshot: Option<StructureDefinitionSnapshot>,
    #[doc = " The status of this structure definition. Enables tracking the life-cycle of the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " A short, descriptive, user-friendly title for the structure definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[doc = " The type this structure describes. If the derivation kind is 'specialization' then this is "]
    #[doc = " the master definition for a type, and there is always one of these (a data type, an "]
    #[doc = " extension, a resource, including abstract ones). Otherwise the structure definition is a "]
    #[doc = " constraint on the stated type (and in this case, the type cannot be an abstract type).  "]
    #[doc = " References are URLs that are relative to http://hl7.org/fhir/StructureDefinition e.g. "]
    #[doc = " \"string\" is a reference to http://hl7.org/fhir/StructureDefinition/string. Absolute URLs "]
    #[doc = " are only allowed in logical models."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Uri>,
    #[doc = " An absolute URI that is used to identify this structure definition when it is referenced in "]
    #[doc = " a specification, model, design or an instance; also called its canonical identifier. This "]
    #[doc = " SHOULD be globally unique and SHOULD be a literal address at which at which an "]
    #[doc = " authoritative instance of this structure definition is (or will be) published. This URL can "]
    #[doc = " be the target of a canonical reference. It SHALL remain the same when the structure "]
    #[doc = " definition is stored on different servers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
    #[doc = " The content was developed with a focus and intent of supporting the contexts that are "]
    #[doc = " listed. These contexts may be general categories (gender, age, ...) or may be references to "]
    #[doc = " specific programs (insurance plans, studies, ...) and may be used to assist with indexing "]
    #[doc = " and searching for appropriate structure definition instances."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,
    #[doc = " The identifier that is used to identify this version of the structure definition when it is "]
    #[doc = " referenced in a specification, model, design or instance. This is an arbitrary value "]
    #[doc = " managed by the structure definition author and is not expected to be globally unique. For "]
    #[doc = " example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. "]
    #[doc = " There is also no expectation that versions can be placed in a lexicographical sequence."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[doc = " A definition of a FHIR structure. This resource is used to describe the underlying resources, "]
#[doc = " data types defined in FHIR, and also for describing extensions and constraints on resources and "]
#[doc = " data types."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "StructureDefinition_Context")]
#[serde(deny_unknown_fields)]
pub struct StructureDefinitionContext {
    #[doc = " Extensions for expression"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _expression: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " An expression that defines where an extension can be used in resources."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Defines how to interpret the expression that defines what the context of the extension is."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}
#[doc = " A definition of a FHIR structure. This resource is used to describe the underlying resources, "]
#[doc = " data types defined in FHIR, and also for describing extensions and constraints on resources and "]
#[doc = " data types."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "StructureDefinition_Differential")]
#[serde(deny_unknown_fields)]
pub struct StructureDefinitionDifferential {
    #[doc = " Captures constraints on each element within the resource."]
    pub element: Vec<ElementDefinition>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " A definition of a FHIR structure. This resource is used to describe the underlying resources, "]
#[doc = " data types defined in FHIR, and also for describing extensions and constraints on resources and "]
#[doc = " data types."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "StructureDefinition_Mapping")]
#[serde(deny_unknown_fields)]
pub struct StructureDefinitionMapping {
    #[doc = " Extensions for comment"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _comment: Option<Element>,
    #[doc = " Extensions for identity"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _identity: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for uri"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _uri: Option<Element>,
    #[doc = " Comments about this mapping, including version notes, issues, scope limitations, and other "]
    #[doc = " important notes for usage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " An Internal id that is used to identify this mapping set when specific mappings are made."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identity: Option<Id>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A name for the specification that is being mapped to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " An absolute URI that identifies the specification that this mapping is expressed to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub uri: Option<Uri>,
}
#[doc = " A definition of a FHIR structure. This resource is used to describe the underlying resources, "]
#[doc = " data types defined in FHIR, and also for describing extensions and constraints on resources and "]
#[doc = " data types."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "StructureDefinition_Snapshot")]
#[serde(deny_unknown_fields)]
pub struct StructureDefinitionSnapshot {
    #[doc = " Captures constraints on each element within the resource."]
    pub element: Vec<ElementDefinition>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " A Map of relationships between 2 structures that can be used to transform data."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct StructureMap {
    #[doc = " Extensions for copyright"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _copyright: Option<Element>,
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for experimental"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _experimental: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for publisher"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _publisher: Option<Element>,
    #[doc = " Extensions for purpose"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _purpose: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " Contact details to assist a user in finding and communicating with the publisher."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " A copyright statement relating to the structure map and/or its contents. Copyright "]
    #[doc = " statements are generally legal restrictions on the use and publishing of the structure map."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,
    #[doc = " The date  (and optionally time) when the structure map was published. The date must change "]
    #[doc = " when the business version changes and it must change if the status code changes. In "]
    #[doc = " addition, it should change when the substantive content of the structure map changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " A free text natural language description of the structure map from a consumer's "]
    #[doc = " perspective."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " A Boolean value to indicate that this structure map is authored for testing purposes (or "]
    #[doc = " education/evaluation/marketing) and is not intended to be used for genuine usage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Organizes the mapping into manageable chunks for human review/ease of maintenance."]
    pub group: Vec<StructureMapGroup>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A formal identifier that is used to identify this structure map when it is represented in "]
    #[doc = " other formats, or referenced in a specification, model, design or an instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " Other maps used by this map (canonical URLs)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub import: Option<Vec<Canonical>>,
    #[doc = " A legal or geographic region in which the structure map is intended to be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A natural language name identifying the structure map. This name should be usable as an "]
    #[doc = " identifier for the module by machine processing applications such as code generation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " The name of the organization or individual that published the structure map."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
    #[doc = " Explanation of why this structure map is needed and why it has been designed as it has."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,
    #[doc = " This is a StructureMap resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The status of this structure map. Enables tracking the life-cycle of the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A structure definition used by this map. The structure definition may describe instances "]
    #[doc = " that are converted, or the instances that are produced."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub structure: Option<Vec<StructureMapStructure>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " A short, descriptive, user-friendly title for the structure map."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[doc = " An absolute URI that is used to identify this structure map when it is referenced in a "]
    #[doc = " specification, model, design or an instance; also called its canonical identifier. This "]
    #[doc = " SHOULD be globally unique and SHOULD be a literal address at which at which an "]
    #[doc = " authoritative instance of this structure map is (or will be) published. This URL can be the "]
    #[doc = " target of a canonical reference. It SHALL remain the same when the structure map is stored "]
    #[doc = " on different servers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
    #[doc = " The content was developed with a focus and intent of supporting the contexts that are "]
    #[doc = " listed. These contexts may be general categories (gender, age, ...) or may be references to "]
    #[doc = " specific programs (insurance plans, studies, ...) and may be used to assist with indexing "]
    #[doc = " and searching for appropriate structure map instances."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,
    #[doc = " The identifier that is used to identify this version of the structure map when it is "]
    #[doc = " referenced in a specification, model, design or instance. This is an arbitrary value "]
    #[doc = " managed by the structure map author and is not expected to be globally unique. For example, "]
    #[doc = " it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is "]
    #[doc = " also no expectation that versions can be placed in a lexicographical sequence."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[doc = " A Map of relationships between 2 structures that can be used to transform data."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "StructureMap_Dependent")]
#[serde(deny_unknown_fields)]
pub struct StructureMapDependent {
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for variable"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _variable: Option<Vec<Element>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Name of a rule or group to apply."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<Id>,
    #[doc = " Variable to pass to the rule or group."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub variable: Option<Vec<String>>,
}
#[doc = " A Map of relationships between 2 structures that can be used to transform data."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "StructureMap_Group")]
#[serde(deny_unknown_fields)]
pub struct StructureMapGroup {
    #[doc = " Extensions for documentation"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _documentation: Option<Element>,
    #[doc = " Extensions for extends"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _extends: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for typeMode"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_typeMode")]
    pub _type_mode: Option<Element>,
    #[doc = " Additional supporting documentation that explains the purpose of the group and the types of "]
    #[doc = " mappings within it."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub documentation: Option<String>,
    #[doc = " Another group that this group adds rules to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extends: Option<Id>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A name assigned to an instance of data. The instance must be provided when the mapping is "]
    #[doc = " invoked."]
    pub input: Vec<StructureMapInput>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A unique name for the group for the convenience of human readers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<Id>,
    #[doc = " Transform Rule from source to target."]
    pub rule: Vec<StructureMapRule>,
    #[doc = " If this is the default rule set to apply for the source type or this combination of types."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "typeMode")]
    pub type_mode: Option<Code>,
}
#[doc = " A Map of relationships between 2 structures that can be used to transform data."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "StructureMap_Input")]
#[serde(deny_unknown_fields)]
pub struct StructureMapInput {
    #[doc = " Extensions for documentation"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _documentation: Option<Element>,
    #[doc = " Extensions for mode"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _mode: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " Documentation for this instance of data."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub documentation: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Mode for this instance of data."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub mode: Option<Code>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Name for this instance of data."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<Id>,
    #[doc = " Type for this instance of data."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<String>,
}
#[doc = " A Map of relationships between 2 structures that can be used to transform data."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "StructureMap_Parameter")]
#[serde(deny_unknown_fields)]
pub struct StructureMapParameter {
    #[doc = " Extensions for valueBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub _value_boolean: Option<Element>,
    #[doc = " Extensions for valueDecimal"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDecimal")]
    pub _value_decimal: Option<Element>,
    #[doc = " Extensions for valueId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueId")]
    pub _value_id: Option<Element>,
    #[doc = " Extensions for valueInteger"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueInteger")]
    pub _value_integer: Option<Element>,
    #[doc = " Extensions for valueString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueString")]
    pub _value_string: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Parameter value - variable or literal."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,
    #[doc = " Parameter value - variable or literal."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDecimal")]
    pub value_decimal: Option<f64>,
    #[doc = " Parameter value - variable or literal."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueId")]
    pub value_id: Option<String>,
    #[doc = " Parameter value - variable or literal."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueInteger")]
    pub value_integer: Option<f64>,
    #[doc = " Parameter value - variable or literal."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueString")]
    pub value_string: Option<String>,
}
#[doc = " A Map of relationships between 2 structures that can be used to transform data."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "StructureMap_Rule")]
#[serde(deny_unknown_fields)]
pub struct StructureMapRule {
    #[doc = " Extensions for documentation"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _documentation: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Which other rules to apply in the context of this rule."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub dependent: Option<Vec<StructureMapDependent>>,
    #[doc = " Documentation for this instance of data."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub documentation: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Name of the rule for internal references."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<Id>,
    #[doc = " Rules contained in this rule."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub rule: Option<Vec<StructureMapRule>>,
    #[doc = " Source inputs to the mapping."]
    pub source: Vec<StructureMapSource>,
    #[doc = " Content to create because of this mapping rule."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub target: Option<Vec<StructureMapTarget>>,
}
#[doc = " A Map of relationships between 2 structures that can be used to transform data."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "StructureMap_Source")]
#[serde(deny_unknown_fields)]
pub struct StructureMapSource {
    #[doc = " Extensions for check"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _check: Option<Element>,
    #[doc = " Extensions for condition"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _condition: Option<Element>,
    #[doc = " Extensions for context"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _context: Option<Element>,
    #[doc = " Extensions for defaultValueBase64Binary"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueBase64Binary")]
    pub _default_value_base_64_binary: Option<Element>,
    #[doc = " Extensions for defaultValueBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueBoolean")]
    pub _default_value_boolean: Option<Element>,
    #[doc = " Extensions for defaultValueCanonical"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueCanonical")]
    pub _default_value_canonical: Option<Element>,
    #[doc = " Extensions for defaultValueCode"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueCode")]
    pub _default_value_code: Option<Element>,
    #[doc = " Extensions for defaultValueDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueDate")]
    pub _default_value_date: Option<Element>,
    #[doc = " Extensions for defaultValueDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueDateTime")]
    pub _default_value_date_time: Option<Element>,
    #[doc = " Extensions for defaultValueDecimal"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueDecimal")]
    pub _default_value_decimal: Option<Element>,
    #[doc = " Extensions for defaultValueId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueId")]
    pub _default_value_id: Option<Element>,
    #[doc = " Extensions for defaultValueInstant"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueInstant")]
    pub _default_value_instant: Option<Element>,
    #[doc = " Extensions for defaultValueInteger"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueInteger")]
    pub _default_value_integer: Option<Element>,
    #[doc = " Extensions for defaultValueMarkdown"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueMarkdown")]
    pub _default_value_markdown: Option<Element>,
    #[doc = " Extensions for defaultValueOid"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueOid")]
    pub _default_value_oid: Option<Element>,
    #[doc = " Extensions for defaultValuePositiveInt"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValuePositiveInt")]
    pub _default_value_positive_int: Option<Element>,
    #[doc = " Extensions for defaultValueString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueString")]
    pub _default_value_string: Option<Element>,
    #[doc = " Extensions for defaultValueTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueTime")]
    pub _default_value_time: Option<Element>,
    #[doc = " Extensions for defaultValueUnsignedInt"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueUnsignedInt")]
    pub _default_value_unsigned_int: Option<Element>,
    #[doc = " Extensions for defaultValueUri"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueUri")]
    pub _default_value_uri: Option<Element>,
    #[doc = " Extensions for defaultValueUrl"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueUrl")]
    pub _default_value_url: Option<Element>,
    #[doc = " Extensions for defaultValueUuid"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueUuid")]
    pub _default_value_uuid: Option<Element>,
    #[doc = " Extensions for element"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _element: Option<Element>,
    #[doc = " Extensions for listMode"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_listMode")]
    pub _list_mode: Option<Element>,
    #[doc = " Extensions for logMessage"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_logMessage")]
    pub _log_message: Option<Element>,
    #[doc = " Extensions for max"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _max: Option<Element>,
    #[doc = " Extensions for min"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _min: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " Extensions for variable"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _variable: Option<Element>,
    #[doc = " FHIRPath expression  - must be true or the mapping engine throws an error instead of "]
    #[doc = " completing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub check: Option<String>,
    #[doc = " FHIRPath expression  - must be true or the rule does not apply."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub condition: Option<String>,
    #[doc = " Type or variable this rule applies to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub context: Option<Id>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueAddress")]
    pub default_value_address: Option<Address>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueAge")]
    pub default_value_age: Option<Age>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueAnnotation")]
    pub default_value_annotation: Option<Annotation>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueAttachment")]
    pub default_value_attachment: Option<Attachment>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueBase64Binary")]
    pub default_value_base_64_binary: Option<String>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueBoolean")]
    pub default_value_boolean: Option<bool>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueCanonical")]
    pub default_value_canonical: Option<String>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueCode")]
    pub default_value_code: Option<String>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueCodeableConcept")]
    pub default_value_codeable_concept: Option<CodeableConcept>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueCoding")]
    pub default_value_coding: Option<Coding>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueContactDetail")]
    pub default_value_contact_detail: Option<ContactDetail>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueContactPoint")]
    pub default_value_contact_point: Option<ContactPoint>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueContributor")]
    pub default_value_contributor: Option<Contributor>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueCount")]
    pub default_value_count: Option<Count>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueDataRequirement")]
    pub default_value_data_requirement: Option<DataRequirement>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueDate")]
    pub default_value_date: Option<String>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueDateTime")]
    pub default_value_date_time: Option<String>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueDecimal")]
    pub default_value_decimal: Option<f64>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueDistance")]
    pub default_value_distance: Option<Distance>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueDosage")]
    pub default_value_dosage: Option<Dosage>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueDuration")]
    pub default_value_duration: Option<Duration>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueExpression")]
    pub default_value_expression: Option<Expression>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueHumanName")]
    pub default_value_human_name: Option<HumanName>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueId")]
    pub default_value_id: Option<String>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueIdentifier")]
    pub default_value_identifier: Option<Identifier>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueInstant")]
    pub default_value_instant: Option<String>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueInteger")]
    pub default_value_integer: Option<f64>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueMarkdown")]
    pub default_value_markdown: Option<String>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueMeta")]
    pub default_value_meta: Option<Meta>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueMoney")]
    pub default_value_money: Option<Money>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueOid")]
    pub default_value_oid: Option<String>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueParameterDefinition")]
    pub default_value_parameter_definition: Option<ParameterDefinition>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValuePeriod")]
    pub default_value_period: Option<Period>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValuePositiveInt")]
    pub default_value_positive_int: Option<f64>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueQuantity")]
    pub default_value_quantity: Option<Quantity>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueRange")]
    pub default_value_range: Option<Range>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueRatio")]
    pub default_value_ratio: Option<Ratio>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueReference")]
    pub default_value_reference: Option<Reference>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueRelatedArtifact")]
    pub default_value_related_artifact: Option<RelatedArtifact>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueSampledData")]
    pub default_value_sampled_data: Option<SampledData>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueSignature")]
    pub default_value_signature: Option<Signature>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueString")]
    pub default_value_string: Option<String>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueTime")]
    pub default_value_time: Option<String>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueTiming")]
    pub default_value_timing: Option<Timing>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueTriggerDefinition")]
    pub default_value_trigger_definition: Option<TriggerDefinition>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueUnsignedInt")]
    pub default_value_unsigned_int: Option<f64>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueUri")]
    pub default_value_uri: Option<String>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueUrl")]
    pub default_value_url: Option<String>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueUsageContext")]
    pub default_value_usage_context: Option<UsageContext>,
    #[doc = " A value to use if there is no existing value in the source object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueUuid")]
    pub default_value_uuid: Option<String>,
    #[doc = " Optional field for this source."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub element: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " How to handle the list mode for this element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "listMode")]
    pub list_mode: Option<Code>,
    #[doc = " A FHIRPath expression which specifies a message to put in the transform log when content "]
    #[doc = " matching the source rule is found."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "logMessage")]
    pub log_message: Option<String>,
    #[doc = " Specified maximum cardinality for the element - a number or a \"*\". This is optional; if "]
    #[doc = " present, it acts an implicit check on the input content (* just serves as documentation; "]
    #[doc = " it's the default value)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub max: Option<String>,
    #[doc = " Specified minimum cardinality for the element. This is optional; if present, it acts an "]
    #[doc = " implicit check on the input content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub min: Option<Integer>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Specified type for the element. This works as a condition on the mapping - use for "]
    #[doc = " polymorphic elements."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<String>,
    #[doc = " Named context for field, if a field is specified."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub variable: Option<Id>,
}
#[doc = " A Map of relationships between 2 structures that can be used to transform data."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "StructureMap_Structure")]
#[serde(deny_unknown_fields)]
pub struct StructureMapStructure {
    #[doc = " Extensions for alias"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _alias: Option<Element>,
    #[doc = " Extensions for documentation"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _documentation: Option<Element>,
    #[doc = " Extensions for mode"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _mode: Option<Element>,
    #[doc = " The name used for this type in the map."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub alias: Option<String>,
    #[doc = " Documentation that describes how the structure is used in the mapping."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub documentation: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " How the referenced structure is used in this mapping."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub mode: Option<Code>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The canonical reference to the structure."]
    pub url: Canonical,
}
#[doc = " A Map of relationships between 2 structures that can be used to transform data."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "StructureMap_Target")]
#[serde(deny_unknown_fields)]
pub struct StructureMapTarget {
    #[doc = " Extensions for context"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _context: Option<Element>,
    #[doc = " Extensions for contextType"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_contextType")]
    pub _context_type: Option<Element>,
    #[doc = " Extensions for element"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _element: Option<Element>,
    #[doc = " Extensions for listMode"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_listMode")]
    pub _list_mode: Option<Vec<Element>>,
    #[doc = " Extensions for listRuleId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_listRuleId")]
    pub _list_rule_id: Option<Element>,
    #[doc = " Extensions for transform"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _transform: Option<Element>,
    #[doc = " Extensions for variable"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _variable: Option<Element>,
    #[doc = " Type or variable this rule applies to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub context: Option<Id>,
    #[doc = " How to interpret the context."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contextType")]
    pub context_type: Option<Code>,
    #[doc = " Field to create in the context."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub element: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " If field is a list, how to manage the list."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "listMode")]
    pub list_mode: Option<Vec<Code>>,
    #[doc = " Internal rule reference for shared list items."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "listRuleId")]
    pub list_rule_id: Option<Id>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Parameters to the transform."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub parameter: Option<Vec<StructureMapParameter>>,
    #[doc = " How the data is copied / created."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub transform: Option<Code>,
    #[doc = " Named context for field, if desired, and a field is specified."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub variable: Option<Id>,
}
#[doc = " The subscription resource is used to define a push-based subscription from a server to another "]
#[doc = " system. Once a subscription is registered with the server, the server checks every resource "]
#[doc = " that is created or updated, and if the resource matches the given criteria, it sends a message "]
#[doc = " on the defined \"channel\" so that another system can take an appropriate action."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Subscription {
    #[doc = " Extensions for criteria"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _criteria: Option<Element>,
    #[doc = " Extensions for end"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _end: Option<Element>,
    #[doc = " Extensions for error"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _error: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for reason"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _reason: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Details where to send notifications when resources are received that meet the criteria."]
    pub channel: SubscriptionChannel,
    #[doc = " Contact details for a human to contact about the subscription. The primary use of this for "]
    #[doc = " system administrator troubleshooting."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactPoint>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The rules that the server should use to determine when to generate notifications for this "]
    #[doc = " subscription."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub criteria: Option<String>,
    #[doc = " The time for the server to turn the subscription off."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub end: Option<Instant>,
    #[doc = " A record of the last error that occurred when the server processed a notification."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A description of why this subscription is defined."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    #[doc = " This is a Subscription resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The status of the subscription, which marks the server state for managing the subscription."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " The SubscriptionStatus resource describes the state of a Subscription during notifications."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct SubscriptionStatus {
    #[doc = " Extensions for eventsSinceSubscriptionStart"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_eventsSinceSubscriptionStart")]
    pub _events_since_subscription_start: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " A record of errors that occurred when the server processed a notification."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<Vec<CodeableConcept>>,
    #[doc = " The total number of actual events which have been generated since the Subscription was "]
    #[doc = " created (inclusive of this notification) - regardless of how many have been successfully "]
    #[doc = " communicated.  This number is NOT incremented for handshake and heartbeat notifications."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "eventsSinceSubscriptionStart")]
    pub events_since_subscription_start: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Detailed information about events relevant to this subscription notification."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "notificationEvent")]
    pub notification_event: Option<Vec<SubscriptionStatusNotificationEvent>>,
    #[doc = " This is a SubscriptionStatus resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The status of the subscription, which marks the server state for managing the subscription."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " The reference to the Subscription which generated this notification."]
    pub subscription: Reference,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " The reference to the SubscriptionTopic for the Subscription which generated this "]
    #[doc = " notification."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub topic: Option<Canonical>,
    #[doc = " The type of event being conveyed with this notificaiton."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}
#[doc = " The SubscriptionStatus resource describes the state of a Subscription during notifications."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "SubscriptionStatus_NotificationEvent")]
#[serde(deny_unknown_fields)]
pub struct SubscriptionStatusNotificationEvent {
    #[doc = " Extensions for eventNumber"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_eventNumber")]
    pub _event_number: Option<Element>,
    #[doc = " Extensions for timestamp"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _timestamp: Option<Element>,
    #[doc = " Additional context information for this event. Generally, this will contain references to "]
    #[doc = " additional resources included with the event (e.g., the Patient relevant to an Encounter), "]
    #[doc = " however it MAY refer to non-FHIR objects."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "additionalContext")]
    pub additional_context: Option<Vec<Reference>>,
    #[doc = " The sequential number of this event in this subscription context. Note that this value is a "]
    #[doc = " 64-bit integer value, encoded as a string."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "eventNumber")]
    pub event_number: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The focus of this event. While this will usually be a reference to the focus resource of "]
    #[doc = " the event, it MAY contain a reference to a non-FHIR object."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub focus: Option<Reference>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The actual time this event occured on the server."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<Instant>,
}
#[doc = " Describes a stream of resource state changes or events and annotated with labels useful to "]
#[doc = " filter projections from this topic."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct SubscriptionTopic {
    #[doc = " Extensions for approvalDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_approvalDate")]
    pub _approval_date: Option<Element>,
    #[doc = " Extensions for copyright"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _copyright: Option<Element>,
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for experimental"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _experimental: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for lastReviewDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastReviewDate")]
    pub _last_review_date: Option<Element>,
    #[doc = " Extensions for publisher"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _publisher: Option<Element>,
    #[doc = " Extensions for purpose"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _purpose: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " The date on which the asset content was approved by the publisher. Approval happens once "]
    #[doc = " when the content is officially approved for usage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "approvalDate")]
    pub approval_date: Option<Date>,
    #[doc = " List of properties by which Subscriptions on the SubscriptionTopic can be filtered. May be "]
    #[doc = " defined Search Parameters (e.g., Encounter.patient) or parameters defined within this "]
    #[doc = " SubscriptionTopic context (e.g., hub.event)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "canFilterBy")]
    pub can_filter_by: Option<Vec<SubscriptionTopicCanFilterBy>>,
    #[doc = " Contact details to assist a user in finding and communicating with the publisher."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " A copyright statement relating to the SubscriptionTopic and/or its contents. Copyright "]
    #[doc = " statements are generally legal restrictions on the use and publishing of the "]
    #[doc = " SubscriptionTopic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,
    #[doc = " For draft definitions, indicates the date of initial creation.  For active definitions, "]
    #[doc = " represents the date of activation.  For withdrawn definitions, indicates the date of "]
    #[doc = " withdrawal."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " The canonical URL pointing to another FHIR-defined SubscriptionTopic that is adhered to in "]
    #[doc = " whole or in part by this SubscriptionTopic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "derivedFrom")]
    pub derived_from: Option<Vec<Canonical>>,
    #[doc = " A free text natural language description of the Topic from the consumer's perspective."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " The period during which the SubscriptionTopic content was or is planned to be effective."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectivePeriod")]
    pub effective_period: Option<Period>,
    #[doc = " Event definition which can be used to trigger the SubscriptionTopic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "eventTrigger")]
    pub event_trigger: Option<Vec<SubscriptionTopicEventTrigger>>,
    #[doc = " A flag to indicate that this TopSubscriptionTopicic is authored for testing purposes (or "]
    #[doc = " education/evaluation/marketing), and is not intended to be used for genuine usage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Business identifiers assigned to this subscription topic by the performer and/or other "]
    #[doc = " systems.  These identifiers remain constant as the resource is updated and propagates from "]
    #[doc = " server to server."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " A jurisdiction in which the Topic is intended to be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The date on which the asset content was last reviewed. Review happens periodically after "]
    #[doc = " that, but doesn't change the original approval date."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastReviewDate")]
    pub last_review_date: Option<Date>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " List of properties to describe the shape (e.g., resources) included in notifications from "]
    #[doc = " this Subscription Topic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "notificationShape")]
    pub notification_shape: Option<Vec<SubscriptionTopicNotificationShape>>,
    #[doc = " Helps establish the \"authority/credibility\" of the SubscriptionTopic.  May also allow for "]
    #[doc = " contact."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
    #[doc = " Explains why this Topic is needed and why it has been designed as it has."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,
    #[doc = " A definition of a resource-based event that triggers a notification based on the "]
    #[doc = " SubscriptionTopic. The criteria may be just a human readable description and/or a full FHIR "]
    #[doc = " search string or FHIRPath expression. Multiple triggers are considered OR joined (e.g., a "]
    #[doc = " resource update matching ANY of the definitions will trigger a notification)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "resourceTrigger")]
    pub resource_trigger: Option<Vec<SubscriptionTopicResourceTrigger>>,
    #[doc = " This is a SubscriptionTopic resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The current state of the SubscriptionTopic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " A short, descriptive, user-friendly title for the SubscriptionTopic, for example, "]
    #[doc = " \"admission\"."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[doc = " An absolute URI that is used to identify this subscription topic when it is referenced in a "]
    #[doc = " specification, model, design or an instance; also called its canonical identifier. This "]
    #[doc = " SHOULD be globally unique and SHOULD be a literal address at which at which an "]
    #[doc = " authoritative instance of this subscription topic is (or will be) published. This URL can "]
    #[doc = " be the target of a canonical reference. It SHALL remain the same when the subscription "]
    #[doc = " topic is stored on different servers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
    #[doc = " The content was developed with a focus and intent of supporting the contexts that are "]
    #[doc = " listed. These terms may be used to assist with indexing and searching of code system "]
    #[doc = " definitions."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,
    #[doc = " The identifier that is used to identify this version of the subscription topic when it is "]
    #[doc = " referenced in a specification, model, design or instance. This is an arbitrary value "]
    #[doc = " managed by the Topic author and is not expected to be globally unique. For example, it "]
    #[doc = " might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also "]
    #[doc = " no expectation that versions are orderable."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[doc = " Describes a stream of resource state changes or events and annotated with labels useful to "]
#[doc = " filter projections from this topic."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "SubscriptionTopic_CanFilterBy")]
#[serde(deny_unknown_fields)]
pub struct SubscriptionTopicCanFilterBy {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for filterDefinition"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_filterDefinition")]
    pub _filter_definition: Option<Element>,
    #[doc = " Extensions for filterParameter"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_filterParameter")]
    pub _filter_parameter: Option<Element>,
    #[doc = " Extensions for modifier"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _modifier: Option<Vec<Element>>,
    #[doc = " Extensions for resource"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _resource: Option<Element>,
    #[doc = " Description of how this filtering parameter is intended to be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Either the canonical URL to a search parameter (like "]
    #[doc = " \"http://hl7.org/fhir/SearchParameter/encounter-patient\") or the officially-defined URI for "]
    #[doc = " a shared filter concept (like \"http://example.org/concepts/shared-common-event\")."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "filterDefinition")]
    pub filter_definition: Option<Uri>,
    #[doc = " Either the canonical URL to a search parameter (like "]
    #[doc = " \"http://hl7.org/fhir/SearchParameter/encounter-patient\") or topic-defined parameter (like "]
    #[doc = " \"hub.event\") which is a label for the filter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "filterParameter")]
    pub filter_parameter: Option<String>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Allowable operators to apply when determining matches (Search Modifiers).  If the "]
    #[doc = " filterParameter is a SearchParameter, this list of modifiers SHALL be a strict subset of "]
    #[doc = " the modifiers defined on that SearchParameter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub modifier: Option<Vec<Code>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " URL of the Resource that is the type used in this filter. This is the \"focus\" of the topic "]
    #[doc = " (or one of them if there are more than one). It will be the same, a generality, or a "]
    #[doc = " specificity of SubscriptionTopic.resourceTrigger.resource or "]
    #[doc = " SubscriptionTopic.eventTrigger.resource when they are present."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource: Option<Uri>,
}
#[doc = " Describes a stream of resource state changes or events and annotated with labels useful to "]
#[doc = " filter projections from this topic."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "SubscriptionTopic_EventTrigger")]
#[serde(deny_unknown_fields)]
pub struct SubscriptionTopicEventTrigger {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for resource"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _resource: Option<Element>,
    #[doc = " The human readable description of an event to trigger a notification for the "]
    #[doc = " SubscriptionTopic - for example, \"Patient Admission, as defined in HL7v2 via message "]
    #[doc = " ADT^A01\". Multiple values are considered OR joined (e.g., matching any single event "]
    #[doc = " listed)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " A well-defined event which can be used to trigger notifications from the SubscriptionTopic."]
    pub event: CodeableConcept,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " URL of the Resource that is the focus type used in this event trigger.  Relative URLs are "]
    #[doc = " relative to the StructureDefinition root of the implemented FHIR version (e.g., "]
    #[doc = " http://hl7.org/fhir/StructureDefinition). For example, \"Patient\" maps to "]
    #[doc = " http://hl7.org/fhir/StructureDefinition/Patient.  For more information, see <a "]
    #[doc = " href=\"elementdefinition-definitions.html#ElementDefinition.type.code\">ElementDefinition.type.code</a>."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource: Option<Uri>,
}
#[doc = " Describes a stream of resource state changes or events and annotated with labels useful to "]
#[doc = " filter projections from this topic."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "SubscriptionTopic_NotificationShape")]
#[serde(deny_unknown_fields)]
pub struct SubscriptionTopicNotificationShape {
    #[doc = " Extensions for include"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _include: Option<Vec<Element>>,
    #[doc = " Extensions for resource"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _resource: Option<Element>,
    #[doc = " Extensions for revInclude"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_revInclude")]
    pub _rev_include: Option<Vec<Element>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Search-style _include directives, rooted in the resource for this shape. Servers SHOULD "]
    #[doc = " include resources listed here, if they exist and the user is authorized to receive them.  "]
    #[doc = " Clients SHOULD be prepared to receive these additional resources, but SHALL function "]
    #[doc = " properly without them."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub include: Option<Vec<String>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " URL of the Resource that is the type used in this shape. This is the \"focus\" of the topic "]
    #[doc = " (or one of them if there are more than one) and the root resource for this shape "]
    #[doc = " definition. It will be the same, a generality, or a specificity of "]
    #[doc = " SubscriptionTopic.resourceTrigger.resource or SubscriptionTopic.eventTrigger.resource when "]
    #[doc = " they are present."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource: Option<Uri>,
    #[doc = " Search-style _revinclude directives, rooted in the resource for this shape. Servers SHOULD "]
    #[doc = " include resources listed here, if they exist and the user is authorized to receive them.  "]
    #[doc = " Clients SHOULD be prepared to receive these additional resources, but SHALL function "]
    #[doc = " properly without them."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "revInclude")]
    pub rev_include: Option<Vec<String>>,
}
#[doc = " Describes a stream of resource state changes or events and annotated with labels useful to "]
#[doc = " filter projections from this topic."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "SubscriptionTopic_QueryCriteria")]
#[serde(deny_unknown_fields)]
pub struct SubscriptionTopicQueryCriteria {
    #[doc = " Extensions for current"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _current: Option<Element>,
    #[doc = " Extensions for previous"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _previous: Option<Element>,
    #[doc = " Extensions for requireBoth"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_requireBoth")]
    pub _require_both: Option<Element>,
    #[doc = " Extensions for resultForCreate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_resultForCreate")]
    pub _result_for_create: Option<Element>,
    #[doc = " Extensions for resultForDelete"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_resultForDelete")]
    pub _result_for_delete: Option<Element>,
    #[doc = " The FHIR query based rules are applied to the current resource state (e.g., state after an "]
    #[doc = " update)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub current: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The FHIR query based rules are applied to the previous resource state (e.g., state before "]
    #[doc = " an update)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub previous: Option<String>,
    #[doc = " If set to true, both current and previous criteria must evaluate true to  trigger a "]
    #[doc = " notification for this topic.  Otherwise a notification for this topic will be triggered if "]
    #[doc = " either one evaluates to true."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "requireBoth")]
    pub require_both: Option<Boolean>,
    #[doc = " For \"create\" interactions, should the \"previous\" criteria count as an automatic pass or an "]
    #[doc = " automatic fail."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "resultForCreate")]
    pub result_for_create: Option<Code>,
    #[doc = " For \"delete\" interactions, should the \"current\" criteria count as an automatic pass or an "]
    #[doc = " automatic fail."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "resultForDelete")]
    pub result_for_delete: Option<Code>,
}
#[doc = " Describes a stream of resource state changes or events and annotated with labels useful to "]
#[doc = " filter projections from this topic."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "SubscriptionTopic_ResourceTrigger")]
#[serde(deny_unknown_fields)]
pub struct SubscriptionTopicResourceTrigger {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for fhirPathCriteria"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fhirPathCriteria")]
    pub _fhir_path_criteria: Option<Element>,
    #[doc = " Extensions for resource"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _resource: Option<Element>,
    #[doc = " Extensions for supportedInteraction"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_supportedInteraction")]
    pub _supported_interaction: Option<Vec<Element>>,
    #[doc = " The human readable description of this resource trigger for the SubscriptionTopic -  for "]
    #[doc = " example, \"An Encounter enters the 'in-progress' state\"."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The FHIRPath based rules that the server should use to determine when to trigger a "]
    #[doc = " notification for this topic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fhirPathCriteria")]
    pub fhir_path_criteria: Option<String>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The FHIR query based rules that the server should use to determine when to trigger a "]
    #[doc = " notification for this subscription topic."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "queryCriteria")]
    pub query_criteria: Option<SubscriptionTopicQueryCriteria>,
    #[doc = " URL of the Resource that is the type used in this resource trigger.  Relative URLs are "]
    #[doc = " relative to the StructureDefinition root of the implemented FHIR version (e.g., "]
    #[doc = " http://hl7.org/fhir/StructureDefinition). For example, \"Patient\" maps to "]
    #[doc = " http://hl7.org/fhir/StructureDefinition/Patient.  For more information, see <a "]
    #[doc = " href=\"elementdefinition-definitions.html#ElementDefinition.type.code\">ElementDefinition.type.code</a>."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource: Option<Uri>,
    #[doc = " The FHIR RESTful interaction which can be used to trigger a notification for the "]
    #[doc = " SubscriptionTopic. Multiple values are considered OR joined (e.g., CREATE or UPDATE)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportedInteraction")]
    pub supported_interaction: Option<Vec<Code>>,
}
#[doc = " The subscription resource is used to define a push-based subscription from a server to another "]
#[doc = " system. Once a subscription is registered with the server, the server checks every resource "]
#[doc = " that is created or updated, and if the resource matches the given criteria, it sends a message "]
#[doc = " on the defined \"channel\" so that another system can take an appropriate action."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Subscription_Channel")]
#[serde(deny_unknown_fields)]
pub struct SubscriptionChannel {
    #[doc = " Extensions for endpoint"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _endpoint: Option<Element>,
    #[doc = " Extensions for header"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _header: Option<Vec<Element>>,
    #[doc = " Extensions for payload"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _payload: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " The url that describes the actual end-point to send messages to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<Url>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Additional headers / information to send as part of the notification."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub header: Option<Vec<String>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The mime type to send the payload in - either application/fhir+xml, or "]
    #[doc = " application/fhir+json. If the payload is not present, then there is no payload in the "]
    #[doc = " notification, just a notification. The mime type \"text/plain\" may also be used for Email "]
    #[doc = " and SMS subscriptions."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub payload: Option<Code>,
    #[doc = " The type of channel to send notifications on."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}
#[doc = " A homogeneous material with a definite composition."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Substance {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " A code that classifies the general type of substance.  This is used  for searching, sorting "]
    #[doc = " and display purposes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,
    #[doc = " A code (or set of codes) that identify this substance."]
    pub code: CodeableConcept,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " A description of the substance - its appearance, handling requirements, and other usage "]
    #[doc = " notes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Unique identifier for the substance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " A substance can be composed of other substances."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub ingredient: Option<Vec<SubstanceIngredient>>,
    #[doc = " Substance may be used to describe a kind of substance, or a specific package/container of "]
    #[doc = " the substance: an instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub instance: Option<Vec<SubstanceInstance>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " This is a Substance resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " A code to indicate if the substance is actively used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " The detailed description of a substance, typically at a level beyond what is used for "]
#[doc = " prescribing."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct SubstanceDefinition {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " A high level categorization, e.g. polymer or nucleic acid, or food, chemical, biological, "]
    #[doc = " or a lower level such as the general types of polymer (linear or branch chain) or type of "]
    #[doc = " impurity (process related or contaminant)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub classification: Option<Vec<CodeableConcept>>,
    #[doc = " Codes associated with the substance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Vec<SubstanceDefinitionCode>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " Textual description of the substance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " If the substance applies to human or veterinary use."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub domain: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The quality standard, established benchmark, to which substance complies (e.g. USP/NF, Ph. "]
    #[doc = " Eur, JP, BP, Company Standard)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub grade: Option<Vec<CodeableConcept>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Identifier by which this substance is known."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " Supporting literature."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "informationSource")]
    pub information_source: Option<Vec<Reference>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The entity that creates, makes, produces or fabricates the substance. This is a set of "]
    #[doc = " potential manufacturers but is not necessarily comprehensive."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub manufacturer: Option<Vec<Reference>>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Moiety, for structural modifications."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub moiety: Option<Vec<SubstanceDefinitionMoiety>>,
    #[doc = " The molecular weight or weight range (for proteins, polymers or nucleic acids)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "molecularWeight")]
    pub molecular_weight: Option<Vec<SubstanceDefinitionMolecularWeight>>,
    #[doc = " Names applicable to this substance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<Vec<SubstanceDefinitionName>>,
    #[doc = " Textual comment about the substance's catalogue or registry record."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " General specifications for this substance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub property: Option<Vec<SubstanceDefinitionProperty>>,
    #[doc = " A link between this substance and another, with details of the relationship."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub relationship: Option<Vec<SubstanceDefinitionRelationship>>,
    #[doc = " This is a SubstanceDefinition resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " Material or taxonomic/anatomical source for the substance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "sourceMaterial")]
    pub source_material: Option<SubstanceDefinitionSourceMaterial>,
    #[doc = " Status of substance within the catalogue e.g. active, retired."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<CodeableConcept>,
    #[doc = " Structural information."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub structure: Option<SubstanceDefinitionStructure>,
    #[doc = " An entity that is the source for the substance. It may be different from the manufacturer. "]
    #[doc = " Supplier is synonymous to a distributor."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub supplier: Option<Vec<Reference>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " A business level version identifier of the substance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[doc = " The detailed description of a substance, typically at a level beyond what is used for "]
#[doc = " prescribing."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "SubstanceDefinition_Code")]
#[serde(deny_unknown_fields)]
pub struct SubstanceDefinitionCode {
    #[doc = " Extensions for statusDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_statusDate")]
    pub _status_date: Option<Element>,
    #[doc = " The specific code."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Any comment can be provided in this field, if necessary."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " Supporting literature."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub source: Option<Vec<Reference>>,
    #[doc = " Status of the code assignment, for example 'provisional', 'approved'."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<CodeableConcept>,
    #[doc = " The date at which the code status was changed as part of the terminology maintenance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusDate")]
    pub status_date: Option<DateTime>,
}
#[doc = " The detailed description of a substance, typically at a level beyond what is used for "]
#[doc = " prescribing."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "SubstanceDefinition_Moiety")]
#[serde(deny_unknown_fields)]
pub struct SubstanceDefinitionMoiety {
    #[doc = " Extensions for amountString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_amountString")]
    pub _amount_string: Option<Element>,
    #[doc = " Extensions for molecularFormula"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_molecularFormula")]
    pub _molecular_formula: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Quantitative value for this moiety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "amountQuantity")]
    pub amount_quantity: Option<Quantity>,
    #[doc = " Quantitative value for this moiety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "amountString")]
    pub amount_string: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Identifier by which this moiety substance is known."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,
    #[doc = " The measurement type of the quantitative value. In capturing the actual relative amounts of "]
    #[doc = " substances or molecular fragments it may be necessary to indicate whether the amount refers "]
    #[doc = " to, for example, a mole ratio or weight ratio."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "measurementType")]
    pub measurement_type: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Molecular formula for this moiety of this substance, typically using the Hill system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "molecularFormula")]
    pub molecular_formula: Option<String>,
    #[doc = " Textual name for this moiety substance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " Optical activity type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "opticalActivity")]
    pub optical_activity: Option<CodeableConcept>,
    #[doc = " Role that the moiety is playing."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub role: Option<CodeableConcept>,
    #[doc = " Stereochemistry type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub stereochemistry: Option<CodeableConcept>,
}
#[doc = " The detailed description of a substance, typically at a level beyond what is used for "]
#[doc = " prescribing."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "SubstanceDefinition_MolecularWeight")]
#[serde(deny_unknown_fields)]
pub struct SubstanceDefinitionMolecularWeight {
    #[doc = " Used to capture quantitative values for a variety of elements. If only limits are given, "]
    #[doc = " the arithmetic mean would be the average. If only a single definite value for a given "]
    #[doc = " element is given, it would be captured in this field."]
    pub amount: Quantity,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The method by which the molecular weight was determined."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub method: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Type of molecular weight such as exact, average (also known as. number average), weight "]
    #[doc = " average."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " The detailed description of a substance, typically at a level beyond what is used for "]
#[doc = " prescribing."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "SubstanceDefinition_Name")]
#[serde(deny_unknown_fields)]
pub struct SubstanceDefinitionName {
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for preferred"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _preferred: Option<Element>,
    #[doc = " The use context of this name for example if there is a different name a drug active "]
    #[doc = " ingredient as opposed to a food colour additive."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub domain: Option<Vec<CodeableConcept>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The jurisdiction where this name applies."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,
    #[doc = " Human language that the name is written in."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Vec<CodeableConcept>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The actual name."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " Details of the official nature of this name."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub official: Option<Vec<SubstanceDefinitionOfficial>>,
    #[doc = " If this is the preferred name for this substance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub preferred: Option<Boolean>,
    #[doc = " Supporting literature."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub source: Option<Vec<Reference>>,
    #[doc = " The status of the name, for example 'current', 'proposed'."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<CodeableConcept>,
    #[doc = " A synonym of this particular name, by which the substance is also known."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub synonym: Option<Vec<SubstanceDefinitionName>>,
    #[doc = " A translation for this name into another human language."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub translation: Option<Vec<SubstanceDefinitionName>>,
    #[doc = " Name type, for example 'systematic',  'scientific, 'brand'."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " The detailed description of a substance, typically at a level beyond what is used for "]
#[doc = " prescribing."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "SubstanceDefinition_Official")]
#[serde(deny_unknown_fields)]
pub struct SubstanceDefinitionOfficial {
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Which authority uses this official name."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub authority: Option<CodeableConcept>,
    #[doc = " Date of the official name change."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The status of the official name, for example 'draft', 'active', 'retired'."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<CodeableConcept>,
}
#[doc = " The detailed description of a substance, typically at a level beyond what is used for "]
#[doc = " prescribing."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "SubstanceDefinition_Property")]
#[serde(deny_unknown_fields)]
pub struct SubstanceDefinitionProperty {
    #[doc = " Extensions for valueBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub _value_boolean: Option<Element>,
    #[doc = " Extensions for valueDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDate")]
    pub _value_date: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A code expressing the type of property."]
    #[serde(rename = "type")]
    pub type_: CodeableConcept,
    #[doc = " A value for the property."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAttachment")]
    pub value_attachment: Option<Attachment>,
    #[doc = " A value for the property."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,
    #[doc = " A value for the property."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,
    #[doc = " A value for the property."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDate")]
    pub value_date: Option<String>,
    #[doc = " A value for the property."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,
}
#[doc = " The detailed description of a substance, typically at a level beyond what is used for "]
#[doc = " prescribing."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "SubstanceDefinition_Relationship")]
#[serde(deny_unknown_fields)]
pub struct SubstanceDefinitionRelationship {
    #[doc = " Extensions for amountString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_amountString")]
    pub _amount_string: Option<Element>,
    #[doc = " Extensions for isDefining"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_isDefining")]
    pub _is_defining: Option<Element>,
    #[doc = " A numeric factor for the relationship, for instance to express that the salt of a substance "]
    #[doc = " has some percentage of the active substance in relation to some other."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "amountQuantity")]
    pub amount_quantity: Option<Quantity>,
    #[doc = " A numeric factor for the relationship, for instance to express that the salt of a substance "]
    #[doc = " has some percentage of the active substance in relation to some other."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "amountRatio")]
    pub amount_ratio: Option<Ratio>,
    #[doc = " A numeric factor for the relationship, for instance to express that the salt of a substance "]
    #[doc = " has some percentage of the active substance in relation to some other."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "amountString")]
    pub amount_string: Option<String>,
    #[doc = " An operator for the amount, for example \"average\", \"approximately\", \"less than\"."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comparator: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " For example where an enzyme strongly bonds with a particular substance, this is a defining "]
    #[doc = " relationship for that enzyme, out of several possible substance relationships."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "isDefining")]
    pub is_defining: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " For use when the numeric has an uncertain range."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "ratioHighLimitAmount")]
    pub ratio_high_limit_amount: Option<Ratio>,
    #[doc = " Supporting literature."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub source: Option<Vec<Reference>>,
    #[doc = " A pointer to another substance, as a resource or just a representational code."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "substanceDefinitionCodeableConcept")]
    pub substance_definition_codeable_concept: Option<CodeableConcept>,
    #[doc = " A pointer to another substance, as a resource or just a representational code."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "substanceDefinitionReference")]
    pub substance_definition_reference: Option<Reference>,
    #[doc = " For example \"salt to parent\", \"active moiety\", \"starting material\", \"polymorph\", \"impurity "]
    #[doc = " of\"."]
    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}
#[doc = " The detailed description of a substance, typically at a level beyond what is used for "]
#[doc = " prescribing."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "SubstanceDefinition_Representation")]
#[serde(deny_unknown_fields)]
pub struct SubstanceDefinitionRepresentation {
    #[doc = " Extensions for representation"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _representation: Option<Element>,
    #[doc = " An attached file with the structural representation or characterization e.g. a molecular "]
    #[doc = " structure graphic of the substance, a JCAMP or AnIML file."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub document: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The format of the representation e.g. InChI, SMILES, MOLFILE, CDX, SDF, PDB, mmCIF. The "]
    #[doc = " logical content type rather than the physical file format of a document."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub format: Option<CodeableConcept>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The structural representation or characterization as a text string in a standard format."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub representation: Option<String>,
    #[doc = " The kind of structural representation (e.g. full, partial)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " The detailed description of a substance, typically at a level beyond what is used for "]
#[doc = " prescribing."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "SubstanceDefinition_SourceMaterial")]
#[serde(deny_unknown_fields)]
pub struct SubstanceDefinitionSourceMaterial {
    #[doc = " The country or countries where the material is harvested."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "countryOfOrigin")]
    pub country_of_origin: Option<Vec<CodeableConcept>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The genus of an organism, typically referring to the Latin epithet of the genus element of "]
    #[doc = " the plant/animal scientific name."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub genus: Option<CodeableConcept>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " An anatomical origin of the source material within an organism."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub part: Option<CodeableConcept>,
    #[doc = " The species of an organism, typically referring to the Latin epithet of the species of the "]
    #[doc = " plant/animal."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub species: Option<CodeableConcept>,
    #[doc = " A classification that provides the origin of the raw material. Example: cat hair would be "]
    #[doc = " an Animal source type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " The detailed description of a substance, typically at a level beyond what is used for "]
#[doc = " prescribing."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "SubstanceDefinition_Structure")]
#[serde(deny_unknown_fields)]
pub struct SubstanceDefinitionStructure {
    #[doc = " Extensions for molecularFormula"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_molecularFormula")]
    pub _molecular_formula: Option<Element>,
    #[doc = " Extensions for molecularFormulaByMoiety"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_molecularFormulaByMoiety")]
    pub _molecular_formula_by_moiety: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Molecular formula of this substance, typically using the Hill system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "molecularFormula")]
    pub molecular_formula: Option<String>,
    #[doc = " Specified per moiety according to the Hill system, i.e. first C, then H, then alphabetical, "]
    #[doc = " each moiety separated by a dot."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "molecularFormulaByMoiety")]
    pub molecular_formula_by_moiety: Option<String>,
    #[doc = " The molecular weight or weight range (for proteins, polymers or nucleic acids)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "molecularWeight")]
    pub molecular_weight: Option<SubstanceDefinitionMolecularWeight>,
    #[doc = " Optical activity type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "opticalActivity")]
    pub optical_activity: Option<CodeableConcept>,
    #[doc = " A depiction of the structure or characterization of the substance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub representation: Option<Vec<SubstanceDefinitionRepresentation>>,
    #[doc = " The source of information about the structure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "sourceDocument")]
    pub source_document: Option<Vec<Reference>>,
    #[doc = " Stereochemistry type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub stereochemistry: Option<CodeableConcept>,
    #[doc = " The method used to elucidate the structure or characterization of the drug substance. "]
    #[doc = " Examples: X-ray, HPLC, NMR, Peptide mapping, Ligand binding assay."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub technique: Option<Vec<CodeableConcept>>,
}
#[doc = " A homogeneous material with a definite composition."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Substance_Ingredient")]
#[serde(deny_unknown_fields)]
pub struct SubstanceIngredient {
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The amount of the ingredient in the substance - a concentration ratio."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Ratio>,
    #[doc = " Another substance that is a component of this substance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "substanceCodeableConcept")]
    pub substance_codeable_concept: Option<CodeableConcept>,
    #[doc = " Another substance that is a component of this substance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "substanceReference")]
    pub substance_reference: Option<Reference>,
}
#[doc = " A homogeneous material with a definite composition."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Substance_Instance")]
#[serde(deny_unknown_fields)]
pub struct SubstanceInstance {
    #[doc = " Extensions for expiry"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _expiry: Option<Element>,
    #[doc = " When the substance is no longer valid to use. For some substances, a single arbitrary date "]
    #[doc = " is used for expiry."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expiry: Option<DateTime>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Identifier associated with the package/container (usually a label affixed directly)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The amount of the substance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,
}
#[doc = " Record of delivery of what is supplied."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct SupplyDelivery {
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for occurrenceDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_occurrenceDateTime")]
    pub _occurrence_date_time: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " A plan, proposal or order that is fulfilled in whole or in part by this event."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Vec<Reference>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " Identification of the facility/location where the Supply was shipped to, as part of the "]
    #[doc = " dispense event."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub destination: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Identifier for the supply delivery event that is used to identify it across multiple "]
    #[doc = " disparate systems."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The date or time(s) the activity occurred."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrenceDateTime")]
    pub occurrence_date_time: Option<String>,
    #[doc = " The date or time(s) the activity occurred."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrencePeriod")]
    pub occurrence_period: Option<Period>,
    #[doc = " The date or time(s) the activity occurred."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrenceTiming")]
    pub occurrence_timing: Option<Timing>,
    #[doc = " A larger event of which this particular event is a component or step."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "partOf")]
    pub part_of: Option<Vec<Reference>>,
    #[doc = " A link to a resource representing the person whom the delivered item is for."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub patient: Option<Reference>,
    #[doc = " Identifies the person who picked up the Supply."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub receiver: Option<Vec<Reference>>,
    #[doc = " This is a SupplyDelivery resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " A code specifying the state of the dispense event."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " The item that is being delivered or has been supplied."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "suppliedItem")]
    pub supplied_item: Option<SupplyDeliverySuppliedItem>,
    #[doc = " The individual responsible for dispensing the medication, supplier or device."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub supplier: Option<Reference>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " Indicates the type of dispensing event that is performed. Examples include: Trial Fill, "]
    #[doc = " Completion of Trial, Partial Fill, Emergency Fill, Samples, etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}
#[doc = " Record of delivery of what is supplied."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "SupplyDelivery_SuppliedItem")]
#[serde(deny_unknown_fields)]
pub struct SupplyDeliverySuppliedItem {
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Identifies the medication, substance or device being dispensed. This is either a link to a "]
    #[doc = " resource representing the details of the item or a code that identifies the item from a "]
    #[doc = " known list."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "itemCodeableConcept")]
    pub item_codeable_concept: Option<CodeableConcept>,
    #[doc = " Identifies the medication, substance or device being dispensed. This is either a link to a "]
    #[doc = " resource representing the details of the item or a code that identifies the item from a "]
    #[doc = " known list."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "itemReference")]
    pub item_reference: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The amount of supply that has been dispensed. Includes unit of measure."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,
}
#[doc = " A record of a request for a medication, substance or device used in the healthcare setting."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct SupplyRequest {
    #[doc = " Extensions for authoredOn"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_authoredOn")]
    pub _authored_on: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for occurrenceDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_occurrenceDateTime")]
    pub _occurrence_date_time: Option<Element>,
    #[doc = " Extensions for priority"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _priority: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " When the request was made."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "authoredOn")]
    pub authored_on: Option<DateTime>,
    #[doc = " Category of supply, e.g.  central, non-stock, etc. This is used to support work flows "]
    #[doc = " associated with the supply process."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<CodeableConcept>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " Where the supply is expected to come from."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "deliverFrom")]
    pub deliver_from: Option<Reference>,
    #[doc = " Where the supply is destined to go."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "deliverTo")]
    pub deliver_to: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Business identifiers assigned to this SupplyRequest by the author and/or other systems. "]
    #[doc = " These identifiers remain constant as the resource is updated and propagates from server to "]
    #[doc = " server."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The item that is requested to be supplied. This is either a link to a resource representing "]
    #[doc = " the details of the item or a code that identifies the item from a known list."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "itemCodeableConcept")]
    pub item_codeable_concept: Option<CodeableConcept>,
    #[doc = " The item that is requested to be supplied. This is either a link to a resource representing "]
    #[doc = " the details of the item or a code that identifies the item from a known list."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "itemReference")]
    pub item_reference: Option<Reference>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " When the request should be fulfilled."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrenceDateTime")]
    pub occurrence_date_time: Option<String>,
    #[doc = " When the request should be fulfilled."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrencePeriod")]
    pub occurrence_period: Option<Period>,
    #[doc = " When the request should be fulfilled."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrenceTiming")]
    pub occurrence_timing: Option<Timing>,
    #[doc = " Specific parameters for the ordered item.  For example, the size of the indicated item."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub parameter: Option<Vec<SupplyRequestParameter>>,
    #[doc = " Indicates how quickly this SupplyRequest should be addressed with respect to other "]
    #[doc = " requests."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub priority: Option<Code>,
    #[doc = " The amount that is being ordered of the indicated item."]
    pub quantity: Quantity,
    #[doc = " The reason why the supply item was requested."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,
    #[doc = " The reason why the supply item was requested."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,
    #[doc = " The device, practitioner, etc. who initiated the request."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub requester: Option<Reference>,
    #[doc = " This is a SupplyRequest resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " Status of the supply request."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " Who is intended to fulfill the request."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub supplier: Option<Vec<Reference>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " A record of a request for a medication, substance or device used in the healthcare setting."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "SupplyRequest_Parameter")]
#[serde(deny_unknown_fields)]
pub struct SupplyRequestParameter {
    #[doc = " Extensions for valueBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub _value_boolean: Option<Element>,
    #[doc = " A code or string that identifies the device detail being asserted."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The value of the device detail."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,
    #[doc = " The value of the device detail."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,
    #[doc = " The value of the device detail."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,
    #[doc = " The value of the device detail."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRange")]
    pub value_range: Option<Range>,
}
#[doc = " A task to be performed."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Task {
    #[doc = " Extensions for authoredOn"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_authoredOn")]
    pub _authored_on: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for instantiatesUri"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_instantiatesUri")]
    pub _instantiates_uri: Option<Element>,
    #[doc = " Extensions for intent"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _intent: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for lastModified"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastModified")]
    pub _last_modified: Option<Element>,
    #[doc = " Extensions for priority"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _priority: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " The date and time this task was created."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "authoredOn")]
    pub authored_on: Option<DateTime>,
    #[doc = " BasedOn refers to a higher-level authorization that triggered the creation of the task.  It "]
    #[doc = " references a \"request\" resource such as a ServiceRequest, MedicationRequest, "]
    #[doc = " ServiceRequest, CarePlan, etc. which is distinct from the \"request\" resource the task is "]
    #[doc = " seeking to fulfill.  This latter resource is referenced by FocusOn.  For example, based on "]
    #[doc = " a ServiceRequest (= BasedOn), a task is created to fulfill a procedureRequest ( = FocusOn ) "]
    #[doc = " to collect a specimen from a patient."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Vec<Reference>>,
    #[doc = " Contains business-specific nuances of the business state."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "businessStatus")]
    pub business_status: Option<CodeableConcept>,
    #[doc = " A name or code (or both) briefly describing what the task involves."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " A free-text description of what is to be performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " The healthcare event  (e.g. a patient and healthcare provider interaction) during which "]
    #[doc = " this task was created."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,
    #[doc = " Identifies the time action was first taken against the task (start) and/or the time final "]
    #[doc = " action was taken against the task prior to marking it as completed (end)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "executionPeriod")]
    pub execution_period: Option<Period>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The request being actioned or the resource being manipulated by this task."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub focus: Option<Reference>,
    #[doc = " The entity who benefits from the performance of the service specified in the task (e.g., "]
    #[doc = " the patient)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "for")]
    pub for_: Option<Reference>,
    #[doc = " An identifier that links together multiple tasks and other requests that were created in "]
    #[doc = " the same context."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "groupIdentifier")]
    pub group_identifier: Option<Identifier>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The business identifier for this task."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " Additional information that may be needed in the execution of the task."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub input: Option<Vec<TaskInput>>,
    #[doc = " The URL pointing to a *FHIR*-defined protocol, guideline, orderset or other definition that "]
    #[doc = " is adhered to in whole or in part by this Task."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesCanonical")]
    pub instantiates_canonical: Option<Canonical>,
    #[doc = " The URL pointing to an *externally* maintained  protocol, guideline, orderset or other "]
    #[doc = " definition that is adhered to in whole or in part by this Task."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesUri")]
    pub instantiates_uri: Option<Uri>,
    #[doc = " Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may "]
    #[doc = " be relevant to the Task."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub insurance: Option<Vec<Reference>>,
    #[doc = " Indicates the \"level\" of actionability associated with the Task, i.e. i+R[9]Cs this a "]
    #[doc = " proposed task, a planned task, an actionable task, etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub intent: Option<Code>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The date and time of last modification to this task."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastModified")]
    pub last_modified: Option<DateTime>,
    #[doc = " Principal physical location where the this task is performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<Reference>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Free-text information captured about the task as it progresses."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " Outputs produced by the Task."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub output: Option<Vec<TaskOutput>>,
    #[doc = " Individual organization or Device currently responsible for task execution."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub owner: Option<Reference>,
    #[doc = " Task that this particular task is part of."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "partOf")]
    pub part_of: Option<Vec<Reference>>,
    #[doc = " The kind of participant that should perform the task."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "performerType")]
    pub performer_type: Option<Vec<CodeableConcept>>,
    #[doc = " Indicates how quickly the Task should be addressed with respect to other requests."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub priority: Option<Code>,
    #[doc = " A description or code indicating why this task needs to be performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<CodeableConcept>,
    #[doc = " A resource reference indicating why this task needs to be performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Reference>,
    #[doc = " Links to Provenance records for past versions of this Task that identify key state "]
    #[doc = " transitions or updates that are likely to be relevant to a user looking at the current "]
    #[doc = " version of the task."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relevantHistory")]
    pub relevant_history: Option<Vec<Reference>>,
    #[doc = " The creator of the task."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub requester: Option<Reference>,
    #[doc = " This is a Task resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " If the Task.focus is a request resource and the task is seeking fulfillment (i.e. is asking "]
    #[doc = " for the request to be actioned), this element identifies any limitations on what parts of "]
    #[doc = " the referenced request should be actioned."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub restriction: Option<TaskRestriction>,
    #[doc = " The current status of the task."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " An explanation as to why this task is held, failed, was refused, etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusReason")]
    pub status_reason: Option<CodeableConcept>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " A task to be performed."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Task_Input")]
#[serde(deny_unknown_fields)]
pub struct TaskInput {
    #[doc = " Extensions for valueBase64Binary"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBase64Binary")]
    pub _value_base_64_binary: Option<Element>,
    #[doc = " Extensions for valueBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub _value_boolean: Option<Element>,
    #[doc = " Extensions for valueCanonical"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueCanonical")]
    pub _value_canonical: Option<Element>,
    #[doc = " Extensions for valueCode"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueCode")]
    pub _value_code: Option<Element>,
    #[doc = " Extensions for valueDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDate")]
    pub _value_date: Option<Element>,
    #[doc = " Extensions for valueDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDateTime")]
    pub _value_date_time: Option<Element>,
    #[doc = " Extensions for valueDecimal"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDecimal")]
    pub _value_decimal: Option<Element>,
    #[doc = " Extensions for valueId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueId")]
    pub _value_id: Option<Element>,
    #[doc = " Extensions for valueInstant"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueInstant")]
    pub _value_instant: Option<Element>,
    #[doc = " Extensions for valueInteger"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueInteger")]
    pub _value_integer: Option<Element>,
    #[doc = " Extensions for valueMarkdown"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueMarkdown")]
    pub _value_markdown: Option<Element>,
    #[doc = " Extensions for valueOid"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueOid")]
    pub _value_oid: Option<Element>,
    #[doc = " Extensions for valuePositiveInt"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valuePositiveInt")]
    pub _value_positive_int: Option<Element>,
    #[doc = " Extensions for valueString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueString")]
    pub _value_string: Option<Element>,
    #[doc = " Extensions for valueTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueTime")]
    pub _value_time: Option<Element>,
    #[doc = " Extensions for valueUnsignedInt"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUnsignedInt")]
    pub _value_unsigned_int: Option<Element>,
    #[doc = " Extensions for valueUri"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUri")]
    pub _value_uri: Option<Element>,
    #[doc = " Extensions for valueUrl"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUrl")]
    pub _value_url: Option<Element>,
    #[doc = " Extensions for valueUuid"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUuid")]
    pub _value_uuid: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A code or description indicating how the input is intended to be used as part of the task "]
    #[doc = " execution."]
    #[serde(rename = "type")]
    pub type_: CodeableConcept,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAddress")]
    pub value_address: Option<Address>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAge")]
    pub value_age: Option<Age>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAnnotation")]
    pub value_annotation: Option<Annotation>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAttachment")]
    pub value_attachment: Option<Attachment>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBase64Binary")]
    pub value_base_64_binary: Option<String>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCanonical")]
    pub value_canonical: Option<String>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCode")]
    pub value_code: Option<String>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCoding")]
    pub value_coding: Option<Coding>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueContactDetail")]
    pub value_contact_detail: Option<ContactDetail>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueContactPoint")]
    pub value_contact_point: Option<ContactPoint>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueContributor")]
    pub value_contributor: Option<Contributor>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCount")]
    pub value_count: Option<Count>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDataRequirement")]
    pub value_data_requirement: Option<DataRequirement>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDate")]
    pub value_date: Option<String>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDateTime")]
    pub value_date_time: Option<String>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDecimal")]
    pub value_decimal: Option<f64>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDistance")]
    pub value_distance: Option<Distance>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDosage")]
    pub value_dosage: Option<Dosage>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDuration")]
    pub value_duration: Option<Duration>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueExpression")]
    pub value_expression: Option<Expression>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueHumanName")]
    pub value_human_name: Option<HumanName>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueId")]
    pub value_id: Option<String>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueIdentifier")]
    pub value_identifier: Option<Identifier>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueInstant")]
    pub value_instant: Option<String>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueInteger")]
    pub value_integer: Option<f64>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueMarkdown")]
    pub value_markdown: Option<String>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueMeta")]
    pub value_meta: Option<Meta>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueMoney")]
    pub value_money: Option<Money>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueOid")]
    pub value_oid: Option<String>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueParameterDefinition")]
    pub value_parameter_definition: Option<ParameterDefinition>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valuePeriod")]
    pub value_period: Option<Period>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valuePositiveInt")]
    pub value_positive_int: Option<f64>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRange")]
    pub value_range: Option<Range>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRatio")]
    pub value_ratio: Option<Ratio>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueReference")]
    pub value_reference: Option<Reference>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRelatedArtifact")]
    pub value_related_artifact: Option<RelatedArtifact>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueSampledData")]
    pub value_sampled_data: Option<SampledData>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueSignature")]
    pub value_signature: Option<Signature>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueString")]
    pub value_string: Option<String>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTime")]
    pub value_time: Option<String>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTiming")]
    pub value_timing: Option<Timing>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTriggerDefinition")]
    pub value_trigger_definition: Option<TriggerDefinition>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUnsignedInt")]
    pub value_unsigned_int: Option<f64>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUri")]
    pub value_uri: Option<String>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUrl")]
    pub value_url: Option<String>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUsageContext")]
    pub value_usage_context: Option<UsageContext>,
    #[doc = " The value of the input parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUuid")]
    pub value_uuid: Option<String>,
}
#[doc = " A task to be performed."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Task_Output")]
#[serde(deny_unknown_fields)]
pub struct TaskOutput {
    #[doc = " Extensions for valueBase64Binary"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBase64Binary")]
    pub _value_base_64_binary: Option<Element>,
    #[doc = " Extensions for valueBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub _value_boolean: Option<Element>,
    #[doc = " Extensions for valueCanonical"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueCanonical")]
    pub _value_canonical: Option<Element>,
    #[doc = " Extensions for valueCode"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueCode")]
    pub _value_code: Option<Element>,
    #[doc = " Extensions for valueDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDate")]
    pub _value_date: Option<Element>,
    #[doc = " Extensions for valueDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDateTime")]
    pub _value_date_time: Option<Element>,
    #[doc = " Extensions for valueDecimal"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDecimal")]
    pub _value_decimal: Option<Element>,
    #[doc = " Extensions for valueId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueId")]
    pub _value_id: Option<Element>,
    #[doc = " Extensions for valueInstant"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueInstant")]
    pub _value_instant: Option<Element>,
    #[doc = " Extensions for valueInteger"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueInteger")]
    pub _value_integer: Option<Element>,
    #[doc = " Extensions for valueMarkdown"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueMarkdown")]
    pub _value_markdown: Option<Element>,
    #[doc = " Extensions for valueOid"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueOid")]
    pub _value_oid: Option<Element>,
    #[doc = " Extensions for valuePositiveInt"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valuePositiveInt")]
    pub _value_positive_int: Option<Element>,
    #[doc = " Extensions for valueString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueString")]
    pub _value_string: Option<Element>,
    #[doc = " Extensions for valueTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueTime")]
    pub _value_time: Option<Element>,
    #[doc = " Extensions for valueUnsignedInt"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUnsignedInt")]
    pub _value_unsigned_int: Option<Element>,
    #[doc = " Extensions for valueUri"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUri")]
    pub _value_uri: Option<Element>,
    #[doc = " Extensions for valueUrl"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUrl")]
    pub _value_url: Option<Element>,
    #[doc = " Extensions for valueUuid"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUuid")]
    pub _value_uuid: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The name of the Output parameter."]
    #[serde(rename = "type")]
    pub type_: CodeableConcept,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAddress")]
    pub value_address: Option<Address>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAge")]
    pub value_age: Option<Age>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAnnotation")]
    pub value_annotation: Option<Annotation>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAttachment")]
    pub value_attachment: Option<Attachment>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBase64Binary")]
    pub value_base_64_binary: Option<String>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCanonical")]
    pub value_canonical: Option<String>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCode")]
    pub value_code: Option<String>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCoding")]
    pub value_coding: Option<Coding>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueContactDetail")]
    pub value_contact_detail: Option<ContactDetail>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueContactPoint")]
    pub value_contact_point: Option<ContactPoint>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueContributor")]
    pub value_contributor: Option<Contributor>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCount")]
    pub value_count: Option<Count>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDataRequirement")]
    pub value_data_requirement: Option<DataRequirement>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDate")]
    pub value_date: Option<String>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDateTime")]
    pub value_date_time: Option<String>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDecimal")]
    pub value_decimal: Option<f64>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDistance")]
    pub value_distance: Option<Distance>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDosage")]
    pub value_dosage: Option<Dosage>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDuration")]
    pub value_duration: Option<Duration>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueExpression")]
    pub value_expression: Option<Expression>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueHumanName")]
    pub value_human_name: Option<HumanName>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueId")]
    pub value_id: Option<String>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueIdentifier")]
    pub value_identifier: Option<Identifier>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueInstant")]
    pub value_instant: Option<String>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueInteger")]
    pub value_integer: Option<f64>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueMarkdown")]
    pub value_markdown: Option<String>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueMeta")]
    pub value_meta: Option<Meta>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueMoney")]
    pub value_money: Option<Money>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueOid")]
    pub value_oid: Option<String>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueParameterDefinition")]
    pub value_parameter_definition: Option<ParameterDefinition>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valuePeriod")]
    pub value_period: Option<Period>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valuePositiveInt")]
    pub value_positive_int: Option<f64>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRange")]
    pub value_range: Option<Range>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRatio")]
    pub value_ratio: Option<Ratio>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueReference")]
    pub value_reference: Option<Reference>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRelatedArtifact")]
    pub value_related_artifact: Option<RelatedArtifact>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueSampledData")]
    pub value_sampled_data: Option<SampledData>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueSignature")]
    pub value_signature: Option<Signature>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueString")]
    pub value_string: Option<String>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTime")]
    pub value_time: Option<String>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTiming")]
    pub value_timing: Option<Timing>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTriggerDefinition")]
    pub value_trigger_definition: Option<TriggerDefinition>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUnsignedInt")]
    pub value_unsigned_int: Option<f64>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUri")]
    pub value_uri: Option<String>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUrl")]
    pub value_url: Option<String>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUsageContext")]
    pub value_usage_context: Option<UsageContext>,
    #[doc = " The value of the Output parameter as a basic type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUuid")]
    pub value_uuid: Option<String>,
}
#[doc = " A task to be performed."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Task_Restriction")]
#[serde(deny_unknown_fields)]
pub struct TaskRestriction {
    #[doc = " Extensions for repetitions"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _repetitions: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Over what time-period is fulfillment sought."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
    #[doc = " For requests that are targeted to more than on potential recipient/target, for whom is "]
    #[doc = " fulfillment sought?"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub recipient: Option<Vec<Reference>>,
    #[doc = " Indicates the number of times the requested action should occur."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub repetitions: Option<PositiveInt>,
}
#[doc = " A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR "]
#[doc = " Terminology Server that may be used as a statement of actual server functionality or a "]
#[doc = " statement of required or desired server implementation."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct TerminologyCapabilities {
    #[doc = " Extensions for codeSearch"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_codeSearch")]
    pub _code_search: Option<Element>,
    #[doc = " Extensions for copyright"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _copyright: Option<Element>,
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for experimental"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _experimental: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for kind"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _kind: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for lockedDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lockedDate")]
    pub _locked_date: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for publisher"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _publisher: Option<Element>,
    #[doc = " Extensions for purpose"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _purpose: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " Whether the $closure operation is supported."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub closure: Option<TerminologyCapabilitiesClosure>,
    #[doc = " The degree to which the server supports the code search parameter on ValueSet, if it is "]
    #[doc = " supported."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "codeSearch")]
    pub code_search: Option<Code>,
    #[doc = " Identifies a code system that is supported by the server. If there is a no code system URL, "]
    #[doc = " then this declares the general assumptions a client can make about support for any "]
    #[doc = " CodeSystem resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "codeSystem")]
    pub code_system: Option<Vec<TerminologyCapabilitiesCodeSystem>>,
    #[doc = " Contact details to assist a user in finding and communicating with the publisher."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " A copyright statement relating to the terminology capabilities and/or its contents. "]
    #[doc = " Copyright statements are generally legal restrictions on the use and publishing of the "]
    #[doc = " terminology capabilities."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,
    #[doc = " The date  (and optionally time) when the terminology capabilities was published. The date "]
    #[doc = " must change when the business version changes and it must change if the status code "]
    #[doc = " changes. In addition, it should change when the substantive content of the terminology "]
    #[doc = " capabilities changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " A free text natural language description of the terminology capabilities from a consumer's "]
    #[doc = " perspective. Typically, this is used when the capability statement describes a desired "]
    #[doc = " rather than an actual solution, for example as a formal expression of requirements as part "]
    #[doc = " of an RFP."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " Information about the [ValueSet/$expand](valueset-operation-expand.html) operation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expansion: Option<TerminologyCapabilitiesExpansion>,
    #[doc = " A Boolean value to indicate that this terminology capabilities is authored for testing "]
    #[doc = " purposes (or education/evaluation/marketing) and is not intended to be used for genuine "]
    #[doc = " usage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Identifies a specific implementation instance that is described by the terminology "]
    #[doc = " capability statement - i.e. a particular installation, rather than the capabilities of a "]
    #[doc = " software program."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub implementation: Option<TerminologyCapabilitiesImplementation>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " A legal or geographic region in which the terminology capabilities is intended to be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,
    #[doc = " The way that this statement is intended to be used, to describe an actual running instance "]
    #[doc = " of software, a particular product (kind, not instance of software) or a class of "]
    #[doc = " implementation (e.g. a desired purchase)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<Code>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " Whether the server supports lockedDate."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lockedDate")]
    pub locked_date: Option<Boolean>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A natural language name identifying the terminology capabilities. This name should be "]
    #[doc = " usable as an identifier for the module by machine processing applications such as code "]
    #[doc = " generation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " The name of the organization or individual that published the terminology capabilities."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
    #[doc = " Explanation of why this terminology capabilities is needed and why it has been designed as "]
    #[doc = " it has."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,
    #[doc = " This is a TerminologyCapabilities resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " Software that is covered by this terminology capability statement.  It is used when the "]
    #[doc = " statement describes the capabilities of a particular software version, independent of an "]
    #[doc = " installation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub software: Option<TerminologyCapabilitiesSoftware>,
    #[doc = " The status of this terminology capabilities. Enables tracking the life-cycle of the "]
    #[doc = " content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " A short, descriptive, user-friendly title for the terminology capabilities."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[doc = " Information about the [ConceptMap/$translate](conceptmap-operation-translate.html) "]
    #[doc = " operation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub translation: Option<TerminologyCapabilitiesTranslation>,
    #[doc = " An absolute URI that is used to identify this terminology capabilities when it is "]
    #[doc = " referenced in a specification, model, design or an instance; also called its canonical "]
    #[doc = " identifier. This SHOULD be globally unique and SHOULD be a literal address at which at "]
    #[doc = " which an authoritative instance of this terminology capabilities is (or will be) published. "]
    #[doc = " This URL can be the target of a canonical reference. It SHALL remain the same when the "]
    #[doc = " terminology capabilities is stored on different servers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
    #[doc = " The content was developed with a focus and intent of supporting the contexts that are "]
    #[doc = " listed. These contexts may be general categories (gender, age, ...) or may be references to "]
    #[doc = " specific programs (insurance plans, studies, ...) and may be used to assist with indexing "]
    #[doc = " and searching for appropriate terminology capabilities instances."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,
    #[doc = " Information about the [ValueSet/$validate-code](valueset-operation-validate-code.html) "]
    #[doc = " operation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "validateCode")]
    pub validate_code: Option<TerminologyCapabilitiesValidateCode>,
    #[doc = " The identifier that is used to identify this version of the terminology capabilities when "]
    #[doc = " it is referenced in a specification, model, design or instance. This is an arbitrary value "]
    #[doc = " managed by the terminology capabilities author and is not expected to be globally unique. "]
    #[doc = " For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. "]
    #[doc = " There is also no expectation that versions can be placed in a lexicographical sequence."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[doc = " A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR "]
#[doc = " Terminology Server that may be used as a statement of actual server functionality or a "]
#[doc = " statement of required or desired server implementation."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TerminologyCapabilities_Closure")]
#[serde(deny_unknown_fields)]
pub struct TerminologyCapabilitiesClosure {
    #[doc = " Extensions for translation"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _translation: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " If cross-system closure is supported."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub translation: Option<Boolean>,
}
#[doc = " A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR "]
#[doc = " Terminology Server that may be used as a statement of actual server functionality or a "]
#[doc = " statement of required or desired server implementation."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TerminologyCapabilities_CodeSystem")]
#[serde(deny_unknown_fields)]
pub struct TerminologyCapabilitiesCodeSystem {
    #[doc = " Extensions for subsumption"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _subsumption: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " True if subsumption is supported for this version of the code system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subsumption: Option<Boolean>,
    #[doc = " URI for the Code System."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub uri: Option<Canonical>,
    #[doc = " For the code system, a list of versions that are supported by the server."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<Vec<TerminologyCapabilitiesVersion>>,
}
#[doc = " A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR "]
#[doc = " Terminology Server that may be used as a statement of actual server functionality or a "]
#[doc = " statement of required or desired server implementation."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TerminologyCapabilities_Expansion")]
#[serde(deny_unknown_fields)]
pub struct TerminologyCapabilitiesExpansion {
    #[doc = " Extensions for hierarchical"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _hierarchical: Option<Element>,
    #[doc = " Extensions for incomplete"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _incomplete: Option<Element>,
    #[doc = " Extensions for paging"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _paging: Option<Element>,
    #[doc = " Extensions for textFilter"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_textFilter")]
    pub _text_filter: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Whether the server can return nested value sets."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub hierarchical: Option<Boolean>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Allow request for incomplete expansions?"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub incomplete: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Whether the server supports paging on expansion."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub paging: Option<Boolean>,
    #[doc = " Supported expansion parameter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub parameter: Option<Vec<TerminologyCapabilitiesParameter>>,
    #[doc = " Documentation about text searching works."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "textFilter")]
    pub text_filter: Option<Markdown>,
}
#[doc = " A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR "]
#[doc = " Terminology Server that may be used as a statement of actual server functionality or a "]
#[doc = " statement of required or desired server implementation."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TerminologyCapabilities_Filter")]
#[serde(deny_unknown_fields)]
pub struct TerminologyCapabilitiesFilter {
    #[doc = " Extensions for code"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _code: Option<Element>,
    #[doc = " Extensions for op"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _op: Option<Vec<Element>>,
    #[doc = " Code of the property supported."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Operations supported for the property."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub op: Option<Vec<Code>>,
}
#[doc = " A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR "]
#[doc = " Terminology Server that may be used as a statement of actual server functionality or a "]
#[doc = " statement of required or desired server implementation."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TerminologyCapabilities_Implementation")]
#[serde(deny_unknown_fields)]
pub struct TerminologyCapabilitiesImplementation {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " Information about the specific installation that this terminology capability statement "]
    #[doc = " relates to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " An absolute base URL for the implementation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Url>,
}
#[doc = " A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR "]
#[doc = " Terminology Server that may be used as a statement of actual server functionality or a "]
#[doc = " statement of required or desired server implementation."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TerminologyCapabilities_Parameter")]
#[serde(deny_unknown_fields)]
pub struct TerminologyCapabilitiesParameter {
    #[doc = " Extensions for documentation"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _documentation: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Description of support for parameter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub documentation: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Expansion Parameter name."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<Code>,
}
#[doc = " A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR "]
#[doc = " Terminology Server that may be used as a statement of actual server functionality or a "]
#[doc = " statement of required or desired server implementation."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TerminologyCapabilities_Software")]
#[serde(deny_unknown_fields)]
pub struct TerminologyCapabilitiesSoftware {
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Name the software is known by."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " The version identifier for the software covered by this statement."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[doc = " A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR "]
#[doc = " Terminology Server that may be used as a statement of actual server functionality or a "]
#[doc = " statement of required or desired server implementation."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TerminologyCapabilities_Translation")]
#[serde(deny_unknown_fields)]
pub struct TerminologyCapabilitiesTranslation {
    #[doc = " Extensions for needsMap"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_needsMap")]
    pub _needs_map: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Whether the client must identify the map."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "needsMap")]
    pub needs_map: Option<Boolean>,
}
#[doc = " A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR "]
#[doc = " Terminology Server that may be used as a statement of actual server functionality or a "]
#[doc = " statement of required or desired server implementation."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TerminologyCapabilities_ValidateCode")]
#[serde(deny_unknown_fields)]
pub struct TerminologyCapabilitiesValidateCode {
    #[doc = " Extensions for translations"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _translations: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Whether translations are validated."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub translations: Option<Boolean>,
}
#[doc = " A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR "]
#[doc = " Terminology Server that may be used as a statement of actual server functionality or a "]
#[doc = " statement of required or desired server implementation."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TerminologyCapabilities_Version")]
#[serde(deny_unknown_fields)]
pub struct TerminologyCapabilitiesVersion {
    #[doc = " Extensions for code"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _code: Option<Element>,
    #[doc = " Extensions for compositional"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _compositional: Option<Element>,
    #[doc = " Extensions for isDefault"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_isDefault")]
    pub _is_default: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Vec<Element>>,
    #[doc = " Extensions for property"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _property: Option<Vec<Element>>,
    #[doc = " For version-less code systems, there should be a single version with no identifier."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    #[doc = " If the compositional grammar defined by the code system is supported."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub compositional: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Filter Properties supported."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub filter: Option<Vec<TerminologyCapabilitiesFilter>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " If this is the default version for this code system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "isDefault")]
    pub is_default: Option<Boolean>,
    #[doc = " Language Displays supported."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Vec<Code>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Properties supported for $lookup."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub property: Option<Vec<Code>>,
}
#[doc = " A summary of information based on the results of executing a TestScript."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct TestReport {
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for issued"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _issued: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for result"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _result: Option<Element>,
    #[doc = " Extensions for score"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _score: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for tester"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _tester: Option<Element>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Identifier for the TestScript assigned for external purposes outside the context of FHIR."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " When the TestScript was executed and this TestReport was generated."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub issued: Option<DateTime>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A free text natural language name identifying the executed TestScript."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " A participant in the test execution, either the execution engine, a client, or a server."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub participant: Option<Vec<TestReportParticipant>>,
    #[doc = " This is a TestReport resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The overall result from the execution of the TestScript."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub result: Option<Code>,
    #[doc = " The final score (percentage of tests passed) resulting from the execution of the "]
    #[doc = " TestScript."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub score: Option<Decimal>,
    #[doc = " The results of the series of required setup operations before the tests were executed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub setup: Option<TestReportSetup>,
    #[doc = " The current state of this test report."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " The results of the series of operations required to clean up after all the tests were "]
    #[doc = " executed (successfully or otherwise)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub teardown: Option<TestReportTeardown>,
    #[doc = " A test executed from the test script."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub test: Option<Vec<TestReportTest>>,
    #[doc = " Ideally this is an absolute URL that is used to identify the version-specific TestScript "]
    #[doc = " that was executed, matching the `TestScript.url`."]
    #[serde(rename = "testScript")]
    pub test_script: Reference,
    #[doc = " Name of the tester producing this report (Organization or individual)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tester: Option<String>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " A summary of information based on the results of executing a TestScript."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TestReport_Action")]
#[serde(deny_unknown_fields)]
pub struct TestReportAction {
    #[doc = " The results of the assertion performed on the previous operations."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub assert: Option<TestReportAssert>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The operation performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub operation: Option<TestReportOperation>,
}
#[doc = " A summary of information based on the results of executing a TestScript."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TestReport_Action1")]
#[serde(deny_unknown_fields)]
pub struct TestReportAction1 {
    #[doc = " The results of the assertion performed on the previous operations."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub assert: Option<TestReportAssert>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " An operation would involve a REST request to a server."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub operation: Option<TestReportOperation>,
}
#[doc = " A summary of information based on the results of executing a TestScript."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "TestReport_Action2")]
#[serde(deny_unknown_fields)]
pub struct TestReportAction2 {
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " An operation would involve a REST request to a server."]
    pub operation: TestReportOperation,
}
#[doc = " A summary of information based on the results of executing a TestScript."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TestReport_Assert")]
#[serde(deny_unknown_fields)]
pub struct TestReportAssert {
    #[doc = " Extensions for detail"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _detail: Option<Element>,
    #[doc = " Extensions for message"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _message: Option<Element>,
    #[doc = " Extensions for result"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _result: Option<Element>,
    #[doc = " A link to further details on the result."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub detail: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " An explanatory message associated with the result."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub message: Option<Markdown>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The result of this assertion."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub result: Option<Code>,
}
#[doc = " A summary of information based on the results of executing a TestScript."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TestReport_Operation")]
#[serde(deny_unknown_fields)]
pub struct TestReportOperation {
    #[doc = " Extensions for detail"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _detail: Option<Element>,
    #[doc = " Extensions for message"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _message: Option<Element>,
    #[doc = " Extensions for result"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _result: Option<Element>,
    #[doc = " A link to further details on the result."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub detail: Option<Uri>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " An explanatory message associated with the result."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub message: Option<Markdown>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The result of this operation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub result: Option<Code>,
}
#[doc = " A summary of information based on the results of executing a TestScript."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TestReport_Participant")]
#[serde(deny_unknown_fields)]
pub struct TestReportParticipant {
    #[doc = " Extensions for display"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _display: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " Extensions for uri"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _uri: Option<Element>,
    #[doc = " The display name of the participant."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The type of participant."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
    #[doc = " The uri of the participant. An absolute URL is preferred."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub uri: Option<Uri>,
}
#[doc = " A summary of information based on the results of executing a TestScript."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "TestReport_Setup")]
#[serde(deny_unknown_fields)]
pub struct TestReportSetup {
    #[doc = " Action would contain either an operation or an assertion."]
    pub action: Vec<TestReportAction>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " A summary of information based on the results of executing a TestScript."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "TestReport_Teardown")]
#[serde(deny_unknown_fields)]
pub struct TestReportTeardown {
    #[doc = " The teardown action will only contain an operation."]
    pub action: Vec<TestReportAction2>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " A summary of information based on the results of executing a TestScript."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "TestReport_Test")]
#[serde(deny_unknown_fields)]
pub struct TestReportTest {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Action would contain either an operation or an assertion."]
    pub action: Vec<TestReportAction1>,
    #[doc = " A short description of the test used by test engines for tracking and reporting purposes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The name of this test used for tracking/logging purposes by test engines."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[doc = " A structured set of tests against a FHIR server or client implementation to determine "]
#[doc = " compliance against the FHIR specification."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct TestScript {
    #[doc = " Extensions for copyright"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _copyright: Option<Element>,
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for experimental"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _experimental: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for publisher"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _publisher: Option<Element>,
    #[doc = " Extensions for purpose"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _purpose: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " Contact details to assist a user in finding and communicating with the publisher."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " A copyright statement relating to the test script and/or its contents. Copyright statements "]
    #[doc = " are generally legal restrictions on the use and publishing of the test script."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,
    #[doc = " The date  (and optionally time) when the test script was published. The date must change "]
    #[doc = " when the business version changes and it must change if the status code changes. In "]
    #[doc = " addition, it should change when the substantive content of the test script changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " A free text natural language description of the test script from a consumer's perspective."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " An abstract server used in operations within this test script in the destination element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub destination: Option<Vec<TestScriptDestination>>,
    #[doc = " A Boolean value to indicate that this test script is authored for testing purposes (or "]
    #[doc = " education/evaluation/marketing) and is not intended to be used for genuine usage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Fixture in the test script - by reference (uri). All fixtures are required for the test "]
    #[doc = " script to execute."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub fixture: Option<Vec<TestScriptFixture>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A formal identifier that is used to identify this test script when it is represented in "]
    #[doc = " other formats, or referenced in a specification, model, design or an instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " A legal or geographic region in which the test script is intended to be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " The required capability must exist and are assumed to function correctly on the FHIR server "]
    #[doc = " being tested."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub metadata: Option<TestScriptMetadata>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A natural language name identifying the test script. This name should be usable as an "]
    #[doc = " identifier for the module by machine processing applications such as code generation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " An abstract server used in operations within this test script in the origin element."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub origin: Option<Vec<TestScriptOrigin>>,
    #[doc = " Reference to the profile to be used for validation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub profile: Option<Vec<Reference>>,
    #[doc = " The name of the organization or individual that published the test script."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
    #[doc = " Explanation of why this test script is needed and why it has been designed as it has."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,
    #[doc = " This is a TestScript resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " A series of required setup operations before tests are executed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub setup: Option<TestScriptSetup>,
    #[doc = " The status of this test script. Enables tracking the life-cycle of the content."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A series of operations required to clean up after all the tests are executed (successfully "]
    #[doc = " or otherwise)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub teardown: Option<TestScriptTeardown>,
    #[doc = " A test in this script."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub test: Option<Vec<TestScriptTest>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " A short, descriptive, user-friendly title for the test script."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[doc = " An absolute URI that is used to identify this test script when it is referenced in a "]
    #[doc = " specification, model, design or an instance; also called its canonical identifier. This "]
    #[doc = " SHOULD be globally unique and SHOULD be a literal address at which at which an "]
    #[doc = " authoritative instance of this test script is (or will be) published. This URL can be the "]
    #[doc = " target of a canonical reference. It SHALL remain the same when the test script is stored on "]
    #[doc = " different servers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
    #[doc = " The content was developed with a focus and intent of supporting the contexts that are "]
    #[doc = " listed. These contexts may be general categories (gender, age, ...) or may be references to "]
    #[doc = " specific programs (insurance plans, studies, ...) and may be used to assist with indexing "]
    #[doc = " and searching for appropriate test script instances."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,
    #[doc = " Variable is set based either on element value in response body or on header field value in "]
    #[doc = " the response headers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub variable: Option<Vec<TestScriptVariable>>,
    #[doc = " The identifier that is used to identify this version of the test script when it is "]
    #[doc = " referenced in a specification, model, design or instance. This is an arbitrary value "]
    #[doc = " managed by the test script author and is not expected to be globally unique. For example, "]
    #[doc = " it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is "]
    #[doc = " also no expectation that versions can be placed in a lexicographical sequence."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[doc = " A structured set of tests against a FHIR server or client implementation to determine "]
#[doc = " compliance against the FHIR specification."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TestScript_Action")]
#[serde(deny_unknown_fields)]
pub struct TestScriptAction {
    #[doc = " Evaluates the results of previous operations to determine if the server under test behaves "]
    #[doc = " appropriately."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub assert: Option<TestScriptAssert>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The operation to perform."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub operation: Option<TestScriptOperation>,
}
#[doc = " A structured set of tests against a FHIR server or client implementation to determine "]
#[doc = " compliance against the FHIR specification."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TestScript_Action1")]
#[serde(deny_unknown_fields)]
pub struct TestScriptAction1 {
    #[doc = " Evaluates the results of previous operations to determine if the server under test behaves "]
    #[doc = " appropriately."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub assert: Option<TestScriptAssert>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " An operation would involve a REST request to a server."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub operation: Option<TestScriptOperation>,
}
#[doc = " A structured set of tests against a FHIR server or client implementation to determine "]
#[doc = " compliance against the FHIR specification."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "TestScript_Action2")]
#[serde(deny_unknown_fields)]
pub struct TestScriptAction2 {
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " An operation would involve a REST request to a server."]
    pub operation: TestScriptOperation,
}
#[doc = " A structured set of tests against a FHIR server or client implementation to determine "]
#[doc = " compliance against the FHIR specification."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TestScript_Assert")]
#[serde(deny_unknown_fields)]
pub struct TestScriptAssert {
    #[doc = " Extensions for compareToSourceExpression"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_compareToSourceExpression")]
    pub _compare_to_source_expression: Option<Element>,
    #[doc = " Extensions for compareToSourceId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_compareToSourceId")]
    pub _compare_to_source_id: Option<Element>,
    #[doc = " Extensions for compareToSourcePath"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_compareToSourcePath")]
    pub _compare_to_source_path: Option<Element>,
    #[doc = " Extensions for contentType"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_contentType")]
    pub _content_type: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for direction"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _direction: Option<Element>,
    #[doc = " Extensions for expression"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _expression: Option<Element>,
    #[doc = " Extensions for headerField"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_headerField")]
    pub _header_field: Option<Element>,
    #[doc = " Extensions for label"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _label: Option<Element>,
    #[doc = " Extensions for minimumId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_minimumId")]
    pub _minimum_id: Option<Element>,
    #[doc = " Extensions for navigationLinks"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_navigationLinks")]
    pub _navigation_links: Option<Element>,
    #[doc = " Extensions for operator"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _operator: Option<Element>,
    #[doc = " Extensions for path"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _path: Option<Element>,
    #[doc = " Extensions for requestMethod"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_requestMethod")]
    pub _request_method: Option<Element>,
    #[doc = " Extensions for requestURL"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_requestURL")]
    pub _request_url: Option<Element>,
    #[doc = " Extensions for resource"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _resource: Option<Element>,
    #[doc = " Extensions for response"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _response: Option<Element>,
    #[doc = " Extensions for responseCode"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_responseCode")]
    pub _response_code: Option<Element>,
    #[doc = " Extensions for sourceId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sourceId")]
    pub _source_id: Option<Element>,
    #[doc = " Extensions for validateProfileId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_validateProfileId")]
    pub _validate_profile_id: Option<Element>,
    #[doc = " Extensions for value"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _value: Option<Element>,
    #[doc = " Extensions for warningOnly"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_warningOnly")]
    pub _warning_only: Option<Element>,
    #[doc = " The FHIRPath expression to evaluate against the source fixture. When compareToSourceId is "]
    #[doc = " defined, either compareToSourceExpression or compareToSourcePath must be defined, but not "]
    #[doc = " both."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "compareToSourceExpression")]
    pub compare_to_source_expression: Option<String>,
    #[doc = " Id of the source fixture used as the contents to be evaluated by either the "]
    #[doc = " \"source/expression\" or \"sourceId/path\" definition."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "compareToSourceId")]
    pub compare_to_source_id: Option<String>,
    #[doc = " XPath or JSONPath expression to evaluate against the source fixture. When compareToSourceId "]
    #[doc = " is defined, either compareToSourceExpression or compareToSourcePath must be defined, but "]
    #[doc = " not both."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "compareToSourcePath")]
    pub compare_to_source_path: Option<String>,
    #[doc = " The mime-type contents to compare against the request or response message 'Content-Type' "]
    #[doc = " header."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contentType")]
    pub content_type: Option<Code>,
    #[doc = " The description would be used by test engines for tracking and reporting purposes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " The direction to use for the assertion."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub direction: Option<Code>,
    #[doc = " The FHIRPath expression to be evaluated against the request or response message contents - "]
    #[doc = " HTTP headers and payload."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The HTTP header field name e.g. 'Location'."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "headerField")]
    pub header_field: Option<String>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The label would be used for tracking/logging purposes by test engines."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    #[doc = " The ID of a fixture.  Asserts that the response contains at a minimum the fixture specified "]
    #[doc = " by minimumId."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "minimumId")]
    pub minimum_id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Whether or not the test execution performs validation on the bundle navigation links."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "navigationLinks")]
    pub navigation_links: Option<Boolean>,
    #[doc = " The operator type defines the conditional behavior of the assert. If not defined, the "]
    #[doc = " default is equals."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub operator: Option<Code>,
    #[doc = " The XPath or JSONPath expression to be evaluated against the fixture representing the "]
    #[doc = " response received from server."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[doc = " The request method or HTTP operation code to compare against that used by the client system "]
    #[doc = " under test."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "requestMethod")]
    pub request_method: Option<Code>,
    #[doc = " The value to use in a comparison against the request URL path string."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "requestURL")]
    pub request_url: Option<String>,
    #[doc = " The type of the resource.  See http://build.fhir.org/resourcelist.html."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource: Option<Code>,
    #[doc = " okay | created | noContent | notModified | bad | forbidden | notFound | methodNotAllowed | "]
    #[doc = " conflict | gone | preconditionFailed | unprocessable."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub response: Option<Code>,
    #[doc = " The value of the HTTP response code to be tested."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "responseCode")]
    pub response_code: Option<String>,
    #[doc = " Fixture to evaluate the XPath/JSONPath expression or the headerField  against."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "sourceId")]
    pub source_id: Option<Id>,
    #[doc = " The ID of the Profile to validate against."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "validateProfileId")]
    pub validate_profile_id: Option<Id>,
    #[doc = " The value to compare to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[doc = " Whether or not the test execution will produce a warning only on error for this assert."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "warningOnly")]
    pub warning_only: Option<Boolean>,
}
#[doc = " A structured set of tests against a FHIR server or client implementation to determine "]
#[doc = " compliance against the FHIR specification."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "TestScript_Capability")]
#[serde(deny_unknown_fields)]
pub struct TestScriptCapability {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for destination"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _destination: Option<Element>,
    #[doc = " Extensions for link"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _link: Option<Vec<Element>>,
    #[doc = " Extensions for origin"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _origin: Option<Vec<Element>>,
    #[doc = " Extensions for required"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _required: Option<Element>,
    #[doc = " Extensions for validated"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _validated: Option<Element>,
    #[doc = " Minimum capabilities required of server for test script to execute successfully.   If "]
    #[doc = " server does not meet at a minimum the referenced capability statement, then all tests in "]
    #[doc = " this script are skipped."]
    pub capabilities: Canonical,
    #[doc = " Description of the capabilities that this test script is requiring the server to support."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " Which server these requirements apply to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub destination: Option<Integer>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Links to the FHIR specification that describes this interaction and the resources involved "]
    #[doc = " in more detail."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub link: Option<Vec<Uri>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Which origin server these requirements apply to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub origin: Option<Vec<Integer>>,
    #[doc = " Whether or not the test execution will require the given capabilities of the server in "]
    #[doc = " order for this test script to execute."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub required: Option<Boolean>,
    #[doc = " Whether or not the test execution will validate the given capabilities of the server in "]
    #[doc = " order for this test script to execute."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub validated: Option<Boolean>,
}
#[doc = " A structured set of tests against a FHIR server or client implementation to determine "]
#[doc = " compliance against the FHIR specification."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "TestScript_Destination")]
#[serde(deny_unknown_fields)]
pub struct TestScriptDestination {
    #[doc = " Extensions for index"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _index: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Abstract name given to a destination server in this test script.  The name is provided as a "]
    #[doc = " number starting at 1."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub index: Option<Integer>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The type of destination profile the test system supports."]
    pub profile: Coding,
}
#[doc = " A structured set of tests against a FHIR server or client implementation to determine "]
#[doc = " compliance against the FHIR specification."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TestScript_Fixture")]
#[serde(deny_unknown_fields)]
pub struct TestScriptFixture {
    #[doc = " Extensions for autocreate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _autocreate: Option<Element>,
    #[doc = " Extensions for autodelete"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _autodelete: Option<Element>,
    #[doc = " Whether or not to implicitly create the fixture during setup. If true, the fixture is "]
    #[doc = " automatically created on each server being tested during setup, therefore no create "]
    #[doc = " operation is required for this fixture in the TestScript.setup section."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub autocreate: Option<Boolean>,
    #[doc = " Whether or not to implicitly delete the fixture during teardown. If true, the fixture is "]
    #[doc = " automatically deleted on each server being tested during teardown, therefore no delete "]
    #[doc = " operation is required for this fixture in the TestScript.teardown section."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub autodelete: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Reference to the resource (containing the contents of the resource needed for operations)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource: Option<Reference>,
}
#[doc = " A structured set of tests against a FHIR server or client implementation to determine "]
#[doc = " compliance against the FHIR specification."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TestScript_Link")]
#[serde(deny_unknown_fields)]
pub struct TestScriptLink {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " Short description of the link."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " URL to a particular requirement or feature within the FHIR specification."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
}
#[doc = " A structured set of tests against a FHIR server or client implementation to determine "]
#[doc = " compliance against the FHIR specification."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "TestScript_Metadata")]
#[serde(deny_unknown_fields)]
pub struct TestScriptMetadata {
    #[doc = " Capabilities that must exist and are assumed to function correctly on the FHIR server being "]
    #[doc = " tested."]
    pub capability: Vec<TestScriptCapability>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A link to the FHIR specification that this test is covering."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub link: Option<Vec<TestScriptLink>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " A structured set of tests against a FHIR server or client implementation to determine "]
#[doc = " compliance against the FHIR specification."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TestScript_Operation")]
#[serde(deny_unknown_fields)]
pub struct TestScriptOperation {
    #[doc = " Extensions for accept"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _accept: Option<Element>,
    #[doc = " Extensions for contentType"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_contentType")]
    pub _content_type: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for destination"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _destination: Option<Element>,
    #[doc = " Extensions for encodeRequestUrl"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_encodeRequestUrl")]
    pub _encode_request_url: Option<Element>,
    #[doc = " Extensions for label"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _label: Option<Element>,
    #[doc = " Extensions for method"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _method: Option<Element>,
    #[doc = " Extensions for origin"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _origin: Option<Element>,
    #[doc = " Extensions for params"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _params: Option<Element>,
    #[doc = " Extensions for requestId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_requestId")]
    pub _request_id: Option<Element>,
    #[doc = " Extensions for resource"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _resource: Option<Element>,
    #[doc = " Extensions for responseId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_responseId")]
    pub _response_id: Option<Element>,
    #[doc = " Extensions for sourceId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sourceId")]
    pub _source_id: Option<Element>,
    #[doc = " Extensions for targetId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_targetId")]
    pub _target_id: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " The mime-type to use for RESTful operation in the 'Accept' header."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub accept: Option<Code>,
    #[doc = " The mime-type to use for RESTful operation in the 'Content-Type' header."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contentType")]
    pub content_type: Option<Code>,
    #[doc = " The description would be used by test engines for tracking and reporting purposes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " The server where the request message is destined for.  Must be one of the server numbers "]
    #[doc = " listed in TestScript.destination section."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub destination: Option<Integer>,
    #[doc = " Whether or not to implicitly send the request url in encoded format. The default is true to "]
    #[doc = " match the standard RESTful client behavior. Set to false when communicating with a server "]
    #[doc = " that does not support encoded url paths."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "encodeRequestUrl")]
    pub encode_request_url: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The label would be used for tracking/logging purposes by test engines."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    #[doc = " The HTTP method the test engine MUST use for this operation regardless of any other "]
    #[doc = " operation details."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub method: Option<Code>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The server where the request message originates from.  Must be one of the server numbers "]
    #[doc = " listed in TestScript.origin section."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub origin: Option<Integer>,
    #[doc = " Path plus parameters after [type].  Used to set parts of the request URL explicitly."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub params: Option<String>,
    #[doc = " Header elements would be used to set HTTP headers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "requestHeader")]
    pub request_header: Option<Vec<TestScriptRequestHeader>>,
    #[doc = " The fixture id (maybe new) to map to the request."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "requestId")]
    pub request_id: Option<Id>,
    #[doc = " The type of the resource.  See http://build.fhir.org/resourcelist.html."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource: Option<Code>,
    #[doc = " The fixture id (maybe new) to map to the response."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "responseId")]
    pub response_id: Option<Id>,
    #[doc = " The id of the fixture used as the body of a PUT or POST request."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "sourceId")]
    pub source_id: Option<Id>,
    #[doc = " Id of fixture used for extracting the [id],  [type], and [vid] for GET requests."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetId")]
    pub target_id: Option<Id>,
    #[doc = " Server interaction or operation type."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Coding>,
    #[doc = " Complete request URL."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[doc = " A structured set of tests against a FHIR server or client implementation to determine "]
#[doc = " compliance against the FHIR specification."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "TestScript_Origin")]
#[serde(deny_unknown_fields)]
pub struct TestScriptOrigin {
    #[doc = " Extensions for index"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _index: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Abstract name given to an origin server in this test script.  The name is provided as a "]
    #[doc = " number starting at 1."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub index: Option<Integer>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The type of origin profile the test system supports."]
    pub profile: Coding,
}
#[doc = " A structured set of tests against a FHIR server or client implementation to determine "]
#[doc = " compliance against the FHIR specification."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TestScript_RequestHeader")]
#[serde(deny_unknown_fields)]
pub struct TestScriptRequestHeader {
    #[doc = " Extensions for field"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _field: Option<Element>,
    #[doc = " Extensions for value"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _value: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The HTTP header field e.g. \"Accept\"."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub field: Option<String>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The value of the header e.g. \"application/fhir+xml\"."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[doc = " A structured set of tests against a FHIR server or client implementation to determine "]
#[doc = " compliance against the FHIR specification."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "TestScript_Setup")]
#[serde(deny_unknown_fields)]
pub struct TestScriptSetup {
    #[doc = " Action would contain either an operation or an assertion."]
    pub action: Vec<TestScriptAction>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " A structured set of tests against a FHIR server or client implementation to determine "]
#[doc = " compliance against the FHIR specification."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "TestScript_Teardown")]
#[serde(deny_unknown_fields)]
pub struct TestScriptTeardown {
    #[doc = " The teardown action will only contain an operation."]
    pub action: Vec<TestScriptAction2>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " A structured set of tests against a FHIR server or client implementation to determine "]
#[doc = " compliance against the FHIR specification."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "TestScript_Test")]
#[serde(deny_unknown_fields)]
pub struct TestScriptTest {
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Action would contain either an operation or an assertion."]
    pub action: Vec<TestScriptAction1>,
    #[doc = " A short description of the test used by test engines for tracking and reporting purposes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The name of this test used for tracking/logging purposes by test engines."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[doc = " A structured set of tests against a FHIR server or client implementation to determine "]
#[doc = " compliance against the FHIR specification."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TestScript_Variable")]
#[serde(deny_unknown_fields)]
pub struct TestScriptVariable {
    #[doc = " Extensions for defaultValue"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValue")]
    pub _default_value: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for expression"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _expression: Option<Element>,
    #[doc = " Extensions for headerField"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_headerField")]
    pub _header_field: Option<Element>,
    #[doc = " Extensions for hint"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _hint: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for path"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _path: Option<Element>,
    #[doc = " Extensions for sourceId"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sourceId")]
    pub _source_id: Option<Element>,
    #[doc = " A default, hard-coded, or user-defined value for this variable."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValue")]
    pub default_value: Option<String>,
    #[doc = " A free text natural language description of the variable and its purpose."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = " The FHIRPath expression to evaluate against the fixture body. When variables are defined, "]
    #[doc = " only one of either expression, headerField or path must be specified."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Will be used to grab the HTTP header field value from the headers that sourceId is pointing "]
    #[doc = " to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "headerField")]
    pub header_field: Option<String>,
    #[doc = " Displayable text string with hint help information to the user when entering a default "]
    #[doc = " value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub hint: Option<String>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Descriptive name for this variable."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " XPath or JSONPath to evaluate against the fixture body.  When variables are defined, only "]
    #[doc = " one of either expression, headerField or path must be specified."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[doc = " Fixture to evaluate the XPath/JSONPath expression or the headerField  against within this "]
    #[doc = " variable."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "sourceId")]
    pub source_id: Option<Id>,
}
#[doc = " Specifies an event that may occur multiple times. Timing schedules are used to record when "]
#[doc = " things are planned, expected or requested to occur. The most common usage is in dosage "]
#[doc = " instructions for medications. They are also used when planning care of various kinds, and may "]
#[doc = " be used for reporting the schedule to which past regular activities were carried out."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Timing {
    #[doc = " Extensions for event"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _event: Option<Vec<Element>>,
    #[doc = " A code for the timing schedule (or just text in code.text). Some codes such as BID are "]
    #[doc = " ubiquitous, but many institutions define their own additional codes. If a code is provided, "]
    #[doc = " the code is understood to be a complete statement of whatever is specified in the "]
    #[doc = " structured timing data, and either the code or the data may be used to interpret the "]
    #[doc = " Timing, with the exception that .repeat.bounds still applies over the code (and is not "]
    #[doc = " contained in the code)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,
    #[doc = " Identifies specific times when the event occurs."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub event: Option<Vec<DateTime>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A set of rules that describe when the event is scheduled."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub repeat: Option<TimingRepeat>,
}
#[doc = " Specifies an event that may occur multiple times. Timing schedules are used to record when "]
#[doc = " things are planned, expected or requested to occur. The most common usage is in dosage "]
#[doc = " instructions for medications. They are also used when planning care of various kinds, and may "]
#[doc = " be used for reporting the schedule to which past regular activities were carried out."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Timing_Repeat")]
#[serde(deny_unknown_fields)]
pub struct TimingRepeat {
    #[doc = " Extensions for count"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _count: Option<Element>,
    #[doc = " Extensions for countMax"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_countMax")]
    pub _count_max: Option<Element>,
    #[doc = " Extensions for dayOfWeek"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_dayOfWeek")]
    pub _day_of_week: Option<Vec<Element>>,
    #[doc = " Extensions for duration"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _duration: Option<Element>,
    #[doc = " Extensions for durationMax"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_durationMax")]
    pub _duration_max: Option<Element>,
    #[doc = " Extensions for durationUnit"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_durationUnit")]
    pub _duration_unit: Option<Element>,
    #[doc = " Extensions for frequency"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _frequency: Option<Element>,
    #[doc = " Extensions for frequencyMax"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_frequencyMax")]
    pub _frequency_max: Option<Element>,
    #[doc = " Extensions for offset"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _offset: Option<Element>,
    #[doc = " Extensions for period"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _period: Option<Element>,
    #[doc = " Extensions for periodMax"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_periodMax")]
    pub _period_max: Option<Element>,
    #[doc = " Extensions for periodUnit"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_periodUnit")]
    pub _period_unit: Option<Element>,
    #[doc = " Extensions for timeOfDay"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_timeOfDay")]
    pub _time_of_day: Option<Vec<Element>>,
    #[doc = " Extensions for when"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _when: Option<Vec<Element>>,
    #[doc = " Either a duration for the length of the timing schedule, a range of possible length, or "]
    #[doc = " outer bounds for start and/or end limits of the timing schedule."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "boundsDuration")]
    pub bounds_duration: Option<Duration>,
    #[doc = " Either a duration for the length of the timing schedule, a range of possible length, or "]
    #[doc = " outer bounds for start and/or end limits of the timing schedule."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "boundsPeriod")]
    pub bounds_period: Option<Period>,
    #[doc = " Either a duration for the length of the timing schedule, a range of possible length, or "]
    #[doc = " outer bounds for start and/or end limits of the timing schedule."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "boundsRange")]
    pub bounds_range: Option<Range>,
    #[doc = " A total count of the desired number of repetitions across the duration of the entire timing "]
    #[doc = " specification. If countMax is present, this element indicates the lower bound of the "]
    #[doc = " allowed range of count values."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub count: Option<PositiveInt>,
    #[doc = " If present, indicates that the count is a range - so to perform the action between [count] "]
    #[doc = " and [countMax] times."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "countMax")]
    pub count_max: Option<PositiveInt>,
    #[doc = " If one or more days of week is provided, then the action happens only on the specified "]
    #[doc = " day(s)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dayOfWeek")]
    pub day_of_week: Option<Vec<Code>>,
    #[doc = " How long this thing happens for when it happens. If durationMax is present, this element "]
    #[doc = " indicates the lower bound of the allowed range of the duration."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub duration: Option<Decimal>,
    #[doc = " If present, indicates that the duration is a range - so to perform the action between "]
    #[doc = " [duration] and [durationMax] time length."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "durationMax")]
    pub duration_max: Option<Decimal>,
    #[doc = " The units of time for the duration, in UCUM units."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "durationUnit")]
    pub duration_unit: Option<serde_json::Value>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The number of times to repeat the action within the specified period. If frequencyMax is "]
    #[doc = " present, this element indicates the lower bound of the allowed range of the frequency."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub frequency: Option<PositiveInt>,
    #[doc = " If present, indicates that the frequency is a range - so to repeat between [frequency] and "]
    #[doc = " [frequencyMax] times within the period or period range."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "frequencyMax")]
    pub frequency_max: Option<PositiveInt>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The number of minutes from the event. If the event code does not indicate whether the "]
    #[doc = " minutes is before or after the event, then the offset is assumed to be after the event."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub offset: Option<UnsignedInt>,
    #[doc = " Indicates the duration of time over which repetitions are to occur; e.g. to express \"3 "]
    #[doc = " times per day\", 3 would be the frequency and \"1 day\" would be the period. If periodMax is "]
    #[doc = " present, this element indicates the lower bound of the allowed range of the period length."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Decimal>,
    #[doc = " If present, indicates that the period is a range from [period] to [periodMax], allowing "]
    #[doc = " expressing concepts such as \"do this once every 3-5 days."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "periodMax")]
    pub period_max: Option<Decimal>,
    #[doc = " The units of time for the period in UCUM units."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "periodUnit")]
    pub period_unit: Option<serde_json::Value>,
    #[doc = " Specified time of day for action to take place."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timeOfDay")]
    pub time_of_day: Option<Vec<Time>>,
    #[doc = " An approximate time period during the day, potentially linked to an event of daily living "]
    #[doc = " that indicates when the action should occur."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub when: Option<Vec<serde_json::Value>>,
}
#[doc = " A description of a triggering event. Triggering events can be named events, data events, or "]
#[doc = " periodic, as determined by the type element."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct TriggerDefinition {
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for timingDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_timingDate")]
    pub _timing_date: Option<Element>,
    #[doc = " Extensions for timingDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_timingDateTime")]
    pub _timing_date_time: Option<Element>,
    #[doc = " Extensions for type"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _type: Option<Element>,
    #[doc = " A boolean-valued expression that is evaluated in the context of the container of the "]
    #[doc = " trigger definition and returns whether or not the trigger fires."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub condition: Option<Expression>,
    #[doc = " The triggering data of the event (if this is a data trigger). If more than one data is "]
    #[doc = " requirement is specified, then all the data requirements must be true."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub data: Option<Vec<DataRequirement>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A formal name for the event. This may be an absolute URI that identifies the event formally "]
    #[doc = " (e.g. from a trigger registry), or a simple relative URI that identifies the event in a "]
    #[doc = " local context."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " The timing of the event (if this is a periodic trigger)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingDate")]
    pub timing_date: Option<String>,
    #[doc = " The timing of the event (if this is a periodic trigger)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingDateTime")]
    pub timing_date_time: Option<String>,
    #[doc = " The timing of the event (if this is a periodic trigger)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingReference")]
    pub timing_reference: Option<Reference>,
    #[doc = " The timing of the event (if this is a periodic trigger)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingTiming")]
    pub timing_timing: Option<Timing>,
    #[doc = " The type of triggering event."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<serde_json::Value>,
}
#[doc = " Specifies clinical/business/etc. metadata that can be used to retrieve, index and/or categorize "]
#[doc = " an artifact. This metadata can either be specific to the applicable population (e.g., age "]
#[doc = " category, DRG) or the specific context of care (e.g., venue, care setting, provider of care)."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct UsageContext {
    #[doc = " A code that identifies the type of context being specified by this usage context."]
    pub code: Coding,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A value that defines the context specified in this context of use. The interpretation of "]
    #[doc = " the value is defined by the code."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,
    #[doc = " A value that defines the context specified in this context of use. The interpretation of "]
    #[doc = " the value is defined by the code."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,
    #[doc = " A value that defines the context specified in this context of use. The interpretation of "]
    #[doc = " the value is defined by the code."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRange")]
    pub value_range: Option<Range>,
    #[doc = " A value that defines the context specified in this context of use. The interpretation of "]
    #[doc = " the value is defined by the code."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueReference")]
    pub value_reference: Option<Reference>,
}
#[doc = " A ValueSet resource instance specifies a set of codes drawn from one or more code systems, "]
#[doc = " intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) "]
#[doc = " definitions and their use in [coded elements](terminologies.html)."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ValueSet {
    #[doc = " Extensions for copyright"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _copyright: Option<Element>,
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for description"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _description: Option<Element>,
    #[doc = " Extensions for experimental"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _experimental: Option<Element>,
    #[doc = " Extensions for immutable"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _immutable: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for publisher"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _publisher: Option<Element>,
    #[doc = " Extensions for purpose"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _purpose: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for title"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _title: Option<Element>,
    #[doc = " Extensions for url"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _url: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " A set of criteria that define the contents of the value set by including or excluding codes "]
    #[doc = " selected from the specified code system(s) that the value set draws from. This is also "]
    #[doc = " known as the Content Logical Definition (CLD)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub compose: Option<ValueSetCompose>,
    #[doc = " Contact details to assist a user in finding and communicating with the publisher."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " A copyright statement relating to the value set and/or its contents. Copyright statements "]
    #[doc = " are generally legal restrictions on the use and publishing of the value set."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,
    #[doc = " The date (and optionally time) when the value set was created or revised (e.g. the 'content "]
    #[doc = " logical definition')."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,
    #[doc = " A free text natural language description of the value set from a consumer's perspective. "]
    #[doc = " The textual description specifies the span of meanings for concepts to be included within "]
    #[doc = " the Value Set Expansion, and also may specify the intended use and limitations of the Value "]
    #[doc = " Set."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,
    #[doc = " A value set can also be \"expanded\", where the value set is turned into a simple collection "]
    #[doc = " of enumerated codes. This element holds the expansion, if it has been performed."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expansion: Option<ValueSetExpansion>,
    #[doc = " A Boolean value to indicate that this value set is authored for testing purposes (or "]
    #[doc = " education/evaluation/marketing) and is not intended to be used for genuine usage."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A formal identifier that is used to identify this value set when it is represented in other "]
    #[doc = " formats, or referenced in a specification, model, design or an instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " If this is set to 'true', then no new versions of the content logical definition can be "]
    #[doc = " created.  Note: Other metadata might still change."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub immutable: Option<Boolean>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " A legal or geographic region in which the value set is intended to be used."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A natural language name identifying the value set. This name should be usable as an "]
    #[doc = " identifier for the module by machine processing applications such as code generation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " The name of the organization or individual that published the value set."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
    #[doc = " Explanation of why this value set is needed and why it has been designed as it has."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,
    #[doc = " This is a ValueSet resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The status of this value set. Enables tracking the life-cycle of the content. The status of "]
    #[doc = " the value set applies to the value set definition (ValueSet.compose) and the associated "]
    #[doc = " ValueSet metadata. Expansions do not have a state."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " A short, descriptive, user-friendly title for the value set."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[doc = " An absolute URI that is used to identify this value set when it is referenced in a "]
    #[doc = " specification, model, design or an instance; also called its canonical identifier. This "]
    #[doc = " SHOULD be globally unique and SHOULD be a literal address at which at which an "]
    #[doc = " authoritative instance of this value set is (or will be) published. This URL can be the "]
    #[doc = " target of a canonical reference. It SHALL remain the same when the value set is stored on "]
    #[doc = " different servers."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
    #[doc = " The content was developed with a focus and intent of supporting the contexts that are "]
    #[doc = " listed. These contexts may be general categories (gender, age, ...) or may be references to "]
    #[doc = " specific programs (insurance plans, studies, ...) and may be used to assist with indexing "]
    #[doc = " and searching for appropriate value set instances."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,
    #[doc = " The identifier that is used to identify this version of the value set when it is referenced "]
    #[doc = " in a specification, model, design or instance. This is an arbitrary value managed by the "]
    #[doc = " value set author and is not expected to be globally unique. For example, it might be a "]
    #[doc = " timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no "]
    #[doc = " expectation that versions can be placed in a lexicographical sequence."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[doc = " A ValueSet resource instance specifies a set of codes drawn from one or more code systems, "]
#[doc = " intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) "]
#[doc = " definitions and their use in [coded elements](terminologies.html)."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ValueSet_Compose")]
#[serde(deny_unknown_fields)]
pub struct ValueSetCompose {
    #[doc = " Extensions for inactive"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _inactive: Option<Element>,
    #[doc = " Extensions for lockedDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lockedDate")]
    pub _locked_date: Option<Element>,
    #[doc = " Exclude one or more codes from the value set based on code system filters and/or other "]
    #[doc = " value sets."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub exclude: Option<Vec<ValueSetInclude>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " Whether inactive codes - codes that are not approved for current use - are in the value "]
    #[doc = " set. If inactive = true, inactive codes are to be included in the expansion, if inactive = "]
    #[doc = " false, the inactive codes will not be included in the expansion. If absent, the behavior is "]
    #[doc = " determined by the implementation, or by the applicable $expand parameters (but generally, "]
    #[doc = " inactive codes would be expected to be included)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub inactive: Option<Boolean>,
    #[doc = " Include one or more codes from a code system or other value set(s)."]
    pub include: Vec<ValueSetInclude>,
    #[doc = " The Locked Date is  the effective date that is used to determine the version of all "]
    #[doc = " referenced Code Systems and Value Set Definitions included in the compose that are not "]
    #[doc = " already tied to a specific version."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lockedDate")]
    pub locked_date: Option<Date>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " A ValueSet resource instance specifies a set of codes drawn from one or more code systems, "]
#[doc = " intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) "]
#[doc = " definitions and their use in [coded elements](terminologies.html)."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ValueSet_Concept")]
#[serde(deny_unknown_fields)]
pub struct ValueSetConcept {
    #[doc = " Extensions for code"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _code: Option<Element>,
    #[doc = " Extensions for display"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _display: Option<Element>,
    #[doc = " Specifies a code for the concept to be included or excluded."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,
    #[doc = " Additional representations for this concept when used in this value set - other languages, "]
    #[doc = " aliases, specialized purposes, used for particular purposes, etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub designation: Option<Vec<ValueSetDesignation>>,
    #[doc = " The text to display to the user for this concept in the context of this valueset. If no "]
    #[doc = " display is provided, then applications using the value set use the display specified for "]
    #[doc = " the code by the system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " A ValueSet resource instance specifies a set of codes drawn from one or more code systems, "]
#[doc = " intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) "]
#[doc = " definitions and their use in [coded elements](terminologies.html)."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ValueSet_Contains")]
#[serde(deny_unknown_fields)]
pub struct ValueSetContains {
    #[doc = " Extensions for abstract"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _abstract: Option<Element>,
    #[doc = " Extensions for code"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _code: Option<Element>,
    #[doc = " Extensions for display"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _display: Option<Element>,
    #[doc = " Extensions for inactive"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _inactive: Option<Element>,
    #[doc = " Extensions for system"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _system: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " If true, this entry is included in the expansion for navigational purposes, and the user "]
    #[doc = " cannot select the code directly as a proper value."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "abstract")]
    pub abstract_: Option<Boolean>,
    #[doc = " The code for this item in the expansion hierarchy. If this code is missing the entry in the "]
    #[doc = " hierarchy is a place holder (abstract) and does not represent a valid code in the value "]
    #[doc = " set."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,
    #[doc = " Other codes and entries contained under this entry in the hierarchy."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contains: Option<Vec<ValueSetContains>>,
    #[doc = " Additional representations for this item - other languages, aliases, specialized purposes, "]
    #[doc = " used for particular purposes, etc. These are relevant when the conditions of the expansion "]
    #[doc = " do not fix to a single correct representation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub designation: Option<Vec<ValueSetDesignation>>,
    #[doc = " The recommended display for this item in the expansion."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " If the concept is inactive in the code system that defines it. Inactive codes are those "]
    #[doc = " that are no longer to be used, but are maintained by the code system for understanding "]
    #[doc = " legacy data. It might not be known or specified whether an concept is inactive (and it may "]
    #[doc = " depend on the context of use)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub inactive: Option<Boolean>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " An absolute URI which is the code system in which the code for this item in the expansion "]
    #[doc = " is defined."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub system: Option<Uri>,
    #[doc = " The version of the code system from this code was taken. Note that a well-maintained code "]
    #[doc = " system does not need the version reported, because the meaning of codes is consistent "]
    #[doc = " across versions. However this cannot consistently be assured, and when the meaning is not "]
    #[doc = " guaranteed to be consistent, the version SHOULD be exchanged."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[doc = " A ValueSet resource instance specifies a set of codes drawn from one or more code systems, "]
#[doc = " intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) "]
#[doc = " definitions and their use in [coded elements](terminologies.html)."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ValueSet_Designation")]
#[serde(deny_unknown_fields)]
pub struct ValueSetDesignation {
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for value"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _value: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " The language this designation is defined for."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A code that represents types of uses of designations."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "use")]
    pub use_: Option<Coding>,
    #[doc = " The text value for this designation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[doc = " A ValueSet resource instance specifies a set of codes drawn from one or more code systems, "]
#[doc = " intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) "]
#[doc = " definitions and their use in [coded elements](terminologies.html)."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ValueSet_Expansion")]
#[serde(deny_unknown_fields)]
pub struct ValueSetExpansion {
    #[doc = " Extensions for identifier"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _identifier: Option<Element>,
    #[doc = " Extensions for offset"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _offset: Option<Element>,
    #[doc = " Extensions for timestamp"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _timestamp: Option<Element>,
    #[doc = " Extensions for total"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _total: Option<Element>,
    #[doc = " The codes that are contained in the value set expansion."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contains: Option<Vec<ValueSetContains>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " An identifier that uniquely identifies this expansion of the valueset, based on a unique "]
    #[doc = " combination of the provided parameters, the system default parameters, and the underlying "]
    #[doc = " system code system versions etc. Systems may re-use the same identifier as long as those "]
    #[doc = " factors remain the same, and the expansion is the same, but are not required to do so. This "]
    #[doc = " is a business identifier."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Uri>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " If paging is being used, the offset at which this resource starts.  I.e. this resource is a "]
    #[doc = " partial view into the expansion. If paging is not being used, this element SHALL NOT be "]
    #[doc = " present."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub offset: Option<Integer>,
    #[doc = " A parameter that controlled the expansion process. These parameters may be used by users of "]
    #[doc = " expanded value sets to check whether the expansion is suitable for a particular purpose, or "]
    #[doc = " to pick the correct expansion."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub parameter: Option<Vec<ValueSetParameter>>,
    #[doc = " The time at which the expansion was produced by the expanding system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<DateTime>,
    #[doc = " The total number of concepts in the expansion. If the number of concept nodes in this "]
    #[doc = " resource is less than the stated number, then the server can return more using the offset "]
    #[doc = " parameter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub total: Option<Integer>,
}
#[doc = " A ValueSet resource instance specifies a set of codes drawn from one or more code systems, "]
#[doc = " intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) "]
#[doc = " definitions and their use in [coded elements](terminologies.html)."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ValueSet_Filter")]
#[serde(deny_unknown_fields)]
pub struct ValueSetFilter {
    #[doc = " Extensions for op"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _op: Option<Element>,
    #[doc = " Extensions for property"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _property: Option<Element>,
    #[doc = " Extensions for value"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _value: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The kind of operation to perform as a part of the filter criteria."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub op: Option<Code>,
    #[doc = " A code that identifies a property or a filter defined in the code system."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub property: Option<Code>,
    #[doc = " The match value may be either a code defined by the system, or a string value, which is a "]
    #[doc = " regex match on the literal string of the property value  (if the filter represents a "]
    #[doc = " property defined in CodeSystem) or of the system filter value (if the filter represents a "]
    #[doc = " filter defined in CodeSystem) when the operation is 'regex', or one of the values (true and "]
    #[doc = " false), when the operation is 'exists'."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[doc = " A ValueSet resource instance specifies a set of codes drawn from one or more code systems, "]
#[doc = " intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) "]
#[doc = " definitions and their use in [coded elements](terminologies.html)."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ValueSet_Include")]
#[serde(deny_unknown_fields)]
pub struct ValueSetInclude {
    #[doc = " Extensions for system"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _system: Option<Element>,
    #[doc = " Extensions for version"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _version: Option<Element>,
    #[doc = " Specifies a concept to be included or excluded."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub concept: Option<Vec<ValueSetConcept>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Select concepts by specify a matching criterion based on the properties (including "]
    #[doc = " relationships) defined by the system, or on filters defined by the system. If multiple "]
    #[doc = " filters are specified, they SHALL all be true."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub filter: Option<Vec<ValueSetFilter>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " An absolute URI which is the code system from which the selected codes come from."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub system: Option<Uri>,
    #[doc = " Selects the concepts found in this value set (based on its value set definition). This is "]
    #[doc = " an absolute URI that is a reference to ValueSet.url.  If multiple value sets are specified "]
    #[doc = " this includes the union of the contents of all of the referenced value sets."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueSet")]
    pub value_set: Option<Vec<Canonical>>,
    #[doc = " The version of the code system that the codes are selected from, or the special version '*' "]
    #[doc = " for all versions."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[doc = " A ValueSet resource instance specifies a set of codes drawn from one or more code systems, "]
#[doc = " intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) "]
#[doc = " definitions and their use in [coded elements](terminologies.html)."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ValueSet_Parameter")]
#[serde(deny_unknown_fields)]
pub struct ValueSetParameter {
    #[doc = " Extensions for name"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _name: Option<Element>,
    #[doc = " Extensions for valueBoolean"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub _value_boolean: Option<Element>,
    #[doc = " Extensions for valueCode"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueCode")]
    pub _value_code: Option<Element>,
    #[doc = " Extensions for valueDateTime"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDateTime")]
    pub _value_date_time: Option<Element>,
    #[doc = " Extensions for valueDecimal"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDecimal")]
    pub _value_decimal: Option<Element>,
    #[doc = " Extensions for valueInteger"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueInteger")]
    pub _value_integer: Option<Element>,
    #[doc = " Extensions for valueString"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueString")]
    pub _value_string: Option<Element>,
    #[doc = " Extensions for valueUri"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUri")]
    pub _value_uri: Option<Element>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Name of the input parameter to the $expand operation; may be a server-assigned name for "]
    #[doc = " additional default or other server-supplied parameters used to control the expansion "]
    #[doc = " process."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = " The value of the parameter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,
    #[doc = " The value of the parameter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCode")]
    pub value_code: Option<String>,
    #[doc = " The value of the parameter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDateTime")]
    pub value_date_time: Option<String>,
    #[doc = " The value of the parameter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDecimal")]
    pub value_decimal: Option<f64>,
    #[doc = " The value of the parameter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueInteger")]
    pub value_integer: Option<f64>,
    #[doc = " The value of the parameter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueString")]
    pub value_string: Option<String>,
    #[doc = " The value of the parameter."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUri")]
    pub value_uri: Option<String>,
}
#[doc = " Describes validation requirements, source(s), status and dates for one or more elements."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct VerificationResult {
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for lastPerformed"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastPerformed")]
    pub _last_performed: Option<Element>,
    #[doc = " Extensions for nextScheduled"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_nextScheduled")]
    pub _next_scheduled: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " Extensions for statusDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_statusDate")]
    pub _status_date: Option<Element>,
    #[doc = " Extensions for targetLocation"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_targetLocation")]
    pub _target_location: Option<Vec<Element>>,
    #[doc = " Information about the entity attesting to information."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub attestation: Option<VerificationResultAttestation>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The result if validation fails (fatal; warning; record only; none)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "failureAction")]
    pub failure_action: Option<CodeableConcept>,
    #[doc = " Frequency of revalidation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub frequency: Option<Timing>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " The date/time validation was last completed (including failed validations)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastPerformed")]
    pub last_performed: Option<DateTime>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " The frequency with which the target must be validated (none; initial; periodic)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub need: Option<CodeableConcept>,
    #[doc = " The date when target is next validated, if appropriate."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "nextScheduled")]
    pub next_scheduled: Option<Date>,
    #[doc = " Information about the primary source(s) involved in validation."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "primarySource")]
    pub primary_source: Option<Vec<VerificationResultPrimarySource>>,
    #[doc = " This is a VerificationResult resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The validation status of the target (attested; validated; in process; requires "]
    #[doc = " revalidation; validation failed; revalidation failed)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " When the validation status was updated."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusDate")]
    pub status_date: Option<DateTime>,
    #[doc = " A resource that was validated."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub target: Option<Vec<Reference>>,
    #[doc = " The fhirpath location(s) within the resource that was validated."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetLocation")]
    pub target_location: Option<Vec<String>>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
    #[doc = " The primary process by which the target is validated (edit check; value set; primary "]
    #[doc = " source; multiple sources; standalone; in context)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "validationProcess")]
    pub validation_process: Option<Vec<CodeableConcept>>,
    #[doc = " What the target is validated against (nothing; primary source; multiple sources)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "validationType")]
    pub validation_type: Option<CodeableConcept>,
    #[doc = " Information about the entity validating information."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub validator: Option<Vec<VerificationResultValidator>>,
}
#[doc = " Describes validation requirements, source(s), status and dates for one or more elements."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "VerificationResult_Attestation")]
#[serde(deny_unknown_fields)]
pub struct VerificationResultAttestation {
    #[doc = " Extensions for date"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _date: Option<Element>,
    #[doc = " Extensions for proxyIdentityCertificate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_proxyIdentityCertificate")]
    pub _proxy_identity_certificate: Option<Element>,
    #[doc = " Extensions for sourceIdentityCertificate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sourceIdentityCertificate")]
    pub _source_identity_certificate: Option<Element>,
    #[doc = " The method by which attested information was submitted/retrieved (manual; API; Push)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "communicationMethod")]
    pub communication_method: Option<CodeableConcept>,
    #[doc = " The date the information was attested to."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<Date>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " When the who is asserting on behalf of another (organization or individual)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onBehalfOf")]
    pub on_behalf_of: Option<Reference>,
    #[doc = " A digital identity certificate associated with the proxy entity submitting attested "]
    #[doc = " information on behalf of the attestation source."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "proxyIdentityCertificate")]
    pub proxy_identity_certificate: Option<String>,
    #[doc = " Signed assertion by the proxy entity indicating that they have the right to submit attested "]
    #[doc = " information on behalf of the attestation source."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "proxySignature")]
    pub proxy_signature: Option<Signature>,
    #[doc = " A digital identity certificate associated with the attestation source."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "sourceIdentityCertificate")]
    pub source_identity_certificate: Option<String>,
    #[doc = " Signed assertion by the attestation source that they have attested to the information."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "sourceSignature")]
    pub source_signature: Option<Signature>,
    #[doc = " The individual or organization attesting to information."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub who: Option<Reference>,
}
#[doc = " Describes validation requirements, source(s), status and dates for one or more elements."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "VerificationResult_PrimarySource")]
#[serde(deny_unknown_fields)]
pub struct VerificationResultPrimarySource {
    #[doc = " Extensions for validationDate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_validationDate")]
    pub _validation_date: Option<Element>,
    #[doc = " Ability of the primary source to push updates/alerts (yes; no; undetermined)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "canPushUpdates")]
    pub can_push_updates: Option<CodeableConcept>,
    #[doc = " Method for communicating with the primary source (manual; API; Push)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "communicationMethod")]
    pub communication_method: Option<Vec<CodeableConcept>>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Type of alerts/updates the primary source can send (specific requested changes; any "]
    #[doc = " changes; as defined by source)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "pushTypeAvailable")]
    pub push_type_available: Option<Vec<CodeableConcept>>,
    #[doc = " Type of primary source (License Board; Primary Education; Continuing Education; Postal "]
    #[doc = " Service; Relationship owner; Registration Authority; legal source; issuing source; "]
    #[doc = " authoritative source)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Vec<CodeableConcept>>,
    #[doc = " When the target was validated against the primary source."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "validationDate")]
    pub validation_date: Option<DateTime>,
    #[doc = " Status of the validation of the target against the primary source (successful; failed; "]
    #[doc = " unknown)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "validationStatus")]
    pub validation_status: Option<CodeableConcept>,
    #[doc = " Reference to the primary source."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub who: Option<Reference>,
}
#[doc = " Describes validation requirements, source(s), status and dates for one or more elements."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "VerificationResult_Validator")]
#[serde(deny_unknown_fields)]
pub struct VerificationResultValidator {
    #[doc = " Extensions for identityCertificate"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_identityCertificate")]
    pub _identity_certificate: Option<Element>,
    #[doc = " Signed assertion by the validator that they have validated the information."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "attestationSignature")]
    pub attestation_signature: Option<Signature>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A digital identity certificate associated with the validator."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "identityCertificate")]
    pub identity_certificate: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Reference to the organization validating information."]
    pub organization: Reference,
}
#[doc = " An authorization for the provision of glasses and/or contact lenses to a patient."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct VisionPrescription {
    #[doc = " Extensions for created"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _created: Option<Element>,
    #[doc = " Extensions for dateWritten"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_dateWritten")]
    pub _date_written: Option<Element>,
    #[doc = " Extensions for implicitRules"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub _implicit_rules: Option<Element>,
    #[doc = " Extensions for language"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _language: Option<Element>,
    #[doc = " Extensions for status"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _status: Option<Element>,
    #[doc = " These resources do not have an independent existence apart from the resource that contains "]
    #[doc = " them - they cannot be identified independently, and nor can they have their own independent "]
    #[doc = " transaction scope."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,
    #[doc = " The date this resource was created."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub created: Option<DateTime>,
    #[doc = " The date (and perhaps time) when the prescription was written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dateWritten")]
    pub date_written: Option<DateTime>,
    #[doc = " A reference to a resource that identifies the particular occurrence of contact between "]
    #[doc = " patient and health care provider during which the prescription was issued."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The logical id of the resource, as used in the URL for the resource. Once assigned, this "]
    #[doc = " value never changes."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " A unique identifier assigned to this vision prescription."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,
    #[doc = " A reference to a set of rules that were followed when the resource was constructed, and "]
    #[doc = " which must be understood when processing the content. Often, this is a reference to an "]
    #[doc = " implementation guide that defines the special rules along with other profiles etc."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,
    #[doc = " The base language in which the resource is written."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,
    #[doc = " Contain the details of  the individual lens specifications and serves as the authorization "]
    #[doc = " for the fullfillment by certified professionals."]
    #[serde(rename = "lensSpecification")]
    pub lens_specification: Vec<VisionPrescriptionLensSpecification>,
    #[doc = " The metadata about the resource. This is content that is maintained by the infrastructure. "]
    #[doc = " Changes to the content might not always be associated with version changes to the resource."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the resource and that modifies the understanding of the element that contains it and/or the "]
    #[doc = " understanding of the containing element's descendants. Usually modifier elements provide "]
    #[doc = " negation or qualification. To make the use of extensions safe and manageable, there is a "]
    #[doc = " strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer is allowed to define an extension, there is a set of requirements that SHALL be "]
    #[doc = " met as part of the definition of the extension. Applications processing a resource are "]
    #[doc = " required to check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " A resource reference to the person to whom the vision prescription applies."]
    pub patient: Reference,
    #[doc = " The healthcare professional responsible for authorizing the prescription."]
    pub prescriber: Reference,
    #[doc = " This is a VisionPrescription resource"]
    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
    #[doc = " The status of the resource instance."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
    #[doc = " A human-readable narrative that contains a summary of the resource and can be used to "]
    #[doc = " represent the content of the resource to a human. The narrative need not encode all the "]
    #[doc = " structured data, but is required to contain sufficient detail to make it \"clinically safe\" "]
    #[doc = " for a human to just read the narrative. Resource definitions may define what content should "]
    #[doc = " be represented in the narrative to ensure clinical safety."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[doc = " An authorization for the provision of glasses and/or contact lenses to a patient."]
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "VisionPrescription_LensSpecification")]
#[serde(deny_unknown_fields)]
pub struct VisionPrescriptionLensSpecification {
    #[doc = " Extensions for add"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _add: Option<Element>,
    #[doc = " Extensions for axis"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _axis: Option<Element>,
    #[doc = " Extensions for backCurve"]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_backCurve")]
    pub _back_curve: Option<Element>,
    #[doc = " Extensions for brand"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _brand: Option<Element>,
    #[doc = " Extensions for color"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _color: Option<Element>,
    #[doc = " Extensions for cylinder"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _cylinder: Option<Element>,
    #[doc = " Extensions for diameter"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _diameter: Option<Element>,
    #[doc = " Extensions for eye"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _eye: Option<Element>,
    #[doc = " Extensions for power"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _power: Option<Element>,
    #[doc = " Extensions for sphere"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _sphere: Option<Element>,
    #[doc = " Power adjustment for multifocal lenses measured in dioptres (0.25 units)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub add: Option<Decimal>,
    #[doc = " Adjustment for astigmatism measured in integer degrees."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub axis: Option<Integer>,
    #[doc = " Back curvature measured in millimetres."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "backCurve")]
    pub back_curve: Option<Decimal>,
    #[doc = " Brand recommendations or restrictions."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub brand: Option<String>,
    #[doc = " Special color or pattern."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub color: Option<String>,
    #[doc = " Power adjustment for astigmatism measured in dioptres (0.25 units)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub cylinder: Option<Decimal>,
    #[doc = " Contact lens diameter measured in millimetres."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub diameter: Option<Decimal>,
    #[doc = " The recommended maximum wear period for the lens."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub duration: Option<Quantity>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " The eye for which the lens specification applies."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub eye: Option<Code>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
    #[doc = " Notes for special requirements such as coatings and lens materials."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
    #[doc = " Contact lens power measured in dioptres (0.25 units)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub power: Option<Decimal>,
    #[doc = " Allows for adjustment on two axis."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub prism: Option<Vec<VisionPrescriptionPrism>>,
    #[doc = " Identifies the type of vision correction product which is required for the patient."]
    pub product: CodeableConcept,
    #[doc = " Lens power measured in dioptres (0.25 units)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sphere: Option<Decimal>,
}
#[doc = " An authorization for the provision of glasses and/or contact lenses to a patient."]
#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "VisionPrescription_Prism")]
#[serde(deny_unknown_fields)]
pub struct VisionPrescriptionPrism {
    #[doc = " Extensions for amount"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _amount: Option<Element>,
    #[doc = " Extensions for base"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _base: Option<Element>,
    #[doc = " Amount of prism to compensate for eye alignment in fractional units."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub amount: Option<Decimal>,
    #[doc = " The relative base, or reference lens edge, for the prism."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub base: Option<Code>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element. To make the use of extensions safe and manageable, there is a strict set of "]
    #[doc = " governance  applied to the definition and use of extensions. Though any implementer can "]
    #[doc = " define an extension, there is a set of requirements that SHALL be met as part of the "]
    #[doc = " definition of the extension."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,
    #[doc = " Unique id for the element within a resource (for internal references). This may be any "]
    #[doc = " string value that does not contain spaces."]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = " May be used to represent additional information that is not part of the basic definition of "]
    #[doc = " the element and that modifies the understanding of the element in which it is contained "]
    #[doc = " and/or the understanding of the containing element's descendants. Usually modifier elements "]
    #[doc = " provide negation or qualification. To make the use of extensions safe and manageable, there "]
    #[doc = " is a strict set of governance applied to the definition and use of extensions. Though any "]
    #[doc = " implementer can define an extension, there is a set of requirements that SHALL be met as "]
    #[doc = " part of the definition of the extension. Applications processing a resource are required to "]
    #[doc = " check for modifier extensions."]
    #[doc = " "]
    #[doc = " Modifier extensions SHALL NOT change the meaning of any elements on Resource or "]
    #[doc = " DomainResource (including cannot change the meaning of modifierExtension itself)."]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}
#[doc = " A stream of bytes"]
pub type Base64Binary = String;
#[doc = " Value of \"true\" or \"false\""]
pub type Boolean = bool;
#[doc = " A URI that is a reference to a canonical URL on a FHIR resource"]
pub type Canonical = String;
#[doc = " A string which has at least one character and no leading or trailing whitespace and where there "]
#[doc = " is no whitespace other than single spaces in the contents"]
pub type Code = String;
#[doc = " A date or partial date (e.g. just year or year + month). There is no time zone. The format is a "]
#[doc = " union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates."]
pub type Date = String;
#[doc = " A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are "]
#[doc = " specified, a time zone SHALL be populated. The format is a union of the schema types gYear, "]
#[doc = " gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may "]
#[doc = " be zero-filled and may be ignored.                 Dates SHALL be valid dates."]
pub type DateTime = String;
#[doc = " A rational number with implicit precision"]
pub type Decimal = f64;
#[doc = " Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This "]
#[doc = " might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these "]
#[doc = " constraints.)  Ids are case-insensitive."]
pub type Id = String;
#[doc = " An instant in time - known at least to the second"]
pub type Instant = String;
#[doc = " A whole number"]
pub type Integer = f64;
#[doc = " A string that may contain Github Flavored Markdown syntax for optional processing by a mark "]
#[doc = " down presentation engine"]
pub type Markdown = String;
#[doc = " An OID represented as a URI"]
pub type Oid = String;
#[doc = " An integer with a value that is positive (e.g. >0)"]
pub type PositiveInt = f64;
#[doc = " A sequence of Unicode characters"]
#[doc = " A time during the day, with no date specified"]
pub type Time = String;
#[doc = " An integer with a value that is not negative (e.g. >= 0)"]
pub type UnsignedInt = f64;
#[doc = " String of characters used to identify a name or a resource"]
pub type Uri = String;
#[doc = " A URI that is a literal reference"]
pub type Url = String;
#[doc = " A UUID, represented as a URI"]
pub type Uuid = String;
#[doc = " xhtml - escaped html (see specfication)"]
pub type Xhtml = serde_json::Value;
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(untagged)]
pub enum SchemaModifierExtension {
    Variant0(Account),
    Variant1(ActivityDefinition),
    Variant2(AdministrableProductDefinition),
    Variant3(AdverseEvent),
    Variant4(AllergyIntolerance),
    Variant5(Appointment),
    Variant6(AppointmentResponse),
    Variant7(AuditEvent),
    Variant8(Basic),
    Variant9(Binary),
    Variant10(BiologicallyDerivedProduct),
    Variant11(BodyStructure),
    Variant12(Bundle),
    Variant13(CapabilityStatement),
    Variant14(CarePlan),
    Variant15(CareTeam),
    Variant16(CatalogEntry),
    Variant17(ChargeItem),
    Variant18(ChargeItemDefinition),
    Variant19(Citation),
    Variant20(Claim),
    Variant21(ClaimResponse),
    Variant22(ClinicalImpression),
    Variant23(ClinicalUseDefinition),
    Variant24(CodeSystem),
    Variant25(Communication),
    Variant26(CommunicationRequest),
    Variant27(CompartmentDefinition),
    Variant28(Composition),
    Variant29(ConceptMap),
    Variant30(Condition),
    Variant31(Consent),
    Variant32(Contract),
    Variant33(Coverage),
    Variant34(CoverageEligibilityRequest),
    Variant35(CoverageEligibilityResponse),
    Variant36(DetectedIssue),
    Variant37(Device),
    Variant38(DeviceDefinition),
    Variant39(DeviceMetric),
    Variant40(DeviceRequest),
    Variant41(DeviceUseStatement),
    Variant42(DiagnosticReport),
    Variant43(DocumentManifest),
    Variant44(DocumentReference),
    Variant45(Encounter),
    Variant46(Endpoint),
    Variant47(EnrollmentRequest),
    Variant48(EnrollmentResponse),
    Variant49(EpisodeOfCare),
    Variant50(EventDefinition),
    Variant51(Evidence),
    Variant52(EvidenceReport),
    Variant53(EvidenceVariable),
    Variant54(ExampleScenario),
    Variant55(ExplanationOfBenefit),
    Variant56(FamilyMemberHistory),
    Variant57(Flag),
    Variant58(Goal),
    Variant59(GraphDefinition),
    Variant60(Group),
    Variant61(GuidanceResponse),
    Variant62(HealthcareService),
    Variant63(ImagingStudy),
    Variant64(Immunization),
    Variant65(ImmunizationEvaluation),
    Variant66(ImmunizationRecommendation),
    Variant67(ImplementationGuide),
    Variant68(Ingredient),
    Variant69(InsurancePlan),
    Variant70(Invoice),
    Variant71(Library),
    Variant72(Linkage),
    Variant73(List),
    Variant74(Location),
    Variant75(ManufacturedItemDefinition),
    Variant76(Measure),
    Variant77(MeasureReport),
    Variant78(Media),
    Variant79(Medication),
    Variant80(MedicationAdministration),
    Variant81(MedicationDispense),
    Variant82(MedicationKnowledge),
    Variant83(MedicationRequest),
    Variant84(MedicationStatement),
    Variant85(MedicinalProductDefinition),
    Variant86(MessageDefinition),
    Variant87(MessageHeader),
    Variant88(MolecularSequence),
    Variant89(NamingSystem),
    Variant90(NutritionOrder),
    Variant91(NutritionProduct),
    Variant92(Observation),
    Variant93(ObservationDefinition),
    Variant94(OperationDefinition),
    Variant95(OperationOutcome),
    Variant96(Organization),
    Variant97(OrganizationAffiliation),
    Variant98(PackagedProductDefinition),
    Variant99(Parameters),
    Variant100(Patient),
    Variant101(PaymentNotice),
    Variant102(PaymentReconciliation),
    Variant103(Person),
    Variant104(PlanDefinition),
    Variant105(Practitioner),
    Variant106(PractitionerRole),
    Variant107(Procedure),
    Variant108(Provenance),
    Variant109(Questionnaire),
    Variant110(QuestionnaireResponse),
    Variant111(RegulatedAuthorization),
    Variant112(RelatedPerson),
    Variant113(RequestGroup),
    Variant114(ResearchDefinition),
    Variant115(ResearchElementDefinition),
    Variant116(ResearchStudy),
    Variant117(ResearchSubject),
    Variant118(RiskAssessment),
    Variant119(Schedule),
    Variant120(SearchParameter),
    Variant121(ServiceRequest),
    Variant122(Slot),
    Variant123(Specimen),
    Variant124(SpecimenDefinition),
    Variant125(StructureDefinition),
    Variant126(StructureMap),
    Variant127(Subscription),
    Variant128(SubscriptionStatus),
    Variant129(SubscriptionTopic),
    Variant130(Substance),
    Variant131(SubstanceDefinition),
    Variant132(SupplyDelivery),
    Variant133(SupplyRequest),
    Variant134(Task),
    Variant135(TerminologyCapabilities),
    Variant136(TestReport),
    Variant137(TestScript),
    Variant138(ValueSet),
    Variant139(VerificationResult),
    Variant140(VisionPrescription),
}
pub type Schema = SchemaModifierExtension;
