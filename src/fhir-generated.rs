#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Account {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub coverage: Option<Vec<AccountCoverage>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub guarantor: Option<Vec<AccountGuarantor>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub owner: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "partOf")]
    pub part_of: Option<Reference>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "servicePeriod")]
    pub service_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Account_Coverage")]
#[serde(deny_unknown_fields)]
pub struct AccountCoverage {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_priority")]
    pub priority: Option<Element>,

    pub coverage: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub priority: Option<PositiveInt>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Account_Guarantor")]
#[serde(deny_unknown_fields)]
pub struct AccountGuarantor {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_onHold")]
    pub on_hold: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onHold")]
    pub on_hold: Option<Boolean>,

    pub party: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ActivityDefinition {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_approvalDate")]
    pub approval_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_copyright")]
    pub copyright: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_doNotPerform")]
    pub do_not_perform: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_experimental")]
    pub experimental: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_intent")]
    pub intent: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_kind")]
    pub kind: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastReviewDate")]
    pub last_review_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_priority")]
    pub priority: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_publisher")]
    pub publisher: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_purpose")]
    pub purpose: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_subjectCanonical")]
    pub subject_canonical: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_subtitle")]
    pub subtitle: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_timingDateTime")]
    pub timing_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_usage")]
    pub usage: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "approvalDate")]
    pub approval_date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "bodySite")]
    pub body_site: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "doNotPerform")]
    pub do_not_perform: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub dosage: Option<Vec<Dosage>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dynamicValue")]
    pub dynamic_value: Option<Vec<ActivityDefinitionDynamicValue>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub editor: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectivePeriod")]
    pub effective_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub endorser: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub intent: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastReviewDate")]
    pub last_review_date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub library: Option<Vec<Canonical>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "observationRequirement")]
    pub observation_requirement: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "observationResultRequirement")]
    pub observation_result_requirement: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub participant: Option<Vec<ActivityDefinitionParticipant>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub priority: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "productCodeableConcept")]
    pub product_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "productReference")]
    pub product_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub profile: Option<Canonical>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatedArtifact")]
    pub related_artifact: Option<Vec<RelatedArtifact>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub reviewer: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "specimenRequirement")]
    pub specimen_requirement: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectCanonical")]
    pub subject_canonical: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectCodeableConcept")]
    pub subject_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectReference")]
    pub subject_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub subtitle: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingAge")]
    pub timing_age: Option<Age>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingDateTime")]
    pub timing_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingDuration")]
    pub timing_duration: Option<Duration>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingPeriod")]
    pub timing_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingRange")]
    pub timing_range: Option<Range>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingTiming")]
    pub timing_timing: Option<Timing>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub topic: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub transform: Option<Canonical>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub usage: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ActivityDefinition_DynamicValue")]
#[serde(deny_unknown_fields)]
pub struct ActivityDefinitionDynamicValue {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_path")]
    pub path: Option<Element>,

    pub expression: Expression,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ActivityDefinition_Participant")]
#[serde(deny_unknown_fields)]
pub struct ActivityDefinitionParticipant {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub role: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Address {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_city")]
    pub city: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_country")]
    pub country: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_district")]
    pub district: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_line")]
    pub line: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_postalCode")]
    pub postal_code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_state")]
    pub state: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_text")]
    pub text: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_use")]
    pub use_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub city: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub district: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub line: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "postalCode")]
    pub postal_code: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<serde_json::Value>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "use")]
    pub use_: Option<serde_json::Value>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct AdministrableProductDefinition {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "administrableDoseForm")]
    pub administrable_dose_form: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub device: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "formOf")]
    pub form_of: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub ingredient: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "producedFrom")]
    pub produced_from: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub property: Option<Vec<AdministrableProductDefinitionProperty>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(rename = "routeOfAdministration")]
    pub route_of_administration: Vec<AdministrableProductDefinitionRouteOfAdministration>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "unitOfPresentation")]
    pub unit_of_presentation: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "AdministrableProductDefinition_Property")]
#[serde(deny_unknown_fields)]
pub struct AdministrableProductDefinitionProperty {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub value_boolean: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDate")]
    pub value_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<CodeableConcept>,

    #[serde(rename = "type")]
    pub type_: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAttachment")]
    pub value_attachment: Option<Attachment>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDate")]
    pub value_date: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "AdministrableProductDefinition_RouteOfAdministration")]
#[serde(deny_unknown_fields)]
pub struct AdministrableProductDefinitionRouteOfAdministration {
    pub code: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "firstDose")]
    pub first_dose: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxDosePerDay")]
    pub max_dose_per_day: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxDosePerTreatmentPeriod")]
    pub max_dose_per_treatment_period: Option<Ratio>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxSingleDose")]
    pub max_single_dose: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxTreatmentPeriod")]
    pub max_treatment_period: Option<Duration>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetSpecies")]
    pub target_species: Option<Vec<AdministrableProductDefinitionTargetSpecies>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "AdministrableProductDefinition_TargetSpecies")]
#[serde(deny_unknown_fields)]
pub struct AdministrableProductDefinitionTargetSpecies {
    pub code: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "withdrawalPeriod")]
    pub withdrawal_period: Option<Vec<AdministrableProductDefinitionWithdrawalPeriod>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "AdministrableProductDefinition_WithdrawalPeriod")]
#[serde(deny_unknown_fields)]
pub struct AdministrableProductDefinitionWithdrawalPeriod {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_supportingInformation")]
    pub supporting_information: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportingInformation")]
    pub supporting_information: Option<String>,

    pub tissue: CodeableConcept,

    pub value: Quantity,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct AdverseEvent {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_actuality")]
    pub actuality: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_detected")]
    pub detected: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_recordedDate")]
    pub recorded_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub actuality: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contributor: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub detected: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub event: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub outcome: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "recordedDate")]
    pub recorded_date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub recorder: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "referenceDocument")]
    pub reference_document: Option<Vec<Reference>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "resultingCondition")]
    pub resulting_condition: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub seriousness: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub severity: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub study: Option<Vec<Reference>>,

    pub subject: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectMedicalHistory")]
    pub subject_medical_history: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "suspectEntity")]
    pub suspect_entity: Option<Vec<AdverseEventSuspectEntity>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "AdverseEvent_Causality")]
#[serde(deny_unknown_fields)]
pub struct AdverseEventCausality {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_productRelatedness")]
    pub product_relatedness: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub assessment: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub method: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "productRelatedness")]
    pub product_relatedness: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "AdverseEvent_SuspectEntity")]
#[serde(deny_unknown_fields)]
pub struct AdverseEventSuspectEntity {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub causality: Option<Vec<AdverseEventCausality>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    pub instance: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Age {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_code")]
    pub code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_comparator")]
    pub comparator: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_system")]
    pub system: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_unit")]
    pub unit: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_value")]
    pub value: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub comparator: Option<serde_json::Value>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub system: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Decimal>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct AllergyIntolerance {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_category")]
    pub category: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_criticality")]
    pub criticality: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastOccurrence")]
    pub last_occurrence: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_onsetDateTime")]
    pub onset_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_onsetString")]
    pub onset_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_recordedDate")]
    pub recorded_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub asserter: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<Code>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "clinicalStatus")]
    pub clinical_status: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub criticality: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastOccurrence")]
    pub last_occurrence: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onsetAge")]
    pub onset_age: Option<Age>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onsetDateTime")]
    pub onset_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onsetPeriod")]
    pub onset_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onsetRange")]
    pub onset_range: Option<Range>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onsetString")]
    pub onset_string: Option<String>,

    pub patient: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub reaction: Option<Vec<AllergyIntoleranceReaction>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "recordedDate")]
    pub recorded_date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub recorder: Option<Reference>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "verificationStatus")]
    pub verification_status: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "AllergyIntolerance_Reaction")]
#[serde(deny_unknown_fields)]
pub struct AllergyIntoleranceReaction {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_onset")]
    pub onset: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_severity")]
    pub severity: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "exposureRoute")]
    pub exposure_route: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    pub manifestation: Vec<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub onset: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub severity: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub substance: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Annotation {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_authorString")]
    pub author_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_text")]
    pub text: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_time")]
    pub time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "authorReference")]
    pub author_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "authorString")]
    pub author_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub time: Option<DateTime>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Appointment {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_comment")]
    pub comment: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_created")]
    pub created: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_end")]
    pub end: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_minutesDuration")]
    pub minutes_duration: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patientInstruction")]
    pub patient_instruction: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_priority")]
    pub priority: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_start")]
    pub start: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "appointmentType")]
    pub appointment_type: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "cancelationReason")]
    pub cancelation_reason: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub created: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub end: Option<Instant>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "minutesDuration")]
    pub minutes_duration: Option<PositiveInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub participant: Vec<AppointmentParticipant>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patientInstruction")]
    pub patient_instruction: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub priority: Option<UnsignedInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "requestedPeriod")]
    pub requested_period: Option<Vec<Period>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "serviceCategory")]
    pub service_category: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "serviceType")]
    pub service_type: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub slot: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub specialty: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub start: Option<Instant>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportingInformation")]
    pub supporting_information: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct AppointmentResponse {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_comment")]
    pub comment: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_end")]
    pub end: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_participantStatus")]
    pub participant_status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_start")]
    pub start: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub actor: Option<Reference>,

    pub appointment: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub end: Option<Instant>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "participantStatus")]
    pub participant_status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "participantType")]
    pub participant_type: Option<Vec<CodeableConcept>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub start: Option<Instant>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Appointment_Participant")]
#[serde(deny_unknown_fields)]
pub struct AppointmentParticipant {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_required")]
    pub required: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub actor: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub required: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Vec<CodeableConcept>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Attachment {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_contentType")]
    pub content_type: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_creation")]
    pub creation: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_data")]
    pub data: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_hash")]
    pub hash: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_size")]
    pub size: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contentType")]
    pub content_type: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub creation: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub data: Option<Base64Binary>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub hash: Option<Base64Binary>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub size: Option<UnsignedInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Url>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct AuditEvent {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_action")]
    pub action: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_outcome")]
    pub outcome: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_outcomeDesc")]
    pub outcome_desc: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_recorded")]
    pub recorded: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub action: Option<Code>,

    pub agent: Vec<AuditEventAgent>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub entity: Option<Vec<AuditEventEntity>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub outcome: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "outcomeDesc")]
    pub outcome_desc: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "purposeOfEvent")]
    pub purpose_of_event: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub recorded: Option<Instant>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    pub source: AuditEventSource,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub subtype: Option<Vec<Coding>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(rename = "type")]
    pub type_: Coding,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "AuditEvent_Agent")]
#[serde(deny_unknown_fields)]
pub struct AuditEventAgent {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_altId")]
    pub alt_id: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_policy")]
    pub policy: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_requestor")]
    pub requestor: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "altId")]
    pub alt_id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub media: Option<Coding>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub network: Option<AuditEventNetwork>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub policy: Option<Vec<Uri>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "purposeOfUse")]
    pub purpose_of_use: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub requestor: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub role: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub who: Option<Reference>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "AuditEvent_Detail")]
#[serde(deny_unknown_fields)]
pub struct AuditEventDetail {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBase64Binary")]
    pub value_base_64_binary: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueString")]
    pub value_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBase64Binary")]
    pub value_base_64_binary: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueString")]
    pub value_string: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "AuditEvent_Entity")]
#[serde(deny_unknown_fields)]
pub struct AuditEventEntity {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_query")]
    pub query: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub detail: Option<Vec<AuditEventDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub lifecycle: Option<Coding>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub query: Option<Base64Binary>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub role: Option<Coding>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "securityLabel")]
    pub security_label: Option<Vec<Coding>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Coding>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub what: Option<Reference>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "AuditEvent_Network")]
#[serde(deny_unknown_fields)]
pub struct AuditEventNetwork {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_address")]
    pub address: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "AuditEvent_Source")]
#[serde(deny_unknown_fields)]
pub struct AuditEventSource {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_site")]
    pub site: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub observer: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub site: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Vec<Coding>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Basic {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_created")]
    pub created: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Reference>,

    pub code: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub created: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Binary {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_contentType")]
    pub content_type: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_data")]
    pub data: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contentType")]
    pub content_type: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub data: Option<Base64Binary>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "securityContext")]
    pub security_context: Option<Reference>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct BiologicallyDerivedProduct {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_productCategory")]
    pub product_category: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_quantity")]
    pub quantity: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub collection: Option<BiologicallyDerivedProductCollection>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub manipulation: Option<BiologicallyDerivedProductManipulation>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub parent: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub processing: Option<Vec<BiologicallyDerivedProductProcessing>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "productCategory")]
    pub product_category: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "productCode")]
    pub product_code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Integer>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub request: Option<Vec<Reference>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub storage: Option<Vec<BiologicallyDerivedProductStorage>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "BiologicallyDerivedProduct_Collection")]
#[serde(deny_unknown_fields)]
pub struct BiologicallyDerivedProductCollection {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_collectedDateTime")]
    pub collected_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "collectedDateTime")]
    pub collected_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "collectedPeriod")]
    pub collected_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub collector: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub source: Option<Reference>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "BiologicallyDerivedProduct_Manipulation")]
#[serde(deny_unknown_fields)]
pub struct BiologicallyDerivedProductManipulation {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_timeDateTime")]
    pub time_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timeDateTime")]
    pub time_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timePeriod")]
    pub time_period: Option<Period>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "BiologicallyDerivedProduct_Processing")]
#[serde(deny_unknown_fields)]
pub struct BiologicallyDerivedProductProcessing {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_timeDateTime")]
    pub time_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub additive: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub procedure: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timeDateTime")]
    pub time_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timePeriod")]
    pub time_period: Option<Period>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "BiologicallyDerivedProduct_Storage")]
#[serde(deny_unknown_fields)]
pub struct BiologicallyDerivedProductStorage {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_scale")]
    pub scale: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_temperature")]
    pub temperature: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub duration: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub scale: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub temperature: Option<Decimal>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct BodyStructure {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_active")]
    pub active: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub active: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub image: Option<Vec<Attachment>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "locationQualifier")]
    pub location_qualifier: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub morphology: Option<CodeableConcept>,

    pub patient: Reference,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Bundle {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_timestamp")]
    pub timestamp: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_total")]
    pub total: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub entry: Option<Vec<BundleEntry>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub link: Option<Vec<BundleLink>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub signature: Option<Signature>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<Instant>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub total: Option<UnsignedInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Bundle_Entry")]
#[serde(deny_unknown_fields)]
pub struct BundleEntry {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fullUrl")]
    pub full_url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fullUrl")]
    pub full_url: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub link: Option<Vec<BundleLink>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub request: Option<BundleRequest>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource: Option<ResourceList>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub response: Option<BundleResponse>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub search: Option<BundleSearch>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Bundle_Link")]
#[serde(deny_unknown_fields)]
pub struct BundleLink {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_relation")]
    pub relation: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub relation: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Bundle_Request")]
#[serde(deny_unknown_fields)]
pub struct BundleRequest {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_ifMatch")]
    pub if_match: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_ifModifiedSince")]
    pub if_modified_since: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_ifNoneExist")]
    pub if_none_exist: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_ifNoneMatch")]
    pub if_none_match: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_method")]
    pub method: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "ifMatch")]
    pub if_match: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "ifModifiedSince")]
    pub if_modified_since: Option<Instant>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "ifNoneExist")]
    pub if_none_exist: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "ifNoneMatch")]
    pub if_none_match: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub method: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Bundle_Response")]
#[serde(deny_unknown_fields)]
pub struct BundleResponse {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_etag")]
    pub etag: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastModified")]
    pub last_modified: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_location")]
    pub location: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastModified")]
    pub last_modified: Option<Instant>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub outcome: Option<ResourceList>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Bundle_Search")]
#[serde(deny_unknown_fields)]
pub struct BundleSearch {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_mode")]
    pub mode: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_score")]
    pub score: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub mode: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub score: Option<Decimal>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct CapabilityStatement {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_copyright")]
    pub copyright: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_experimental")]
    pub experimental: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fhirVersion")]
    pub fhir_version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_format")]
    pub format: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_kind")]
    pub kind: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patchFormat")]
    pub patch_format: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_publisher")]
    pub publisher: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_purpose")]
    pub purpose: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub document: Option<Vec<CapabilityStatementDocument>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fhirVersion")]
    pub fhir_version: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub format: Option<Vec<Code>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub implementation: Option<CapabilityStatementImplementation>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implementationGuide")]
    pub implementation_guide: Option<Vec<Canonical>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub imports: Option<Vec<Canonical>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub instantiates: Option<Vec<Canonical>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub messaging: Option<Vec<CapabilityStatementMessaging>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patchFormat")]
    pub patch_format: Option<Vec<Code>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub rest: Option<Vec<CapabilityStatementRest>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub software: Option<CapabilityStatementSoftware>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "CapabilityStatement_Document")]
#[serde(deny_unknown_fields)]
pub struct CapabilityStatementDocument {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_documentation")]
    pub documentation: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_mode")]
    pub mode: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub documentation: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub mode: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub profile: Canonical,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "CapabilityStatement_Endpoint")]
#[serde(deny_unknown_fields)]
pub struct CapabilityStatementEndpoint {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_address")]
    pub address: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub address: Option<Url>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub protocol: Coding,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CapabilityStatement_Implementation")]
#[serde(deny_unknown_fields)]
pub struct CapabilityStatementImplementation {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub custodian: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Url>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CapabilityStatement_Interaction")]
#[serde(deny_unknown_fields)]
pub struct CapabilityStatementInteraction {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_code")]
    pub code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_documentation")]
    pub documentation: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub documentation: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CapabilityStatement_Interaction1")]
#[serde(deny_unknown_fields)]
pub struct CapabilityStatementInteraction1 {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_code")]
    pub code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_documentation")]
    pub documentation: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub documentation: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CapabilityStatement_Messaging")]
#[serde(deny_unknown_fields)]
pub struct CapabilityStatementMessaging {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_documentation")]
    pub documentation: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_reliableCache")]
    pub reliable_cache: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub documentation: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<Vec<CapabilityStatementEndpoint>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reliableCache")]
    pub reliable_cache: Option<UnsignedInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportedMessage")]
    pub supported_message: Option<Vec<CapabilityStatementSupportedMessage>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "CapabilityStatement_Operation")]
#[serde(deny_unknown_fields)]
pub struct CapabilityStatementOperation {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_documentation")]
    pub documentation: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    pub definition: Canonical,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub documentation: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CapabilityStatement_Resource")]
#[serde(deny_unknown_fields)]
pub struct CapabilityStatementResource {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_conditionalCreate")]
    pub conditional_create: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_conditionalDelete")]
    pub conditional_delete: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_conditionalRead")]
    pub conditional_read: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_conditionalUpdate")]
    pub conditional_update: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_documentation")]
    pub documentation: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_readHistory")]
    pub read_history: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_referencePolicy")]
    pub reference_policy: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_searchInclude")]
    pub search_include: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_searchRevInclude")]
    pub search_rev_include: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_updateCreate")]
    pub update_create: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_versioning")]
    pub versioning: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "conditionalCreate")]
    pub conditional_create: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "conditionalDelete")]
    pub conditional_delete: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "conditionalRead")]
    pub conditional_read: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "conditionalUpdate")]
    pub conditional_update: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub documentation: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub interaction: Option<Vec<CapabilityStatementInteraction>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub operation: Option<Vec<CapabilityStatementOperation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub profile: Option<Canonical>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "readHistory")]
    pub read_history: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "referencePolicy")]
    pub reference_policy: Option<Vec<Code>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "searchInclude")]
    pub search_include: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "searchParam")]
    pub search_param: Option<Vec<CapabilityStatementSearchParam>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "searchRevInclude")]
    pub search_rev_include: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportedProfile")]
    pub supported_profile: Option<Vec<Canonical>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "updateCreate")]
    pub update_create: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub versioning: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CapabilityStatement_Rest")]
#[serde(deny_unknown_fields)]
pub struct CapabilityStatementRest {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_documentation")]
    pub documentation: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_mode")]
    pub mode: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub compartment: Option<Vec<Canonical>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub documentation: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub interaction: Option<Vec<CapabilityStatementInteraction1>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub mode: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub operation: Option<Vec<CapabilityStatementOperation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource: Option<Vec<CapabilityStatementResource>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "searchParam")]
    pub search_param: Option<Vec<CapabilityStatementSearchParam>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub security: Option<CapabilityStatementSecurity>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CapabilityStatement_SearchParam")]
#[serde(deny_unknown_fields)]
pub struct CapabilityStatementSearchParam {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_documentation")]
    pub documentation: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub definition: Option<Canonical>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub documentation: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CapabilityStatement_Security")]
#[serde(deny_unknown_fields)]
pub struct CapabilityStatementSecurity {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_cors")]
    pub cors: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub cors: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub service: Option<Vec<CodeableConcept>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CapabilityStatement_Software")]
#[serde(deny_unknown_fields)]
pub struct CapabilityStatementSoftware {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_releaseDate")]
    pub release_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "releaseDate")]
    pub release_date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "CapabilityStatement_SupportedMessage")]
#[serde(deny_unknown_fields)]
pub struct CapabilityStatementSupportedMessage {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_mode")]
    pub mode: Option<Element>,

    pub definition: Canonical,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub mode: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct CarePlan {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_created")]
    pub created: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_instantiatesUri")]
    pub instantiates_uri: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_intent")]
    pub intent: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub activity: Option<Vec<CarePlanActivity>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub addresses: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "careTeam")]
    pub care_team: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contributor: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub created: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub goal: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesCanonical")]
    pub instantiates_canonical: Option<Vec<Canonical>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesUri")]
    pub instantiates_uri: Option<Vec<Uri>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub intent: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "partOf")]
    pub part_of: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub replaces: Option<Vec<Reference>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    pub subject: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportingInfo")]
    pub supporting_info: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CarePlan_Activity")]
#[serde(deny_unknown_fields)]
pub struct CarePlanActivity {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub detail: Option<CarePlanDetail>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "outcomeCodeableConcept")]
    pub outcome_codeable_concept: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "outcomeReference")]
    pub outcome_reference: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub progress: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub reference: Option<Reference>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CarePlan_Detail")]
#[serde(deny_unknown_fields)]
pub struct CarePlanDetail {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_doNotPerform")]
    pub do_not_perform: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_instantiatesUri")]
    pub instantiates_uri: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_kind")]
    pub kind: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_scheduledString")]
    pub scheduled_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dailyAmount")]
    pub daily_amount: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "doNotPerform")]
    pub do_not_perform: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub goal: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesCanonical")]
    pub instantiates_canonical: Option<Vec<Canonical>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesUri")]
    pub instantiates_uri: Option<Vec<Uri>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub performer: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "productCodeableConcept")]
    pub product_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "productReference")]
    pub product_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "scheduledPeriod")]
    pub scheduled_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "scheduledString")]
    pub scheduled_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "scheduledTiming")]
    pub scheduled_timing: Option<Timing>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusReason")]
    pub status_reason: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct CareTeam {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "managingOrganization")]
    pub managing_organization: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub participant: Option<Vec<CareTeamParticipant>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub telecom: Option<Vec<ContactPoint>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CareTeam_Participant")]
#[serde(deny_unknown_fields)]
pub struct CareTeamParticipant {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub member: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onBehalfOf")]
    pub on_behalf_of: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub role: Option<Vec<CodeableConcept>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct CatalogEntry {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastUpdated")]
    pub last_updated: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_orderable")]
    pub orderable: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_validTo")]
    pub valid_to: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "additionalCharacteristic")]
    pub additional_characteristic: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "additionalClassification")]
    pub additional_classification: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "additionalIdentifier")]
    pub additional_identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub classification: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastUpdated")]
    pub last_updated: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub orderable: Option<Boolean>,

    #[serde(rename = "referencedItem")]
    pub referenced_item: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatedEntry")]
    pub related_entry: Option<Vec<CatalogEntryRelatedEntry>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "validTo")]
    pub valid_to: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "validityPeriod")]
    pub validity_period: Option<Period>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "CatalogEntry_RelatedEntry")]
#[serde(deny_unknown_fields)]
pub struct CatalogEntryRelatedEntry {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_relationtype")]
    pub relationtype: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    pub item: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub relationtype: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ChargeItem {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_definitionUri")]
    pub definition_uri: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_enteredDate")]
    pub entered_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_factorOverride")]
    pub factor_override: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_occurrenceDateTime")]
    pub occurrence_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_overrideReason")]
    pub override_reason: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub account: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub bodysite: Option<Vec<CodeableConcept>>,

    pub code: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub context: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "costCenter")]
    pub cost_center: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "definitionCanonical")]
    pub definition_canonical: Option<Vec<Canonical>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "definitionUri")]
    pub definition_uri: Option<Vec<Uri>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "enteredDate")]
    pub entered_date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub enterer: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "factorOverride")]
    pub factor_override: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrenceDateTime")]
    pub occurrence_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrencePeriod")]
    pub occurrence_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrenceTiming")]
    pub occurrence_timing: Option<Timing>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "overrideReason")]
    pub override_reason: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "partOf")]
    pub part_of: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub performer: Option<Vec<ChargeItemPerformer>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "performingOrganization")]
    pub performing_organization: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "priceOverride")]
    pub price_override: Option<Money>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "productCodeableConcept")]
    pub product_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "productReference")]
    pub product_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub reason: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "requestingOrganization")]
    pub requesting_organization: Option<Reference>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub service: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    pub subject: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportingInformation")]
    pub supporting_information: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ChargeItemDefinition {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_approvalDate")]
    pub approval_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_copyright")]
    pub copyright: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_derivedFromUri")]
    pub derived_from_uri: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_experimental")]
    pub experimental: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastReviewDate")]
    pub last_review_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_publisher")]
    pub publisher: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub applicability: Option<Vec<ChargeItemDefinitionApplicability>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "approvalDate")]
    pub approval_date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "derivedFromUri")]
    pub derived_from_uri: Option<Vec<Uri>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectivePeriod")]
    pub effective_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub instance: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastReviewDate")]
    pub last_review_date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "partOf")]
    pub part_of: Option<Vec<Canonical>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "propertyGroup")]
    pub property_group: Option<Vec<ChargeItemDefinitionPropertyGroup>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub replaces: Option<Vec<Canonical>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ChargeItemDefinition_Applicability")]
#[serde(deny_unknown_fields)]
pub struct ChargeItemDefinitionApplicability {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_expression")]
    pub expression: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ChargeItemDefinition_PriceComponent")]
#[serde(deny_unknown_fields)]
pub struct ChargeItemDefinitionPriceComponent {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_factor")]
    pub factor: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub amount: Option<Money>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub factor: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ChargeItemDefinition_PropertyGroup")]
#[serde(deny_unknown_fields)]
pub struct ChargeItemDefinitionPropertyGroup {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub applicability: Option<Vec<ChargeItemDefinitionApplicability>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "priceComponent")]
    pub price_component: Option<Vec<ChargeItemDefinitionPriceComponent>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ChargeItem_Performer")]
#[serde(deny_unknown_fields)]
pub struct ChargeItemPerformer {
    pub actor: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub function: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Citation {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_approvalDate")]
    pub approval_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_copyright")]
    pub copyright: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_experimental")]
    pub experimental: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastReviewDate")]
    pub last_review_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_publisher")]
    pub publisher: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_purpose")]
    pub purpose: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "approvalDate")]
    pub approval_date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "citedArtifact")]
    pub cited_artifact: Option<CitationCitedArtifact>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub classification: Option<Vec<CitationClassification>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "currentState")]
    pub current_state: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub editor: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectivePeriod")]
    pub effective_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub endorser: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastReviewDate")]
    pub last_review_date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatesTo")]
    pub relates_to: Option<Vec<CitationRelatesTo>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub reviewer: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusDate")]
    pub status_date: Option<Vec<CitationStatusDate>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub summary: Option<Vec<CitationSummary>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Citation_Abstract")]
#[serde(deny_unknown_fields)]
pub struct CitationAbstract {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_copyright")]
    pub copyright: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_text")]
    pub text: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Citation_AffiliationInfo")]
#[serde(deny_unknown_fields)]
pub struct CitationAffiliationInfo {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_affiliation")]
    pub affiliation: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_role")]
    pub role: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub affiliation: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Citation_CitedArtifact")]
#[serde(deny_unknown_fields)]
pub struct CitationCitedArtifact {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_dateAccessed")]
    pub date_accessed: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "abstract")]
    pub abstract_: Option<Vec<CitationAbstract>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub classification: Option<Vec<CitationClassification1>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contributorship: Option<CitationContributorship>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "currentState")]
    pub current_state: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dateAccessed")]
    pub date_accessed: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub part: Option<CitationPart>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "publicationForm")]
    pub publication_form: Option<Vec<CitationPublicationForm>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatedIdentifier")]
    pub related_identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatesTo")]
    pub relates_to: Option<Vec<CitationRelatesTo1>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusDate")]
    pub status_date: Option<Vec<CitationStatusDate1>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<Vec<CitationTitle>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<CitationVersion>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "webLocation")]
    pub web_location: Option<Vec<CitationWebLocation>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Citation_Classification")]
#[serde(deny_unknown_fields)]
pub struct CitationClassification {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub classifier: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Citation_Classification1")]
#[serde(deny_unknown_fields)]
pub struct CitationClassification1 {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub classifier: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "whoClassified")]
    pub who_classified: Option<CitationWhoClassified>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Citation_ContributionInstance")]
#[serde(deny_unknown_fields)]
pub struct CitationContributionInstance {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_time")]
    pub time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub time: Option<DateTime>,

    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Citation_Contributorship")]
#[serde(deny_unknown_fields)]
pub struct CitationContributorship {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_complete")]
    pub complete: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub complete: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub entry: Option<Vec<CitationEntry>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub summary: Option<Vec<CitationSummary1>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Citation_DateOfPublication")]
#[serde(deny_unknown_fields)]
pub struct CitationDateOfPublication {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_day")]
    pub day: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_month")]
    pub month: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_season")]
    pub season: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_text")]
    pub text: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_year")]
    pub year: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub day: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub month: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub season: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub year: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Citation_Entry")]
#[serde(deny_unknown_fields)]
pub struct CitationEntry {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_collectiveName")]
    pub collective_name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_correspondingContact")]
    pub corresponding_contact: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_initials")]
    pub initials: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_listOrder")]
    pub list_order: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub address: Option<Vec<Address>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "affiliationInfo")]
    pub affiliation_info: Option<Vec<CitationAffiliationInfo>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "collectiveName")]
    pub collective_name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contributionInstance")]
    pub contribution_instance: Option<Vec<CitationContributionInstance>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contributionType")]
    pub contribution_type: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "correspondingContact")]
    pub corresponding_contact: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub initials: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "listOrder")]
    pub list_order: Option<PositiveInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<HumanName>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub role: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub telecom: Option<Vec<ContactPoint>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Citation_Part")]
#[serde(deny_unknown_fields)]
pub struct CitationPart {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_value")]
    pub value: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "baseCitation")]
    pub base_citation: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Citation_PeriodicRelease")]
#[serde(deny_unknown_fields)]
pub struct CitationPeriodicRelease {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_issue")]
    pub issue: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_volume")]
    pub volume: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "citedMedium")]
    pub cited_medium: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dateOfPublication")]
    pub date_of_publication: Option<CitationDateOfPublication>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub issue: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub volume: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Citation_PublicationForm")]
#[serde(deny_unknown_fields)]
pub struct CitationPublicationForm {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_accessionNumber")]
    pub accession_number: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_articleDate")]
    pub article_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_copyright")]
    pub copyright: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_firstPage")]
    pub first_page: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastPage")]
    pub last_page: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastRevisionDate")]
    pub last_revision_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_pageCount")]
    pub page_count: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_pageString")]
    pub page_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "accessionNumber")]
    pub accession_number: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "articleDate")]
    pub article_date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "firstPage")]
    pub first_page: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastPage")]
    pub last_page: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastRevisionDate")]
    pub last_revision_date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "pageCount")]
    pub page_count: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "pageString")]
    pub page_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "periodicRelease")]
    pub periodic_release: Option<CitationPeriodicRelease>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "publishedIn")]
    pub published_in: Option<CitationPublishedIn>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Citation_PublishedIn")]
#[serde(deny_unknown_fields)]
pub struct CitationPublishedIn {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_publisherLocation")]
    pub publisher_location: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "publisherLocation")]
    pub publisher_location: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Citation_RelatesTo")]
#[serde(deny_unknown_fields)]
pub struct CitationRelatesTo {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_targetUri")]
    pub target_uri: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(rename = "relationshipType")]
    pub relationship_type: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetAttachment")]
    pub target_attachment: Option<Attachment>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetClassifier")]
    pub target_classifier: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetIdentifier")]
    pub target_identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetReference")]
    pub target_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetUri")]
    pub target_uri: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Citation_RelatesTo1")]
#[serde(deny_unknown_fields)]
pub struct CitationRelatesTo1 {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_targetUri")]
    pub target_uri: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(rename = "relationshipType")]
    pub relationship_type: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetAttachment")]
    pub target_attachment: Option<Attachment>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetClassifier")]
    pub target_classifier: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetIdentifier")]
    pub target_identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetReference")]
    pub target_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetUri")]
    pub target_uri: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Citation_StatusDate")]
#[serde(deny_unknown_fields)]
pub struct CitationStatusDate {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_actual")]
    pub actual: Option<Element>,

    pub activity: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub actual: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub period: Period,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Citation_StatusDate1")]
#[serde(deny_unknown_fields)]
pub struct CitationStatusDate1 {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_actual")]
    pub actual: Option<Element>,

    pub activity: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub actual: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub period: Period,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Citation_Summary")]
#[serde(deny_unknown_fields)]
pub struct CitationSummary {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_text")]
    pub text: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub style: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Markdown>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Citation_Summary1")]
#[serde(deny_unknown_fields)]
pub struct CitationSummary1 {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_value")]
    pub value: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub source: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub style: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Markdown>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Citation_Title")]
#[serde(deny_unknown_fields)]
pub struct CitationTitle {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_text")]
    pub text: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Vec<CodeableConcept>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Citation_Version")]
#[serde(deny_unknown_fields)]
pub struct CitationVersion {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_value")]
    pub value: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "baseCitation")]
    pub base_citation: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Citation_WebLocation")]
#[serde(deny_unknown_fields)]
pub struct CitationWebLocation {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Citation_WhoClassified")]
#[serde(deny_unknown_fields)]
pub struct CitationWhoClassified {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_classifierCopyright")]
    pub classifier_copyright: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_freeToShare")]
    pub free_to_share: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "classifierCopyright")]
    pub classifier_copyright: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "freeToShare")]
    pub free_to_share: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub organization: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub person: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<Reference>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Claim {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_created")]
    pub created: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_use")]
    pub use_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub accident: Option<ClaimAccident>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "billablePeriod")]
    pub billable_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "careTeam")]
    pub care_team: Option<Vec<ClaimCareTeam>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub created: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub diagnosis: Option<Vec<ClaimDiagnosis>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub enterer: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub facility: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fundsReserve")]
    pub funds_reserve: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    pub insurance: Vec<ClaimInsurance>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub insurer: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub item: Option<Vec<ClaimItem>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "originalPrescription")]
    pub original_prescription: Option<Reference>,

    pub patient: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub payee: Option<ClaimPayee>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub prescription: Option<Reference>,

    pub priority: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub procedure: Option<Vec<ClaimProcedure>>,

    pub provider: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub referral: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub related: Option<Vec<ClaimRelated>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subType")]
    pub sub_type: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportingInfo")]
    pub supporting_info: Option<Vec<ClaimSupportingInfo>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub total: Option<Money>,

    #[serde(rename = "type")]
    pub type_: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "use")]
    pub use_: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ClaimResponse {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_created")]
    pub created: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_disposition")]
    pub disposition: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_outcome")]
    pub outcome: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_preAuthRef")]
    pub pre_auth_ref: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_use")]
    pub use_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "addItem")]
    pub add_item: Option<Vec<ClaimResponseAddItem>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub adjudication: Option<Vec<ClaimResponseAdjudication>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "communicationRequest")]
    pub communication_request: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub created: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub disposition: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<Vec<ClaimResponseError>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub form: Option<Attachment>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "formCode")]
    pub form_code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fundsReserve")]
    pub funds_reserve: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub insurance: Option<Vec<ClaimResponseInsurance>>,

    pub insurer: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub item: Option<Vec<ClaimResponseItem>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub outcome: Option<Code>,

    pub patient: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "payeeType")]
    pub payee_type: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub payment: Option<ClaimResponsePayment>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "preAuthPeriod")]
    pub pre_auth_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "preAuthRef")]
    pub pre_auth_ref: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "processNote")]
    pub process_note: Option<Vec<ClaimResponseProcessNote>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub request: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub requestor: Option<Reference>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subType")]
    pub sub_type: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub total: Option<Vec<ClaimResponseTotal>>,

    #[serde(rename = "type")]
    pub type_: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "use")]
    pub use_: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ClaimResponse_AddItem")]
#[serde(deny_unknown_fields)]
pub struct ClaimResponseAddItem {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_detailSequence")]
    pub detail_sequence: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_factor")]
    pub factor: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_itemSequence")]
    pub item_sequence: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_noteNumber")]
    pub note_number: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_servicedDate")]
    pub serviced_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_subdetailSequence")]
    pub subdetail_sequence: Option<Vec<Element>>,

    pub adjudication: Vec<ClaimResponseAdjudication>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "bodySite")]
    pub body_site: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub detail: Option<Vec<ClaimResponseDetail1>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "detailSequence")]
    pub detail_sequence: Option<Vec<PositiveInt>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub factor: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "itemSequence")]
    pub item_sequence: Option<Vec<PositiveInt>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "locationAddress")]
    pub location_address: Option<Address>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "locationCodeableConcept")]
    pub location_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "locationReference")]
    pub location_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub modifier: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub net: Option<Money>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "noteNumber")]
    pub note_number: Option<Vec<PositiveInt>>,

    #[serde(rename = "productOrService")]
    pub product_or_service: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "programCode")]
    pub program_code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub provider: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "servicedDate")]
    pub serviced_date: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "servicedPeriod")]
    pub serviced_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subSite")]
    pub sub_site: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subdetailSequence")]
    pub subdetail_sequence: Option<Vec<PositiveInt>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "unitPrice")]
    pub unit_price: Option<Money>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ClaimResponse_Adjudication")]
#[serde(deny_unknown_fields)]
pub struct ClaimResponseAdjudication {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_value")]
    pub value: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub amount: Option<Money>,

    pub category: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub reason: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Decimal>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ClaimResponse_Detail")]
#[serde(deny_unknown_fields)]
pub struct ClaimResponseDetail {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_detailSequence")]
    pub detail_sequence: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_noteNumber")]
    pub note_number: Option<Vec<Element>>,

    pub adjudication: Vec<ClaimResponseAdjudication>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "detailSequence")]
    pub detail_sequence: Option<PositiveInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "noteNumber")]
    pub note_number: Option<Vec<PositiveInt>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subDetail")]
    pub sub_detail: Option<Vec<ClaimResponseSubDetail>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ClaimResponse_Detail1")]
#[serde(deny_unknown_fields)]
pub struct ClaimResponseDetail1 {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_factor")]
    pub factor: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_noteNumber")]
    pub note_number: Option<Vec<Element>>,

    pub adjudication: Vec<ClaimResponseAdjudication>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub factor: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub modifier: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub net: Option<Money>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "noteNumber")]
    pub note_number: Option<Vec<PositiveInt>>,

    #[serde(rename = "productOrService")]
    pub product_or_service: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subDetail")]
    pub sub_detail: Option<Vec<ClaimResponseSubDetail1>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "unitPrice")]
    pub unit_price: Option<Money>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ClaimResponse_Error")]
#[serde(deny_unknown_fields)]
pub struct ClaimResponseError {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_detailSequence")]
    pub detail_sequence: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_itemSequence")]
    pub item_sequence: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_subDetailSequence")]
    pub sub_detail_sequence: Option<Element>,

    pub code: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "detailSequence")]
    pub detail_sequence: Option<PositiveInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "itemSequence")]
    pub item_sequence: Option<PositiveInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subDetailSequence")]
    pub sub_detail_sequence: Option<PositiveInt>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ClaimResponse_Insurance")]
#[serde(deny_unknown_fields)]
pub struct ClaimResponseInsurance {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_businessArrangement")]
    pub business_arrangement: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_focal")]
    pub focal: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sequence")]
    pub sequence: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "businessArrangement")]
    pub business_arrangement: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "claimResponse")]
    pub claim_response: Option<Reference>,

    pub coverage: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub focal: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub sequence: Option<PositiveInt>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ClaimResponse_Item")]
#[serde(deny_unknown_fields)]
pub struct ClaimResponseItem {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_itemSequence")]
    pub item_sequence: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_noteNumber")]
    pub note_number: Option<Vec<Element>>,

    pub adjudication: Vec<ClaimResponseAdjudication>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub detail: Option<Vec<ClaimResponseDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "itemSequence")]
    pub item_sequence: Option<PositiveInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "noteNumber")]
    pub note_number: Option<Vec<PositiveInt>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ClaimResponse_Payment")]
#[serde(deny_unknown_fields)]
pub struct ClaimResponsePayment {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub adjustment: Option<Money>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "adjustmentReason")]
    pub adjustment_reason: Option<CodeableConcept>,

    pub amount: Money,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ClaimResponse_ProcessNote")]
#[serde(deny_unknown_fields)]
pub struct ClaimResponseProcessNote {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_number")]
    pub number: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_text")]
    pub text: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub number: Option<PositiveInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ClaimResponse_SubDetail")]
#[serde(deny_unknown_fields)]
pub struct ClaimResponseSubDetail {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_noteNumber")]
    pub note_number: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_subDetailSequence")]
    pub sub_detail_sequence: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub adjudication: Option<Vec<ClaimResponseAdjudication>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "noteNumber")]
    pub note_number: Option<Vec<PositiveInt>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subDetailSequence")]
    pub sub_detail_sequence: Option<PositiveInt>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ClaimResponse_SubDetail1")]
#[serde(deny_unknown_fields)]
pub struct ClaimResponseSubDetail1 {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_factor")]
    pub factor: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_noteNumber")]
    pub note_number: Option<Vec<Element>>,

    pub adjudication: Vec<ClaimResponseAdjudication>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub factor: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub modifier: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub net: Option<Money>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "noteNumber")]
    pub note_number: Option<Vec<PositiveInt>>,

    #[serde(rename = "productOrService")]
    pub product_or_service: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "unitPrice")]
    pub unit_price: Option<Money>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ClaimResponse_Total")]
#[serde(deny_unknown_fields)]
pub struct ClaimResponseTotal {
    pub amount: Money,

    pub category: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Claim_Accident")]
#[serde(deny_unknown_fields)]
pub struct ClaimAccident {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "locationAddress")]
    pub location_address: Option<Address>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "locationReference")]
    pub location_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Claim_CareTeam")]
#[serde(deny_unknown_fields)]
pub struct ClaimCareTeam {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_responsible")]
    pub responsible: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sequence")]
    pub sequence: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub provider: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub qualification: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub responsible: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub role: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub sequence: Option<PositiveInt>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Claim_Detail")]
#[serde(deny_unknown_fields)]
pub struct ClaimDetail {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_factor")]
    pub factor: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sequence")]
    pub sequence: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub factor: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub modifier: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub net: Option<Money>,

    #[serde(rename = "productOrService")]
    pub product_or_service: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "programCode")]
    pub program_code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub revenue: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub sequence: Option<PositiveInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subDetail")]
    pub sub_detail: Option<Vec<ClaimSubDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub udi: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "unitPrice")]
    pub unit_price: Option<Money>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Claim_Diagnosis")]
#[serde(deny_unknown_fields)]
pub struct ClaimDiagnosis {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sequence")]
    pub sequence: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "diagnosisCodeableConcept")]
    pub diagnosis_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "diagnosisReference")]
    pub diagnosis_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onAdmission")]
    pub on_admission: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "packageCode")]
    pub package_code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub sequence: Option<PositiveInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Vec<CodeableConcept>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Claim_Insurance")]
#[serde(deny_unknown_fields)]
pub struct ClaimInsurance {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_businessArrangement")]
    pub business_arrangement: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_focal")]
    pub focal: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_preAuthRef")]
    pub pre_auth_ref: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sequence")]
    pub sequence: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "businessArrangement")]
    pub business_arrangement: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "claimResponse")]
    pub claim_response: Option<Reference>,

    pub coverage: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub focal: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "preAuthRef")]
    pub pre_auth_ref: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub sequence: Option<PositiveInt>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Claim_Item")]
#[serde(deny_unknown_fields)]
pub struct ClaimItem {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_careTeamSequence")]
    pub care_team_sequence: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_diagnosisSequence")]
    pub diagnosis_sequence: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_factor")]
    pub factor: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_informationSequence")]
    pub information_sequence: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_procedureSequence")]
    pub procedure_sequence: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sequence")]
    pub sequence: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_servicedDate")]
    pub serviced_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "bodySite")]
    pub body_site: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "careTeamSequence")]
    pub care_team_sequence: Option<Vec<PositiveInt>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub detail: Option<Vec<ClaimDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "diagnosisSequence")]
    pub diagnosis_sequence: Option<Vec<PositiveInt>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub factor: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "informationSequence")]
    pub information_sequence: Option<Vec<PositiveInt>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "locationAddress")]
    pub location_address: Option<Address>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "locationCodeableConcept")]
    pub location_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "locationReference")]
    pub location_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub modifier: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub net: Option<Money>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "procedureSequence")]
    pub procedure_sequence: Option<Vec<PositiveInt>>,

    #[serde(rename = "productOrService")]
    pub product_or_service: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "programCode")]
    pub program_code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub revenue: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub sequence: Option<PositiveInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "servicedDate")]
    pub serviced_date: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "servicedPeriod")]
    pub serviced_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subSite")]
    pub sub_site: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub udi: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "unitPrice")]
    pub unit_price: Option<Money>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Claim_Payee")]
#[serde(deny_unknown_fields)]
pub struct ClaimPayee {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub party: Option<Reference>,

    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Claim_Procedure")]
#[serde(deny_unknown_fields)]
pub struct ClaimProcedure {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sequence")]
    pub sequence: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "procedureCodeableConcept")]
    pub procedure_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "procedureReference")]
    pub procedure_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub sequence: Option<PositiveInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub udi: Option<Vec<Reference>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Claim_Related")]
#[serde(deny_unknown_fields)]
pub struct ClaimRelated {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub claim: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub reference: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub relationship: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Claim_SubDetail")]
#[serde(deny_unknown_fields)]
pub struct ClaimSubDetail {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_factor")]
    pub factor: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sequence")]
    pub sequence: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub factor: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub modifier: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub net: Option<Money>,

    #[serde(rename = "productOrService")]
    pub product_or_service: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "programCode")]
    pub program_code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub revenue: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub sequence: Option<PositiveInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub udi: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "unitPrice")]
    pub unit_price: Option<Money>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Claim_SupportingInfo")]
#[serde(deny_unknown_fields)]
pub struct ClaimSupportingInfo {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sequence")]
    pub sequence: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_timingDate")]
    pub timing_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub value_boolean: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueString")]
    pub value_string: Option<Element>,

    pub category: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub reason: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub sequence: Option<PositiveInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingDate")]
    pub timing_date: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingPeriod")]
    pub timing_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAttachment")]
    pub value_attachment: Option<Attachment>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueReference")]
    pub value_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueString")]
    pub value_string: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ClinicalImpression {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_effectiveDateTime")]
    pub effective_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_protocol")]
    pub protocol: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_summary")]
    pub summary: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub assessor: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectiveDateTime")]
    pub effective_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectivePeriod")]
    pub effective_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub finding: Option<Vec<ClinicalImpressionFinding>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub investigation: Option<Vec<ClinicalImpressionInvestigation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub previous: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub problem: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "prognosisCodeableConcept")]
    pub prognosis_codeable_concept: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "prognosisReference")]
    pub prognosis_reference: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub protocol: Option<Vec<Uri>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusReason")]
    pub status_reason: Option<CodeableConcept>,

    pub subject: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub summary: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportingInfo")]
    pub supporting_info: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ClinicalImpression_Finding")]
#[serde(deny_unknown_fields)]
pub struct ClinicalImpressionFinding {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_basis")]
    pub basis: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub basis: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "itemCodeableConcept")]
    pub item_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "itemReference")]
    pub item_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ClinicalImpression_Investigation")]
#[serde(deny_unknown_fields)]
pub struct ClinicalImpressionInvestigation {
    pub code: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub item: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ClinicalUseDefinition {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contraindication: Option<ClinicalUseDefinitionContraindication>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub indication: Option<ClinicalUseDefinitionIndication>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub interaction: Option<ClinicalUseDefinitionInteraction>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub population: Option<Vec<Reference>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "undesirableEffect")]
    pub undesirable_effect: Option<ClinicalUseDefinitionUndesirableEffect>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub warning: Option<ClinicalUseDefinitionWarning>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ClinicalUseDefinition_Contraindication")]
#[serde(deny_unknown_fields)]
pub struct ClinicalUseDefinitionContraindication {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comorbidity: Option<Vec<CodeableReference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "diseaseStatus")]
    pub disease_status: Option<CodeableReference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "diseaseSymptomProcedure")]
    pub disease_symptom_procedure: Option<CodeableReference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub indication: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "otherTherapy")]
    pub other_therapy: Option<Vec<ClinicalUseDefinitionOtherTherapy>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ClinicalUseDefinition_Indication")]
#[serde(deny_unknown_fields)]
pub struct ClinicalUseDefinitionIndication {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_durationString")]
    pub duration_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub comorbidity: Option<Vec<CodeableReference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "diseaseStatus")]
    pub disease_status: Option<CodeableReference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "diseaseSymptomProcedure")]
    pub disease_symptom_procedure: Option<CodeableReference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "durationRange")]
    pub duration_range: Option<Range>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "durationString")]
    pub duration_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "intendedEffect")]
    pub intended_effect: Option<CodeableReference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "otherTherapy")]
    pub other_therapy: Option<Vec<ClinicalUseDefinitionOtherTherapy>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "undesirableEffect")]
    pub undesirable_effect: Option<Vec<Reference>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ClinicalUseDefinition_Interactant")]
#[serde(deny_unknown_fields)]
pub struct ClinicalUseDefinitionInteractant {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "itemCodeableConcept")]
    pub item_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "itemReference")]
    pub item_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ClinicalUseDefinition_Interaction")]
#[serde(deny_unknown_fields)]
pub struct ClinicalUseDefinitionInteraction {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub effect: Option<CodeableReference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub incidence: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub interactant: Option<Vec<ClinicalUseDefinitionInteractant>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub management: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ClinicalUseDefinition_OtherTherapy")]
#[serde(deny_unknown_fields)]
pub struct ClinicalUseDefinitionOtherTherapy {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(rename = "relationshipType")]
    pub relationship_type: CodeableConcept,

    pub therapy: CodeableReference,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ClinicalUseDefinition_UndesirableEffect")]
#[serde(deny_unknown_fields)]
pub struct ClinicalUseDefinitionUndesirableEffect {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub classification: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "frequencyOfOccurrence")]
    pub frequency_of_occurrence: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "symptomConditionEffect")]
    pub symptom_condition_effect: Option<CodeableReference>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ClinicalUseDefinition_Warning")]
#[serde(deny_unknown_fields)]
pub struct ClinicalUseDefinitionWarning {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct CodeSystem {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_caseSensitive")]
    pub case_sensitive: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_compositional")]
    pub compositional: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_content")]
    pub content: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_copyright")]
    pub copyright: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_count")]
    pub count: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_experimental")]
    pub experimental: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_hierarchyMeaning")]
    pub hierarchy_meaning: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_publisher")]
    pub publisher: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_purpose")]
    pub purpose: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_versionNeeded")]
    pub version_needed: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "caseSensitive")]
    pub case_sensitive: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub compositional: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub concept: Option<Vec<CodeSystemConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub content: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub count: Option<UnsignedInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub filter: Option<Vec<CodeSystemFilter>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "hierarchyMeaning")]
    pub hierarchy_meaning: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub property: Option<Vec<CodeSystemProperty>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub supplements: Option<Canonical>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueSet")]
    pub value_set: Option<Canonical>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "versionNeeded")]
    pub version_needed: Option<Boolean>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CodeSystem_Concept")]
#[serde(deny_unknown_fields)]
pub struct CodeSystemConcept {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_code")]
    pub code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_definition")]
    pub definition: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_display")]
    pub display: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub concept: Option<Vec<CodeSystemConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub definition: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub designation: Option<Vec<CodeSystemDesignation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub property: Option<Vec<CodeSystemProperty1>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CodeSystem_Designation")]
#[serde(deny_unknown_fields)]
pub struct CodeSystemDesignation {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_value")]
    pub value: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "use")]
    pub use_: Option<Coding>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CodeSystem_Filter")]
#[serde(deny_unknown_fields)]
pub struct CodeSystemFilter {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_code")]
    pub code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_operator")]
    pub operator: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_value")]
    pub value: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub operator: Option<Vec<Code>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CodeSystem_Property")]
#[serde(deny_unknown_fields)]
pub struct CodeSystemProperty {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_code")]
    pub code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_uri")]
    pub uri: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub uri: Option<Uri>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CodeSystem_Property1")]
#[serde(deny_unknown_fields)]
pub struct CodeSystemProperty1 {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_code")]
    pub code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub value_boolean: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueCode")]
    pub value_code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDateTime")]
    pub value_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDecimal")]
    pub value_decimal: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueInteger")]
    pub value_integer: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueString")]
    pub value_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCode")]
    pub value_code: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCoding")]
    pub value_coding: Option<Coding>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDateTime")]
    pub value_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDecimal")]
    pub value_decimal: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueInteger")]
    pub value_integer: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueString")]
    pub value_string: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct CodeableConcept {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_text")]
    pub text: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub coding: Option<Vec<Coding>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct CodeableReference {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub reference: Option<Reference>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Coding {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_code")]
    pub code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_display")]
    pub display: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_system")]
    pub system: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_userSelected")]
    pub user_selected: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub system: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "userSelected")]
    pub user_selected: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Communication {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_instantiatesUri")]
    pub instantiates_uri: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_priority")]
    pub priority: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_received")]
    pub received: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sent")]
    pub sent: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub about: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "inResponseTo")]
    pub in_response_to: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesCanonical")]
    pub instantiates_canonical: Option<Vec<Canonical>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesUri")]
    pub instantiates_uri: Option<Vec<Uri>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub medium: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "partOf")]
    pub part_of: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub payload: Option<Vec<CommunicationPayload>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub priority: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub received: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub recipient: Option<Vec<Reference>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub sender: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub sent: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusReason")]
    pub status_reason: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub topic: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct CommunicationRequest {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_authoredOn")]
    pub authored_on: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_doNotPerform")]
    pub do_not_perform: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_occurrenceDateTime")]
    pub occurrence_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_priority")]
    pub priority: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub about: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "authoredOn")]
    pub authored_on: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "doNotPerform")]
    pub do_not_perform: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "groupIdentifier")]
    pub group_identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub medium: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrenceDateTime")]
    pub occurrence_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrencePeriod")]
    pub occurrence_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub payload: Option<Vec<CommunicationRequestPayload>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub priority: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub recipient: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub replaces: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub requester: Option<Reference>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub sender: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusReason")]
    pub status_reason: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CommunicationRequest_Payload")]
#[serde(deny_unknown_fields)]
pub struct CommunicationRequestPayload {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_contentString")]
    pub content_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contentAttachment")]
    pub content_attachment: Option<Attachment>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contentReference")]
    pub content_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contentString")]
    pub content_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Communication_Payload")]
#[serde(deny_unknown_fields)]
pub struct CommunicationPayload {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_contentString")]
    pub content_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contentAttachment")]
    pub content_attachment: Option<Attachment>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contentReference")]
    pub content_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contentString")]
    pub content_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct CompartmentDefinition {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_code")]
    pub code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_experimental")]
    pub experimental: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_publisher")]
    pub publisher: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_purpose")]
    pub purpose: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_search")]
    pub search: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource: Option<Vec<CompartmentDefinitionResource>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub search: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CompartmentDefinition_Resource")]
#[serde(deny_unknown_fields)]
pub struct CompartmentDefinitionResource {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_code")]
    pub code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_documentation")]
    pub documentation: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_param")]
    pub param: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub documentation: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub param: Option<Vec<String>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Composition {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_confidentiality")]
    pub confidentiality: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub attester: Option<Vec<CompositionAttester>>,

    pub author: Vec<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub confidentiality: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub custodian: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub event: Option<Vec<CompositionEvent>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatesTo")]
    pub relates_to: Option<Vec<CompositionRelatesTo>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub section: Option<Vec<CompositionSection>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Composition_Attester")]
#[serde(deny_unknown_fields)]
pub struct CompositionAttester {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_mode")]
    pub mode: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_time")]
    pub time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub mode: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub party: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub time: Option<DateTime>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Composition_Event")]
#[serde(deny_unknown_fields)]
pub struct CompositionEvent {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub detail: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Composition_RelatesTo")]
#[serde(deny_unknown_fields)]
pub struct CompositionRelatesTo {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_code")]
    pub code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetIdentifier")]
    pub target_identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetReference")]
    pub target_reference: Option<Reference>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Composition_Section")]
#[serde(deny_unknown_fields)]
pub struct CompositionSection {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_mode")]
    pub mode: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "emptyReason")]
    pub empty_reason: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub entry: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub focus: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub mode: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "orderedBy")]
    pub ordered_by: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub section: Option<Vec<CompositionSection>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ConceptMap {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_copyright")]
    pub copyright: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_experimental")]
    pub experimental: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_publisher")]
    pub publisher: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_purpose")]
    pub purpose: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sourceCanonical")]
    pub source_canonical: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sourceUri")]
    pub source_uri: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_targetCanonical")]
    pub target_canonical: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_targetUri")]
    pub target_uri: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub group: Option<Vec<ConceptMapGroup>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "sourceCanonical")]
    pub source_canonical: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "sourceUri")]
    pub source_uri: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetCanonical")]
    pub target_canonical: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetUri")]
    pub target_uri: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ConceptMap_DependsOn")]
#[serde(deny_unknown_fields)]
pub struct ConceptMapDependsOn {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_display")]
    pub display: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_property")]
    pub property: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_value")]
    pub value: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub property: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub system: Option<Canonical>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ConceptMap_Element")]
#[serde(deny_unknown_fields)]
pub struct ConceptMapElement {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_code")]
    pub code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_display")]
    pub display: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub target: Option<Vec<ConceptMapTarget>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ConceptMap_Group")]
#[serde(deny_unknown_fields)]
pub struct ConceptMapGroup {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_source")]
    pub source: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sourceVersion")]
    pub source_version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_target")]
    pub target: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_targetVersion")]
    pub target_version: Option<Element>,

    pub element: Vec<ConceptMapElement>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub source: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "sourceVersion")]
    pub source_version: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub target: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetVersion")]
    pub target_version: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub unmapped: Option<ConceptMapUnmapped>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ConceptMap_Target")]
#[serde(deny_unknown_fields)]
pub struct ConceptMapTarget {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_code")]
    pub code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_comment")]
    pub comment: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_display")]
    pub display: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_equivalence")]
    pub equivalence: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dependsOn")]
    pub depends_on: Option<Vec<ConceptMapDependsOn>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub equivalence: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub product: Option<Vec<ConceptMapDependsOn>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ConceptMap_Unmapped")]
#[serde(deny_unknown_fields)]
pub struct ConceptMapUnmapped {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_code")]
    pub code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_display")]
    pub display: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_mode")]
    pub mode: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub mode: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Canonical>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Condition {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_abatementDateTime")]
    pub abatement_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_abatementString")]
    pub abatement_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_onsetDateTime")]
    pub onset_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_onsetString")]
    pub onset_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_recordedDate")]
    pub recorded_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "abatementAge")]
    pub abatement_age: Option<Age>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "abatementDateTime")]
    pub abatement_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "abatementPeriod")]
    pub abatement_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "abatementRange")]
    pub abatement_range: Option<Range>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "abatementString")]
    pub abatement_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub asserter: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "bodySite")]
    pub body_site: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "clinicalStatus")]
    pub clinical_status: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub evidence: Option<Vec<ConditionEvidence>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onsetAge")]
    pub onset_age: Option<Age>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onsetDateTime")]
    pub onset_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onsetPeriod")]
    pub onset_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onsetRange")]
    pub onset_range: Option<Range>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onsetString")]
    pub onset_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "recordedDate")]
    pub recorded_date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub recorder: Option<Reference>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub severity: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub stage: Option<Vec<ConditionStage>>,

    pub subject: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "verificationStatus")]
    pub verification_status: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Condition_Evidence")]
#[serde(deny_unknown_fields)]
pub struct ConditionEvidence {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub detail: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Condition_Stage")]
#[serde(deny_unknown_fields)]
pub struct ConditionStage {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub assessment: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub summary: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Consent {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_dateTime")]
    pub date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    pub category: Vec<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dateTime")]
    pub date_time: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub organization: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub patient: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub performer: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub policy: Option<Vec<ConsentPolicy>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "policyRule")]
    pub policy_rule: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub provision: Option<ConsentProvision>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    pub scope: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "sourceAttachment")]
    pub source_attachment: Option<Attachment>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "sourceReference")]
    pub source_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub verification: Option<Vec<ConsentVerification>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Consent_Actor")]
#[serde(deny_unknown_fields)]
pub struct ConsentActor {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub reference: Reference,

    pub role: CodeableConcept,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Consent_Data")]
#[serde(deny_unknown_fields)]
pub struct ConsentData {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_meaning")]
    pub meaning: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meaning: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub reference: Reference,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Consent_Policy")]
#[serde(deny_unknown_fields)]
pub struct ConsentPolicy {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_authority")]
    pub authority: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_uri")]
    pub uri: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub authority: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub uri: Option<Uri>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Consent_Provision")]
#[serde(deny_unknown_fields)]
pub struct ConsentProvision {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub action: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub actor: Option<Vec<ConsentActor>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub class: Option<Vec<Coding>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub data: Option<Vec<ConsentData>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dataPeriod")]
    pub data_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub provision: Option<Vec<ConsentProvision>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Vec<Coding>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "securityLabel")]
    pub security_label: Option<Vec<Coding>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Consent_Verification")]
#[serde(deny_unknown_fields)]
pub struct ConsentVerification {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_verificationDate")]
    pub verification_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_verified")]
    pub verified: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "verificationDate")]
    pub verification_date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub verified: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "verifiedWith")]
    pub verified_with: Option<Reference>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ContactDetail {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub telecom: Option<Vec<ContactPoint>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ContactPoint {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_rank")]
    pub rank: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_system")]
    pub system: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_use")]
    pub use_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_value")]
    pub value: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub rank: Option<PositiveInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub system: Option<serde_json::Value>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "use")]
    pub use_: Option<serde_json::Value>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Contract {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_alias")]
    pub alias: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_instantiatesUri")]
    pub instantiates_uri: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_issued")]
    pub issued: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_subtitle")]
    pub subtitle: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub alias: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub applies: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub authority: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contentDefinition")]
    pub content_definition: Option<ContractContentDefinition>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contentDerivative")]
    pub content_derivative: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub domain: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "expirationType")]
    pub expiration_type: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub friendly: Option<Vec<ContractFriendly>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesCanonical")]
    pub instantiates_canonical: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesUri")]
    pub instantiates_uri: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub issued: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub legal: Option<Vec<ContractLegal>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "legalState")]
    pub legal_state: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "legallyBindingAttachment")]
    pub legally_binding_attachment: Option<Attachment>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "legallyBindingReference")]
    pub legally_binding_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relevantHistory")]
    pub relevant_history: Option<Vec<Reference>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub rule: Option<Vec<ContractRule>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub scope: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub signer: Option<Vec<ContractSigner>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub site: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subType")]
    pub sub_type: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub subtitle: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportingInfo")]
    pub supporting_info: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub term: Option<Vec<ContractTerm>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "topicCodeableConcept")]
    pub topic_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "topicReference")]
    pub topic_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Contract_Action")]
#[serde(deny_unknown_fields)]
pub struct ContractAction {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_contextLinkId")]
    pub context_link_id: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_doNotPerform")]
    pub do_not_perform: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_linkId")]
    pub link_id: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_occurrenceDateTime")]
    pub occurrence_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_performerLinkId")]
    pub performer_link_id: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_reason")]
    pub reason: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_reasonLinkId")]
    pub reason_link_id: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_requesterLinkId")]
    pub requester_link_id: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_securityLabelNumber")]
    pub security_label_number: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub context: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contextLinkId")]
    pub context_link_id: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "doNotPerform")]
    pub do_not_perform: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    pub intent: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "linkId")]
    pub link_id: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrenceDateTime")]
    pub occurrence_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrencePeriod")]
    pub occurrence_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrenceTiming")]
    pub occurrence_timing: Option<Timing>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub performer: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "performerLinkId")]
    pub performer_link_id: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "performerRole")]
    pub performer_role: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "performerType")]
    pub performer_type: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub reason: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonLinkId")]
    pub reason_link_id: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub requester: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "requesterLinkId")]
    pub requester_link_id: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "securityLabelNumber")]
    pub security_label_number: Option<Vec<UnsignedInt>>,

    pub status: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Vec<ContractSubject>>,

    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Contract_Answer")]
#[serde(deny_unknown_fields)]
pub struct ContractAnswer {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub value_boolean: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDate")]
    pub value_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDateTime")]
    pub value_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDecimal")]
    pub value_decimal: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueInteger")]
    pub value_integer: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueString")]
    pub value_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueTime")]
    pub value_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUri")]
    pub value_uri: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAttachment")]
    pub value_attachment: Option<Attachment>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCoding")]
    pub value_coding: Option<Coding>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDate")]
    pub value_date: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDateTime")]
    pub value_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDecimal")]
    pub value_decimal: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueInteger")]
    pub value_integer: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueReference")]
    pub value_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueString")]
    pub value_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTime")]
    pub value_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUri")]
    pub value_uri: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Contract_Asset")]
#[serde(deny_unknown_fields)]
pub struct ContractAsset {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_condition")]
    pub condition: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_linkId")]
    pub link_id: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_securityLabelNumber")]
    pub security_label_number: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_text")]
    pub text: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub answer: Option<Vec<ContractAnswer>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub condition: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub context: Option<Vec<ContractContext>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "linkId")]
    pub link_id: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Vec<Period>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "periodType")]
    pub period_type: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub relationship: Option<Coding>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub scope: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "securityLabelNumber")]
    pub security_label_number: Option<Vec<UnsignedInt>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub subtype: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "typeReference")]
    pub type_reference: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "usePeriod")]
    pub use_period: Option<Vec<Period>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valuedItem")]
    pub valued_item: Option<Vec<ContractValuedItem>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Contract_ContentDefinition")]
#[serde(deny_unknown_fields)]
pub struct ContractContentDefinition {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_copyright")]
    pub copyright: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_publicationDate")]
    pub publication_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_publicationStatus")]
    pub publication_status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "publicationDate")]
    pub publication_date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "publicationStatus")]
    pub publication_status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subType")]
    pub sub_type: Option<CodeableConcept>,

    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Contract_Context")]
#[serde(deny_unknown_fields)]
pub struct ContractContext {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_text")]
    pub text: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Contract_Friendly")]
#[serde(deny_unknown_fields)]
pub struct ContractFriendly {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contentAttachment")]
    pub content_attachment: Option<Attachment>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contentReference")]
    pub content_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Contract_Legal")]
#[serde(deny_unknown_fields)]
pub struct ContractLegal {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contentAttachment")]
    pub content_attachment: Option<Attachment>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contentReference")]
    pub content_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Contract_Offer")]
#[serde(deny_unknown_fields)]
pub struct ContractOffer {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_linkId")]
    pub link_id: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_securityLabelNumber")]
    pub security_label_number: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_text")]
    pub text: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub answer: Option<Vec<ContractAnswer>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub decision: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "decisionMode")]
    pub decision_mode: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "linkId")]
    pub link_id: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub party: Option<Vec<ContractParty>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "securityLabelNumber")]
    pub security_label_number: Option<Vec<UnsignedInt>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub topic: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Contract_Party")]
#[serde(deny_unknown_fields)]
pub struct ContractParty {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub reference: Vec<Reference>,

    pub role: CodeableConcept,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Contract_Rule")]
#[serde(deny_unknown_fields)]
pub struct ContractRule {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contentAttachment")]
    pub content_attachment: Option<Attachment>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contentReference")]
    pub content_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Contract_SecurityLabel")]
#[serde(deny_unknown_fields)]
pub struct ContractSecurityLabel {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_number")]
    pub number: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<Coding>>,

    pub classification: Coding,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub control: Option<Vec<Coding>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub number: Option<Vec<UnsignedInt>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Contract_Signer")]
#[serde(deny_unknown_fields)]
pub struct ContractSigner {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub party: Reference,

    pub signature: Vec<Signature>,

    #[serde(rename = "type")]
    pub type_: Coding,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Contract_Subject")]
#[serde(deny_unknown_fields)]
pub struct ContractSubject {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub reference: Vec<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub role: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Contract_Term")]
#[serde(deny_unknown_fields)]
pub struct ContractTerm {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_issued")]
    pub issued: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_text")]
    pub text: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub action: Option<Vec<ContractAction>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub applies: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub asset: Option<Vec<ContractAsset>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub group: Option<Vec<ContractTerm>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub issued: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub offer: ContractOffer,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "securityLabel")]
    pub security_label: Option<Vec<ContractSecurityLabel>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subType")]
    pub sub_type: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "topicCodeableConcept")]
    pub topic_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "topicReference")]
    pub topic_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Contract_ValuedItem")]
#[serde(deny_unknown_fields)]
pub struct ContractValuedItem {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_effectiveTime")]
    pub effective_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_factor")]
    pub factor: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_linkId")]
    pub link_id: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_payment")]
    pub payment: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_paymentDate")]
    pub payment_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_points")]
    pub points: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_securityLabelNumber")]
    pub security_label_number: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectiveTime")]
    pub effective_time: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "entityCodeableConcept")]
    pub entity_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "entityReference")]
    pub entity_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub factor: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "linkId")]
    pub link_id: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub net: Option<Money>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub payment: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "paymentDate")]
    pub payment_date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub points: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub recipient: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub responsible: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "securityLabelNumber")]
    pub security_label_number: Option<Vec<UnsignedInt>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "unitPrice")]
    pub unit_price: Option<Money>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Contributor {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<serde_json::Value>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Count {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_code")]
    pub code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_comparator")]
    pub comparator: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_system")]
    pub system: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_unit")]
    pub unit: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_value")]
    pub value: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub comparator: Option<serde_json::Value>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub system: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Decimal>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Coverage {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_dependent")]
    pub dependent: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_network")]
    pub network: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_order")]
    pub order: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_subrogation")]
    pub subrogation: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_subscriberId")]
    pub subscriber_id: Option<Element>,

    pub beneficiary: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub class: Option<Vec<CoverageClass>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contract: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "costToBeneficiary")]
    pub cost_to_beneficiary: Option<Vec<CoverageCostToBeneficiary>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub dependent: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub network: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub order: Option<PositiveInt>,

    pub payor: Vec<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "policyHolder")]
    pub policy_holder: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub relationship: Option<CodeableConcept>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub subrogation: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub subscriber: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subscriberId")]
    pub subscriber_id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct CoverageEligibilityRequest {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_created")]
    pub created: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_purpose")]
    pub purpose: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_servicedDate")]
    pub serviced_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub created: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub enterer: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub facility: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub insurance: Option<Vec<CoverageEligibilityRequestInsurance>>,

    pub insurer: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub item: Option<Vec<CoverageEligibilityRequestItem>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub patient: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub priority: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub provider: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Vec<Code>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "servicedDate")]
    pub serviced_date: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "servicedPeriod")]
    pub serviced_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportingInfo")]
    pub supporting_info: Option<Vec<CoverageEligibilityRequestSupportingInfo>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CoverageEligibilityRequest_Diagnosis")]
#[serde(deny_unknown_fields)]
pub struct CoverageEligibilityRequestDiagnosis {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "diagnosisCodeableConcept")]
    pub diagnosis_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "diagnosisReference")]
    pub diagnosis_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "CoverageEligibilityRequest_Insurance")]
#[serde(deny_unknown_fields)]
pub struct CoverageEligibilityRequestInsurance {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_businessArrangement")]
    pub business_arrangement: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_focal")]
    pub focal: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "businessArrangement")]
    pub business_arrangement: Option<String>,

    pub coverage: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub focal: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CoverageEligibilityRequest_Item")]
#[serde(deny_unknown_fields)]
pub struct CoverageEligibilityRequestItem {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_supportingInfoSequence")]
    pub supporting_info_sequence: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub detail: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub diagnosis: Option<Vec<CoverageEligibilityRequestDiagnosis>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub facility: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub modifier: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "productOrService")]
    pub product_or_service: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub provider: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportingInfoSequence")]
    pub supporting_info_sequence: Option<Vec<PositiveInt>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "unitPrice")]
    pub unit_price: Option<Money>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "CoverageEligibilityRequest_SupportingInfo")]
#[serde(deny_unknown_fields)]
pub struct CoverageEligibilityRequestSupportingInfo {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_appliesToAll")]
    pub applies_to_all: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sequence")]
    pub sequence: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "appliesToAll")]
    pub applies_to_all: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    pub information: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub sequence: Option<PositiveInt>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct CoverageEligibilityResponse {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_created")]
    pub created: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_disposition")]
    pub disposition: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_outcome")]
    pub outcome: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_preAuthRef")]
    pub pre_auth_ref: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_purpose")]
    pub purpose: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_servicedDate")]
    pub serviced_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub created: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub disposition: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<Vec<CoverageEligibilityResponseError>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub form: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub insurance: Option<Vec<CoverageEligibilityResponseInsurance>>,

    pub insurer: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub outcome: Option<Code>,

    pub patient: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "preAuthRef")]
    pub pre_auth_ref: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Vec<Code>>,

    pub request: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub requestor: Option<Reference>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "servicedDate")]
    pub serviced_date: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "servicedPeriod")]
    pub serviced_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "CoverageEligibilityResponse_Benefit")]
#[serde(deny_unknown_fields)]
pub struct CoverageEligibilityResponseBenefit {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_allowedString")]
    pub allowed_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_allowedUnsignedInt")]
    pub allowed_unsigned_int: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_usedString")]
    pub used_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_usedUnsignedInt")]
    pub used_unsigned_int: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "allowedMoney")]
    pub allowed_money: Option<Money>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "allowedString")]
    pub allowed_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "allowedUnsignedInt")]
    pub allowed_unsigned_int: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(rename = "type")]
    pub type_: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "usedMoney")]
    pub used_money: Option<Money>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "usedString")]
    pub used_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "usedUnsignedInt")]
    pub used_unsigned_int: Option<f64>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "CoverageEligibilityResponse_Error")]
#[serde(deny_unknown_fields)]
pub struct CoverageEligibilityResponseError {
    pub code: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "CoverageEligibilityResponse_Insurance")]
#[serde(deny_unknown_fields)]
pub struct CoverageEligibilityResponseInsurance {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_inforce")]
    pub inforce: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "benefitPeriod")]
    pub benefit_period: Option<Period>,

    pub coverage: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub inforce: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub item: Option<Vec<CoverageEligibilityResponseItem>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "CoverageEligibilityResponse_Item")]
#[serde(deny_unknown_fields)]
pub struct CoverageEligibilityResponseItem {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_authorizationRequired")]
    pub authorization_required: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_authorizationUrl")]
    pub authorization_url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_excluded")]
    pub excluded: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "authorizationRequired")]
    pub authorization_required: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "authorizationSupporting")]
    pub authorization_supporting: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "authorizationUrl")]
    pub authorization_url: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub benefit: Option<Vec<CoverageEligibilityResponseBenefit>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub excluded: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub modifier: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub network: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "productOrService")]
    pub product_or_service: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub provider: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub term: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub unit: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Coverage_Class")]
#[serde(deny_unknown_fields)]
pub struct CoverageClass {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_value")]
    pub value: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(rename = "type")]
    pub type_: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Coverage_CostToBeneficiary")]
#[serde(deny_unknown_fields)]
pub struct CoverageCostToBeneficiary {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub exception: Option<Vec<CoverageException>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueMoney")]
    pub value_money: Option<Money>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Coverage_Exception")]
#[serde(deny_unknown_fields)]
pub struct CoverageException {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,

    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct DataRequirement {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_limit")]
    pub limit: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_mustSupport")]
    pub must_support: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "codeFilter")]
    pub code_filter: Option<Vec<DataRequirementCodeFilter>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dateFilter")]
    pub date_filter: Option<Vec<DataRequirementDateFilter>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub limit: Option<PositiveInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "mustSupport")]
    pub must_support: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub profile: Option<Vec<Canonical>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub sort: Option<Vec<DataRequirementSort>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectCodeableConcept")]
    pub subject_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectReference")]
    pub subject_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "DataRequirement_CodeFilter")]
#[serde(deny_unknown_fields)]
pub struct DataRequirementCodeFilter {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_path")]
    pub path: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_searchParam")]
    pub search_param: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Vec<Coding>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "searchParam")]
    pub search_param: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueSet")]
    pub value_set: Option<Canonical>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "DataRequirement_DateFilter")]
#[serde(deny_unknown_fields)]
pub struct DataRequirementDateFilter {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_path")]
    pub path: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_searchParam")]
    pub search_param: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDateTime")]
    pub value_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "searchParam")]
    pub search_param: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDateTime")]
    pub value_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDuration")]
    pub value_duration: Option<Duration>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valuePeriod")]
    pub value_period: Option<Period>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "DataRequirement_Sort")]
#[serde(deny_unknown_fields)]
pub struct DataRequirementSort {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_direction")]
    pub direction: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_path")]
    pub path: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub direction: Option<serde_json::Value>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct DetectedIssue {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_detail")]
    pub detail: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_identifiedDateTime")]
    pub identified_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_reference")]
    pub reference: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_severity")]
    pub severity: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub detail: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub evidence: Option<Vec<DetectedIssueEvidence>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "identifiedDateTime")]
    pub identified_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "identifiedPeriod")]
    pub identified_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub implicated: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub mitigation: Option<Vec<DetectedIssueMitigation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub patient: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub reference: Option<Uri>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub severity: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "DetectedIssue_Evidence")]
#[serde(deny_unknown_fields)]
pub struct DetectedIssueEvidence {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub detail: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "DetectedIssue_Mitigation")]
#[serde(deny_unknown_fields)]
pub struct DetectedIssueMitigation {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    pub action: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Device {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_distinctIdentifier")]
    pub distinct_identifier: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_expirationDate")]
    pub expiration_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lotNumber")]
    pub lot_number: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_manufactureDate")]
    pub manufacture_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_manufacturer")]
    pub manufacturer: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_modelNumber")]
    pub model_number: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_partNumber")]
    pub part_number: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_serialNumber")]
    pub serial_number: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactPoint>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub definition: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "deviceName")]
    pub device_name: Option<Vec<DeviceDeviceName>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "distinctIdentifier")]
    pub distinct_identifier: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "expirationDate")]
    pub expiration_date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lotNumber")]
    pub lot_number: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "manufactureDate")]
    pub manufacture_date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub manufacturer: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modelNumber")]
    pub model_number: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub owner: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub parent: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "partNumber")]
    pub part_number: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub patient: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub property: Option<Vec<DeviceProperty>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub safety: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "serialNumber")]
    pub serial_number: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub specialization: Option<Vec<DeviceSpecialization>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusReason")]
    pub status_reason: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "udiCarrier")]
    pub udi_carrier: Option<Vec<DeviceUdiCarrier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<Vec<DeviceVersion>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct DeviceDefinition {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_manufacturerString")]
    pub manufacturer_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_modelNumber")]
    pub model_number: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_onlineInformation")]
    pub online_information: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub capability: Option<Vec<DeviceDefinitionCapability>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactPoint>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "deviceName")]
    pub device_name: Option<Vec<DeviceDefinitionDeviceName>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "languageCode")]
    pub language_code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "manufacturerReference")]
    pub manufacturer_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "manufacturerString")]
    pub manufacturer_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub material: Option<Vec<DeviceDefinitionMaterial>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modelNumber")]
    pub model_number: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onlineInformation")]
    pub online_information: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub owner: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "parentDevice")]
    pub parent_device: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "physicalCharacteristics")]
    pub physical_characteristics: Option<ProdCharacteristic>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub property: Option<Vec<DeviceDefinitionProperty>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub safety: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "shelfLifeStorage")]
    pub shelf_life_storage: Option<Vec<ProductShelfLife>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub specialization: Option<Vec<DeviceDefinitionSpecialization>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "udiDeviceIdentifier")]
    pub udi_device_identifier: Option<Vec<DeviceDefinitionUdiDeviceIdentifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<Vec<String>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "DeviceDefinition_Capability")]
#[serde(deny_unknown_fields)]
pub struct DeviceDefinitionCapability {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "DeviceDefinition_DeviceName")]
#[serde(deny_unknown_fields)]
pub struct DeviceDefinitionDeviceName {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "DeviceDefinition_Material")]
#[serde(deny_unknown_fields)]
pub struct DeviceDefinitionMaterial {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_allergenicIndicator")]
    pub allergenic_indicator: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_alternate")]
    pub alternate: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "allergenicIndicator")]
    pub allergenic_indicator: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub alternate: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub substance: CodeableConcept,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "DeviceDefinition_Property")]
#[serde(deny_unknown_fields)]
pub struct DeviceDefinitionProperty {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(rename = "type")]
    pub type_: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCode")]
    pub value_code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Vec<Quantity>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "DeviceDefinition_Specialization")]
#[serde(deny_unknown_fields)]
pub struct DeviceDefinitionSpecialization {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_systemType")]
    pub system_type: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "systemType")]
    pub system_type: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "DeviceDefinition_UdiDeviceIdentifier")]
#[serde(deny_unknown_fields)]
pub struct DeviceDefinitionUdiDeviceIdentifier {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_deviceIdentifier")]
    pub device_identifier: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_issuer")]
    pub issuer: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_jurisdiction")]
    pub jurisdiction: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "deviceIdentifier")]
    pub device_identifier: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub issuer: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct DeviceMetric {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_category")]
    pub category: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_color")]
    pub color: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_operationalStatus")]
    pub operational_status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub calibration: Option<Vec<DeviceMetricCalibration>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub color: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "measurementPeriod")]
    pub measurement_period: Option<Timing>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "operationalStatus")]
    pub operational_status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub parent: Option<Reference>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub source: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(rename = "type")]
    pub type_: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub unit: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "DeviceMetric_Calibration")]
#[serde(deny_unknown_fields)]
pub struct DeviceMetricCalibration {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_state")]
    pub state: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_time")]
    pub time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub state: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub time: Option<Instant>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct DeviceRequest {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_authoredOn")]
    pub authored_on: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_instantiatesUri")]
    pub instantiates_uri: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_intent")]
    pub intent: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_occurrenceDateTime")]
    pub occurrence_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_priority")]
    pub priority: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "authoredOn")]
    pub authored_on: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "codeCodeableConcept")]
    pub code_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "codeReference")]
    pub code_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "groupIdentifier")]
    pub group_identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesCanonical")]
    pub instantiates_canonical: Option<Vec<Canonical>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesUri")]
    pub instantiates_uri: Option<Vec<Uri>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub insurance: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub intent: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrenceDateTime")]
    pub occurrence_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrencePeriod")]
    pub occurrence_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrenceTiming")]
    pub occurrence_timing: Option<Timing>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub parameter: Option<Vec<DeviceRequestParameter>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub performer: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "performerType")]
    pub performer_type: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "priorRequest")]
    pub prior_request: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub priority: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relevantHistory")]
    pub relevant_history: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub requester: Option<Reference>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    pub subject: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportingInfo")]
    pub supporting_info: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "DeviceRequest_Parameter")]
#[serde(deny_unknown_fields)]
pub struct DeviceRequestParameter {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub value_boolean: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRange")]
    pub value_range: Option<Range>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct DeviceUseStatement {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_recordedOn")]
    pub recorded_on: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_timingDateTime")]
    pub timing_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "bodySite")]
    pub body_site: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "derivedFrom")]
    pub derived_from: Option<Vec<Reference>>,

    pub device: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "recordedOn")]
    pub recorded_on: Option<DateTime>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub source: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    pub subject: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingDateTime")]
    pub timing_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingPeriod")]
    pub timing_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingTiming")]
    pub timing_timing: Option<Timing>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Device_DeviceName")]
#[serde(deny_unknown_fields)]
pub struct DeviceDeviceName {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Device_Property")]
#[serde(deny_unknown_fields)]
pub struct DeviceProperty {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(rename = "type")]
    pub type_: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCode")]
    pub value_code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Vec<Quantity>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Device_Specialization")]
#[serde(deny_unknown_fields)]
pub struct DeviceSpecialization {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(rename = "systemType")]
    pub system_type: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Device_UdiCarrier")]
#[serde(deny_unknown_fields)]
pub struct DeviceUdiCarrier {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_carrierAIDC")]
    pub carrier_aidc: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_carrierHRF")]
    pub carrier_hrf: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_deviceIdentifier")]
    pub device_identifier: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_entryType")]
    pub entry_type: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_issuer")]
    pub issuer: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_jurisdiction")]
    pub jurisdiction: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "carrierAIDC")]
    pub carrier_aidc: Option<Base64Binary>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "carrierHRF")]
    pub carrier_hrf: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "deviceIdentifier")]
    pub device_identifier: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "entryType")]
    pub entry_type: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub issuer: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Device_Version")]
#[serde(deny_unknown_fields)]
pub struct DeviceVersion {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_value")]
    pub value: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub component: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct DiagnosticReport {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_conclusion")]
    pub conclusion: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_effectiveDateTime")]
    pub effective_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_issued")]
    pub issued: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,

    pub code: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub conclusion: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "conclusionCode")]
    pub conclusion_code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectiveDateTime")]
    pub effective_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectivePeriod")]
    pub effective_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "imagingStudy")]
    pub imaging_study: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub issued: Option<Instant>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub media: Option<Vec<DiagnosticReportMedia>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub performer: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "presentedForm")]
    pub presented_form: Option<Vec<Attachment>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub result: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "resultsInterpreter")]
    pub results_interpreter: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub specimen: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "DiagnosticReport_Media")]
#[serde(deny_unknown_fields)]
pub struct DiagnosticReportMedia {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_comment")]
    pub comment: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    pub link: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Distance {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_code")]
    pub code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_comparator")]
    pub comparator: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_system")]
    pub system: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_unit")]
    pub unit: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_value")]
    pub value: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub comparator: Option<serde_json::Value>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub system: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Decimal>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct DocumentManifest {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_created")]
    pub created: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_source")]
    pub source: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    pub content: Vec<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub created: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "masterIdentifier")]
    pub master_identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub recipient: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub related: Option<Vec<DocumentManifestRelated>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub source: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "DocumentManifest_Related")]
#[serde(deny_unknown_fields)]
pub struct DocumentManifestRelated {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "ref")]
    pub ref_: Option<Reference>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct DocumentReference {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_docStatus")]
    pub doc_status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub authenticator: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    pub content: Vec<DocumentReferenceContent>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub context: Option<DocumentReferenceContext>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub custodian: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<Instant>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "docStatus")]
    pub doc_status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "masterIdentifier")]
    pub master_identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatesTo")]
    pub relates_to: Option<Vec<DocumentReferenceRelatesTo>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "securityLabel")]
    pub security_label: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "DocumentReference_Content")]
#[serde(deny_unknown_fields)]
pub struct DocumentReferenceContent {
    pub attachment: Attachment,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub format: Option<Coding>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "DocumentReference_Context")]
#[serde(deny_unknown_fields)]
pub struct DocumentReferenceContext {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub event: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "facilityType")]
    pub facility_type: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "practiceSetting")]
    pub practice_setting: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub related: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "sourcePatientInfo")]
    pub source_patient_info: Option<Reference>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "DocumentReference_RelatesTo")]
#[serde(deny_unknown_fields)]
pub struct DocumentReferenceRelatesTo {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_code")]
    pub code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub target: Reference,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Dosage {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_asNeededBoolean")]
    pub as_needed_boolean: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patientInstruction")]
    pub patient_instruction: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sequence")]
    pub sequence: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_text")]
    pub text: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "additionalInstruction")]
    pub additional_instruction: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "asNeededBoolean")]
    pub as_needed_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "asNeededCodeableConcept")]
    pub as_needed_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "doseAndRate")]
    pub dose_and_rate: Option<Vec<DosageDoseAndRate>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxDosePerAdministration")]
    pub max_dose_per_administration: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxDosePerLifetime")]
    pub max_dose_per_lifetime: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxDosePerPeriod")]
    pub max_dose_per_period: Option<Ratio>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub method: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patientInstruction")]
    pub patient_instruction: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub route: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub sequence: Option<Integer>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub site: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub timing: Option<Timing>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Dosage_DoseAndRate")]
#[serde(deny_unknown_fields)]
pub struct DosageDoseAndRate {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "doseQuantity")]
    pub dose_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "doseRange")]
    pub dose_range: Option<Range>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "rateQuantity")]
    pub rate_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "rateRange")]
    pub rate_range: Option<Range>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "rateRatio")]
    pub rate_ratio: Option<Ratio>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Duration {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_code")]
    pub code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_comparator")]
    pub comparator: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_system")]
    pub system: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_unit")]
    pub unit: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_value")]
    pub value: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub comparator: Option<serde_json::Value>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub system: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Decimal>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Element {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ElementDefinition {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_alias")]
    pub alias: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_comment")]
    pub comment: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_condition")]
    pub condition: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_contentReference")]
    pub content_reference: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueBase64Binary")]
    pub default_value_base_64_binary: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueBoolean")]
    pub default_value_boolean: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueCanonical")]
    pub default_value_canonical: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueCode")]
    pub default_value_code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueDate")]
    pub default_value_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueDateTime")]
    pub default_value_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueDecimal")]
    pub default_value_decimal: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueId")]
    pub default_value_id: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueInstant")]
    pub default_value_instant: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueInteger")]
    pub default_value_integer: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueMarkdown")]
    pub default_value_markdown: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueOid")]
    pub default_value_oid: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValuePositiveInt")]
    pub default_value_positive_int: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueString")]
    pub default_value_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueTime")]
    pub default_value_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueUnsignedInt")]
    pub default_value_unsigned_int: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueUri")]
    pub default_value_uri: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueUrl")]
    pub default_value_url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueUuid")]
    pub default_value_uuid: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_definition")]
    pub definition: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fixedBase64Binary")]
    pub fixed_base_64_binary: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fixedBoolean")]
    pub fixed_boolean: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fixedCanonical")]
    pub fixed_canonical: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fixedCode")]
    pub fixed_code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fixedDate")]
    pub fixed_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fixedDateTime")]
    pub fixed_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fixedDecimal")]
    pub fixed_decimal: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fixedId")]
    pub fixed_id: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fixedInstant")]
    pub fixed_instant: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fixedInteger")]
    pub fixed_integer: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fixedMarkdown")]
    pub fixed_markdown: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fixedOid")]
    pub fixed_oid: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fixedPositiveInt")]
    pub fixed_positive_int: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fixedString")]
    pub fixed_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fixedTime")]
    pub fixed_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fixedUnsignedInt")]
    pub fixed_unsigned_int: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fixedUri")]
    pub fixed_uri: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fixedUrl")]
    pub fixed_url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fixedUuid")]
    pub fixed_uuid: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_isModifier")]
    pub is_modifier: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_isModifierReason")]
    pub is_modifier_reason: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_isSummary")]
    pub is_summary: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_label")]
    pub label: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_max")]
    pub max: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_maxLength")]
    pub max_length: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_maxValueDate")]
    pub max_value_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_maxValueDateTime")]
    pub max_value_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_maxValueDecimal")]
    pub max_value_decimal: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_maxValueInstant")]
    pub max_value_instant: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_maxValueInteger")]
    pub max_value_integer: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_maxValuePositiveInt")]
    pub max_value_positive_int: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_maxValueTime")]
    pub max_value_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_maxValueUnsignedInt")]
    pub max_value_unsigned_int: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_meaningWhenMissing")]
    pub meaning_when_missing: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_min")]
    pub min: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_minValueDate")]
    pub min_value_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_minValueDateTime")]
    pub min_value_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_minValueDecimal")]
    pub min_value_decimal: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_minValueInstant")]
    pub min_value_instant: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_minValueInteger")]
    pub min_value_integer: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_minValuePositiveInt")]
    pub min_value_positive_int: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_minValueTime")]
    pub min_value_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_minValueUnsignedInt")]
    pub min_value_unsigned_int: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_mustSupport")]
    pub must_support: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_orderMeaning")]
    pub order_meaning: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_path")]
    pub path: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patternBase64Binary")]
    pub pattern_base_64_binary: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patternBoolean")]
    pub pattern_boolean: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patternCanonical")]
    pub pattern_canonical: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patternCode")]
    pub pattern_code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patternDate")]
    pub pattern_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patternDateTime")]
    pub pattern_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patternDecimal")]
    pub pattern_decimal: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patternId")]
    pub pattern_id: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patternInstant")]
    pub pattern_instant: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patternInteger")]
    pub pattern_integer: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patternMarkdown")]
    pub pattern_markdown: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patternOid")]
    pub pattern_oid: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patternPositiveInt")]
    pub pattern_positive_int: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patternString")]
    pub pattern_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patternTime")]
    pub pattern_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patternUnsignedInt")]
    pub pattern_unsigned_int: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patternUri")]
    pub pattern_uri: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patternUrl")]
    pub pattern_url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patternUuid")]
    pub pattern_uuid: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_representation")]
    pub representation: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_requirements")]
    pub requirements: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_short")]
    pub short: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sliceIsConstraining")]
    pub slice_is_constraining: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sliceName")]
    pub slice_name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub alias: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub base: Option<ElementDefinitionBase>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub binding: Option<ElementDefinitionBinding>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Vec<Coding>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub condition: Option<Vec<Id>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub constraint: Option<Vec<ElementDefinitionConstraint>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contentReference")]
    pub content_reference: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueAddress")]
    pub default_value_address: Option<Address>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueAge")]
    pub default_value_age: Option<Age>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueAnnotation")]
    pub default_value_annotation: Option<Annotation>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueAttachment")]
    pub default_value_attachment: Option<Attachment>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueBase64Binary")]
    pub default_value_base_64_binary: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueBoolean")]
    pub default_value_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueCanonical")]
    pub default_value_canonical: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueCode")]
    pub default_value_code: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueCodeableConcept")]
    pub default_value_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueCodeableReference")]
    pub default_value_codeable_reference: Option<CodeableReference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueCoding")]
    pub default_value_coding: Option<Coding>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueContactDetail")]
    pub default_value_contact_detail: Option<ContactDetail>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueContactPoint")]
    pub default_value_contact_point: Option<ContactPoint>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueContributor")]
    pub default_value_contributor: Option<Contributor>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueCount")]
    pub default_value_count: Option<Count>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueDataRequirement")]
    pub default_value_data_requirement: Option<DataRequirement>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueDate")]
    pub default_value_date: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueDateTime")]
    pub default_value_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueDecimal")]
    pub default_value_decimal: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueDistance")]
    pub default_value_distance: Option<Distance>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueDosage")]
    pub default_value_dosage: Option<Dosage>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueDuration")]
    pub default_value_duration: Option<Duration>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueExpression")]
    pub default_value_expression: Option<Expression>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueHumanName")]
    pub default_value_human_name: Option<HumanName>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueId")]
    pub default_value_id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueIdentifier")]
    pub default_value_identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueInstant")]
    pub default_value_instant: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueInteger")]
    pub default_value_integer: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueMarkdown")]
    pub default_value_markdown: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueMoney")]
    pub default_value_money: Option<Money>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueOid")]
    pub default_value_oid: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueParameterDefinition")]
    pub default_value_parameter_definition: Option<ParameterDefinition>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValuePeriod")]
    pub default_value_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValuePositiveInt")]
    pub default_value_positive_int: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueQuantity")]
    pub default_value_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueRange")]
    pub default_value_range: Option<Range>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueRatio")]
    pub default_value_ratio: Option<Ratio>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueRatioRange")]
    pub default_value_ratio_range: Option<RatioRange>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueReference")]
    pub default_value_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueRelatedArtifact")]
    pub default_value_related_artifact: Option<RelatedArtifact>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueSampledData")]
    pub default_value_sampled_data: Option<SampledData>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueSignature")]
    pub default_value_signature: Option<Signature>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueString")]
    pub default_value_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueTime")]
    pub default_value_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueTiming")]
    pub default_value_timing: Option<Timing>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueTriggerDefinition")]
    pub default_value_trigger_definition: Option<TriggerDefinition>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueUnsignedInt")]
    pub default_value_unsigned_int: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueUri")]
    pub default_value_uri: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueUrl")]
    pub default_value_url: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueUsageContext")]
    pub default_value_usage_context: Option<UsageContext>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueUuid")]
    pub default_value_uuid: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub definition: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub example: Option<Vec<ElementDefinitionExample>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedAddress")]
    pub fixed_address: Option<Address>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedAge")]
    pub fixed_age: Option<Age>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedAnnotation")]
    pub fixed_annotation: Option<Annotation>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedAttachment")]
    pub fixed_attachment: Option<Attachment>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedBase64Binary")]
    pub fixed_base_64_binary: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedBoolean")]
    pub fixed_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedCanonical")]
    pub fixed_canonical: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedCode")]
    pub fixed_code: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedCodeableConcept")]
    pub fixed_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedCodeableReference")]
    pub fixed_codeable_reference: Option<CodeableReference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedCoding")]
    pub fixed_coding: Option<Coding>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedContactDetail")]
    pub fixed_contact_detail: Option<ContactDetail>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedContactPoint")]
    pub fixed_contact_point: Option<ContactPoint>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedContributor")]
    pub fixed_contributor: Option<Contributor>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedCount")]
    pub fixed_count: Option<Count>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedDataRequirement")]
    pub fixed_data_requirement: Option<DataRequirement>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedDate")]
    pub fixed_date: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedDateTime")]
    pub fixed_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedDecimal")]
    pub fixed_decimal: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedDistance")]
    pub fixed_distance: Option<Distance>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedDosage")]
    pub fixed_dosage: Option<Dosage>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedDuration")]
    pub fixed_duration: Option<Duration>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedExpression")]
    pub fixed_expression: Option<Expression>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedHumanName")]
    pub fixed_human_name: Option<HumanName>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedId")]
    pub fixed_id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedIdentifier")]
    pub fixed_identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedInstant")]
    pub fixed_instant: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedInteger")]
    pub fixed_integer: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedMarkdown")]
    pub fixed_markdown: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedMoney")]
    pub fixed_money: Option<Money>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedOid")]
    pub fixed_oid: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedParameterDefinition")]
    pub fixed_parameter_definition: Option<ParameterDefinition>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedPeriod")]
    pub fixed_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedPositiveInt")]
    pub fixed_positive_int: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedQuantity")]
    pub fixed_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedRange")]
    pub fixed_range: Option<Range>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedRatio")]
    pub fixed_ratio: Option<Ratio>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedRatioRange")]
    pub fixed_ratio_range: Option<RatioRange>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedReference")]
    pub fixed_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedRelatedArtifact")]
    pub fixed_related_artifact: Option<RelatedArtifact>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedSampledData")]
    pub fixed_sampled_data: Option<SampledData>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedSignature")]
    pub fixed_signature: Option<Signature>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedString")]
    pub fixed_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedTime")]
    pub fixed_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedTiming")]
    pub fixed_timing: Option<Timing>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedTriggerDefinition")]
    pub fixed_trigger_definition: Option<TriggerDefinition>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedUnsignedInt")]
    pub fixed_unsigned_int: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedUri")]
    pub fixed_uri: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedUrl")]
    pub fixed_url: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedUsageContext")]
    pub fixed_usage_context: Option<UsageContext>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fixedUuid")]
    pub fixed_uuid: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "isModifier")]
    pub is_modifier: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "isModifierReason")]
    pub is_modifier_reason: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "isSummary")]
    pub is_summary: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub mapping: Option<Vec<ElementDefinitionMapping>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub max: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxLength")]
    pub max_length: Option<Integer>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxValueDate")]
    pub max_value_date: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxValueDateTime")]
    pub max_value_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxValueDecimal")]
    pub max_value_decimal: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxValueInstant")]
    pub max_value_instant: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxValueInteger")]
    pub max_value_integer: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxValuePositiveInt")]
    pub max_value_positive_int: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxValueQuantity")]
    pub max_value_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxValueTime")]
    pub max_value_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxValueUnsignedInt")]
    pub max_value_unsigned_int: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "meaningWhenMissing")]
    pub meaning_when_missing: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub min: Option<UnsignedInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "minValueDate")]
    pub min_value_date: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "minValueDateTime")]
    pub min_value_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "minValueDecimal")]
    pub min_value_decimal: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "minValueInstant")]
    pub min_value_instant: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "minValueInteger")]
    pub min_value_integer: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "minValuePositiveInt")]
    pub min_value_positive_int: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "minValueQuantity")]
    pub min_value_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "minValueTime")]
    pub min_value_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "minValueUnsignedInt")]
    pub min_value_unsigned_int: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "mustSupport")]
    pub must_support: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "orderMeaning")]
    pub order_meaning: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternAddress")]
    pub pattern_address: Option<Address>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternAge")]
    pub pattern_age: Option<Age>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternAnnotation")]
    pub pattern_annotation: Option<Annotation>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternAttachment")]
    pub pattern_attachment: Option<Attachment>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternBase64Binary")]
    pub pattern_base_64_binary: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternBoolean")]
    pub pattern_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternCanonical")]
    pub pattern_canonical: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternCode")]
    pub pattern_code: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternCodeableConcept")]
    pub pattern_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternCodeableReference")]
    pub pattern_codeable_reference: Option<CodeableReference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternCoding")]
    pub pattern_coding: Option<Coding>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternContactDetail")]
    pub pattern_contact_detail: Option<ContactDetail>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternContactPoint")]
    pub pattern_contact_point: Option<ContactPoint>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternContributor")]
    pub pattern_contributor: Option<Contributor>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternCount")]
    pub pattern_count: Option<Count>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternDataRequirement")]
    pub pattern_data_requirement: Option<DataRequirement>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternDate")]
    pub pattern_date: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternDateTime")]
    pub pattern_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternDecimal")]
    pub pattern_decimal: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternDistance")]
    pub pattern_distance: Option<Distance>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternDosage")]
    pub pattern_dosage: Option<Dosage>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternDuration")]
    pub pattern_duration: Option<Duration>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternExpression")]
    pub pattern_expression: Option<Expression>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternHumanName")]
    pub pattern_human_name: Option<HumanName>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternId")]
    pub pattern_id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternIdentifier")]
    pub pattern_identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternInstant")]
    pub pattern_instant: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternInteger")]
    pub pattern_integer: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternMarkdown")]
    pub pattern_markdown: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternMoney")]
    pub pattern_money: Option<Money>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternOid")]
    pub pattern_oid: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternParameterDefinition")]
    pub pattern_parameter_definition: Option<ParameterDefinition>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternPeriod")]
    pub pattern_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternPositiveInt")]
    pub pattern_positive_int: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternQuantity")]
    pub pattern_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternRange")]
    pub pattern_range: Option<Range>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternRatio")]
    pub pattern_ratio: Option<Ratio>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternRatioRange")]
    pub pattern_ratio_range: Option<RatioRange>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternReference")]
    pub pattern_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternRelatedArtifact")]
    pub pattern_related_artifact: Option<RelatedArtifact>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternSampledData")]
    pub pattern_sampled_data: Option<SampledData>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternSignature")]
    pub pattern_signature: Option<Signature>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternString")]
    pub pattern_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternTime")]
    pub pattern_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternTiming")]
    pub pattern_timing: Option<Timing>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternTriggerDefinition")]
    pub pattern_trigger_definition: Option<TriggerDefinition>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternUnsignedInt")]
    pub pattern_unsigned_int: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternUri")]
    pub pattern_uri: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternUrl")]
    pub pattern_url: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternUsageContext")]
    pub pattern_usage_context: Option<UsageContext>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patternUuid")]
    pub pattern_uuid: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub representation: Option<Vec<serde_json::Value>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub requirements: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub short: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "sliceIsConstraining")]
    pub slice_is_constraining: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "sliceName")]
    pub slice_name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub slicing: Option<ElementDefinitionSlicing>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Vec<ElementDefinitionType>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ElementDefinition_Base")]
#[serde(deny_unknown_fields)]
pub struct ElementDefinitionBase {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_max")]
    pub max: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_min")]
    pub min: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_path")]
    pub path: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub max: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub min: Option<UnsignedInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ElementDefinition_Binding")]
#[serde(deny_unknown_fields)]
pub struct ElementDefinitionBinding {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_strength")]
    pub strength: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub strength: Option<serde_json::Value>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueSet")]
    pub value_set: Option<Canonical>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ElementDefinition_Constraint")]
#[serde(deny_unknown_fields)]
pub struct ElementDefinitionConstraint {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_expression")]
    pub expression: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_human")]
    pub human: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_key")]
    pub key: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_requirements")]
    pub requirements: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_severity")]
    pub severity: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_xpath")]
    pub xpath: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub human: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub key: Option<Id>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub requirements: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub severity: Option<serde_json::Value>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub source: Option<Canonical>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub xpath: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ElementDefinition_Discriminator")]
#[serde(deny_unknown_fields)]
pub struct ElementDefinitionDiscriminator {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_path")]
    pub path: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<serde_json::Value>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ElementDefinition_Example")]
#[serde(deny_unknown_fields)]
pub struct ElementDefinitionExample {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_label")]
    pub label: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBase64Binary")]
    pub value_base_64_binary: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub value_boolean: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueCanonical")]
    pub value_canonical: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueCode")]
    pub value_code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDate")]
    pub value_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDateTime")]
    pub value_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDecimal")]
    pub value_decimal: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueId")]
    pub value_id: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueInstant")]
    pub value_instant: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueInteger")]
    pub value_integer: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueMarkdown")]
    pub value_markdown: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueOid")]
    pub value_oid: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valuePositiveInt")]
    pub value_positive_int: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueString")]
    pub value_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueTime")]
    pub value_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUnsignedInt")]
    pub value_unsigned_int: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUri")]
    pub value_uri: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUrl")]
    pub value_url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUuid")]
    pub value_uuid: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAddress")]
    pub value_address: Option<Address>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAge")]
    pub value_age: Option<Age>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAnnotation")]
    pub value_annotation: Option<Annotation>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAttachment")]
    pub value_attachment: Option<Attachment>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBase64Binary")]
    pub value_base_64_binary: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCanonical")]
    pub value_canonical: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCode")]
    pub value_code: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableReference")]
    pub value_codeable_reference: Option<CodeableReference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCoding")]
    pub value_coding: Option<Coding>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueContactDetail")]
    pub value_contact_detail: Option<ContactDetail>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueContactPoint")]
    pub value_contact_point: Option<ContactPoint>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueContributor")]
    pub value_contributor: Option<Contributor>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCount")]
    pub value_count: Option<Count>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDataRequirement")]
    pub value_data_requirement: Option<DataRequirement>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDate")]
    pub value_date: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDateTime")]
    pub value_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDecimal")]
    pub value_decimal: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDistance")]
    pub value_distance: Option<Distance>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDosage")]
    pub value_dosage: Option<Dosage>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDuration")]
    pub value_duration: Option<Duration>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueExpression")]
    pub value_expression: Option<Expression>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueHumanName")]
    pub value_human_name: Option<HumanName>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueId")]
    pub value_id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueIdentifier")]
    pub value_identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueInstant")]
    pub value_instant: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueInteger")]
    pub value_integer: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueMarkdown")]
    pub value_markdown: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueMoney")]
    pub value_money: Option<Money>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueOid")]
    pub value_oid: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueParameterDefinition")]
    pub value_parameter_definition: Option<ParameterDefinition>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valuePeriod")]
    pub value_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valuePositiveInt")]
    pub value_positive_int: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRange")]
    pub value_range: Option<Range>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRatio")]
    pub value_ratio: Option<Ratio>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRatioRange")]
    pub value_ratio_range: Option<RatioRange>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueReference")]
    pub value_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRelatedArtifact")]
    pub value_related_artifact: Option<RelatedArtifact>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueSampledData")]
    pub value_sampled_data: Option<SampledData>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueSignature")]
    pub value_signature: Option<Signature>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueString")]
    pub value_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTime")]
    pub value_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTiming")]
    pub value_timing: Option<Timing>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTriggerDefinition")]
    pub value_trigger_definition: Option<TriggerDefinition>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUnsignedInt")]
    pub value_unsigned_int: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUri")]
    pub value_uri: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUrl")]
    pub value_url: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUsageContext")]
    pub value_usage_context: Option<UsageContext>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUuid")]
    pub value_uuid: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ElementDefinition_Mapping")]
#[serde(deny_unknown_fields)]
pub struct ElementDefinitionMapping {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_comment")]
    pub comment: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_identity")]
    pub identity: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_map")]
    pub map: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identity: Option<Id>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub map: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ElementDefinition_Slicing")]
#[serde(deny_unknown_fields)]
pub struct ElementDefinitionSlicing {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_ordered")]
    pub ordered: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_rules")]
    pub rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub discriminator: Option<Vec<ElementDefinitionDiscriminator>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub ordered: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub rules: Option<serde_json::Value>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ElementDefinition_Type")]
#[serde(deny_unknown_fields)]
pub struct ElementDefinitionType {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_aggregation")]
    pub aggregation: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_code")]
    pub code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_versioning")]
    pub versioning: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub aggregation: Option<Vec<serde_json::Value>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub profile: Option<Vec<Canonical>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetProfile")]
    pub target_profile: Option<Vec<Canonical>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub versioning: Option<serde_json::Value>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Encounter {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub account: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub appointment: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Vec<Reference>>,

    pub class: Coding,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "classHistory")]
    pub class_history: Option<Vec<EncounterClassHistory>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub diagnosis: Option<Vec<EncounterDiagnosis>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "episodeOfCare")]
    pub episode_of_care: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub hospitalization: Option<EncounterHospitalization>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub length: Option<Duration>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<Vec<EncounterLocation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "partOf")]
    pub part_of: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub participant: Option<Vec<EncounterParticipant>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub priority: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "serviceProvider")]
    pub service_provider: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "serviceType")]
    pub service_type: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusHistory")]
    pub status_history: Option<Vec<EncounterStatusHistory>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Vec<CodeableConcept>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Encounter_ClassHistory")]
#[serde(deny_unknown_fields)]
pub struct EncounterClassHistory {
    pub class: Coding,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub period: Period,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Encounter_Diagnosis")]
#[serde(deny_unknown_fields)]
pub struct EncounterDiagnosis {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_rank")]
    pub rank: Option<Element>,

    pub condition: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub rank: Option<PositiveInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "use")]
    pub use_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Encounter_Hospitalization")]
#[serde(deny_unknown_fields)]
pub struct EncounterHospitalization {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "admitSource")]
    pub admit_source: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub destination: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dietPreference")]
    pub diet_preference: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dischargeDisposition")]
    pub discharge_disposition: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub origin: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "preAdmissionIdentifier")]
    pub pre_admission_identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reAdmission")]
    pub re_admission: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "specialArrangement")]
    pub special_arrangement: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "specialCourtesy")]
    pub special_courtesy: Option<Vec<CodeableConcept>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Encounter_Location")]
#[serde(deny_unknown_fields)]
pub struct EncounterLocation {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    pub location: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "physicalType")]
    pub physical_type: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Encounter_Participant")]
#[serde(deny_unknown_fields)]
pub struct EncounterParticipant {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub individual: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Vec<CodeableConcept>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Encounter_StatusHistory")]
#[serde(deny_unknown_fields)]
pub struct EncounterStatusHistory {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub period: Period,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Endpoint {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_address")]
    pub address: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_header")]
    pub header: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_payloadMimeType")]
    pub payload_mime_type: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub address: Option<Url>,

    #[serde(rename = "connectionType")]
    pub connection_type: Coding,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactPoint>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub header: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "managingOrganization")]
    pub managing_organization: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "payloadMimeType")]
    pub payload_mime_type: Option<Vec<Code>>,

    #[serde(rename = "payloadType")]
    pub payload_type: Vec<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct EnrollmentRequest {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_created")]
    pub created: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub candidate: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub coverage: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub created: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub insurer: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub provider: Option<Reference>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct EnrollmentResponse {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_created")]
    pub created: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_disposition")]
    pub disposition: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_outcome")]
    pub outcome: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub created: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub disposition: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub organization: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub outcome: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub request: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "requestProvider")]
    pub request_provider: Option<Reference>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct EpisodeOfCare {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub account: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "careManager")]
    pub care_manager: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub diagnosis: Option<Vec<EpisodeOfCareDiagnosis>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "managingOrganization")]
    pub managing_organization: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub patient: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "referralRequest")]
    pub referral_request: Option<Vec<Reference>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusHistory")]
    pub status_history: Option<Vec<EpisodeOfCareStatusHistory>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub team: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Vec<CodeableConcept>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "EpisodeOfCare_Diagnosis")]
#[serde(deny_unknown_fields)]
pub struct EpisodeOfCareDiagnosis {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_rank")]
    pub rank: Option<Element>,

    pub condition: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub rank: Option<PositiveInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub role: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "EpisodeOfCare_StatusHistory")]
#[serde(deny_unknown_fields)]
pub struct EpisodeOfCareStatusHistory {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub period: Period,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct EventDefinition {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_approvalDate")]
    pub approval_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_copyright")]
    pub copyright: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_experimental")]
    pub experimental: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastReviewDate")]
    pub last_review_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_publisher")]
    pub publisher: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_purpose")]
    pub purpose: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_subtitle")]
    pub subtitle: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_usage")]
    pub usage: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "approvalDate")]
    pub approval_date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub editor: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectivePeriod")]
    pub effective_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub endorser: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastReviewDate")]
    pub last_review_date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatedArtifact")]
    pub related_artifact: Option<Vec<RelatedArtifact>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub reviewer: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectCodeableConcept")]
    pub subject_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectReference")]
    pub subject_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub subtitle: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub topic: Option<Vec<CodeableConcept>>,

    pub trigger: Vec<TriggerDefinition>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub usage: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Evidence {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_approvalDate")]
    pub approval_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_assertion")]
    pub assertion: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_citeAsMarkdown")]
    pub cite_as_markdown: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastReviewDate")]
    pub last_review_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_publisher")]
    pub publisher: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "approvalDate")]
    pub approval_date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub assertion: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub certainty: Option<Vec<EvidenceCertainty>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "citeAsMarkdown")]
    pub cite_as_markdown: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "citeAsReference")]
    pub cite_as_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub editor: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub endorser: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastReviewDate")]
    pub last_review_date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatedArtifact")]
    pub related_artifact: Option<Vec<RelatedArtifact>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub reviewer: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub statistic: Option<Vec<EvidenceStatistic>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "studyType")]
    pub study_type: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "synthesisType")]
    pub synthesis_type: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,

    #[serde(rename = "variableDefinition")]
    pub variable_definition: Vec<EvidenceVariableDefinition>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct EvidenceReport {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_citeAsMarkdown")]
    pub cite_as_markdown: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_publisher")]
    pub publisher: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "citeAsMarkdown")]
    pub cite_as_markdown: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "citeAsReference")]
    pub cite_as_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub editor: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub endorser: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatedArtifact")]
    pub related_artifact: Option<Vec<RelatedArtifact>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatedIdentifier")]
    pub related_identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatesTo")]
    pub relates_to: Option<Vec<EvidenceReportRelatesTo>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub reviewer: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub section: Option<Vec<EvidenceReportSection>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    pub subject: EvidenceReportSubject,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "EvidenceReport_Characteristic")]
#[serde(deny_unknown_fields)]
pub struct EvidenceReportCharacteristic {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_exclude")]
    pub exclude: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub value_boolean: Option<Element>,

    pub code: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub exclude: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRange")]
    pub value_range: Option<Range>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueReference")]
    pub value_reference: Option<Reference>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "EvidenceReport_RelatesTo")]
#[serde(deny_unknown_fields)]
pub struct EvidenceReportRelatesTo {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_code")]
    pub code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetIdentifier")]
    pub target_identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetReference")]
    pub target_reference: Option<Reference>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "EvidenceReport_Section")]
#[serde(deny_unknown_fields)]
pub struct EvidenceReportSection {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_mode")]
    pub mode: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "emptyReason")]
    pub empty_reason: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "entryClassifier")]
    pub entry_classifier: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "entryQuantity")]
    pub entry_quantity: Option<Vec<Quantity>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "entryReference")]
    pub entry_reference: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub focus: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "focusReference")]
    pub focus_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub mode: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "orderedBy")]
    pub ordered_by: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub section: Option<Vec<EvidenceReportSection>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "EvidenceReport_Subject")]
#[serde(deny_unknown_fields)]
pub struct EvidenceReportSubject {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub characteristic: Option<Vec<EvidenceReportCharacteristic>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct EvidenceVariable {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_actual")]
    pub actual: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_characteristicCombination")]
    pub characteristic_combination: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_handling")]
    pub handling: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_publisher")]
    pub publisher: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_shortTitle")]
    pub short_title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_subtitle")]
    pub subtitle: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub actual: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<EvidenceVariableCategory>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub characteristic: Option<Vec<EvidenceVariableCharacteristic>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "characteristicCombination")]
    pub characteristic_combination: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub editor: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub endorser: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub handling: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatedArtifact")]
    pub related_artifact: Option<Vec<RelatedArtifact>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub reviewer: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "shortTitle")]
    pub short_title: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub subtitle: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "EvidenceVariable_Category")]
#[serde(deny_unknown_fields)]
pub struct EvidenceVariableCategory {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRange")]
    pub value_range: Option<Range>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "EvidenceVariable_Characteristic")]
#[serde(deny_unknown_fields)]
pub struct EvidenceVariableCharacteristic {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_definitionCanonical")]
    pub definition_canonical: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_exclude")]
    pub exclude: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_groupMeasure")]
    pub group_measure: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "definitionCanonical")]
    pub definition_canonical: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "definitionCodeableConcept")]
    pub definition_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "definitionExpression")]
    pub definition_expression: Option<Expression>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "definitionReference")]
    pub definition_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub device: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub exclude: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "groupMeasure")]
    pub group_measure: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub method: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timeFromStart")]
    pub time_from_start: Option<EvidenceVariableTimeFromStart>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "EvidenceVariable_TimeFromStart")]
#[serde(deny_unknown_fields)]
pub struct EvidenceVariableTimeFromStart {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub range: Option<Range>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Evidence_AttributeEstimate")]
#[serde(deny_unknown_fields)]
pub struct EvidenceAttributeEstimate {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_level")]
    pub level: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "attributeEstimate")]
    pub attribute_estimate: Option<Vec<EvidenceAttributeEstimate>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub level: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub range: Option<Range>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Evidence_Certainty")]
#[serde(deny_unknown_fields)]
pub struct EvidenceCertainty {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_rater")]
    pub rater: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub rater: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub rating: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub subcomponent: Option<Vec<EvidenceCertainty>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Evidence_ModelCharacteristic")]
#[serde(deny_unknown_fields)]
pub struct EvidenceModelCharacteristic {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "attributeEstimate")]
    pub attribute_estimate: Option<Vec<EvidenceAttributeEstimate>>,

    pub code: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub variable: Option<Vec<EvidenceVariable>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Evidence_SampleSize")]
#[serde(deny_unknown_fields)]
pub struct EvidenceSampleSize {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_knownDataCount")]
    pub known_data_count: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_numberOfParticipants")]
    pub number_of_participants: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_numberOfStudies")]
    pub number_of_studies: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "knownDataCount")]
    pub known_data_count: Option<UnsignedInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "numberOfParticipants")]
    pub number_of_participants: Option<UnsignedInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "numberOfStudies")]
    pub number_of_studies: Option<UnsignedInt>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Evidence_Statistic")]
#[serde(deny_unknown_fields)]
pub struct EvidenceStatistic {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_numberAffected")]
    pub number_affected: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_numberOfEvents")]
    pub number_of_events: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "attributeEstimate")]
    pub attribute_estimate: Option<Vec<EvidenceAttributeEstimate>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modelCharacteristic")]
    pub model_characteristic: Option<Vec<EvidenceModelCharacteristic>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "numberAffected")]
    pub number_affected: Option<UnsignedInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "numberOfEvents")]
    pub number_of_events: Option<UnsignedInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "sampleSize")]
    pub sample_size: Option<EvidenceSampleSize>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statisticType")]
    pub statistic_type: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Evidence_Variable")]
#[serde(deny_unknown_fields)]
pub struct EvidenceVariable {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_handling")]
    pub handling: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub handling: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCategory")]
    pub value_category: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Vec<Quantity>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRange")]
    pub value_range: Option<Vec<Range>>,

    #[serde(rename = "variableDefinition")]
    pub variable_definition: Reference,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Evidence_VariableDefinition")]
#[serde(deny_unknown_fields)]
pub struct EvidenceVariableDefinition {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "directnessMatch")]
    pub directness_match: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub intended: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub observed: Option<Reference>,

    #[serde(rename = "variableRole")]
    pub variable_role: CodeableConcept,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ExampleScenario {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_copyright")]
    pub copyright: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_experimental")]
    pub experimental: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_publisher")]
    pub publisher: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_purpose")]
    pub purpose: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub actor: Option<Vec<ExampleScenarioActor>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub instance: Option<Vec<ExampleScenarioInstance>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub process: Option<Vec<ExampleScenarioProcess>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub workflow: Option<Vec<Canonical>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ExampleScenario_Actor")]
#[serde(deny_unknown_fields)]
pub struct ExampleScenarioActor {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_actorId")]
    pub actor_id: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "actorId")]
    pub actor_id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ExampleScenario_Alternative")]
#[serde(deny_unknown_fields)]
pub struct ExampleScenarioAlternative {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub step: Option<Vec<ExampleScenarioStep>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ExampleScenario_ContainedInstance")]
#[serde(deny_unknown_fields)]
pub struct ExampleScenarioContainedInstance {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_resourceId")]
    pub resource_id: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_versionId")]
    pub version_id: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "resourceId")]
    pub resource_id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "versionId")]
    pub version_id: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ExampleScenario_Instance")]
#[serde(deny_unknown_fields)]
pub struct ExampleScenarioInstance {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_resourceId")]
    pub resource_id: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_resourceType")]
    pub resource_type: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "containedInstance")]
    pub contained_instance: Option<Vec<ExampleScenarioContainedInstance>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "resourceId")]
    pub resource_id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "resourceType")]
    pub resource_type: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<Vec<ExampleScenarioVersion>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ExampleScenario_Operation")]
#[serde(deny_unknown_fields)]
pub struct ExampleScenarioOperation {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_initiator")]
    pub initiator: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_initiatorActive")]
    pub initiator_active: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_number")]
    pub number: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_receiver")]
    pub receiver: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_receiverActive")]
    pub receiver_active: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub initiator: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "initiatorActive")]
    pub initiator_active: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub number: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub receiver: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "receiverActive")]
    pub receiver_active: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub request: Option<ExampleScenarioContainedInstance>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub response: Option<ExampleScenarioContainedInstance>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ExampleScenario_Process")]
#[serde(deny_unknown_fields)]
pub struct ExampleScenarioProcess {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_postConditions")]
    pub post_conditions: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_preConditions")]
    pub pre_conditions: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "postConditions")]
    pub post_conditions: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "preConditions")]
    pub pre_conditions: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub step: Option<Vec<ExampleScenarioStep>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ExampleScenario_Step")]
#[serde(deny_unknown_fields)]
pub struct ExampleScenarioStep {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_pause")]
    pub pause: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub alternative: Option<Vec<ExampleScenarioAlternative>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub operation: Option<ExampleScenarioOperation>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub pause: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub process: Option<Vec<ExampleScenarioProcess>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ExampleScenario_Version")]
#[serde(deny_unknown_fields)]
pub struct ExampleScenarioVersion {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_versionId")]
    pub version_id: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "versionId")]
    pub version_id: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefit {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_created")]
    pub created: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_disposition")]
    pub disposition: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_outcome")]
    pub outcome: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_preAuthRef")]
    pub pre_auth_ref: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_precedence")]
    pub precedence: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_use")]
    pub use_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub accident: Option<ExplanationOfBenefitAccident>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "addItem")]
    pub add_item: Option<Vec<ExplanationOfBenefitAddItem>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub adjudication: Option<Vec<ExplanationOfBenefitAdjudication>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "benefitBalance")]
    pub benefit_balance: Option<Vec<ExplanationOfBenefitBenefitBalance>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "benefitPeriod")]
    pub benefit_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "billablePeriod")]
    pub billable_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "careTeam")]
    pub care_team: Option<Vec<ExplanationOfBenefitCareTeam>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub claim: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "claimResponse")]
    pub claim_response: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub created: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub diagnosis: Option<Vec<ExplanationOfBenefitDiagnosis>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub disposition: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub enterer: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub facility: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub form: Option<Attachment>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "formCode")]
    pub form_code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fundsReserve")]
    pub funds_reserve: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fundsReserveRequested")]
    pub funds_reserve_requested: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    pub insurance: Vec<ExplanationOfBenefitInsurance>,

    pub insurer: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub item: Option<Vec<ExplanationOfBenefitItem>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "originalPrescription")]
    pub original_prescription: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub outcome: Option<Code>,

    pub patient: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub payee: Option<ExplanationOfBenefitPayee>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub payment: Option<ExplanationOfBenefitPayment>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "preAuthRef")]
    pub pre_auth_ref: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "preAuthRefPeriod")]
    pub pre_auth_ref_period: Option<Vec<Period>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub precedence: Option<PositiveInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub prescription: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub priority: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub procedure: Option<Vec<ExplanationOfBenefitProcedure>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "processNote")]
    pub process_note: Option<Vec<ExplanationOfBenefitProcessNote>>,

    pub provider: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub referral: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub related: Option<Vec<ExplanationOfBenefitRelated>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subType")]
    pub sub_type: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportingInfo")]
    pub supporting_info: Option<Vec<ExplanationOfBenefitSupportingInfo>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub total: Option<Vec<ExplanationOfBenefitTotal>>,

    #[serde(rename = "type")]
    pub type_: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "use")]
    pub use_: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_Accident")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitAccident {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "locationAddress")]
    pub location_address: Option<Address>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "locationReference")]
    pub location_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_AddItem")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitAddItem {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_detailSequence")]
    pub detail_sequence: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_factor")]
    pub factor: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_itemSequence")]
    pub item_sequence: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_noteNumber")]
    pub note_number: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_servicedDate")]
    pub serviced_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_subDetailSequence")]
    pub sub_detail_sequence: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub adjudication: Option<Vec<ExplanationOfBenefitAdjudication>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "bodySite")]
    pub body_site: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub detail: Option<Vec<ExplanationOfBenefitDetail1>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "detailSequence")]
    pub detail_sequence: Option<Vec<PositiveInt>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub factor: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "itemSequence")]
    pub item_sequence: Option<Vec<PositiveInt>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "locationAddress")]
    pub location_address: Option<Address>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "locationCodeableConcept")]
    pub location_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "locationReference")]
    pub location_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub modifier: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub net: Option<Money>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "noteNumber")]
    pub note_number: Option<Vec<PositiveInt>>,

    #[serde(rename = "productOrService")]
    pub product_or_service: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "programCode")]
    pub program_code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub provider: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "servicedDate")]
    pub serviced_date: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "servicedPeriod")]
    pub serviced_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subDetailSequence")]
    pub sub_detail_sequence: Option<Vec<PositiveInt>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subSite")]
    pub sub_site: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "unitPrice")]
    pub unit_price: Option<Money>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_Adjudication")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitAdjudication {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_value")]
    pub value: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub amount: Option<Money>,

    pub category: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub reason: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Decimal>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_BenefitBalance")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitBenefitBalance {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_excluded")]
    pub excluded: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    pub category: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub excluded: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub financial: Option<Vec<ExplanationOfBenefitFinancial>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub network: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub term: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub unit: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_CareTeam")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitCareTeam {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_responsible")]
    pub responsible: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sequence")]
    pub sequence: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub provider: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub qualification: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub responsible: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub role: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub sequence: Option<PositiveInt>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_Detail")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitDetail {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_factor")]
    pub factor: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_noteNumber")]
    pub note_number: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sequence")]
    pub sequence: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub adjudication: Option<Vec<ExplanationOfBenefitAdjudication>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub factor: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub modifier: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub net: Option<Money>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "noteNumber")]
    pub note_number: Option<Vec<PositiveInt>>,

    #[serde(rename = "productOrService")]
    pub product_or_service: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "programCode")]
    pub program_code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub revenue: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub sequence: Option<PositiveInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subDetail")]
    pub sub_detail: Option<Vec<ExplanationOfBenefitSubDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub udi: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "unitPrice")]
    pub unit_price: Option<Money>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_Detail1")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitDetail1 {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_factor")]
    pub factor: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_noteNumber")]
    pub note_number: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub adjudication: Option<Vec<ExplanationOfBenefitAdjudication>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub factor: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub modifier: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub net: Option<Money>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "noteNumber")]
    pub note_number: Option<Vec<PositiveInt>>,

    #[serde(rename = "productOrService")]
    pub product_or_service: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subDetail")]
    pub sub_detail: Option<Vec<ExplanationOfBenefitSubDetail1>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "unitPrice")]
    pub unit_price: Option<Money>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_Diagnosis")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitDiagnosis {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sequence")]
    pub sequence: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "diagnosisCodeableConcept")]
    pub diagnosis_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "diagnosisReference")]
    pub diagnosis_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onAdmission")]
    pub on_admission: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "packageCode")]
    pub package_code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub sequence: Option<PositiveInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Vec<CodeableConcept>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_Financial")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitFinancial {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_allowedString")]
    pub allowed_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_allowedUnsignedInt")]
    pub allowed_unsigned_int: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_usedUnsignedInt")]
    pub used_unsigned_int: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "allowedMoney")]
    pub allowed_money: Option<Money>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "allowedString")]
    pub allowed_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "allowedUnsignedInt")]
    pub allowed_unsigned_int: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(rename = "type")]
    pub type_: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "usedMoney")]
    pub used_money: Option<Money>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "usedUnsignedInt")]
    pub used_unsigned_int: Option<f64>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_Insurance")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitInsurance {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_focal")]
    pub focal: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_preAuthRef")]
    pub pre_auth_ref: Option<Vec<Element>>,

    pub coverage: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub focal: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "preAuthRef")]
    pub pre_auth_ref: Option<Vec<String>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_Item")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitItem {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_careTeamSequence")]
    pub care_team_sequence: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_diagnosisSequence")]
    pub diagnosis_sequence: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_factor")]
    pub factor: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_informationSequence")]
    pub information_sequence: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_noteNumber")]
    pub note_number: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_procedureSequence")]
    pub procedure_sequence: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sequence")]
    pub sequence: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_servicedDate")]
    pub serviced_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub adjudication: Option<Vec<ExplanationOfBenefitAdjudication>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "bodySite")]
    pub body_site: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "careTeamSequence")]
    pub care_team_sequence: Option<Vec<PositiveInt>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub detail: Option<Vec<ExplanationOfBenefitDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "diagnosisSequence")]
    pub diagnosis_sequence: Option<Vec<PositiveInt>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub factor: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "informationSequence")]
    pub information_sequence: Option<Vec<PositiveInt>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "locationAddress")]
    pub location_address: Option<Address>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "locationCodeableConcept")]
    pub location_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "locationReference")]
    pub location_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub modifier: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub net: Option<Money>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "noteNumber")]
    pub note_number: Option<Vec<PositiveInt>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "procedureSequence")]
    pub procedure_sequence: Option<Vec<PositiveInt>>,

    #[serde(rename = "productOrService")]
    pub product_or_service: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "programCode")]
    pub program_code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub revenue: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub sequence: Option<PositiveInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "servicedDate")]
    pub serviced_date: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "servicedPeriod")]
    pub serviced_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subSite")]
    pub sub_site: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub udi: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "unitPrice")]
    pub unit_price: Option<Money>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_Payee")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitPayee {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub party: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_Payment")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitPayment {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub adjustment: Option<Money>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "adjustmentReason")]
    pub adjustment_reason: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub amount: Option<Money>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_Procedure")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitProcedure {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sequence")]
    pub sequence: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "procedureCodeableConcept")]
    pub procedure_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "procedureReference")]
    pub procedure_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub sequence: Option<PositiveInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub udi: Option<Vec<Reference>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_ProcessNote")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitProcessNote {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_number")]
    pub number: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_text")]
    pub text: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub number: Option<PositiveInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_Related")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitRelated {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub claim: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub reference: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub relationship: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_SubDetail")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitSubDetail {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_factor")]
    pub factor: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_noteNumber")]
    pub note_number: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sequence")]
    pub sequence: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub adjudication: Option<Vec<ExplanationOfBenefitAdjudication>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub factor: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub modifier: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub net: Option<Money>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "noteNumber")]
    pub note_number: Option<Vec<PositiveInt>>,

    #[serde(rename = "productOrService")]
    pub product_or_service: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "programCode")]
    pub program_code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub revenue: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub sequence: Option<PositiveInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub udi: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "unitPrice")]
    pub unit_price: Option<Money>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_SubDetail1")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitSubDetail1 {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_factor")]
    pub factor: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_noteNumber")]
    pub note_number: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub adjudication: Option<Vec<ExplanationOfBenefitAdjudication>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub factor: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub modifier: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub net: Option<Money>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "noteNumber")]
    pub note_number: Option<Vec<PositiveInt>>,

    #[serde(rename = "productOrService")]
    pub product_or_service: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "unitPrice")]
    pub unit_price: Option<Money>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_SupportingInfo")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitSupportingInfo {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sequence")]
    pub sequence: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_timingDate")]
    pub timing_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub value_boolean: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueString")]
    pub value_string: Option<Element>,

    pub category: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub reason: Option<Coding>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub sequence: Option<PositiveInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingDate")]
    pub timing_date: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingPeriod")]
    pub timing_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAttachment")]
    pub value_attachment: Option<Attachment>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueReference")]
    pub value_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueString")]
    pub value_string: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ExplanationOfBenefit_Total")]
#[serde(deny_unknown_fields)]
pub struct ExplanationOfBenefitTotal {
    pub amount: Money,

    pub category: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Expression {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_expression")]
    pub expression: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_reference")]
    pub reference: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<serde_json::Value>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<Id>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub reference: Option<Uri>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Extension {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBase64Binary")]
    pub value_base_64_binary: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub value_boolean: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueCanonical")]
    pub value_canonical: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueCode")]
    pub value_code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDate")]
    pub value_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDateTime")]
    pub value_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDecimal")]
    pub value_decimal: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueId")]
    pub value_id: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueInstant")]
    pub value_instant: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueInteger")]
    pub value_integer: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueMarkdown")]
    pub value_markdown: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueOid")]
    pub value_oid: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valuePositiveInt")]
    pub value_positive_int: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueString")]
    pub value_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueTime")]
    pub value_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUnsignedInt")]
    pub value_unsigned_int: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUri")]
    pub value_uri: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUrl")]
    pub value_url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUuid")]
    pub value_uuid: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAddress")]
    pub value_address: Option<Address>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAge")]
    pub value_age: Option<Age>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAnnotation")]
    pub value_annotation: Option<Annotation>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAttachment")]
    pub value_attachment: Option<Attachment>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBase64Binary")]
    pub value_base_64_binary: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCanonical")]
    pub value_canonical: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCode")]
    pub value_code: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableReference")]
    pub value_codeable_reference: Option<CodeableReference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCoding")]
    pub value_coding: Option<Coding>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueContactDetail")]
    pub value_contact_detail: Option<ContactDetail>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueContactPoint")]
    pub value_contact_point: Option<ContactPoint>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueContributor")]
    pub value_contributor: Option<Contributor>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCount")]
    pub value_count: Option<Count>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDataRequirement")]
    pub value_data_requirement: Option<DataRequirement>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDate")]
    pub value_date: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDateTime")]
    pub value_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDecimal")]
    pub value_decimal: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDistance")]
    pub value_distance: Option<Distance>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDosage")]
    pub value_dosage: Option<Dosage>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDuration")]
    pub value_duration: Option<Duration>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueExpression")]
    pub value_expression: Option<Expression>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueHumanName")]
    pub value_human_name: Option<HumanName>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueId")]
    pub value_id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueIdentifier")]
    pub value_identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueInstant")]
    pub value_instant: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueInteger")]
    pub value_integer: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueMarkdown")]
    pub value_markdown: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueMoney")]
    pub value_money: Option<Money>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueOid")]
    pub value_oid: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueParameterDefinition")]
    pub value_parameter_definition: Option<ParameterDefinition>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valuePeriod")]
    pub value_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valuePositiveInt")]
    pub value_positive_int: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRange")]
    pub value_range: Option<Range>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRatio")]
    pub value_ratio: Option<Ratio>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRatioRange")]
    pub value_ratio_range: Option<RatioRange>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueReference")]
    pub value_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRelatedArtifact")]
    pub value_related_artifact: Option<RelatedArtifact>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueSampledData")]
    pub value_sampled_data: Option<SampledData>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueSignature")]
    pub value_signature: Option<Signature>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueString")]
    pub value_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTime")]
    pub value_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTiming")]
    pub value_timing: Option<Timing>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTriggerDefinition")]
    pub value_trigger_definition: Option<TriggerDefinition>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUnsignedInt")]
    pub value_unsigned_int: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUri")]
    pub value_uri: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUrl")]
    pub value_url: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUsageContext")]
    pub value_usage_context: Option<UsageContext>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUuid")]
    pub value_uuid: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct FamilyMemberHistory {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_ageString")]
    pub age_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_bornDate")]
    pub born_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_bornString")]
    pub born_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_deceasedBoolean")]
    pub deceased_boolean: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_deceasedDate")]
    pub deceased_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_deceasedString")]
    pub deceased_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_estimatedAge")]
    pub estimated_age: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_instantiatesUri")]
    pub instantiates_uri: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "ageAge")]
    pub age_age: Option<Age>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "ageRange")]
    pub age_range: Option<Range>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "ageString")]
    pub age_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "bornDate")]
    pub born_date: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "bornPeriod")]
    pub born_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "bornString")]
    pub born_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub condition: Option<Vec<FamilyMemberHistoryCondition>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dataAbsentReason")]
    pub data_absent_reason: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "deceasedAge")]
    pub deceased_age: Option<Age>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "deceasedBoolean")]
    pub deceased_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "deceasedDate")]
    pub deceased_date: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "deceasedRange")]
    pub deceased_range: Option<Range>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "deceasedString")]
    pub deceased_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "estimatedAge")]
    pub estimated_age: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesCanonical")]
    pub instantiates_canonical: Option<Vec<Canonical>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesUri")]
    pub instantiates_uri: Option<Vec<Uri>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    pub patient: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,

    pub relationship: CodeableConcept,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub sex: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "FamilyMemberHistory_Condition")]
#[serde(deny_unknown_fields)]
pub struct FamilyMemberHistoryCondition {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_contributedToDeath")]
    pub contributed_to_death: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_onsetString")]
    pub onset_string: Option<Element>,

    pub code: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contributedToDeath")]
    pub contributed_to_death: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onsetAge")]
    pub onset_age: Option<Age>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onsetPeriod")]
    pub onset_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onsetRange")]
    pub onset_range: Option<Range>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onsetString")]
    pub onset_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub outcome: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Flag {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,

    pub code: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    pub subject: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Goal {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lifecycleStatus")]
    pub lifecycle_status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_startDate")]
    pub start_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_statusDate")]
    pub status_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_statusReason")]
    pub status_reason: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "achievementStatus")]
    pub achievement_status: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub addresses: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    pub description: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "expressedBy")]
    pub expressed_by: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lifecycleStatus")]
    pub lifecycle_status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "outcomeCode")]
    pub outcome_code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "outcomeReference")]
    pub outcome_reference: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub priority: Option<CodeableConcept>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "startCodeableConcept")]
    pub start_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "startDate")]
    pub start_date: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusDate")]
    pub status_date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusReason")]
    pub status_reason: Option<String>,

    pub subject: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub target: Option<Vec<GoalTarget>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Goal_Target")]
#[serde(deny_unknown_fields)]
pub struct GoalTarget {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_detailBoolean")]
    pub detail_boolean: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_detailInteger")]
    pub detail_integer: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_detailString")]
    pub detail_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_dueDate")]
    pub due_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "detailBoolean")]
    pub detail_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "detailCodeableConcept")]
    pub detail_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "detailInteger")]
    pub detail_integer: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "detailQuantity")]
    pub detail_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "detailRange")]
    pub detail_range: Option<Range>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "detailRatio")]
    pub detail_ratio: Option<Ratio>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "detailString")]
    pub detail_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dueDate")]
    pub due_date: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dueDuration")]
    pub due_duration: Option<Duration>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub measure: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct GraphDefinition {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_experimental")]
    pub experimental: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_publisher")]
    pub publisher: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_purpose")]
    pub purpose: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_start")]
    pub start: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub link: Option<Vec<GraphDefinitionLink>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub profile: Option<Canonical>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub start: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "GraphDefinition_Compartment")]
#[serde(deny_unknown_fields)]
pub struct GraphDefinitionCompartment {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_code")]
    pub code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_expression")]
    pub expression: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_rule")]
    pub rule: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_use")]
    pub use_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub rule: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "use")]
    pub use_: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "GraphDefinition_Link")]
#[serde(deny_unknown_fields)]
pub struct GraphDefinitionLink {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_max")]
    pub max: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_min")]
    pub min: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_path")]
    pub path: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sliceName")]
    pub slice_name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub max: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub min: Option<Integer>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "sliceName")]
    pub slice_name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub target: Option<Vec<GraphDefinitionTarget>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "GraphDefinition_Target")]
#[serde(deny_unknown_fields)]
pub struct GraphDefinitionTarget {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_params")]
    pub params: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub compartment: Option<Vec<GraphDefinitionCompartment>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub link: Option<Vec<GraphDefinitionLink>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub params: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub profile: Option<Canonical>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Group {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_active")]
    pub active: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_actual")]
    pub actual: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_quantity")]
    pub quantity: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub active: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub actual: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub characteristic: Option<Vec<GroupCharacteristic>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "managingEntity")]
    pub managing_entity: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub member: Option<Vec<GroupMember>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<UnsignedInt>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Group_Characteristic")]
#[serde(deny_unknown_fields)]
pub struct GroupCharacteristic {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_exclude")]
    pub exclude: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub value_boolean: Option<Element>,

    pub code: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub exclude: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRange")]
    pub value_range: Option<Range>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueReference")]
    pub value_reference: Option<Reference>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Group_Member")]
#[serde(deny_unknown_fields)]
pub struct GroupMember {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_inactive")]
    pub inactive: Option<Element>,

    pub entity: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub inactive: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct GuidanceResponse {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_moduleCanonical")]
    pub module_canonical: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_moduleUri")]
    pub module_uri: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_occurrenceDateTime")]
    pub occurrence_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dataRequirement")]
    pub data_requirement: Option<Vec<DataRequirement>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "evaluationMessage")]
    pub evaluation_message: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "moduleCanonical")]
    pub module_canonical: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "moduleCodeableConcept")]
    pub module_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "moduleUri")]
    pub module_uri: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrenceDateTime")]
    pub occurrence_date_time: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "outputParameters")]
    pub output_parameters: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub performer: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "requestIdentifier")]
    pub request_identifier: Option<Identifier>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub result: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct HealthcareService {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_active")]
    pub active: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_appointmentRequired")]
    pub appointment_required: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_availabilityExceptions")]
    pub availability_exceptions: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_comment")]
    pub comment: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_extraDetails")]
    pub extra_details: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub active: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "appointmentRequired")]
    pub appointment_required: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "availabilityExceptions")]
    pub availability_exceptions: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "availableTime")]
    pub available_time: Option<Vec<HealthcareServiceAvailableTime>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub characteristic: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub communication: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "coverageArea")]
    pub coverage_area: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub eligibility: Option<Vec<HealthcareServiceEligibility>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "extraDetails")]
    pub extra_details: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "notAvailable")]
    pub not_available: Option<Vec<HealthcareServiceNotAvailable>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub photo: Option<Attachment>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub program: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "providedBy")]
    pub provided_by: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "referralMethod")]
    pub referral_method: Option<Vec<CodeableConcept>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "serviceProvisionCode")]
    pub service_provision_code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub specialty: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub telecom: Option<Vec<ContactPoint>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Vec<CodeableConcept>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "HealthcareService_AvailableTime")]
#[serde(deny_unknown_fields)]
pub struct HealthcareServiceAvailableTime {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_allDay")]
    pub all_day: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_availableEndTime")]
    pub available_end_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_availableStartTime")]
    pub available_start_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_daysOfWeek")]
    pub days_of_week: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "allDay")]
    pub all_day: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "availableEndTime")]
    pub available_end_time: Option<Time>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "availableStartTime")]
    pub available_start_time: Option<Time>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "daysOfWeek")]
    pub days_of_week: Option<Vec<Code>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "HealthcareService_Eligibility")]
#[serde(deny_unknown_fields)]
pub struct HealthcareServiceEligibility {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_comment")]
    pub comment: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "HealthcareService_NotAvailable")]
#[serde(deny_unknown_fields)]
pub struct HealthcareServiceNotAvailable {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub during: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct HumanName {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_family")]
    pub family: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_given")]
    pub given: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_prefix")]
    pub prefix: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_suffix")]
    pub suffix: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_text")]
    pub text: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_use")]
    pub use_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub family: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub given: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub prefix: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub suffix: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "use")]
    pub use_: Option<serde_json::Value>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Identifier {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_system")]
    pub system: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_use")]
    pub use_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_value")]
    pub value: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub assigner: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub system: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "use")]
    pub use_: Option<serde_json::Value>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ImagingStudy {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_numberOfInstances")]
    pub number_of_instances: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_numberOfSeries")]
    pub number_of_series: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_started")]
    pub started: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub interpreter: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub modality: Option<Vec<Coding>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "numberOfInstances")]
    pub number_of_instances: Option<UnsignedInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "numberOfSeries")]
    pub number_of_series: Option<UnsignedInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "procedureCode")]
    pub procedure_code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "procedureReference")]
    pub procedure_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub referrer: Option<Reference>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub series: Option<Vec<ImagingStudySeries>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub started: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    pub subject: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ImagingStudy_Instance")]
#[serde(deny_unknown_fields)]
pub struct ImagingStudyInstance {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_number")]
    pub number: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_uid")]
    pub uid: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub number: Option<UnsignedInt>,

    #[serde(rename = "sopClass")]
    pub sop_class: Coding,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub uid: Option<Id>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ImagingStudy_Performer")]
#[serde(deny_unknown_fields)]
pub struct ImagingStudyPerformer {
    pub actor: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub function: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ImagingStudy_Series")]
#[serde(deny_unknown_fields)]
pub struct ImagingStudySeries {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_number")]
    pub number: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_numberOfInstances")]
    pub number_of_instances: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_started")]
    pub started: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_uid")]
    pub uid: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "bodySite")]
    pub body_site: Option<Coding>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub instance: Option<Vec<ImagingStudyInstance>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub laterality: Option<Coding>,

    pub modality: Coding,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub number: Option<UnsignedInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "numberOfInstances")]
    pub number_of_instances: Option<UnsignedInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub performer: Option<Vec<ImagingStudyPerformer>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub specimen: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub started: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub uid: Option<Id>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Immunization {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_expirationDate")]
    pub expiration_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_isSubpotent")]
    pub is_subpotent: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lotNumber")]
    pub lot_number: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_occurrenceDateTime")]
    pub occurrence_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_occurrenceString")]
    pub occurrence_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_primarySource")]
    pub primary_source: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_recorded")]
    pub recorded: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "doseQuantity")]
    pub dose_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub education: Option<Vec<ImmunizationEducation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "expirationDate")]
    pub expiration_date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fundingSource")]
    pub funding_source: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "isSubpotent")]
    pub is_subpotent: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lotNumber")]
    pub lot_number: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub manufacturer: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrenceDateTime")]
    pub occurrence_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrenceString")]
    pub occurrence_string: Option<String>,

    pub patient: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub performer: Option<Vec<ImmunizationPerformer>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "primarySource")]
    pub primary_source: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "programEligibility")]
    pub program_eligibility: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "protocolApplied")]
    pub protocol_applied: Option<Vec<ImmunizationProtocolApplied>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub reaction: Option<Vec<ImmunizationReaction>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub recorded: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reportOrigin")]
    pub report_origin: Option<CodeableConcept>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub route: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub site: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusReason")]
    pub status_reason: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subpotentReason")]
    pub subpotent_reason: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(rename = "vaccineCode")]
    pub vaccine_code: CodeableConcept,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ImmunizationEvaluation {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_doseNumberPositiveInt")]
    pub dose_number_positive_int: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_doseNumberString")]
    pub dose_number_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_series")]
    pub series: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_seriesDosesPositiveInt")]
    pub series_doses_positive_int: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_seriesDosesString")]
    pub series_doses_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub authority: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "doseNumberPositiveInt")]
    pub dose_number_positive_int: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "doseNumberString")]
    pub dose_number_string: Option<String>,

    #[serde(rename = "doseStatus")]
    pub dose_status: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "doseStatusReason")]
    pub dose_status_reason: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(rename = "immunizationEvent")]
    pub immunization_event: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub patient: Reference,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub series: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "seriesDosesPositiveInt")]
    pub series_doses_positive_int: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "seriesDosesString")]
    pub series_doses_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(rename = "targetDisease")]
    pub target_disease: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ImmunizationRecommendation {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub authority: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub patient: Reference,

    pub recommendation: Vec<ImmunizationRecommendationRecommendation>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ImmunizationRecommendation_DateCriterion")]
#[serde(deny_unknown_fields)]
pub struct ImmunizationRecommendationDateCriterion {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_value")]
    pub value: Option<Element>,

    pub code: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<DateTime>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ImmunizationRecommendation_Recommendation")]
#[serde(deny_unknown_fields)]
pub struct ImmunizationRecommendationRecommendation {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_doseNumberPositiveInt")]
    pub dose_number_positive_int: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_doseNumberString")]
    pub dose_number_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_series")]
    pub series: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_seriesDosesPositiveInt")]
    pub series_doses_positive_int: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_seriesDosesString")]
    pub series_doses_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contraindicatedVaccineCode")]
    pub contraindicated_vaccine_code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dateCriterion")]
    pub date_criterion: Option<Vec<ImmunizationRecommendationDateCriterion>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "doseNumberPositiveInt")]
    pub dose_number_positive_int: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "doseNumberString")]
    pub dose_number_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "forecastReason")]
    pub forecast_reason: Option<Vec<CodeableConcept>>,

    #[serde(rename = "forecastStatus")]
    pub forecast_status: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub series: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "seriesDosesPositiveInt")]
    pub series_doses_positive_int: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "seriesDosesString")]
    pub series_doses_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportingImmunization")]
    pub supporting_immunization: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportingPatientInformation")]
    pub supporting_patient_information: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetDisease")]
    pub target_disease: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "vaccineCode")]
    pub vaccine_code: Option<Vec<CodeableConcept>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Immunization_Education")]
#[serde(deny_unknown_fields)]
pub struct ImmunizationEducation {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_documentType")]
    pub document_type: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_presentationDate")]
    pub presentation_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_publicationDate")]
    pub publication_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_reference")]
    pub reference: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "documentType")]
    pub document_type: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "presentationDate")]
    pub presentation_date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "publicationDate")]
    pub publication_date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub reference: Option<Uri>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Immunization_Performer")]
#[serde(deny_unknown_fields)]
pub struct ImmunizationPerformer {
    pub actor: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub function: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Immunization_ProtocolApplied")]
#[serde(deny_unknown_fields)]
pub struct ImmunizationProtocolApplied {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_doseNumberPositiveInt")]
    pub dose_number_positive_int: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_doseNumberString")]
    pub dose_number_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_series")]
    pub series: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_seriesDosesPositiveInt")]
    pub series_doses_positive_int: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_seriesDosesString")]
    pub series_doses_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub authority: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "doseNumberPositiveInt")]
    pub dose_number_positive_int: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "doseNumberString")]
    pub dose_number_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub series: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "seriesDosesPositiveInt")]
    pub series_doses_positive_int: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "seriesDosesString")]
    pub series_doses_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetDisease")]
    pub target_disease: Option<Vec<CodeableConcept>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Immunization_Reaction")]
#[serde(deny_unknown_fields)]
pub struct ImmunizationReaction {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_reported")]
    pub reported: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub detail: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub reported: Option<Boolean>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ImplementationGuide {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_copyright")]
    pub copyright: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_experimental")]
    pub experimental: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fhirVersion")]
    pub fhir_version: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_license")]
    pub license: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_packageId")]
    pub package_id: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_publisher")]
    pub publisher: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub definition: Option<ImplementationGuideDefinition>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dependsOn")]
    pub depends_on: Option<Vec<ImplementationGuideDependsOn>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fhirVersion")]
    pub fhir_version: Option<Vec<Code>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub global: Option<Vec<ImplementationGuideGlobal>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub license: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub manifest: Option<ImplementationGuideManifest>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "packageId")]
    pub package_id: Option<Id>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ImplementationGuide_Definition")]
#[serde(deny_unknown_fields)]
pub struct ImplementationGuideDefinition {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub grouping: Option<Vec<ImplementationGuideGrouping>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub page: Option<ImplementationGuidePage>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub parameter: Option<Vec<ImplementationGuideParameter>>,

    pub resource: Vec<ImplementationGuideResource>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub template: Option<Vec<ImplementationGuideTemplate>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ImplementationGuide_DependsOn")]
#[serde(deny_unknown_fields)]
pub struct ImplementationGuideDependsOn {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_packageId")]
    pub package_id: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "packageId")]
    pub package_id: Option<Id>,

    pub uri: Canonical,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ImplementationGuide_Global")]
#[serde(deny_unknown_fields)]
pub struct ImplementationGuideGlobal {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub profile: Canonical,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ImplementationGuide_Grouping")]
#[serde(deny_unknown_fields)]
pub struct ImplementationGuideGrouping {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ImplementationGuide_Manifest")]
#[serde(deny_unknown_fields)]
pub struct ImplementationGuideManifest {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_image")]
    pub image: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_other")]
    pub other: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_rendering")]
    pub rendering: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub image: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub other: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub page: Option<Vec<ImplementationGuidePage1>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub rendering: Option<Url>,

    pub resource: Vec<ImplementationGuideResource1>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ImplementationGuide_Page")]
#[serde(deny_unknown_fields)]
pub struct ImplementationGuidePage {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_generation")]
    pub generation: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_nameUrl")]
    pub name_url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub generation: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "nameReference")]
    pub name_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "nameUrl")]
    pub name_url: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub page: Option<Vec<ImplementationGuidePage>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ImplementationGuide_Page1")]
#[serde(deny_unknown_fields)]
pub struct ImplementationGuidePage1 {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_anchor")]
    pub anchor: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub anchor: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ImplementationGuide_Parameter")]
#[serde(deny_unknown_fields)]
pub struct ImplementationGuideParameter {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_code")]
    pub code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_value")]
    pub value: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ImplementationGuide_Resource")]
#[serde(deny_unknown_fields)]
pub struct ImplementationGuideResource {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_exampleBoolean")]
    pub example_boolean: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_exampleCanonical")]
    pub example_canonical: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fhirVersion")]
    pub fhir_version: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_groupingId")]
    pub grouping_id: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "exampleBoolean")]
    pub example_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "exampleCanonical")]
    pub example_canonical: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fhirVersion")]
    pub fhir_version: Option<Vec<Code>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "groupingId")]
    pub grouping_id: Option<Id>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    pub reference: Reference,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ImplementationGuide_Resource1")]
#[serde(deny_unknown_fields)]
pub struct ImplementationGuideResource1 {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_exampleBoolean")]
    pub example_boolean: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_exampleCanonical")]
    pub example_canonical: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_relativePath")]
    pub relative_path: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "exampleBoolean")]
    pub example_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "exampleCanonical")]
    pub example_canonical: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub reference: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relativePath")]
    pub relative_path: Option<Url>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ImplementationGuide_Template")]
#[serde(deny_unknown_fields)]
pub struct ImplementationGuideTemplate {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_code")]
    pub code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_scope")]
    pub scope: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_source")]
    pub source: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Ingredient {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_allergenicIndicator")]
    pub allergenic_indicator: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "allergenicIndicator")]
    pub allergenic_indicator: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "for")]
    pub for_: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub function: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub manufacturer: Option<Vec<IngredientManufacturer>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    pub role: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    pub substance: IngredientSubstance,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Ingredient_Manufacturer")]
#[serde(deny_unknown_fields)]
pub struct IngredientManufacturer {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_role")]
    pub role: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    pub manufacturer: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub role: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Ingredient_ReferenceStrength")]
#[serde(deny_unknown_fields)]
pub struct IngredientReferenceStrength {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_measurementPoint")]
    pub measurement_point: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub country: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "measurementPoint")]
    pub measurement_point: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "strengthRatio")]
    pub strength_ratio: Option<Ratio>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "strengthRatioRange")]
    pub strength_ratio_range: Option<RatioRange>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub substance: Option<CodeableReference>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Ingredient_Strength")]
#[serde(deny_unknown_fields)]
pub struct IngredientStrength {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_measurementPoint")]
    pub measurement_point: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_textConcentration")]
    pub text_concentration: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_textPresentation")]
    pub text_presentation: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "concentrationRatio")]
    pub concentration_ratio: Option<Ratio>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "concentrationRatioRange")]
    pub concentration_ratio_range: Option<RatioRange>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub country: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "measurementPoint")]
    pub measurement_point: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "presentationRatio")]
    pub presentation_ratio: Option<Ratio>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "presentationRatioRange")]
    pub presentation_ratio_range: Option<RatioRange>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "referenceStrength")]
    pub reference_strength: Option<Vec<IngredientReferenceStrength>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "textConcentration")]
    pub text_concentration: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "textPresentation")]
    pub text_presentation: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Ingredient_Substance")]
#[serde(deny_unknown_fields)]
pub struct IngredientSubstance {
    pub code: CodeableReference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub strength: Option<Vec<IngredientStrength>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct InsurancePlan {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_alias")]
    pub alias: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "administeredBy")]
    pub administered_by: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub alias: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<InsurancePlanContact>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub coverage: Option<Vec<InsurancePlanCoverage>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "coverageArea")]
    pub coverage_area: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub network: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "ownedBy")]
    pub owned_by: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub plan: Option<Vec<InsurancePlanPlan>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Vec<CodeableConcept>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "InsurancePlan_Benefit")]
#[serde(deny_unknown_fields)]
pub struct InsurancePlanBenefit {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_requirement")]
    pub requirement: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub limit: Option<Vec<InsurancePlanLimit>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub requirement: Option<String>,

    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "InsurancePlan_Benefit1")]
#[serde(deny_unknown_fields)]
pub struct InsurancePlanBenefit1 {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub cost: Option<Vec<InsurancePlanCost>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "InsurancePlan_Contact")]
#[serde(deny_unknown_fields)]
pub struct InsurancePlanContact {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub address: Option<Address>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<HumanName>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub telecom: Option<Vec<ContactPoint>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "InsurancePlan_Cost")]
#[serde(deny_unknown_fields)]
pub struct InsurancePlanCost {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub applicability: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub qualifiers: Option<Vec<CodeableConcept>>,

    #[serde(rename = "type")]
    pub type_: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Quantity>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "InsurancePlan_Coverage")]
#[serde(deny_unknown_fields)]
pub struct InsurancePlanCoverage {
    pub benefit: Vec<InsurancePlanBenefit>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub network: Option<Vec<Reference>>,

    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "InsurancePlan_GeneralCost")]
#[serde(deny_unknown_fields)]
pub struct InsurancePlanGeneralCost {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_comment")]
    pub comment: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_groupSize")]
    pub group_size: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub cost: Option<Money>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "groupSize")]
    pub group_size: Option<PositiveInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "InsurancePlan_Limit")]
#[serde(deny_unknown_fields)]
pub struct InsurancePlanLimit {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Quantity>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "InsurancePlan_Plan")]
#[serde(deny_unknown_fields)]
pub struct InsurancePlanPlan {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "coverageArea")]
    pub coverage_area: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "generalCost")]
    pub general_cost: Option<Vec<InsurancePlanGeneralCost>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub network: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "specificCost")]
    pub specific_cost: Option<Vec<InsurancePlanSpecificCost>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "InsurancePlan_SpecificCost")]
#[serde(deny_unknown_fields)]
pub struct InsurancePlanSpecificCost {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub benefit: Option<Vec<InsurancePlanBenefit1>>,

    pub category: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Invoice {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_cancelledReason")]
    pub cancelled_reason: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_paymentTerms")]
    pub payment_terms: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub account: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "cancelledReason")]
    pub cancelled_reason: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub issuer: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lineItem")]
    pub line_item: Option<Vec<InvoiceLineItem>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub participant: Option<Vec<InvoiceParticipant>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "paymentTerms")]
    pub payment_terms: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub recipient: Option<Reference>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "totalGross")]
    pub total_gross: Option<Money>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "totalNet")]
    pub total_net: Option<Money>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "totalPriceComponent")]
    pub total_price_component: Option<Vec<InvoicePriceComponent>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Invoice_LineItem")]
#[serde(deny_unknown_fields)]
pub struct InvoiceLineItem {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sequence")]
    pub sequence: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "chargeItemCodeableConcept")]
    pub charge_item_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "chargeItemReference")]
    pub charge_item_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "priceComponent")]
    pub price_component: Option<Vec<InvoicePriceComponent>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub sequence: Option<PositiveInt>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Invoice_Participant")]
#[serde(deny_unknown_fields)]
pub struct InvoiceParticipant {
    pub actor: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub role: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Invoice_PriceComponent")]
#[serde(deny_unknown_fields)]
pub struct InvoicePriceComponent {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_factor")]
    pub factor: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub amount: Option<Money>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub factor: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Library {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_approvalDate")]
    pub approval_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_copyright")]
    pub copyright: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_experimental")]
    pub experimental: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastReviewDate")]
    pub last_review_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_publisher")]
    pub publisher: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_purpose")]
    pub purpose: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_subtitle")]
    pub subtitle: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_usage")]
    pub usage: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "approvalDate")]
    pub approval_date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub content: Option<Vec<Attachment>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dataRequirement")]
    pub data_requirement: Option<Vec<DataRequirement>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub editor: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectivePeriod")]
    pub effective_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub endorser: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastReviewDate")]
    pub last_review_date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub parameter: Option<Vec<ParameterDefinition>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatedArtifact")]
    pub related_artifact: Option<Vec<RelatedArtifact>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub reviewer: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectCodeableConcept")]
    pub subject_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectReference")]
    pub subject_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub subtitle: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub topic: Option<Vec<CodeableConcept>>,

    #[serde(rename = "type")]
    pub type_: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub usage: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Linkage {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_active")]
    pub active: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub active: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    pub item: Vec<LinkageItem>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Linkage_Item")]
#[serde(deny_unknown_fields)]
pub struct LinkageItem {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub resource: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct List {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_mode")]
    pub mode: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "emptyReason")]
    pub empty_reason: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub entry: Option<Vec<ListEntry>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub mode: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "orderedBy")]
    pub ordered_by: Option<CodeableConcept>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub source: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "List_Entry")]
#[serde(deny_unknown_fields)]
pub struct ListEntry {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_deleted")]
    pub deleted: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub deleted: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub flag: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    pub item: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Location {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_alias")]
    pub alias: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_availabilityExceptions")]
    pub availability_exceptions: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_mode")]
    pub mode: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub address: Option<Address>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub alias: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "availabilityExceptions")]
    pub availability_exceptions: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "hoursOfOperation")]
    pub hours_of_operation: Option<Vec<LocationHoursOfOperation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "managingOrganization")]
    pub managing_organization: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub mode: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "operationalStatus")]
    pub operational_status: Option<Coding>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "partOf")]
    pub part_of: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "physicalType")]
    pub physical_type: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub position: Option<LocationPosition>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub telecom: Option<Vec<ContactPoint>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Vec<CodeableConcept>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Location_HoursOfOperation")]
#[serde(deny_unknown_fields)]
pub struct LocationHoursOfOperation {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_allDay")]
    pub all_day: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_closingTime")]
    pub closing_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_daysOfWeek")]
    pub days_of_week: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_openingTime")]
    pub opening_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "allDay")]
    pub all_day: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "closingTime")]
    pub closing_time: Option<Time>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "daysOfWeek")]
    pub days_of_week: Option<Vec<Code>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "openingTime")]
    pub opening_time: Option<Time>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Location_Position")]
#[serde(deny_unknown_fields)]
pub struct LocationPosition {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_altitude")]
    pub altitude: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_latitude")]
    pub latitude: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_longitude")]
    pub longitude: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub altitude: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub latitude: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub longitude: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ManufacturedItemDefinition {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub ingredient: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(rename = "manufacturedDoseForm")]
    pub manufactured_dose_form: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub manufacturer: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub property: Option<Vec<ManufacturedItemDefinitionProperty>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "unitOfPresentation")]
    pub unit_of_presentation: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ManufacturedItemDefinition_Property")]
#[serde(deny_unknown_fields)]
pub struct ManufacturedItemDefinitionProperty {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub value_boolean: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDate")]
    pub value_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(rename = "type")]
    pub type_: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAttachment")]
    pub value_attachment: Option<Attachment>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDate")]
    pub value_date: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct MarketingStatus {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_restoreDate")]
    pub restore_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub country: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dateRange")]
    pub date_range: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "restoreDate")]
    pub restore_date: Option<DateTime>,

    pub status: CodeableConcept,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Measure {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_approvalDate")]
    pub approval_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_clinicalRecommendationStatement")]
    pub clinical_recommendation_statement: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_copyright")]
    pub copyright: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_definition")]
    pub definition: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_disclaimer")]
    pub disclaimer: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_experimental")]
    pub experimental: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_guidance")]
    pub guidance: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastReviewDate")]
    pub last_review_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_publisher")]
    pub publisher: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_purpose")]
    pub purpose: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_rateAggregation")]
    pub rate_aggregation: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_rationale")]
    pub rationale: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_riskAdjustment")]
    pub risk_adjustment: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_subtitle")]
    pub subtitle: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_usage")]
    pub usage: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "approvalDate")]
    pub approval_date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "clinicalRecommendationStatement")]
    pub clinical_recommendation_statement: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "compositeScoring")]
    pub composite_scoring: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub definition: Option<Vec<Markdown>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub disclaimer: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub editor: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectivePeriod")]
    pub effective_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub endorser: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub group: Option<Vec<MeasureGroup>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub guidance: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "improvementNotation")]
    pub improvement_notation: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastReviewDate")]
    pub last_review_date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub library: Option<Vec<Canonical>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "rateAggregation")]
    pub rate_aggregation: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub rationale: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatedArtifact")]
    pub related_artifact: Option<Vec<RelatedArtifact>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub reviewer: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "riskAdjustment")]
    pub risk_adjustment: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub scoring: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectCodeableConcept")]
    pub subject_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectReference")]
    pub subject_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub subtitle: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supplementalData")]
    pub supplemental_data: Option<Vec<MeasureSupplementalData>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub topic: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub usage: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct MeasureReport {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "evaluatedResource")]
    pub evaluated_resource: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub group: Option<Vec<MeasureReportGroup>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "improvementNotation")]
    pub improvement_notation: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    pub measure: Canonical,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub period: Period,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub reporter: Option<Reference>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "MeasureReport_Component")]
#[serde(deny_unknown_fields)]
pub struct MeasureReportComponent {
    pub code: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub value: CodeableConcept,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MeasureReport_Group")]
#[serde(deny_unknown_fields)]
pub struct MeasureReportGroup {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "measureScore")]
    pub measure_score: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub population: Option<Vec<MeasureReportPopulation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub stratifier: Option<Vec<MeasureReportStratifier>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MeasureReport_Population")]
#[serde(deny_unknown_fields)]
pub struct MeasureReportPopulation {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_count")]
    pub count: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub count: Option<Integer>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectResults")]
    pub subject_results: Option<Reference>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MeasureReport_Population1")]
#[serde(deny_unknown_fields)]
pub struct MeasureReportPopulation1 {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_count")]
    pub count: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub count: Option<Integer>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectResults")]
    pub subject_results: Option<Reference>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MeasureReport_Stratifier")]
#[serde(deny_unknown_fields)]
pub struct MeasureReportStratifier {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub stratum: Option<Vec<MeasureReportStratum>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MeasureReport_Stratum")]
#[serde(deny_unknown_fields)]
pub struct MeasureReportStratum {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub component: Option<Vec<MeasureReportComponent>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "measureScore")]
    pub measure_score: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub population: Option<Vec<MeasureReportPopulation1>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Measure_Component")]
#[serde(deny_unknown_fields)]
pub struct MeasureComponent {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,

    pub criteria: Expression,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Measure_Group")]
#[serde(deny_unknown_fields)]
pub struct MeasureGroup {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub population: Option<Vec<MeasurePopulation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub stratifier: Option<Vec<MeasureStratifier>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Measure_Population")]
#[serde(deny_unknown_fields)]
pub struct MeasurePopulation {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,

    pub criteria: Expression,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Measure_Stratifier")]
#[serde(deny_unknown_fields)]
pub struct MeasureStratifier {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub component: Option<Vec<MeasureComponent>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub criteria: Option<Expression>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Measure_SupplementalData")]
#[serde(deny_unknown_fields)]
pub struct MeasureSupplementalData {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,

    pub criteria: Expression,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub usage: Option<Vec<CodeableConcept>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Media {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_createdDateTime")]
    pub created_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_deviceName")]
    pub device_name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_duration")]
    pub duration: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_frames")]
    pub frames: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_height")]
    pub height: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_issued")]
    pub issued: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_width")]
    pub width: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "bodySite")]
    pub body_site: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    pub content: Attachment,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "createdDateTime")]
    pub created_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "createdPeriod")]
    pub created_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub device: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "deviceName")]
    pub device_name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub duration: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub frames: Option<PositiveInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub height: Option<PositiveInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub issued: Option<Instant>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub modality: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub operator: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "partOf")]
    pub part_of: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub view: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub width: Option<PositiveInt>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Medication {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub amount: Option<Ratio>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub batch: Option<MedicationBatch>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub form: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub ingredient: Option<Vec<MedicationIngredient>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub manufacturer: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct MedicationAdministration {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_effectiveDateTime")]
    pub effective_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_instantiates")]
    pub instantiates: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub context: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub device: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub dosage: Option<MedicationAdministrationDosage>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectiveDateTime")]
    pub effective_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectivePeriod")]
    pub effective_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "eventHistory")]
    pub event_history: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub instantiates: Option<Vec<Uri>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "medicationCodeableConcept")]
    pub medication_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "medicationReference")]
    pub medication_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "partOf")]
    pub part_of: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub performer: Option<Vec<MedicationAdministrationPerformer>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub request: Option<Reference>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusReason")]
    pub status_reason: Option<Vec<CodeableConcept>>,

    pub subject: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportingInformation")]
    pub supporting_information: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MedicationAdministration_Dosage")]
#[serde(deny_unknown_fields)]
pub struct MedicationAdministrationDosage {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_text")]
    pub text: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub dose: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub method: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "rateQuantity")]
    pub rate_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "rateRatio")]
    pub rate_ratio: Option<Ratio>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub route: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub site: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "MedicationAdministration_Performer")]
#[serde(deny_unknown_fields)]
pub struct MedicationAdministrationPerformer {
    pub actor: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub function: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct MedicationDispense {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_whenHandedOver")]
    pub when_handed_over: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_whenPrepared")]
    pub when_prepared: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "authorizingPrescription")]
    pub authorizing_prescription: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub context: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "daysSupply")]
    pub days_supply: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub destination: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "detectedIssue")]
    pub detected_issue: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dosageInstruction")]
    pub dosage_instruction: Option<Vec<Dosage>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "eventHistory")]
    pub event_history: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "medicationCodeableConcept")]
    pub medication_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "medicationReference")]
    pub medication_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "partOf")]
    pub part_of: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub performer: Option<Vec<MedicationDispensePerformer>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub receiver: Option<Vec<Reference>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusReasonCodeableConcept")]
    pub status_reason_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusReasonReference")]
    pub status_reason_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub substitution: Option<MedicationDispenseSubstitution>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportingInformation")]
    pub supporting_information: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "whenHandedOver")]
    pub when_handed_over: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "whenPrepared")]
    pub when_prepared: Option<DateTime>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "MedicationDispense_Performer")]
#[serde(deny_unknown_fields)]
pub struct MedicationDispensePerformer {
    pub actor: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub function: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MedicationDispense_Substitution")]
#[serde(deny_unknown_fields)]
pub struct MedicationDispenseSubstitution {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_wasSubstituted")]
    pub was_substituted: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub reason: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "responsibleParty")]
    pub responsible_party: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "wasSubstituted")]
    pub was_substituted: Option<Boolean>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct MedicationKnowledge {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_preparationInstruction")]
    pub preparation_instruction: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_synonym")]
    pub synonym: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "administrationGuidelines")]
    pub administration_guidelines: Option<Vec<MedicationKnowledgeAdministrationGuidelines>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub amount: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "associatedMedication")]
    pub associated_medication: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contraindication: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub cost: Option<Vec<MedicationKnowledgeCost>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "doseForm")]
    pub dose_form: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "drugCharacteristic")]
    pub drug_characteristic: Option<Vec<MedicationKnowledgeDrugCharacteristic>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub ingredient: Option<Vec<MedicationKnowledgeIngredient>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "intendedRoute")]
    pub intended_route: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub kinetics: Option<Vec<MedicationKnowledgeKinetics>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub manufacturer: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "medicineClassification")]
    pub medicine_classification: Option<Vec<MedicationKnowledgeMedicineClassification>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "monitoringProgram")]
    pub monitoring_program: Option<Vec<MedicationKnowledgeMonitoringProgram>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub monograph: Option<Vec<MedicationKnowledgeMonograph>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub packaging: Option<MedicationKnowledgePackaging>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "preparationInstruction")]
    pub preparation_instruction: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "productType")]
    pub product_type: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub regulatory: Option<Vec<MedicationKnowledgeRegulatory>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatedMedicationKnowledge")]
    pub related_medication_knowledge: Option<Vec<MedicationKnowledgeRelatedMedicationKnowledge>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub synonym: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MedicationKnowledge_AdministrationGuidelines")]
#[serde(deny_unknown_fields)]
pub struct MedicationKnowledgeAdministrationGuidelines {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub dosage: Option<Vec<MedicationKnowledgeDosage>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "indicationCodeableConcept")]
    pub indication_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "indicationReference")]
    pub indication_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patientCharacteristics")]
    pub patient_characteristics: Option<Vec<MedicationKnowledgePatientCharacteristics>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "MedicationKnowledge_Cost")]
#[serde(deny_unknown_fields)]
pub struct MedicationKnowledgeCost {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_source")]
    pub source: Option<Element>,

    pub cost: Money,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,

    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "MedicationKnowledge_Dosage")]
#[serde(deny_unknown_fields)]
pub struct MedicationKnowledgeDosage {
    pub dosage: Vec<Dosage>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MedicationKnowledge_DrugCharacteristic")]
#[serde(deny_unknown_fields)]
pub struct MedicationKnowledgeDrugCharacteristic {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBase64Binary")]
    pub value_base_64_binary: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueString")]
    pub value_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBase64Binary")]
    pub value_base_64_binary: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueString")]
    pub value_string: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MedicationKnowledge_Ingredient")]
#[serde(deny_unknown_fields)]
pub struct MedicationKnowledgeIngredient {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_isActive")]
    pub is_active: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "isActive")]
    pub is_active: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "itemCodeableConcept")]
    pub item_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "itemReference")]
    pub item_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub strength: Option<Ratio>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MedicationKnowledge_Kinetics")]
#[serde(deny_unknown_fields)]
pub struct MedicationKnowledgeKinetics {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "areaUnderCurve")]
    pub area_under_curve: Option<Vec<Quantity>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "halfLifePeriod")]
    pub half_life_period: Option<Duration>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lethalDose50")]
    pub lethal_dose_50: Option<Vec<Quantity>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "MedicationKnowledge_MaxDispense")]
#[serde(deny_unknown_fields)]
pub struct MedicationKnowledgeMaxDispense {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Duration>,

    pub quantity: Quantity,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "MedicationKnowledge_MedicineClassification")]
#[serde(deny_unknown_fields)]
pub struct MedicationKnowledgeMedicineClassification {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub classification: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MedicationKnowledge_MonitoringProgram")]
#[serde(deny_unknown_fields)]
pub struct MedicationKnowledgeMonitoringProgram {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MedicationKnowledge_Monograph")]
#[serde(deny_unknown_fields)]
pub struct MedicationKnowledgeMonograph {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub source: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MedicationKnowledge_Packaging")]
#[serde(deny_unknown_fields)]
pub struct MedicationKnowledgePackaging {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MedicationKnowledge_PatientCharacteristics")]
#[serde(deny_unknown_fields)]
pub struct MedicationKnowledgePatientCharacteristics {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_value")]
    pub value: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "characteristicCodeableConcept")]
    pub characteristic_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "characteristicQuantity")]
    pub characteristic_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Vec<String>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "MedicationKnowledge_Regulatory")]
#[serde(deny_unknown_fields)]
pub struct MedicationKnowledgeRegulatory {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxDispense")]
    pub max_dispense: Option<MedicationKnowledgeMaxDispense>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(rename = "regulatoryAuthority")]
    pub regulatory_authority: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub schedule: Option<Vec<MedicationKnowledgeSchedule>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub substitution: Option<Vec<MedicationKnowledgeSubstitution>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "MedicationKnowledge_RelatedMedicationKnowledge")]
#[serde(deny_unknown_fields)]
pub struct MedicationKnowledgeRelatedMedicationKnowledge {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub reference: Vec<Reference>,

    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "MedicationKnowledge_Schedule")]
#[serde(deny_unknown_fields)]
pub struct MedicationKnowledgeSchedule {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub schedule: CodeableConcept,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "MedicationKnowledge_Substitution")]
#[serde(deny_unknown_fields)]
pub struct MedicationKnowledgeSubstitution {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_allowed")]
    pub allowed: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub allowed: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct MedicationRequest {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_authoredOn")]
    pub authored_on: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_doNotPerform")]
    pub do_not_perform: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_instantiatesCanonical")]
    pub instantiates_canonical: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_instantiatesUri")]
    pub instantiates_uri: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_intent")]
    pub intent: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_priority")]
    pub priority: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_reportedBoolean")]
    pub reported_boolean: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "authoredOn")]
    pub authored_on: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "courseOfTherapyType")]
    pub course_of_therapy_type: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "detectedIssue")]
    pub detected_issue: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dispenseRequest")]
    pub dispense_request: Option<MedicationRequestDispenseRequest>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "doNotPerform")]
    pub do_not_perform: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dosageInstruction")]
    pub dosage_instruction: Option<Vec<Dosage>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "eventHistory")]
    pub event_history: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "groupIdentifier")]
    pub group_identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesCanonical")]
    pub instantiates_canonical: Option<Vec<Canonical>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesUri")]
    pub instantiates_uri: Option<Vec<Uri>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub insurance: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub intent: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "medicationCodeableConcept")]
    pub medication_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "medicationReference")]
    pub medication_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub performer: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "performerType")]
    pub performer_type: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "priorPrescription")]
    pub prior_prescription: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub priority: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub recorder: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reportedBoolean")]
    pub reported_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reportedReference")]
    pub reported_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub requester: Option<Reference>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusReason")]
    pub status_reason: Option<CodeableConcept>,

    pub subject: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub substitution: Option<MedicationRequestSubstitution>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportingInformation")]
    pub supporting_information: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MedicationRequest_DispenseRequest")]
#[serde(deny_unknown_fields)]
pub struct MedicationRequestDispenseRequest {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_numberOfRepeatsAllowed")]
    pub number_of_repeats_allowed: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dispenseInterval")]
    pub dispense_interval: Option<Duration>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "expectedSupplyDuration")]
    pub expected_supply_duration: Option<Duration>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "initialFill")]
    pub initial_fill: Option<MedicationRequestInitialFill>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "numberOfRepeatsAllowed")]
    pub number_of_repeats_allowed: Option<UnsignedInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub performer: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "validityPeriod")]
    pub validity_period: Option<Period>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MedicationRequest_InitialFill")]
#[serde(deny_unknown_fields)]
pub struct MedicationRequestInitialFill {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub duration: Option<Duration>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MedicationRequest_Substitution")]
#[serde(deny_unknown_fields)]
pub struct MedicationRequestSubstitution {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_allowedBoolean")]
    pub allowed_boolean: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "allowedBoolean")]
    pub allowed_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "allowedCodeableConcept")]
    pub allowed_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub reason: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct MedicationStatement {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_dateAsserted")]
    pub date_asserted: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_effectiveDateTime")]
    pub effective_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub context: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dateAsserted")]
    pub date_asserted: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "derivedFrom")]
    pub derived_from: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub dosage: Option<Vec<Dosage>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectiveDateTime")]
    pub effective_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectivePeriod")]
    pub effective_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "informationSource")]
    pub information_source: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "medicationCodeableConcept")]
    pub medication_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "medicationReference")]
    pub medication_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "partOf")]
    pub part_of: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusReason")]
    pub status_reason: Option<Vec<CodeableConcept>>,

    pub subject: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Medication_Batch")]
#[serde(deny_unknown_fields)]
pub struct MedicationBatch {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_expirationDate")]
    pub expiration_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lotNumber")]
    pub lot_number: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "expirationDate")]
    pub expiration_date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lotNumber")]
    pub lot_number: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Medication_Ingredient")]
#[serde(deny_unknown_fields)]
pub struct MedicationIngredient {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_isActive")]
    pub is_active: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "isActive")]
    pub is_active: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "itemCodeableConcept")]
    pub item_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "itemReference")]
    pub item_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub strength: Option<Ratio>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct MedicinalProductDefinition {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_indication")]
    pub indication: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_statusDate")]
    pub status_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "additionalMonitoringIndicator")]
    pub additional_monitoring_indicator: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "attachedDocument")]
    pub attached_document: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub characteristic: Option<Vec<MedicinalProductDefinitionCharacteristic>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub classification: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "clinicalTrial")]
    pub clinical_trial: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Vec<Coding>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "combinedPharmaceuticalDoseForm")]
    pub combined_pharmaceutical_dose_form: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<MedicinalProductDefinitionContact>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "crossReference")]
    pub cross_reference: Option<Vec<MedicinalProductDefinitionCrossReference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub domain: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub impurity: Option<Vec<CodeableReference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub indication: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub ingredient: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "legalStatusOfSupply")]
    pub legal_status_of_supply: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "marketingStatus")]
    pub marketing_status: Option<Vec<MarketingStatus>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "masterFile")]
    pub master_file: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub name: Vec<MedicinalProductDefinitionName>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub operation: Option<Vec<MedicinalProductDefinitionOperation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "packagedMedicinalProduct")]
    pub packaged_medicinal_product: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "pediatricUseIndicator")]
    pub pediatric_use_indicator: Option<CodeableConcept>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub route: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "specialMeasures")]
    pub special_measures: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusDate")]
    pub status_date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "MedicinalProductDefinition_Characteristic")]
#[serde(deny_unknown_fields)]
pub struct MedicinalProductDefinitionCharacteristic {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub value_boolean: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDate")]
    pub value_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(rename = "type")]
    pub type_: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAttachment")]
    pub value_attachment: Option<Attachment>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDate")]
    pub value_date: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "MedicinalProductDefinition_Contact")]
#[serde(deny_unknown_fields)]
pub struct MedicinalProductDefinitionContact {
    pub contact: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "MedicinalProductDefinition_CountryLanguage")]
#[serde(deny_unknown_fields)]
pub struct MedicinalProductDefinitionCountryLanguage {
    pub country: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<CodeableConcept>,

    pub language: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "MedicinalProductDefinition_CrossReference")]
#[serde(deny_unknown_fields)]
pub struct MedicinalProductDefinitionCrossReference {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub product: CodeableReference,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MedicinalProductDefinition_Name")]
#[serde(deny_unknown_fields)]
pub struct MedicinalProductDefinitionName {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_productName")]
    pub product_name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "countryLanguage")]
    pub country_language: Option<Vec<MedicinalProductDefinitionCountryLanguage>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "namePart")]
    pub name_part: Option<Vec<MedicinalProductDefinitionNamePart>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "productName")]
    pub product_name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "MedicinalProductDefinition_NamePart")]
#[serde(deny_unknown_fields)]
pub struct MedicinalProductDefinitionNamePart {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_part")]
    pub part: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub part: Option<String>,

    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MedicinalProductDefinition_Operation")]
#[serde(deny_unknown_fields)]
pub struct MedicinalProductDefinitionOperation {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "confidentialityIndicator")]
    pub confidentiality_indicator: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectiveDate")]
    pub effective_date: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub organization: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableReference>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct MessageDefinition {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_category")]
    pub category: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_copyright")]
    pub copyright: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_eventUri")]
    pub event_uri: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_experimental")]
    pub experimental: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_publisher")]
    pub publisher: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_purpose")]
    pub purpose: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_responseRequired")]
    pub response_required: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "allowedResponse")]
    pub allowed_response: Option<Vec<MessageDefinitionAllowedResponse>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub base: Option<Canonical>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "eventCoding")]
    pub event_coding: Option<Coding>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "eventUri")]
    pub event_uri: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub focus: Option<Vec<MessageDefinitionFocus>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub graph: Option<Vec<Canonical>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub parent: Option<Vec<Canonical>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub replaces: Option<Vec<Canonical>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "responseRequired")]
    pub response_required: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "MessageDefinition_AllowedResponse")]
#[serde(deny_unknown_fields)]
pub struct MessageDefinitionAllowedResponse {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_situation")]
    pub situation: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    pub message: Canonical,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub situation: Option<Markdown>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MessageDefinition_Focus")]
#[serde(deny_unknown_fields)]
pub struct MessageDefinitionFocus {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_code")]
    pub code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_max")]
    pub max: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_min")]
    pub min: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub max: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub min: Option<UnsignedInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub profile: Option<Canonical>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct MessageHeader {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_eventUri")]
    pub event_uri: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub definition: Option<Canonical>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub destination: Option<Vec<MessageHeaderDestination>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub enterer: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "eventCoding")]
    pub event_coding: Option<Coding>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "eventUri")]
    pub event_uri: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub focus: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub reason: Option<CodeableConcept>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub response: Option<MessageHeaderResponse>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub responsible: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub sender: Option<Reference>,

    pub source: MessageHeaderSource,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MessageHeader_Destination")]
#[serde(deny_unknown_fields)]
pub struct MessageHeaderDestination {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_endpoint")]
    pub endpoint: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<Url>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub receiver: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub target: Option<Reference>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MessageHeader_Response")]
#[serde(deny_unknown_fields)]
pub struct MessageHeaderResponse {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_code")]
    pub code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_identifier")]
    pub identifier: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub details: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Id>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MessageHeader_Source")]
#[serde(deny_unknown_fields)]
pub struct MessageHeaderSource {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_endpoint")]
    pub endpoint: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_software")]
    pub software: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<ContactPoint>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<Url>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub software: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Meta {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastUpdated")]
    pub last_updated: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_source")]
    pub source: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_versionId")]
    pub version_id: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastUpdated")]
    pub last_updated: Option<Instant>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub profile: Option<Vec<Canonical>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub security: Option<Vec<Coding>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub source: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub tag: Option<Vec<Coding>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "versionId")]
    pub version_id: Option<Id>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct MolecularSequence {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_coordinateSystem")]
    pub coordinate_system: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_observedSeq")]
    pub observed_seq: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_readCoverage")]
    pub read_coverage: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "coordinateSystem")]
    pub coordinate_system: Option<Integer>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub device: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "observedSeq")]
    pub observed_seq: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub patient: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub performer: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub pointer: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub quality: Option<Vec<MolecularSequenceQuality>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "readCoverage")]
    pub read_coverage: Option<Integer>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "referenceSeq")]
    pub reference_seq: Option<MolecularSequenceReferenceSeq>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub repository: Option<Vec<MolecularSequenceRepository>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub specimen: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "structureVariant")]
    pub structure_variant: Option<Vec<MolecularSequenceStructureVariant>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub variant: Option<Vec<MolecularSequenceVariant>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MolecularSequence_Inner")]
#[serde(deny_unknown_fields)]
pub struct MolecularSequenceInner {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_end")]
    pub end: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_start")]
    pub start: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub end: Option<Integer>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub start: Option<Integer>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MolecularSequence_Outer")]
#[serde(deny_unknown_fields)]
pub struct MolecularSequenceOuter {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_end")]
    pub end: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_start")]
    pub start: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub end: Option<Integer>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub start: Option<Integer>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MolecularSequence_Quality")]
#[serde(deny_unknown_fields)]
pub struct MolecularSequenceQuality {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_end")]
    pub end: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fScore")]
    pub f_score: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_gtFP")]
    pub gt_fp: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_precision")]
    pub precision: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_queryFP")]
    pub query_fp: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_queryTP")]
    pub query_tp: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_recall")]
    pub recall: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_start")]
    pub start: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_truthFN")]
    pub truth_fn: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_truthTP")]
    pub truth_tp: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub end: Option<Integer>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fScore")]
    pub f_score: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "gtFP")]
    pub gt_fp: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub method: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub precision: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "queryFP")]
    pub query_fp: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "queryTP")]
    pub query_tp: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub recall: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub roc: Option<MolecularSequenceRoc>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub score: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "standardSequence")]
    pub standard_sequence: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub start: Option<Integer>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "truthFN")]
    pub truth_fn: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "truthTP")]
    pub truth_tp: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MolecularSequence_ReferenceSeq")]
#[serde(deny_unknown_fields)]
pub struct MolecularSequenceReferenceSeq {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_genomeBuild")]
    pub genome_build: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_orientation")]
    pub orientation: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_referenceSeqString")]
    pub reference_seq_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_strand")]
    pub strand: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_windowEnd")]
    pub window_end: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_windowStart")]
    pub window_start: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub chromosome: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "genomeBuild")]
    pub genome_build: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub orientation: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "referenceSeqId")]
    pub reference_seq_id: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "referenceSeqPointer")]
    pub reference_seq_pointer: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "referenceSeqString")]
    pub reference_seq_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub strand: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "windowEnd")]
    pub window_end: Option<Integer>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "windowStart")]
    pub window_start: Option<Integer>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MolecularSequence_Repository")]
#[serde(deny_unknown_fields)]
pub struct MolecularSequenceRepository {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_datasetId")]
    pub dataset_id: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_readsetId")]
    pub readset_id: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_variantsetId")]
    pub variantset_id: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "datasetId")]
    pub dataset_id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "readsetId")]
    pub readset_id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "variantsetId")]
    pub variantset_id: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MolecularSequence_Roc")]
#[serde(deny_unknown_fields)]
pub struct MolecularSequenceRoc {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fMeasure")]
    pub f_measure: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_numFN")]
    pub num_fn: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_numFP")]
    pub num_fp: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_numTP")]
    pub num_tp: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_precision")]
    pub precision: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_score")]
    pub score: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sensitivity")]
    pub sensitivity: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fMeasure")]
    pub f_measure: Option<Vec<Decimal>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "numFN")]
    pub num_fn: Option<Vec<Integer>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "numFP")]
    pub num_fp: Option<Vec<Integer>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "numTP")]
    pub num_tp: Option<Vec<Integer>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub precision: Option<Vec<Decimal>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub score: Option<Vec<Integer>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub sensitivity: Option<Vec<Decimal>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MolecularSequence_StructureVariant")]
#[serde(deny_unknown_fields)]
pub struct MolecularSequenceStructureVariant {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_exact")]
    pub exact: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_length")]
    pub length: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub exact: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub inner: Option<MolecularSequenceInner>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub length: Option<Integer>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub outer: Option<MolecularSequenceOuter>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "variantType")]
    pub variant_type: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "MolecularSequence_Variant")]
#[serde(deny_unknown_fields)]
pub struct MolecularSequenceVariant {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_cigar")]
    pub cigar: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_end")]
    pub end: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_observedAllele")]
    pub observed_allele: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_referenceAllele")]
    pub reference_allele: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_start")]
    pub start: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub cigar: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub end: Option<Integer>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "observedAllele")]
    pub observed_allele: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "referenceAllele")]
    pub reference_allele: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub start: Option<Integer>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "variantPointer")]
    pub variant_pointer: Option<Reference>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Money {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_currency")]
    pub currency: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_value")]
    pub value: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub currency: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Decimal>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct NamingSystem {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_kind")]
    pub kind: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_publisher")]
    pub publisher: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_responsible")]
    pub responsible: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_usage")]
    pub usage: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub responsible: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,

    #[serde(rename = "uniqueId")]
    pub unique_id: Vec<NamingSystemUniqueId>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub usage: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "NamingSystem_UniqueId")]
#[serde(deny_unknown_fields)]
pub struct NamingSystemUniqueId {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_comment")]
    pub comment: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_preferred")]
    pub preferred: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_value")]
    pub value: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub preferred: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Narrative {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    pub div: Xhtml,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<serde_json::Value>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct NutritionOrder {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_dateTime")]
    pub date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_instantiates")]
    pub instantiates: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_instantiatesUri")]
    pub instantiates_uri: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_intent")]
    pub intent: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "allergyIntolerance")]
    pub allergy_intolerance: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dateTime")]
    pub date_time: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "enteralFormula")]
    pub enteral_formula: Option<NutritionOrderEnteralFormula>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "excludeFoodModifier")]
    pub exclude_food_modifier: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "foodPreferenceModifier")]
    pub food_preference_modifier: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub instantiates: Option<Vec<Uri>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesCanonical")]
    pub instantiates_canonical: Option<Vec<Canonical>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesUri")]
    pub instantiates_uri: Option<Vec<Uri>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub intent: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "oralDiet")]
    pub oral_diet: Option<NutritionOrderOralDiet>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub orderer: Option<Reference>,

    pub patient: Reference,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub supplement: Option<Vec<NutritionOrderSupplement>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "NutritionOrder_Administration")]
#[serde(deny_unknown_fields)]
pub struct NutritionOrderAdministration {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "rateQuantity")]
    pub rate_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "rateRatio")]
    pub rate_ratio: Option<Ratio>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub schedule: Option<Timing>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "NutritionOrder_EnteralFormula")]
#[serde(deny_unknown_fields)]
pub struct NutritionOrderEnteralFormula {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_additiveProductName")]
    pub additive_product_name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_administrationInstruction")]
    pub administration_instruction: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_baseFormulaProductName")]
    pub base_formula_product_name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "additiveProductName")]
    pub additive_product_name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "additiveType")]
    pub additive_type: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub administration: Option<Vec<NutritionOrderAdministration>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "administrationInstruction")]
    pub administration_instruction: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "baseFormulaProductName")]
    pub base_formula_product_name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "baseFormulaType")]
    pub base_formula_type: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "caloricDensity")]
    pub caloric_density: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxVolumeToDeliver")]
    pub max_volume_to_deliver: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "routeofAdministration")]
    pub routeof_administration: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "NutritionOrder_Nutrient")]
#[serde(deny_unknown_fields)]
pub struct NutritionOrderNutrient {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub amount: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub modifier: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "NutritionOrder_OralDiet")]
#[serde(deny_unknown_fields)]
pub struct NutritionOrderOralDiet {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_instruction")]
    pub instruction: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fluidConsistencyType")]
    pub fluid_consistency_type: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub instruction: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub nutrient: Option<Vec<NutritionOrderNutrient>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub schedule: Option<Vec<Timing>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub texture: Option<Vec<NutritionOrderTexture>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Vec<CodeableConcept>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "NutritionOrder_Supplement")]
#[serde(deny_unknown_fields)]
pub struct NutritionOrderSupplement {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_instruction")]
    pub instruction: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_productName")]
    pub product_name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub instruction: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "productName")]
    pub product_name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub schedule: Option<Vec<Timing>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "NutritionOrder_Texture")]
#[serde(deny_unknown_fields)]
pub struct NutritionOrderTexture {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "foodType")]
    pub food_type: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub modifier: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct NutritionProduct {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub ingredient: Option<Vec<NutritionProductIngredient>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub instance: Option<NutritionProductInstance>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "knownAllergen")]
    pub known_allergen: Option<Vec<CodeableReference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub manufacturer: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub nutrient: Option<Vec<NutritionProductNutrient>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "productCharacteristic")]
    pub product_characteristic: Option<Vec<NutritionProductProductCharacteristic>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "NutritionProduct_Ingredient")]
#[serde(deny_unknown_fields)]
pub struct NutritionProductIngredient {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub amount: Option<Vec<Ratio>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    pub item: CodeableReference,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "NutritionProduct_Instance")]
#[serde(deny_unknown_fields)]
pub struct NutritionProductInstance {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_expiry")]
    pub expiry: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lotNumber")]
    pub lot_number: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_useBy")]
    pub use_by: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub expiry: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lotNumber")]
    pub lot_number: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useBy")]
    pub use_by: Option<DateTime>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "NutritionProduct_Nutrient")]
#[serde(deny_unknown_fields)]
pub struct NutritionProductNutrient {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub amount: Option<Vec<Ratio>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub item: Option<CodeableReference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "NutritionProduct_ProductCharacteristic")]
#[serde(deny_unknown_fields)]
pub struct NutritionProductProductCharacteristic {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBase64Binary")]
    pub value_base_64_binary: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub value_boolean: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueString")]
    pub value_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(rename = "type")]
    pub type_: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAttachment")]
    pub value_attachment: Option<Attachment>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBase64Binary")]
    pub value_base_64_binary: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueString")]
    pub value_string: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Observation {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_effectiveDateTime")]
    pub effective_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_effectiveInstant")]
    pub effective_instant: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_issued")]
    pub issued: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub value_boolean: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDateTime")]
    pub value_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueInteger")]
    pub value_integer: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueString")]
    pub value_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueTime")]
    pub value_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "bodySite")]
    pub body_site: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,

    pub code: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub component: Option<Vec<ObservationComponent>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dataAbsentReason")]
    pub data_absent_reason: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "derivedFrom")]
    pub derived_from: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub device: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectiveDateTime")]
    pub effective_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectiveInstant")]
    pub effective_instant: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectivePeriod")]
    pub effective_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectiveTiming")]
    pub effective_timing: Option<Timing>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub focus: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "hasMember")]
    pub has_member: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub interpretation: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub issued: Option<Instant>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub method: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "partOf")]
    pub part_of: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub performer: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "referenceRange")]
    pub reference_range: Option<Vec<ObservationReferenceRange>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub specimen: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDateTime")]
    pub value_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueInteger")]
    pub value_integer: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valuePeriod")]
    pub value_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRange")]
    pub value_range: Option<Range>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRatio")]
    pub value_ratio: Option<Ratio>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueSampledData")]
    pub value_sampled_data: Option<SampledData>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueString")]
    pub value_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTime")]
    pub value_time: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ObservationDefinition {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_multipleResultsAllowed")]
    pub multiple_results_allowed: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_permittedDataType")]
    pub permitted_data_type: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_preferredReportName")]
    pub preferred_report_name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "abnormalCodedValueSet")]
    pub abnormal_coded_value_set: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,

    pub code: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "criticalCodedValueSet")]
    pub critical_coded_value_set: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub method: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "multipleResultsAllowed")]
    pub multiple_results_allowed: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "normalCodedValueSet")]
    pub normal_coded_value_set: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "permittedDataType")]
    pub permitted_data_type: Option<Vec<Code>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "preferredReportName")]
    pub preferred_report_name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "qualifiedInterval")]
    pub qualified_interval: Option<Vec<ObservationDefinitionQualifiedInterval>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "quantitativeDetails")]
    pub quantitative_details: Option<ObservationDefinitionQuantitativeDetails>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "validCodedValueSet")]
    pub valid_coded_value_set: Option<Reference>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ObservationDefinition_QualifiedInterval")]
#[serde(deny_unknown_fields)]
pub struct ObservationDefinitionQualifiedInterval {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_category")]
    pub category: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_condition")]
    pub condition: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_gender")]
    pub gender: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub age: Option<Range>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "appliesTo")]
    pub applies_to: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub condition: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub context: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub gender: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "gestationalAge")]
    pub gestational_age: Option<Range>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub range: Option<Range>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ObservationDefinition_QuantitativeDetails")]
#[serde(deny_unknown_fields)]
pub struct ObservationDefinitionQuantitativeDetails {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_conversionFactor")]
    pub conversion_factor: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_decimalPrecision")]
    pub decimal_precision: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "conversionFactor")]
    pub conversion_factor: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "customaryUnit")]
    pub customary_unit: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "decimalPrecision")]
    pub decimal_precision: Option<Integer>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub unit: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Observation_Component")]
#[serde(deny_unknown_fields)]
pub struct ObservationComponent {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub value_boolean: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDateTime")]
    pub value_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueInteger")]
    pub value_integer: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueString")]
    pub value_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueTime")]
    pub value_time: Option<Element>,

    pub code: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dataAbsentReason")]
    pub data_absent_reason: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub interpretation: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "referenceRange")]
    pub reference_range: Option<Vec<ObservationReferenceRange>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDateTime")]
    pub value_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueInteger")]
    pub value_integer: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valuePeriod")]
    pub value_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRange")]
    pub value_range: Option<Range>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRatio")]
    pub value_ratio: Option<Ratio>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueSampledData")]
    pub value_sampled_data: Option<SampledData>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueString")]
    pub value_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTime")]
    pub value_time: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Observation_ReferenceRange")]
#[serde(deny_unknown_fields)]
pub struct ObservationReferenceRange {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_text")]
    pub text: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub age: Option<Range>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "appliesTo")]
    pub applies_to: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub high: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub low: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct OperationDefinition {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_affectsState")]
    pub affects_state: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_code")]
    pub code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_comment")]
    pub comment: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_experimental")]
    pub experimental: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_instance")]
    pub instance: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_kind")]
    pub kind: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_publisher")]
    pub publisher: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_purpose")]
    pub purpose: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_resource")]
    pub resource: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_system")]
    pub system: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "affectsState")]
    pub affects_state: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub base: Option<Canonical>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "inputProfile")]
    pub input_profile: Option<Canonical>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub instance: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "outputProfile")]
    pub output_profile: Option<Canonical>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub overload: Option<Vec<OperationDefinitionOverload>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub parameter: Option<Vec<OperationDefinitionParameter>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource: Option<Vec<Code>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub system: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "OperationDefinition_Binding")]
#[serde(deny_unknown_fields)]
pub struct OperationDefinitionBinding {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_strength")]
    pub strength: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub strength: Option<Code>,

    #[serde(rename = "valueSet")]
    pub value_set: Canonical,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "OperationDefinition_Overload")]
#[serde(deny_unknown_fields)]
pub struct OperationDefinitionOverload {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_comment")]
    pub comment: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_parameterName")]
    pub parameter_name: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "parameterName")]
    pub parameter_name: Option<Vec<String>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "OperationDefinition_Parameter")]
#[serde(deny_unknown_fields)]
pub struct OperationDefinitionParameter {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_documentation")]
    pub documentation: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_max")]
    pub max: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_min")]
    pub min: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_searchType")]
    pub search_type: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_use")]
    pub use_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub binding: Option<OperationDefinitionBinding>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub documentation: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub max: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub min: Option<Integer>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub part: Option<Vec<OperationDefinitionParameter>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "referencedFrom")]
    pub referenced_from: Option<Vec<OperationDefinitionReferencedFrom>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "searchType")]
    pub search_type: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetProfile")]
    pub target_profile: Option<Vec<Canonical>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "use")]
    pub use_: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "OperationDefinition_ReferencedFrom")]
#[serde(deny_unknown_fields)]
pub struct OperationDefinitionReferencedFrom {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_source")]
    pub source: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sourceId")]
    pub source_id: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "sourceId")]
    pub source_id: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct OperationOutcome {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    pub issue: Vec<OperationOutcomeIssue>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "OperationOutcome_Issue")]
#[serde(deny_unknown_fields)]
pub struct OperationOutcomeIssue {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_code")]
    pub code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_diagnostics")]
    pub diagnostics: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_expression")]
    pub expression: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_location")]
    pub location: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_severity")]
    pub severity: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub details: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub diagnostics: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub expression: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub severity: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Organization {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_active")]
    pub active: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_alias")]
    pub alias: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub active: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub address: Option<Vec<Address>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub alias: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<OrganizationContact>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "partOf")]
    pub part_of: Option<Reference>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub telecom: Option<Vec<ContactPoint>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Vec<CodeableConcept>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct OrganizationAffiliation {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_active")]
    pub active: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub active: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "healthcareService")]
    pub healthcare_service: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub network: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub organization: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "participatingOrganization")]
    pub participating_organization: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub specialty: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub telecom: Option<Vec<ContactPoint>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Organization_Contact")]
#[serde(deny_unknown_fields)]
pub struct OrganizationContact {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub address: Option<Address>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<HumanName>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub telecom: Option<Vec<ContactPoint>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct PackagedProductDefinition {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_copackagedIndicator")]
    pub copackaged_indicator: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_statusDate")]
    pub status_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub characteristic: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "containedItemQuantity")]
    pub contained_item_quantity: Option<Vec<Quantity>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "copackagedIndicator")]
    pub copackaged_indicator: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "legalStatusOfSupply")]
    pub legal_status_of_supply: Option<Vec<PackagedProductDefinitionLegalStatusOfSupply>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub manufacturer: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "marketingStatus")]
    pub marketing_status: Option<Vec<MarketingStatus>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub package: Option<PackagedProductDefinitionPackage>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "packageFor")]
    pub package_for: Option<Vec<Reference>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusDate")]
    pub status_date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "PackagedProductDefinition_ContainedItem")]
#[serde(deny_unknown_fields)]
pub struct PackagedProductDefinitionContainedItem {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub amount: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    pub item: CodeableReference,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "PackagedProductDefinition_LegalStatusOfSupply")]
#[serde(deny_unknown_fields)]
pub struct PackagedProductDefinitionLegalStatusOfSupply {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "PackagedProductDefinition_Package")]
#[serde(deny_unknown_fields)]
pub struct PackagedProductDefinitionPackage {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_quantity")]
    pub quantity: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "alternateMaterial")]
    pub alternate_material: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "containedItem")]
    pub contained_item: Option<Vec<PackagedProductDefinitionContainedItem>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub manufacturer: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub material: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub package: Option<Vec<PackagedProductDefinitionPackage>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub property: Option<Vec<PackagedProductDefinitionProperty>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Integer>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "shelfLifeStorage")]
    pub shelf_life_storage: Option<Vec<PackagedProductDefinitionShelfLifeStorage>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "PackagedProductDefinition_Property")]
#[serde(deny_unknown_fields)]
pub struct PackagedProductDefinitionProperty {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub value_boolean: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDate")]
    pub value_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(rename = "type")]
    pub type_: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAttachment")]
    pub value_attachment: Option<Attachment>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDate")]
    pub value_date: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "PackagedProductDefinition_ShelfLifeStorage")]
#[serde(deny_unknown_fields)]
pub struct PackagedProductDefinitionShelfLifeStorage {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_periodString")]
    pub period_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "periodDuration")]
    pub period_duration: Option<Duration>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "periodString")]
    pub period_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "specialPrecautionsForStorage")]
    pub special_precautions_for_storage: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ParameterDefinition {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_documentation")]
    pub documentation: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_max")]
    pub max: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_min")]
    pub min: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_use")]
    pub use_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub documentation: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub max: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub min: Option<Integer>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub profile: Option<Canonical>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "use")]
    pub use_: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Parameters {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub parameter: Option<Vec<ParametersParameter>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Parameters_Parameter")]
#[serde(deny_unknown_fields)]
pub struct ParametersParameter {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBase64Binary")]
    pub value_base_64_binary: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub value_boolean: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueCanonical")]
    pub value_canonical: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueCode")]
    pub value_code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDate")]
    pub value_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDateTime")]
    pub value_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDecimal")]
    pub value_decimal: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueId")]
    pub value_id: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueInstant")]
    pub value_instant: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueInteger")]
    pub value_integer: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueMarkdown")]
    pub value_markdown: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueOid")]
    pub value_oid: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valuePositiveInt")]
    pub value_positive_int: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueString")]
    pub value_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueTime")]
    pub value_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUnsignedInt")]
    pub value_unsigned_int: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUri")]
    pub value_uri: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUrl")]
    pub value_url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUuid")]
    pub value_uuid: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub part: Option<Vec<ParametersParameter>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource: Option<ResourceList>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAddress")]
    pub value_address: Option<Address>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAge")]
    pub value_age: Option<Age>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAnnotation")]
    pub value_annotation: Option<Annotation>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAttachment")]
    pub value_attachment: Option<Attachment>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBase64Binary")]
    pub value_base_64_binary: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCanonical")]
    pub value_canonical: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCode")]
    pub value_code: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCoding")]
    pub value_coding: Option<Coding>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueContactDetail")]
    pub value_contact_detail: Option<ContactDetail>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueContactPoint")]
    pub value_contact_point: Option<ContactPoint>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueContributor")]
    pub value_contributor: Option<Contributor>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCount")]
    pub value_count: Option<Count>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDataRequirement")]
    pub value_data_requirement: Option<DataRequirement>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDate")]
    pub value_date: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDateTime")]
    pub value_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDecimal")]
    pub value_decimal: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDistance")]
    pub value_distance: Option<Distance>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDosage")]
    pub value_dosage: Option<Dosage>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDuration")]
    pub value_duration: Option<Duration>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueExpression")]
    pub value_expression: Option<Expression>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueHumanName")]
    pub value_human_name: Option<HumanName>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueId")]
    pub value_id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueIdentifier")]
    pub value_identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueInstant")]
    pub value_instant: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueInteger")]
    pub value_integer: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueMarkdown")]
    pub value_markdown: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueMeta")]
    pub value_meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueMoney")]
    pub value_money: Option<Money>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueOid")]
    pub value_oid: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueParameterDefinition")]
    pub value_parameter_definition: Option<ParameterDefinition>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valuePeriod")]
    pub value_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valuePositiveInt")]
    pub value_positive_int: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRange")]
    pub value_range: Option<Range>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRatio")]
    pub value_ratio: Option<Ratio>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueReference")]
    pub value_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRelatedArtifact")]
    pub value_related_artifact: Option<RelatedArtifact>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueSampledData")]
    pub value_sampled_data: Option<SampledData>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueSignature")]
    pub value_signature: Option<Signature>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueString")]
    pub value_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTime")]
    pub value_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTiming")]
    pub value_timing: Option<Timing>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTriggerDefinition")]
    pub value_trigger_definition: Option<TriggerDefinition>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUnsignedInt")]
    pub value_unsigned_int: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUri")]
    pub value_uri: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUrl")]
    pub value_url: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUsageContext")]
    pub value_usage_context: Option<UsageContext>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUuid")]
    pub value_uuid: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Patient {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_active")]
    pub active: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_birthDate")]
    pub birth_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_deceasedBoolean")]
    pub deceased_boolean: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_deceasedDateTime")]
    pub deceased_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_gender")]
    pub gender: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_multipleBirthBoolean")]
    pub multiple_birth_boolean: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_multipleBirthInteger")]
    pub multiple_birth_integer: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub active: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub address: Option<Vec<Address>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "birthDate")]
    pub birth_date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub communication: Option<Vec<PatientCommunication>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<PatientContact>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "deceasedBoolean")]
    pub deceased_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "deceasedDateTime")]
    pub deceased_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub gender: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "generalPractitioner")]
    pub general_practitioner: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub link: Option<Vec<PatientLink>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "managingOrganization")]
    pub managing_organization: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maritalStatus")]
    pub marital_status: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "multipleBirthBoolean")]
    pub multiple_birth_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "multipleBirthInteger")]
    pub multiple_birth_integer: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<Vec<HumanName>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub photo: Option<Vec<Attachment>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub telecom: Option<Vec<ContactPoint>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Patient_Communication")]
#[serde(deny_unknown_fields)]
pub struct PatientCommunication {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_preferred")]
    pub preferred: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    pub language: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub preferred: Option<Boolean>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Patient_Contact")]
#[serde(deny_unknown_fields)]
pub struct PatientContact {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_gender")]
    pub gender: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub address: Option<Address>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub gender: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<HumanName>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub organization: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub relationship: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub telecom: Option<Vec<ContactPoint>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Patient_Link")]
#[serde(deny_unknown_fields)]
pub struct PatientLink {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub other: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct PaymentNotice {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_created")]
    pub created: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_paymentDate")]
    pub payment_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    pub amount: Money,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub created: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub payee: Option<Reference>,

    pub payment: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "paymentDate")]
    pub payment_date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "paymentStatus")]
    pub payment_status: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub provider: Option<Reference>,

    pub recipient: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub request: Option<Reference>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub response: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct PaymentReconciliation {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_created")]
    pub created: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_disposition")]
    pub disposition: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_outcome")]
    pub outcome: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_paymentDate")]
    pub payment_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub created: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub detail: Option<Vec<PaymentReconciliationDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub disposition: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "formCode")]
    pub form_code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub outcome: Option<Code>,

    #[serde(rename = "paymentAmount")]
    pub payment_amount: Money,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "paymentDate")]
    pub payment_date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "paymentIdentifier")]
    pub payment_identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "paymentIssuer")]
    pub payment_issuer: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "processNote")]
    pub process_note: Option<Vec<PaymentReconciliationProcessNote>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub request: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub requestor: Option<Reference>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "PaymentReconciliation_Detail")]
#[serde(deny_unknown_fields)]
pub struct PaymentReconciliationDetail {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub amount: Option<Money>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub payee: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub predecessor: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub request: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub response: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub responsible: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub submitter: Option<Reference>,

    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "PaymentReconciliation_ProcessNote")]
#[serde(deny_unknown_fields)]
pub struct PaymentReconciliationProcessNote {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_text")]
    pub text: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Period {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_end")]
    pub end: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_start")]
    pub start: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub end: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub start: Option<DateTime>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Person {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_active")]
    pub active: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_birthDate")]
    pub birth_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_gender")]
    pub gender: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub active: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub address: Option<Vec<Address>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "birthDate")]
    pub birth_date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub gender: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub link: Option<Vec<PersonLink>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "managingOrganization")]
    pub managing_organization: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<Vec<HumanName>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub photo: Option<Attachment>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub telecom: Option<Vec<ContactPoint>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Person_Link")]
#[serde(deny_unknown_fields)]
pub struct PersonLink {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_assurance")]
    pub assurance: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub assurance: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub target: Reference,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct PlanDefinition {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_approvalDate")]
    pub approval_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_copyright")]
    pub copyright: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_experimental")]
    pub experimental: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastReviewDate")]
    pub last_review_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_publisher")]
    pub publisher: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_purpose")]
    pub purpose: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_subjectCanonical")]
    pub subject_canonical: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_subtitle")]
    pub subtitle: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_usage")]
    pub usage: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub action: Option<Vec<PlanDefinitionAction>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "approvalDate")]
    pub approval_date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub editor: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectivePeriod")]
    pub effective_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub endorser: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub goal: Option<Vec<PlanDefinitionGoal>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastReviewDate")]
    pub last_review_date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub library: Option<Vec<Canonical>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatedArtifact")]
    pub related_artifact: Option<Vec<RelatedArtifact>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub reviewer: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectCanonical")]
    pub subject_canonical: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectCodeableConcept")]
    pub subject_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectReference")]
    pub subject_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub subtitle: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub topic: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub usage: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "PlanDefinition_Action")]
#[serde(deny_unknown_fields)]
pub struct PlanDefinitionAction {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_cardinalityBehavior")]
    pub cardinality_behavior: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_definitionCanonical")]
    pub definition_canonical: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_definitionUri")]
    pub definition_uri: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_goalId")]
    pub goal_id: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_groupingBehavior")]
    pub grouping_behavior: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_precheckBehavior")]
    pub precheck_behavior: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_prefix")]
    pub prefix: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_priority")]
    pub priority: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_requiredBehavior")]
    pub required_behavior: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_selectionBehavior")]
    pub selection_behavior: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_subjectCanonical")]
    pub subject_canonical: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_textEquivalent")]
    pub text_equivalent: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_timingDateTime")]
    pub timing_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub action: Option<Vec<PlanDefinitionAction>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "cardinalityBehavior")]
    pub cardinality_behavior: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub condition: Option<Vec<PlanDefinitionCondition>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "definitionCanonical")]
    pub definition_canonical: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "definitionUri")]
    pub definition_uri: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub documentation: Option<Vec<RelatedArtifact>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dynamicValue")]
    pub dynamic_value: Option<Vec<PlanDefinitionDynamicValue>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "goalId")]
    pub goal_id: Option<Vec<Id>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "groupingBehavior")]
    pub grouping_behavior: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub input: Option<Vec<DataRequirement>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub output: Option<Vec<DataRequirement>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub participant: Option<Vec<PlanDefinitionParticipant>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "precheckBehavior")]
    pub precheck_behavior: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub priority: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub reason: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatedAction")]
    pub related_action: Option<Vec<PlanDefinitionRelatedAction>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "requiredBehavior")]
    pub required_behavior: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "selectionBehavior")]
    pub selection_behavior: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectCanonical")]
    pub subject_canonical: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectCodeableConcept")]
    pub subject_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectReference")]
    pub subject_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "textEquivalent")]
    pub text_equivalent: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingAge")]
    pub timing_age: Option<Age>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingDateTime")]
    pub timing_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingDuration")]
    pub timing_duration: Option<Duration>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingPeriod")]
    pub timing_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingRange")]
    pub timing_range: Option<Range>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingTiming")]
    pub timing_timing: Option<Timing>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub transform: Option<Canonical>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub trigger: Option<Vec<TriggerDefinition>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "PlanDefinition_Condition")]
#[serde(deny_unknown_fields)]
pub struct PlanDefinitionCondition {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_kind")]
    pub kind: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub expression: Option<Expression>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "PlanDefinition_DynamicValue")]
#[serde(deny_unknown_fields)]
pub struct PlanDefinitionDynamicValue {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_path")]
    pub path: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub expression: Option<Expression>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "PlanDefinition_Goal")]
#[serde(deny_unknown_fields)]
pub struct PlanDefinitionGoal {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub addresses: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<CodeableConcept>,

    pub description: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub documentation: Option<Vec<RelatedArtifact>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub priority: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub start: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub target: Option<Vec<PlanDefinitionTarget>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "PlanDefinition_Participant")]
#[serde(deny_unknown_fields)]
pub struct PlanDefinitionParticipant {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub role: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "PlanDefinition_RelatedAction")]
#[serde(deny_unknown_fields)]
pub struct PlanDefinitionRelatedAction {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_actionId")]
    pub action_id: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_relationship")]
    pub relationship: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "actionId")]
    pub action_id: Option<Id>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "offsetDuration")]
    pub offset_duration: Option<Duration>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "offsetRange")]
    pub offset_range: Option<Range>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub relationship: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "PlanDefinition_Target")]
#[serde(deny_unknown_fields)]
pub struct PlanDefinitionTarget {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "detailCodeableConcept")]
    pub detail_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "detailQuantity")]
    pub detail_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "detailRange")]
    pub detail_range: Option<Range>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub due: Option<Duration>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub measure: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Population {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "ageCodeableConcept")]
    pub age_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "ageRange")]
    pub age_range: Option<Range>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub gender: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "physiologicalCondition")]
    pub physiological_condition: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub race: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Practitioner {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_active")]
    pub active: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_birthDate")]
    pub birth_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_gender")]
    pub gender: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub active: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub address: Option<Vec<Address>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "birthDate")]
    pub birth_date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub communication: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub gender: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<Vec<HumanName>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub photo: Option<Vec<Attachment>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub qualification: Option<Vec<PractitionerQualification>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub telecom: Option<Vec<ContactPoint>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct PractitionerRole {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_active")]
    pub active: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_availabilityExceptions")]
    pub availability_exceptions: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub active: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "availabilityExceptions")]
    pub availability_exceptions: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "availableTime")]
    pub available_time: Option<Vec<PractitionerRoleAvailableTime>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "healthcareService")]
    pub healthcare_service: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "notAvailable")]
    pub not_available: Option<Vec<PractitionerRoleNotAvailable>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub organization: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub practitioner: Option<Reference>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub specialty: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub telecom: Option<Vec<ContactPoint>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "PractitionerRole_AvailableTime")]
#[serde(deny_unknown_fields)]
pub struct PractitionerRoleAvailableTime {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_allDay")]
    pub all_day: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_availableEndTime")]
    pub available_end_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_availableStartTime")]
    pub available_start_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_daysOfWeek")]
    pub days_of_week: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "allDay")]
    pub all_day: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "availableEndTime")]
    pub available_end_time: Option<Time>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "availableStartTime")]
    pub available_start_time: Option<Time>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "daysOfWeek")]
    pub days_of_week: Option<Vec<Code>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "PractitionerRole_NotAvailable")]
#[serde(deny_unknown_fields)]
pub struct PractitionerRoleNotAvailable {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub during: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Practitioner_Qualification")]
#[serde(deny_unknown_fields)]
pub struct PractitionerQualification {
    pub code: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub issuer: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Procedure {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_instantiatesUri")]
    pub instantiates_uri: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_performedDateTime")]
    pub performed_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_performedString")]
    pub performed_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub asserter: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "bodySite")]
    pub body_site: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub complication: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "complicationDetail")]
    pub complication_detail: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "focalDevice")]
    pub focal_device: Option<Vec<ProcedureFocalDevice>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "followUp")]
    pub follow_up: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesCanonical")]
    pub instantiates_canonical: Option<Vec<Canonical>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesUri")]
    pub instantiates_uri: Option<Vec<Uri>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub outcome: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "partOf")]
    pub part_of: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "performedAge")]
    pub performed_age: Option<Age>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "performedDateTime")]
    pub performed_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "performedPeriod")]
    pub performed_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "performedRange")]
    pub performed_range: Option<Range>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "performedString")]
    pub performed_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub performer: Option<Vec<ProcedurePerformer>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub recorder: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub report: Option<Vec<Reference>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusReason")]
    pub status_reason: Option<CodeableConcept>,

    pub subject: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "usedCode")]
    pub used_code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "usedReference")]
    pub used_reference: Option<Vec<Reference>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Procedure_FocalDevice")]
#[serde(deny_unknown_fields)]
pub struct ProcedureFocalDevice {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub action: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    pub manipulated: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Procedure_Performer")]
#[serde(deny_unknown_fields)]
pub struct ProcedurePerformer {
    pub actor: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub function: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onBehalfOf")]
    pub on_behalf_of: Option<Reference>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ProdCharacteristic {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_color")]
    pub color: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_imprint")]
    pub imprint: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_shape")]
    pub shape: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub color: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub depth: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "externalDiameter")]
    pub external_diameter: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub height: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub image: Option<Vec<Attachment>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub imprint: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "nominalVolume")]
    pub nominal_volume: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub scoring: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub shape: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub weight: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub width: Option<Quantity>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ProductShelfLife {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub period: Quantity,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "specialPrecautionsForStorage")]
    pub special_precautions_for_storage: Option<Vec<CodeableConcept>>,

    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Provenance {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_occurredDateTime")]
    pub occurred_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_policy")]
    pub policy: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_recorded")]
    pub recorded: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub activity: Option<CodeableConcept>,

    pub agent: Vec<ProvenanceAgent>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub entity: Option<Vec<ProvenanceEntity>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurredDateTime")]
    pub occurred_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurredPeriod")]
    pub occurred_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub policy: Option<Vec<Uri>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub reason: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub recorded: Option<Instant>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub signature: Option<Vec<Signature>>,

    pub target: Vec<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Provenance_Agent")]
#[serde(deny_unknown_fields)]
pub struct ProvenanceAgent {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onBehalfOf")]
    pub on_behalf_of: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub role: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,

    pub who: Reference,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Provenance_Entity")]
#[serde(deny_unknown_fields)]
pub struct ProvenanceEntity {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_role")]
    pub role: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub agent: Option<Vec<ProvenanceAgent>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub role: Option<Code>,

    pub what: Reference,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Quantity {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_code")]
    pub code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_comparator")]
    pub comparator: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_system")]
    pub system: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_unit")]
    pub unit: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_value")]
    pub value: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub comparator: Option<serde_json::Value>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub system: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Decimal>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Questionnaire {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_approvalDate")]
    pub approval_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_copyright")]
    pub copyright: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_experimental")]
    pub experimental: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastReviewDate")]
    pub last_review_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_publisher")]
    pub publisher: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_purpose")]
    pub purpose: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_subjectType")]
    pub subject_type: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "approvalDate")]
    pub approval_date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Vec<Coding>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "derivedFrom")]
    pub derived_from: Option<Vec<Canonical>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectivePeriod")]
    pub effective_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub item: Option<Vec<QuestionnaireItem>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastReviewDate")]
    pub last_review_date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectType")]
    pub subject_type: Option<Vec<Code>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct QuestionnaireResponse {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_authored")]
    pub authored: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub authored: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub item: Option<Vec<QuestionnaireResponseItem>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "partOf")]
    pub part_of: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub questionnaire: Option<Canonical>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub source: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "QuestionnaireResponse_Answer")]
#[serde(deny_unknown_fields)]
pub struct QuestionnaireResponseAnswer {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub value_boolean: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDate")]
    pub value_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDateTime")]
    pub value_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDecimal")]
    pub value_decimal: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueInteger")]
    pub value_integer: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueString")]
    pub value_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueTime")]
    pub value_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUri")]
    pub value_uri: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub item: Option<Vec<QuestionnaireResponseItem>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAttachment")]
    pub value_attachment: Option<Attachment>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCoding")]
    pub value_coding: Option<Coding>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDate")]
    pub value_date: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDateTime")]
    pub value_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDecimal")]
    pub value_decimal: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueInteger")]
    pub value_integer: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueReference")]
    pub value_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueString")]
    pub value_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTime")]
    pub value_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUri")]
    pub value_uri: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "QuestionnaireResponse_Item")]
#[serde(deny_unknown_fields)]
pub struct QuestionnaireResponseItem {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_definition")]
    pub definition: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_linkId")]
    pub link_id: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_text")]
    pub text: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub answer: Option<Vec<QuestionnaireResponseAnswer>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub definition: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub item: Option<Vec<QuestionnaireResponseItem>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "linkId")]
    pub link_id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Questionnaire_AnswerOption")]
#[serde(deny_unknown_fields)]
pub struct QuestionnaireAnswerOption {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_initialSelected")]
    pub initial_selected: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDate")]
    pub value_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueInteger")]
    pub value_integer: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueString")]
    pub value_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueTime")]
    pub value_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "initialSelected")]
    pub initial_selected: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCoding")]
    pub value_coding: Option<Coding>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDate")]
    pub value_date: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueInteger")]
    pub value_integer: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueReference")]
    pub value_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueString")]
    pub value_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTime")]
    pub value_time: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Questionnaire_EnableWhen")]
#[serde(deny_unknown_fields)]
pub struct QuestionnaireEnableWhen {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_answerBoolean")]
    pub answer_boolean: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_answerDate")]
    pub answer_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_answerDateTime")]
    pub answer_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_answerDecimal")]
    pub answer_decimal: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_answerInteger")]
    pub answer_integer: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_answerString")]
    pub answer_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_answerTime")]
    pub answer_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_operator")]
    pub operator: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_question")]
    pub question: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "answerBoolean")]
    pub answer_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "answerCoding")]
    pub answer_coding: Option<Coding>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "answerDate")]
    pub answer_date: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "answerDateTime")]
    pub answer_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "answerDecimal")]
    pub answer_decimal: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "answerInteger")]
    pub answer_integer: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "answerQuantity")]
    pub answer_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "answerReference")]
    pub answer_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "answerString")]
    pub answer_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "answerTime")]
    pub answer_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub operator: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub question: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Questionnaire_Initial")]
#[serde(deny_unknown_fields)]
pub struct QuestionnaireInitial {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub value_boolean: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDate")]
    pub value_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDateTime")]
    pub value_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDecimal")]
    pub value_decimal: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueInteger")]
    pub value_integer: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueString")]
    pub value_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueTime")]
    pub value_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUri")]
    pub value_uri: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAttachment")]
    pub value_attachment: Option<Attachment>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCoding")]
    pub value_coding: Option<Coding>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDate")]
    pub value_date: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDateTime")]
    pub value_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDecimal")]
    pub value_decimal: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueInteger")]
    pub value_integer: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueReference")]
    pub value_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueString")]
    pub value_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTime")]
    pub value_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUri")]
    pub value_uri: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Questionnaire_Item")]
#[serde(deny_unknown_fields)]
pub struct QuestionnaireItem {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_definition")]
    pub definition: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_enableBehavior")]
    pub enable_behavior: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_linkId")]
    pub link_id: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_maxLength")]
    pub max_length: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_prefix")]
    pub prefix: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_readOnly")]
    pub read_only: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_repeats")]
    pub repeats: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_required")]
    pub required: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_text")]
    pub text: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "answerOption")]
    pub answer_option: Option<Vec<QuestionnaireAnswerOption>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "answerValueSet")]
    pub answer_value_set: Option<Canonical>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Vec<Coding>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub definition: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "enableBehavior")]
    pub enable_behavior: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "enableWhen")]
    pub enable_when: Option<Vec<QuestionnaireEnableWhen>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub initial: Option<Vec<QuestionnaireInitial>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub item: Option<Vec<QuestionnaireItem>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "linkId")]
    pub link_id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxLength")]
    pub max_length: Option<Integer>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "readOnly")]
    pub read_only: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub repeats: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub required: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Range {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub high: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub low: Option<Quantity>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Ratio {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub denominator: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub numerator: Option<Quantity>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct RatioRange {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub denominator: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "highNumerator")]
    pub high_numerator: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lowNumerator")]
    pub low_numerator: Option<Quantity>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Reference {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_display")]
    pub display: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_reference")]
    pub reference: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub reference: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Uri>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct RegulatedAuthorization {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_statusDate")]
    pub status_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub basis: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub case: Option<RegulatedAuthorizationCase>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub holder: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub indication: Option<CodeableReference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "intendedUse")]
    pub intended_use: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub region: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub regulator: Option<Reference>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusDate")]
    pub status_date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "validityPeriod")]
    pub validity_period: Option<Period>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "RegulatedAuthorization_Case")]
#[serde(deny_unknown_fields)]
pub struct RegulatedAuthorizationCase {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_dateDateTime")]
    pub date_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub application: Option<Vec<RegulatedAuthorizationCase>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dateDateTime")]
    pub date_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "datePeriod")]
    pub date_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct RelatedArtifact {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_citation")]
    pub citation: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_display")]
    pub display: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_label")]
    pub label: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub citation: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub document: Option<Attachment>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource: Option<Canonical>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<serde_json::Value>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Url>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct RelatedPerson {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_active")]
    pub active: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_birthDate")]
    pub birth_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_gender")]
    pub gender: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub active: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub address: Option<Vec<Address>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "birthDate")]
    pub birth_date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub communication: Option<Vec<RelatedPersonCommunication>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub gender: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<Vec<HumanName>>,

    pub patient: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub photo: Option<Vec<Attachment>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub relationship: Option<Vec<CodeableConcept>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub telecom: Option<Vec<ContactPoint>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "RelatedPerson_Communication")]
#[serde(deny_unknown_fields)]
pub struct RelatedPersonCommunication {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_preferred")]
    pub preferred: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    pub language: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub preferred: Option<Boolean>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct RequestGroup {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_authoredOn")]
    pub authored_on: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_instantiatesCanonical")]
    pub instantiates_canonical: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_instantiatesUri")]
    pub instantiates_uri: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_intent")]
    pub intent: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_priority")]
    pub priority: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub action: Option<Vec<RequestGroupAction>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "authoredOn")]
    pub authored_on: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "groupIdentifier")]
    pub group_identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesCanonical")]
    pub instantiates_canonical: Option<Vec<Canonical>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesUri")]
    pub instantiates_uri: Option<Vec<Uri>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub intent: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub priority: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub replaces: Option<Vec<Reference>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "RequestGroup_Action")]
#[serde(deny_unknown_fields)]
pub struct RequestGroupAction {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_cardinalityBehavior")]
    pub cardinality_behavior: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_groupingBehavior")]
    pub grouping_behavior: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_precheckBehavior")]
    pub precheck_behavior: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_prefix")]
    pub prefix: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_priority")]
    pub priority: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_requiredBehavior")]
    pub required_behavior: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_selectionBehavior")]
    pub selection_behavior: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_textEquivalent")]
    pub text_equivalent: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_timingDateTime")]
    pub timing_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub action: Option<Vec<RequestGroupAction>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "cardinalityBehavior")]
    pub cardinality_behavior: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub condition: Option<Vec<RequestGroupCondition>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub documentation: Option<Vec<RelatedArtifact>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "groupingBehavior")]
    pub grouping_behavior: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub participant: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "precheckBehavior")]
    pub precheck_behavior: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub priority: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatedAction")]
    pub related_action: Option<Vec<RequestGroupRelatedAction>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "requiredBehavior")]
    pub required_behavior: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "selectionBehavior")]
    pub selection_behavior: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "textEquivalent")]
    pub text_equivalent: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingAge")]
    pub timing_age: Option<Age>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingDateTime")]
    pub timing_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingDuration")]
    pub timing_duration: Option<Duration>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingPeriod")]
    pub timing_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingRange")]
    pub timing_range: Option<Range>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingTiming")]
    pub timing_timing: Option<Timing>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "RequestGroup_Condition")]
#[serde(deny_unknown_fields)]
pub struct RequestGroupCondition {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_kind")]
    pub kind: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub expression: Option<Expression>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "RequestGroup_RelatedAction")]
#[serde(deny_unknown_fields)]
pub struct RequestGroupRelatedAction {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_actionId")]
    pub action_id: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_relationship")]
    pub relationship: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "actionId")]
    pub action_id: Option<Id>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "offsetDuration")]
    pub offset_duration: Option<Duration>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "offsetRange")]
    pub offset_range: Option<Range>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub relationship: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ResearchDefinition {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_approvalDate")]
    pub approval_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_comment")]
    pub comment: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_copyright")]
    pub copyright: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_experimental")]
    pub experimental: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastReviewDate")]
    pub last_review_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_publisher")]
    pub publisher: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_purpose")]
    pub purpose: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_shortTitle")]
    pub short_title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_subtitle")]
    pub subtitle: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_usage")]
    pub usage: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "approvalDate")]
    pub approval_date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub editor: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectivePeriod")]
    pub effective_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub endorser: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub exposure: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "exposureAlternative")]
    pub exposure_alternative: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastReviewDate")]
    pub last_review_date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub library: Option<Vec<Canonical>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub outcome: Option<Reference>,

    pub population: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatedArtifact")]
    pub related_artifact: Option<Vec<RelatedArtifact>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub reviewer: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "shortTitle")]
    pub short_title: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectCodeableConcept")]
    pub subject_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectReference")]
    pub subject_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub subtitle: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub topic: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub usage: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ResearchElementDefinition {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_approvalDate")]
    pub approval_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_comment")]
    pub comment: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_copyright")]
    pub copyright: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_experimental")]
    pub experimental: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastReviewDate")]
    pub last_review_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_publisher")]
    pub publisher: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_purpose")]
    pub purpose: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_shortTitle")]
    pub short_title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_subtitle")]
    pub subtitle: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_usage")]
    pub usage: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_variableType")]
    pub variable_type: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "approvalDate")]
    pub approval_date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<Vec<ContactDetail>>,

    pub characteristic: Vec<ResearchElementDefinitionCharacteristic>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub editor: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectivePeriod")]
    pub effective_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub endorser: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastReviewDate")]
    pub last_review_date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub library: Option<Vec<Canonical>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatedArtifact")]
    pub related_artifact: Option<Vec<RelatedArtifact>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub reviewer: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "shortTitle")]
    pub short_title: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectCodeableConcept")]
    pub subject_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "subjectReference")]
    pub subject_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub subtitle: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub topic: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub usage: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "variableType")]
    pub variable_type: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ResearchElementDefinition_Characteristic")]
#[serde(deny_unknown_fields)]
pub struct ResearchElementDefinitionCharacteristic {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_definitionCanonical")]
    pub definition_canonical: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_exclude")]
    pub exclude: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_participantEffectiveDateTime")]
    pub participant_effective_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_participantEffectiveDescription")]
    pub participant_effective_description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_participantEffectiveGroupMeasure")]
    pub participant_effective_group_measure: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_studyEffectiveDateTime")]
    pub study_effective_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_studyEffectiveDescription")]
    pub study_effective_description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_studyEffectiveGroupMeasure")]
    pub study_effective_group_measure: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "definitionCanonical")]
    pub definition_canonical: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "definitionCodeableConcept")]
    pub definition_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "definitionDataRequirement")]
    pub definition_data_requirement: Option<DataRequirement>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "definitionExpression")]
    pub definition_expression: Option<Expression>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub exclude: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "participantEffectiveDateTime")]
    pub participant_effective_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "participantEffectiveDescription")]
    pub participant_effective_description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "participantEffectiveDuration")]
    pub participant_effective_duration: Option<Duration>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "participantEffectiveGroupMeasure")]
    pub participant_effective_group_measure: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "participantEffectivePeriod")]
    pub participant_effective_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "participantEffectiveTimeFromStart")]
    pub participant_effective_time_from_start: Option<Duration>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "participantEffectiveTiming")]
    pub participant_effective_timing: Option<Timing>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "studyEffectiveDateTime")]
    pub study_effective_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "studyEffectiveDescription")]
    pub study_effective_description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "studyEffectiveDuration")]
    pub study_effective_duration: Option<Duration>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "studyEffectiveGroupMeasure")]
    pub study_effective_group_measure: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "studyEffectivePeriod")]
    pub study_effective_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "studyEffectiveTimeFromStart")]
    pub study_effective_time_from_start: Option<Duration>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "studyEffectiveTiming")]
    pub study_effective_timing: Option<Timing>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "unitOfMeasure")]
    pub unit_of_measure: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "usageContext")]
    pub usage_context: Option<Vec<UsageContext>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ResearchStudy {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub arm: Option<Vec<ResearchStudyArm>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub condition: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub enrollment: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub focus: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub keyword: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub objective: Option<Vec<ResearchStudyObjective>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "partOf")]
    pub part_of: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub phase: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "primaryPurposeType")]
    pub primary_purpose_type: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "principalInvestigator")]
    pub principal_investigator: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub protocol: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonStopped")]
    pub reason_stopped: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relatedArtifact")]
    pub related_artifact: Option<Vec<RelatedArtifact>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub site: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub sponsor: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ResearchStudy_Arm")]
#[serde(deny_unknown_fields)]
pub struct ResearchStudyArm {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ResearchStudy_Objective")]
#[serde(deny_unknown_fields)]
pub struct ResearchStudyObjective {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ResearchSubject {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_actualArm")]
    pub actual_arm: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_assignedArm")]
    pub assigned_arm: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "actualArm")]
    pub actual_arm: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "assignedArm")]
    pub assigned_arm: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub consent: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    pub individual: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    pub study: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(untagged)]
pub enum ResourceListText {
    Variant0(Account),
    Variant1(ActivityDefinition),
    Variant2(AdministrableProductDefinition),
    Variant3(AdverseEvent),
    Variant4(AllergyIntolerance),
    Variant5(Appointment),
    Variant6(AppointmentResponse),
    Variant7(AuditEvent),
    Variant8(Basic),
    Variant9(Binary),
    Variant10(BiologicallyDerivedProduct),
    Variant11(BodyStructure),
    Variant12(Bundle),
    Variant13(CapabilityStatement),
    Variant14(CarePlan),
    Variant15(CareTeam),
    Variant16(CatalogEntry),
    Variant17(ChargeItem),
    Variant18(ChargeItemDefinition),
    Variant19(Citation),
    Variant20(Claim),
    Variant21(ClaimResponse),
    Variant22(ClinicalImpression),
    Variant23(ClinicalUseDefinition),
    Variant24(CodeSystem),
    Variant25(Communication),
    Variant26(CommunicationRequest),
    Variant27(CompartmentDefinition),
    Variant28(Composition),
    Variant29(ConceptMap),
    Variant30(Condition),
    Variant31(Consent),
    Variant32(Contract),
    Variant33(Coverage),
    Variant34(CoverageEligibilityRequest),
    Variant35(CoverageEligibilityResponse),
    Variant36(DetectedIssue),
    Variant37(Device),
    Variant38(DeviceDefinition),
    Variant39(DeviceMetric),
    Variant40(DeviceRequest),
    Variant41(DeviceUseStatement),
    Variant42(DiagnosticReport),
    Variant43(DocumentManifest),
    Variant44(DocumentReference),
    Variant45(Encounter),
    Variant46(Endpoint),
    Variant47(EnrollmentRequest),
    Variant48(EnrollmentResponse),
    Variant49(EpisodeOfCare),
    Variant50(EventDefinition),
    Variant51(Evidence),
    Variant52(EvidenceReport),
    Variant53(EvidenceVariable),
    Variant54(ExampleScenario),
    Variant55(ExplanationOfBenefit),
    Variant56(FamilyMemberHistory),
    Variant57(Flag),
    Variant58(Goal),
    Variant59(GraphDefinition),
    Variant60(Group),
    Variant61(GuidanceResponse),
    Variant62(HealthcareService),
    Variant63(ImagingStudy),
    Variant64(Immunization),
    Variant65(ImmunizationEvaluation),
    Variant66(ImmunizationRecommendation),
    Variant67(ImplementationGuide),
    Variant68(Ingredient),
    Variant69(InsurancePlan),
    Variant70(Invoice),
    Variant71(Library),
    Variant72(Linkage),
    Variant73(List),
    Variant74(Location),
    Variant75(ManufacturedItemDefinition),
    Variant76(Measure),
    Variant77(MeasureReport),
    Variant78(Media),
    Variant79(Medication),
    Variant80(MedicationAdministration),
    Variant81(MedicationDispense),
    Variant82(MedicationKnowledge),
    Variant83(MedicationRequest),
    Variant84(MedicationStatement),
    Variant85(MedicinalProductDefinition),
    Variant86(MessageDefinition),
    Variant87(MessageHeader),
    Variant88(MolecularSequence),
    Variant89(NamingSystem),
    Variant90(NutritionOrder),
    Variant91(NutritionProduct),
    Variant92(Observation),
    Variant93(ObservationDefinition),
    Variant94(OperationDefinition),
    Variant95(OperationOutcome),
    Variant96(Organization),
    Variant97(OrganizationAffiliation),
    Variant98(PackagedProductDefinition),
    Variant99(Parameters),
    Variant100(Patient),
    Variant101(PaymentNotice),
    Variant102(PaymentReconciliation),
    Variant103(Person),
    Variant104(PlanDefinition),
    Variant105(Practitioner),
    Variant106(PractitionerRole),
    Variant107(Procedure),
    Variant108(Provenance),
    Variant109(Questionnaire),
    Variant110(QuestionnaireResponse),
    Variant111(RegulatedAuthorization),
    Variant112(RelatedPerson),
    Variant113(RequestGroup),
    Variant114(ResearchDefinition),
    Variant115(ResearchElementDefinition),
    Variant116(ResearchStudy),
    Variant117(ResearchSubject),
    Variant118(RiskAssessment),
    Variant119(Schedule),
    Variant120(SearchParameter),
    Variant121(ServiceRequest),
    Variant122(Slot),
    Variant123(Specimen),
    Variant124(SpecimenDefinition),
    Variant125(StructureDefinition),
    Variant126(StructureMap),
    Variant127(Subscription),
    Variant128(SubscriptionStatus),
    Variant129(SubscriptionTopic),
    Variant130(Substance),
    Variant131(SubstanceDefinition),
    Variant132(SupplyDelivery),
    Variant133(SupplyRequest),
    Variant134(Task),
    Variant135(TerminologyCapabilities),
    Variant136(TestReport),
    Variant137(TestScript),
    Variant138(ValueSet),
    Variant139(VerificationResult),
    Variant140(VisionPrescription),
}
pub type ResourceList = ResourceListText;

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct RiskAssessment {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_mitigation")]
    pub mitigation: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_occurrenceDateTime")]
    pub occurrence_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub basis: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub condition: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub method: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub mitigation: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrenceDateTime")]
    pub occurrence_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrencePeriod")]
    pub occurrence_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub parent: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub performer: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub prediction: Option<Vec<RiskAssessmentPrediction>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    pub subject: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "RiskAssessment_Prediction")]
#[serde(deny_unknown_fields)]
pub struct RiskAssessmentPrediction {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_probabilityDecimal")]
    pub probability_decimal: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_rationale")]
    pub rationale: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_relativeRisk")]
    pub relative_risk: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub outcome: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "probabilityDecimal")]
    pub probability_decimal: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "probabilityRange")]
    pub probability_range: Option<Range>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "qualitativeRisk")]
    pub qualitative_risk: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub rationale: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relativeRisk")]
    pub relative_risk: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "whenPeriod")]
    pub when_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "whenRange")]
    pub when_range: Option<Range>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct SampledData {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_data")]
    pub data: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_dimensions")]
    pub dimensions: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_factor")]
    pub factor: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lowerLimit")]
    pub lower_limit: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_period")]
    pub period: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_upperLimit")]
    pub upper_limit: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub data: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub dimensions: Option<PositiveInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub factor: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lowerLimit")]
    pub lower_limit: Option<Decimal>,

    pub origin: Quantity,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "upperLimit")]
    pub upper_limit: Option<Decimal>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Schedule {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_active")]
    pub active: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_comment")]
    pub comment: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub active: Option<Boolean>,

    pub actor: Vec<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "planningHorizon")]
    pub planning_horizon: Option<Period>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "serviceCategory")]
    pub service_category: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "serviceType")]
    pub service_type: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub specialty: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct SearchParameter {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_base")]
    pub base: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_chain")]
    pub chain: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_code")]
    pub code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_comparator")]
    pub comparator: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_experimental")]
    pub experimental: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_expression")]
    pub expression: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_modifier")]
    pub modifier: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_multipleAnd")]
    pub multiple_and: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_multipleOr")]
    pub multiple_or: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_publisher")]
    pub publisher: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_purpose")]
    pub purpose: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_target")]
    pub target: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_xpath")]
    pub xpath: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_xpathUsage")]
    pub xpath_usage: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub base: Option<Vec<Code>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub chain: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub comparator: Option<Vec<Code>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub component: Option<Vec<SearchParameterComponent>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "derivedFrom")]
    pub derived_from: Option<Canonical>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub modifier: Option<Vec<Code>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "multipleAnd")]
    pub multiple_and: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "multipleOr")]
    pub multiple_or: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub target: Option<Vec<Code>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub xpath: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "xpathUsage")]
    pub xpath_usage: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "SearchParameter_Component")]
#[serde(deny_unknown_fields)]
pub struct SearchParameterComponent {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_expression")]
    pub expression: Option<Element>,

    pub definition: Canonical,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ServiceRequest {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_asNeededBoolean")]
    pub as_needed_boolean: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_authoredOn")]
    pub authored_on: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_doNotPerform")]
    pub do_not_perform: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_instantiatesUri")]
    pub instantiates_uri: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_intent")]
    pub intent: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_occurrenceDateTime")]
    pub occurrence_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_patientInstruction")]
    pub patient_instruction: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_priority")]
    pub priority: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "asNeededBoolean")]
    pub as_needed_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "asNeededCodeableConcept")]
    pub as_needed_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "authoredOn")]
    pub authored_on: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "bodySite")]
    pub body_site: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "doNotPerform")]
    pub do_not_perform: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesCanonical")]
    pub instantiates_canonical: Option<Vec<Canonical>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesUri")]
    pub instantiates_uri: Option<Vec<Uri>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub insurance: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub intent: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "locationCode")]
    pub location_code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "locationReference")]
    pub location_reference: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrenceDateTime")]
    pub occurrence_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrencePeriod")]
    pub occurrence_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrenceTiming")]
    pub occurrence_timing: Option<Timing>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "orderDetail")]
    pub order_detail: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patientInstruction")]
    pub patient_instruction: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub performer: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "performerType")]
    pub performer_type: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub priority: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "quantityQuantity")]
    pub quantity_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "quantityRange")]
    pub quantity_range: Option<Range>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "quantityRatio")]
    pub quantity_ratio: Option<Ratio>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relevantHistory")]
    pub relevant_history: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub replaces: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub requester: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub requisition: Option<Identifier>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub specimen: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    pub subject: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportingInfo")]
    pub supporting_info: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Signature {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_data")]
    pub data: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sigFormat")]
    pub sig_format: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_targetFormat")]
    pub target_format: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_when")]
    pub when: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub data: Option<Base64Binary>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onBehalfOf")]
    pub on_behalf_of: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "sigFormat")]
    pub sig_format: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetFormat")]
    pub target_format: Option<Code>,

    #[serde(rename = "type")]
    pub type_: Vec<Coding>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub when: Option<Instant>,

    pub who: Reference,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Slot {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_comment")]
    pub comment: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_end")]
    pub end: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_overbooked")]
    pub overbooked: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_start")]
    pub start: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "appointmentType")]
    pub appointment_type: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub end: Option<Instant>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub overbooked: Option<Boolean>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    pub schedule: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "serviceCategory")]
    pub service_category: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "serviceType")]
    pub service_type: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub specialty: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub start: Option<Instant>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Specimen {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_receivedTime")]
    pub received_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "accessionIdentifier")]
    pub accession_identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub collection: Option<SpecimenCollection>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub condition: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub container: Option<Vec<SpecimenContainer>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub parent: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub processing: Option<Vec<SpecimenProcessing>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "receivedTime")]
    pub received_time: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub request: Option<Vec<Reference>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct SpecimenDefinition {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_timeAspect")]
    pub time_aspect: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub collection: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "patientPreparation")]
    pub patient_preparation: Option<Vec<CodeableConcept>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timeAspect")]
    pub time_aspect: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "typeCollected")]
    pub type_collected: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "typeTested")]
    pub type_tested: Option<Vec<SpecimenDefinitionTypeTested>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "SpecimenDefinition_Additive")]
#[serde(deny_unknown_fields)]
pub struct SpecimenDefinitionAdditive {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "additiveCodeableConcept")]
    pub additive_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "additiveReference")]
    pub additive_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "SpecimenDefinition_Container")]
#[serde(deny_unknown_fields)]
pub struct SpecimenDefinitionContainer {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_minimumVolumeString")]
    pub minimum_volume_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_preparation")]
    pub preparation: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub additive: Option<Vec<SpecimenDefinitionAdditive>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub cap: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub capacity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub material: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "minimumVolumeQuantity")]
    pub minimum_volume_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "minimumVolumeString")]
    pub minimum_volume_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub preparation: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "SpecimenDefinition_Handling")]
#[serde(deny_unknown_fields)]
pub struct SpecimenDefinitionHandling {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_instruction")]
    pub instruction: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub instruction: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "maxDuration")]
    pub max_duration: Option<Duration>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "temperatureQualifier")]
    pub temperature_qualifier: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "temperatureRange")]
    pub temperature_range: Option<Range>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "SpecimenDefinition_TypeTested")]
#[serde(deny_unknown_fields)]
pub struct SpecimenDefinitionTypeTested {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_isDerived")]
    pub is_derived: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_preference")]
    pub preference: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_requirement")]
    pub requirement: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub container: Option<SpecimenDefinitionContainer>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub handling: Option<Vec<SpecimenDefinitionHandling>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "isDerived")]
    pub is_derived: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub preference: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "rejectionCriterion")]
    pub rejection_criterion: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub requirement: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "retentionTime")]
    pub retention_time: Option<Duration>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Specimen_Collection")]
#[serde(deny_unknown_fields)]
pub struct SpecimenCollection {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_collectedDateTime")]
    pub collected_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "bodySite")]
    pub body_site: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "collectedDateTime")]
    pub collected_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "collectedPeriod")]
    pub collected_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub collector: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub duration: Option<Duration>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fastingStatusCodeableConcept")]
    pub fasting_status_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fastingStatusDuration")]
    pub fasting_status_duration: Option<Duration>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub method: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Specimen_Container")]
#[serde(deny_unknown_fields)]
pub struct SpecimenContainer {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "additiveCodeableConcept")]
    pub additive_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "additiveReference")]
    pub additive_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub capacity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "specimenQuantity")]
    pub specimen_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Specimen_Processing")]
#[serde(deny_unknown_fields)]
pub struct SpecimenProcessing {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_timeDateTime")]
    pub time_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub additive: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub procedure: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timeDateTime")]
    pub time_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timePeriod")]
    pub time_period: Option<Period>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct StructureDefinition {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_abstract")]
    pub abstract_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_contextInvariant")]
    pub context_invariant: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_copyright")]
    pub copyright: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_derivation")]
    pub derivation: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_experimental")]
    pub experimental: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fhirVersion")]
    pub fhir_version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_kind")]
    pub kind: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_publisher")]
    pub publisher: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_purpose")]
    pub purpose: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "abstract")]
    pub abstract_: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "baseDefinition")]
    pub base_definition: Option<Canonical>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub context: Option<Vec<StructureDefinitionContext>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contextInvariant")]
    pub context_invariant: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub derivation: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub differential: Option<StructureDefinitionDifferential>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fhirVersion")]
    pub fhir_version: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub keyword: Option<Vec<Coding>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub mapping: Option<Vec<StructureDefinitionMapping>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub snapshot: Option<StructureDefinitionSnapshot>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "StructureDefinition_Context")]
#[serde(deny_unknown_fields)]
pub struct StructureDefinitionContext {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_expression")]
    pub expression: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "StructureDefinition_Differential")]
#[serde(deny_unknown_fields)]
pub struct StructureDefinitionDifferential {
    pub element: Vec<ElementDefinition>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "StructureDefinition_Mapping")]
#[serde(deny_unknown_fields)]
pub struct StructureDefinitionMapping {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_comment")]
    pub comment: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_identity")]
    pub identity: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_uri")]
    pub uri: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identity: Option<Id>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub uri: Option<Uri>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "StructureDefinition_Snapshot")]
#[serde(deny_unknown_fields)]
pub struct StructureDefinitionSnapshot {
    pub element: Vec<ElementDefinition>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct StructureMap {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_copyright")]
    pub copyright: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_experimental")]
    pub experimental: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_publisher")]
    pub publisher: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_purpose")]
    pub purpose: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    pub group: Vec<StructureMapGroup>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub import: Option<Vec<Canonical>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub structure: Option<Vec<StructureMapStructure>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "StructureMap_Dependent")]
#[serde(deny_unknown_fields)]
pub struct StructureMapDependent {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_variable")]
    pub variable: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<Id>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub variable: Option<Vec<String>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "StructureMap_Group")]
#[serde(deny_unknown_fields)]
pub struct StructureMapGroup {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_documentation")]
    pub documentation: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_extends")]
    pub extends: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_typeMode")]
    pub type_mode: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub documentation: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extends: Option<Id>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    pub input: Vec<StructureMapInput>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<Id>,

    pub rule: Vec<StructureMapRule>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "typeMode")]
    pub type_mode: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "StructureMap_Input")]
#[serde(deny_unknown_fields)]
pub struct StructureMapInput {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_documentation")]
    pub documentation: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_mode")]
    pub mode: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub documentation: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub mode: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<Id>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "StructureMap_Parameter")]
#[serde(deny_unknown_fields)]
pub struct StructureMapParameter {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub value_boolean: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDecimal")]
    pub value_decimal: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueId")]
    pub value_id: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueInteger")]
    pub value_integer: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueString")]
    pub value_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDecimal")]
    pub value_decimal: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueId")]
    pub value_id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueInteger")]
    pub value_integer: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueString")]
    pub value_string: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "StructureMap_Rule")]
#[serde(deny_unknown_fields)]
pub struct StructureMapRule {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_documentation")]
    pub documentation: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub dependent: Option<Vec<StructureMapDependent>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub documentation: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<Id>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub rule: Option<Vec<StructureMapRule>>,

    pub source: Vec<StructureMapSource>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub target: Option<Vec<StructureMapTarget>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "StructureMap_Source")]
#[serde(deny_unknown_fields)]
pub struct StructureMapSource {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_check")]
    pub check: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_condition")]
    pub condition: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_context")]
    pub context: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueBase64Binary")]
    pub default_value_base_64_binary: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueBoolean")]
    pub default_value_boolean: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueCanonical")]
    pub default_value_canonical: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueCode")]
    pub default_value_code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueDate")]
    pub default_value_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueDateTime")]
    pub default_value_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueDecimal")]
    pub default_value_decimal: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueId")]
    pub default_value_id: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueInstant")]
    pub default_value_instant: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueInteger")]
    pub default_value_integer: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueMarkdown")]
    pub default_value_markdown: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueOid")]
    pub default_value_oid: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValuePositiveInt")]
    pub default_value_positive_int: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueString")]
    pub default_value_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueTime")]
    pub default_value_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueUnsignedInt")]
    pub default_value_unsigned_int: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueUri")]
    pub default_value_uri: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueUrl")]
    pub default_value_url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValueUuid")]
    pub default_value_uuid: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_element")]
    pub element: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_listMode")]
    pub list_mode: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_logMessage")]
    pub log_message: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_max")]
    pub max: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_min")]
    pub min: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_variable")]
    pub variable: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub check: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub condition: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub context: Option<Id>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueAddress")]
    pub default_value_address: Option<Address>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueAge")]
    pub default_value_age: Option<Age>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueAnnotation")]
    pub default_value_annotation: Option<Annotation>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueAttachment")]
    pub default_value_attachment: Option<Attachment>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueBase64Binary")]
    pub default_value_base_64_binary: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueBoolean")]
    pub default_value_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueCanonical")]
    pub default_value_canonical: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueCode")]
    pub default_value_code: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueCodeableConcept")]
    pub default_value_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueCoding")]
    pub default_value_coding: Option<Coding>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueContactDetail")]
    pub default_value_contact_detail: Option<ContactDetail>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueContactPoint")]
    pub default_value_contact_point: Option<ContactPoint>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueContributor")]
    pub default_value_contributor: Option<Contributor>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueCount")]
    pub default_value_count: Option<Count>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueDataRequirement")]
    pub default_value_data_requirement: Option<DataRequirement>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueDate")]
    pub default_value_date: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueDateTime")]
    pub default_value_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueDecimal")]
    pub default_value_decimal: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueDistance")]
    pub default_value_distance: Option<Distance>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueDosage")]
    pub default_value_dosage: Option<Dosage>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueDuration")]
    pub default_value_duration: Option<Duration>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueExpression")]
    pub default_value_expression: Option<Expression>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueHumanName")]
    pub default_value_human_name: Option<HumanName>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueId")]
    pub default_value_id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueIdentifier")]
    pub default_value_identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueInstant")]
    pub default_value_instant: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueInteger")]
    pub default_value_integer: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueMarkdown")]
    pub default_value_markdown: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueMeta")]
    pub default_value_meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueMoney")]
    pub default_value_money: Option<Money>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueOid")]
    pub default_value_oid: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueParameterDefinition")]
    pub default_value_parameter_definition: Option<ParameterDefinition>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValuePeriod")]
    pub default_value_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValuePositiveInt")]
    pub default_value_positive_int: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueQuantity")]
    pub default_value_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueRange")]
    pub default_value_range: Option<Range>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueRatio")]
    pub default_value_ratio: Option<Ratio>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueReference")]
    pub default_value_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueRelatedArtifact")]
    pub default_value_related_artifact: Option<RelatedArtifact>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueSampledData")]
    pub default_value_sampled_data: Option<SampledData>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueSignature")]
    pub default_value_signature: Option<Signature>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueString")]
    pub default_value_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueTime")]
    pub default_value_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueTiming")]
    pub default_value_timing: Option<Timing>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueTriggerDefinition")]
    pub default_value_trigger_definition: Option<TriggerDefinition>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueUnsignedInt")]
    pub default_value_unsigned_int: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueUri")]
    pub default_value_uri: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueUrl")]
    pub default_value_url: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueUsageContext")]
    pub default_value_usage_context: Option<UsageContext>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValueUuid")]
    pub default_value_uuid: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub element: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "listMode")]
    pub list_mode: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "logMessage")]
    pub log_message: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub max: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub min: Option<Integer>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub variable: Option<Id>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "StructureMap_Structure")]
#[serde(deny_unknown_fields)]
pub struct StructureMapStructure {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_alias")]
    pub alias: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_documentation")]
    pub documentation: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_mode")]
    pub mode: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub alias: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub documentation: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub mode: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub url: Canonical,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "StructureMap_Target")]
#[serde(deny_unknown_fields)]
pub struct StructureMapTarget {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_context")]
    pub context: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_contextType")]
    pub context_type: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_element")]
    pub element: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_listMode")]
    pub list_mode: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_listRuleId")]
    pub list_rule_id: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_transform")]
    pub transform: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_variable")]
    pub variable: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub context: Option<Id>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contextType")]
    pub context_type: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub element: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "listMode")]
    pub list_mode: Option<Vec<Code>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "listRuleId")]
    pub list_rule_id: Option<Id>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub parameter: Option<Vec<StructureMapParameter>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub transform: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub variable: Option<Id>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Subscription {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_criteria")]
    pub criteria: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_end")]
    pub end: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_error")]
    pub error: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_reason")]
    pub reason: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    pub channel: SubscriptionChannel,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactPoint>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub criteria: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub end: Option<Instant>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct SubscriptionStatus {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_eventsSinceSubscriptionStart")]
    pub events_since_subscription_start: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "eventsSinceSubscriptionStart")]
    pub events_since_subscription_start: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "notificationEvent")]
    pub notification_event: Option<Vec<SubscriptionStatusNotificationEvent>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    pub subscription: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub topic: Option<Canonical>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "SubscriptionStatus_NotificationEvent")]
#[serde(deny_unknown_fields)]
pub struct SubscriptionStatusNotificationEvent {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_eventNumber")]
    pub event_number: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_timestamp")]
    pub timestamp: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "additionalContext")]
    pub additional_context: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "eventNumber")]
    pub event_number: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub focus: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<Instant>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct SubscriptionTopic {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_approvalDate")]
    pub approval_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_copyright")]
    pub copyright: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_experimental")]
    pub experimental: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastReviewDate")]
    pub last_review_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_publisher")]
    pub publisher: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_purpose")]
    pub purpose: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "approvalDate")]
    pub approval_date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "canFilterBy")]
    pub can_filter_by: Option<Vec<SubscriptionTopicCanFilterBy>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "derivedFrom")]
    pub derived_from: Option<Vec<Canonical>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "effectivePeriod")]
    pub effective_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "eventTrigger")]
    pub event_trigger: Option<Vec<SubscriptionTopicEventTrigger>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastReviewDate")]
    pub last_review_date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "notificationShape")]
    pub notification_shape: Option<Vec<SubscriptionTopicNotificationShape>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "resourceTrigger")]
    pub resource_trigger: Option<Vec<SubscriptionTopicResourceTrigger>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "SubscriptionTopic_CanFilterBy")]
#[serde(deny_unknown_fields)]
pub struct SubscriptionTopicCanFilterBy {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_filterDefinition")]
    pub filter_definition: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_filterParameter")]
    pub filter_parameter: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_modifier")]
    pub modifier: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_resource")]
    pub resource: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "filterDefinition")]
    pub filter_definition: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "filterParameter")]
    pub filter_parameter: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub modifier: Option<Vec<Code>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource: Option<Uri>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "SubscriptionTopic_EventTrigger")]
#[serde(deny_unknown_fields)]
pub struct SubscriptionTopicEventTrigger {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_resource")]
    pub resource: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    pub event: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource: Option<Uri>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "SubscriptionTopic_NotificationShape")]
#[serde(deny_unknown_fields)]
pub struct SubscriptionTopicNotificationShape {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_include")]
    pub include: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_resource")]
    pub resource: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_revInclude")]
    pub rev_include: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub include: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "revInclude")]
    pub rev_include: Option<Vec<String>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "SubscriptionTopic_QueryCriteria")]
#[serde(deny_unknown_fields)]
pub struct SubscriptionTopicQueryCriteria {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_current")]
    pub current: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_previous")]
    pub previous: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_requireBoth")]
    pub require_both: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_resultForCreate")]
    pub result_for_create: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_resultForDelete")]
    pub result_for_delete: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub current: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub previous: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "requireBoth")]
    pub require_both: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "resultForCreate")]
    pub result_for_create: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "resultForDelete")]
    pub result_for_delete: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "SubscriptionTopic_ResourceTrigger")]
#[serde(deny_unknown_fields)]
pub struct SubscriptionTopicResourceTrigger {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_fhirPathCriteria")]
    pub fhir_path_criteria: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_resource")]
    pub resource: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_supportedInteraction")]
    pub supported_interaction: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "fhirPathCriteria")]
    pub fhir_path_criteria: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "queryCriteria")]
    pub query_criteria: Option<SubscriptionTopicQueryCriteria>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "supportedInteraction")]
    pub supported_interaction: Option<Vec<Code>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Subscription_Channel")]
#[serde(deny_unknown_fields)]
pub struct SubscriptionChannel {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_endpoint")]
    pub endpoint: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_header")]
    pub header: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_payload")]
    pub payload: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<Url>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub header: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub payload: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Substance {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<Vec<CodeableConcept>>,

    pub code: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub ingredient: Option<Vec<SubstanceIngredient>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub instance: Option<Vec<SubstanceInstance>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct SubstanceDefinition {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub classification: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Vec<SubstanceDefinitionCode>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub domain: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub grade: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "informationSource")]
    pub information_source: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub manufacturer: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub moiety: Option<Vec<SubstanceDefinitionMoiety>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "molecularWeight")]
    pub molecular_weight: Option<Vec<SubstanceDefinitionMolecularWeight>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<Vec<SubstanceDefinitionName>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub property: Option<Vec<SubstanceDefinitionProperty>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub relationship: Option<Vec<SubstanceDefinitionRelationship>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "sourceMaterial")]
    pub source_material: Option<SubstanceDefinitionSourceMaterial>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub structure: Option<SubstanceDefinitionStructure>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub supplier: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "SubstanceDefinition_Code")]
#[serde(deny_unknown_fields)]
pub struct SubstanceDefinitionCode {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_statusDate")]
    pub status_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub source: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusDate")]
    pub status_date: Option<DateTime>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "SubstanceDefinition_Moiety")]
#[serde(deny_unknown_fields)]
pub struct SubstanceDefinitionMoiety {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_amountString")]
    pub amount_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_molecularFormula")]
    pub molecular_formula: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "amountQuantity")]
    pub amount_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "amountString")]
    pub amount_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "measurementType")]
    pub measurement_type: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "molecularFormula")]
    pub molecular_formula: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "opticalActivity")]
    pub optical_activity: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub role: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub stereochemistry: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "SubstanceDefinition_MolecularWeight")]
#[serde(deny_unknown_fields)]
pub struct SubstanceDefinitionMolecularWeight {
    pub amount: Quantity,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub method: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "SubstanceDefinition_Name")]
#[serde(deny_unknown_fields)]
pub struct SubstanceDefinitionName {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_preferred")]
    pub preferred: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub domain: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub official: Option<Vec<SubstanceDefinitionOfficial>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub preferred: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub source: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub synonym: Option<Vec<SubstanceDefinitionName>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub translation: Option<Vec<SubstanceDefinitionName>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "SubstanceDefinition_Official")]
#[serde(deny_unknown_fields)]
pub struct SubstanceDefinitionOfficial {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub authority: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "SubstanceDefinition_Property")]
#[serde(deny_unknown_fields)]
pub struct SubstanceDefinitionProperty {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub value_boolean: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDate")]
    pub value_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(rename = "type")]
    pub type_: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAttachment")]
    pub value_attachment: Option<Attachment>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDate")]
    pub value_date: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "SubstanceDefinition_Relationship")]
#[serde(deny_unknown_fields)]
pub struct SubstanceDefinitionRelationship {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_amountString")]
    pub amount_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_isDefining")]
    pub is_defining: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "amountQuantity")]
    pub amount_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "amountRatio")]
    pub amount_ratio: Option<Ratio>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "amountString")]
    pub amount_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub comparator: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "isDefining")]
    pub is_defining: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "ratioHighLimitAmount")]
    pub ratio_high_limit_amount: Option<Ratio>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub source: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "substanceDefinitionCodeableConcept")]
    pub substance_definition_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "substanceDefinitionReference")]
    pub substance_definition_reference: Option<Reference>,

    #[serde(rename = "type")]
    pub type_: CodeableConcept,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "SubstanceDefinition_Representation")]
#[serde(deny_unknown_fields)]
pub struct SubstanceDefinitionRepresentation {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_representation")]
    pub representation: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub document: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub format: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub representation: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "SubstanceDefinition_SourceMaterial")]
#[serde(deny_unknown_fields)]
pub struct SubstanceDefinitionSourceMaterial {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "countryOfOrigin")]
    pub country_of_origin: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub genus: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub part: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub species: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "SubstanceDefinition_Structure")]
#[serde(deny_unknown_fields)]
pub struct SubstanceDefinitionStructure {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_molecularFormula")]
    pub molecular_formula: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_molecularFormulaByMoiety")]
    pub molecular_formula_by_moiety: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "molecularFormula")]
    pub molecular_formula: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "molecularFormulaByMoiety")]
    pub molecular_formula_by_moiety: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "molecularWeight")]
    pub molecular_weight: Option<SubstanceDefinitionMolecularWeight>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "opticalActivity")]
    pub optical_activity: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub representation: Option<Vec<SubstanceDefinitionRepresentation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "sourceDocument")]
    pub source_document: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub stereochemistry: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub technique: Option<Vec<CodeableConcept>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Substance_Ingredient")]
#[serde(deny_unknown_fields)]
pub struct SubstanceIngredient {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Ratio>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "substanceCodeableConcept")]
    pub substance_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "substanceReference")]
    pub substance_reference: Option<Reference>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Substance_Instance")]
#[serde(deny_unknown_fields)]
pub struct SubstanceInstance {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_expiry")]
    pub expiry: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub expiry: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct SupplyDelivery {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_occurrenceDateTime")]
    pub occurrence_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub destination: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrenceDateTime")]
    pub occurrence_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrencePeriod")]
    pub occurrence_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrenceTiming")]
    pub occurrence_timing: Option<Timing>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "partOf")]
    pub part_of: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub patient: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub receiver: Option<Vec<Reference>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "suppliedItem")]
    pub supplied_item: Option<SupplyDeliverySuppliedItem>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub supplier: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<CodeableConcept>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "SupplyDelivery_SuppliedItem")]
#[serde(deny_unknown_fields)]
pub struct SupplyDeliverySuppliedItem {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "itemCodeableConcept")]
    pub item_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "itemReference")]
    pub item_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Quantity>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct SupplyRequest {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_authoredOn")]
    pub authored_on: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_occurrenceDateTime")]
    pub occurrence_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_priority")]
    pub priority: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "authoredOn")]
    pub authored_on: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub category: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "deliverFrom")]
    pub deliver_from: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "deliverTo")]
    pub deliver_to: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "itemCodeableConcept")]
    pub item_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "itemReference")]
    pub item_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrenceDateTime")]
    pub occurrence_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrencePeriod")]
    pub occurrence_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "occurrenceTiming")]
    pub occurrence_timing: Option<Timing>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub parameter: Option<Vec<SupplyRequestParameter>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub priority: Option<Code>,

    pub quantity: Quantity,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub requester: Option<Reference>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub supplier: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "SupplyRequest_Parameter")]
#[serde(deny_unknown_fields)]
pub struct SupplyRequestParameter {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub value_boolean: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRange")]
    pub value_range: Option<Range>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Task {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_authoredOn")]
    pub authored_on: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_instantiatesUri")]
    pub instantiates_uri: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_intent")]
    pub intent: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastModified")]
    pub last_modified: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_priority")]
    pub priority: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "authoredOn")]
    pub authored_on: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "basedOn")]
    pub based_on: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "businessStatus")]
    pub business_status: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "executionPeriod")]
    pub execution_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub focus: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "for")]
    pub for_: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "groupIdentifier")]
    pub group_identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub input: Option<Vec<TaskInput>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesCanonical")]
    pub instantiates_canonical: Option<Canonical>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "instantiatesUri")]
    pub instantiates_uri: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub insurance: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub intent: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastModified")]
    pub last_modified: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub output: Option<Vec<TaskOutput>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub owner: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "partOf")]
    pub part_of: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "performerType")]
    pub performer_type: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub priority: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonCode")]
    pub reason_code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "reasonReference")]
    pub reason_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "relevantHistory")]
    pub relevant_history: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub requester: Option<Reference>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub restriction: Option<TaskRestriction>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusReason")]
    pub status_reason: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Task_Input")]
#[serde(deny_unknown_fields)]
pub struct TaskInput {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBase64Binary")]
    pub value_base_64_binary: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub value_boolean: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueCanonical")]
    pub value_canonical: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueCode")]
    pub value_code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDate")]
    pub value_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDateTime")]
    pub value_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDecimal")]
    pub value_decimal: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueId")]
    pub value_id: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueInstant")]
    pub value_instant: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueInteger")]
    pub value_integer: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueMarkdown")]
    pub value_markdown: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueOid")]
    pub value_oid: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valuePositiveInt")]
    pub value_positive_int: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueString")]
    pub value_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueTime")]
    pub value_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUnsignedInt")]
    pub value_unsigned_int: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUri")]
    pub value_uri: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUrl")]
    pub value_url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUuid")]
    pub value_uuid: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(rename = "type")]
    pub type_: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAddress")]
    pub value_address: Option<Address>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAge")]
    pub value_age: Option<Age>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAnnotation")]
    pub value_annotation: Option<Annotation>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAttachment")]
    pub value_attachment: Option<Attachment>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBase64Binary")]
    pub value_base_64_binary: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCanonical")]
    pub value_canonical: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCode")]
    pub value_code: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCoding")]
    pub value_coding: Option<Coding>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueContactDetail")]
    pub value_contact_detail: Option<ContactDetail>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueContactPoint")]
    pub value_contact_point: Option<ContactPoint>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueContributor")]
    pub value_contributor: Option<Contributor>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCount")]
    pub value_count: Option<Count>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDataRequirement")]
    pub value_data_requirement: Option<DataRequirement>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDate")]
    pub value_date: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDateTime")]
    pub value_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDecimal")]
    pub value_decimal: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDistance")]
    pub value_distance: Option<Distance>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDosage")]
    pub value_dosage: Option<Dosage>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDuration")]
    pub value_duration: Option<Duration>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueExpression")]
    pub value_expression: Option<Expression>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueHumanName")]
    pub value_human_name: Option<HumanName>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueId")]
    pub value_id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueIdentifier")]
    pub value_identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueInstant")]
    pub value_instant: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueInteger")]
    pub value_integer: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueMarkdown")]
    pub value_markdown: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueMeta")]
    pub value_meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueMoney")]
    pub value_money: Option<Money>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueOid")]
    pub value_oid: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueParameterDefinition")]
    pub value_parameter_definition: Option<ParameterDefinition>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valuePeriod")]
    pub value_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valuePositiveInt")]
    pub value_positive_int: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRange")]
    pub value_range: Option<Range>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRatio")]
    pub value_ratio: Option<Ratio>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueReference")]
    pub value_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRelatedArtifact")]
    pub value_related_artifact: Option<RelatedArtifact>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueSampledData")]
    pub value_sampled_data: Option<SampledData>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueSignature")]
    pub value_signature: Option<Signature>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueString")]
    pub value_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTime")]
    pub value_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTiming")]
    pub value_timing: Option<Timing>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTriggerDefinition")]
    pub value_trigger_definition: Option<TriggerDefinition>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUnsignedInt")]
    pub value_unsigned_int: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUri")]
    pub value_uri: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUrl")]
    pub value_url: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUsageContext")]
    pub value_usage_context: Option<UsageContext>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUuid")]
    pub value_uuid: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "Task_Output")]
#[serde(deny_unknown_fields)]
pub struct TaskOutput {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBase64Binary")]
    pub value_base_64_binary: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub value_boolean: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueCanonical")]
    pub value_canonical: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueCode")]
    pub value_code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDate")]
    pub value_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDateTime")]
    pub value_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDecimal")]
    pub value_decimal: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueId")]
    pub value_id: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueInstant")]
    pub value_instant: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueInteger")]
    pub value_integer: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueMarkdown")]
    pub value_markdown: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueOid")]
    pub value_oid: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valuePositiveInt")]
    pub value_positive_int: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueString")]
    pub value_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueTime")]
    pub value_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUnsignedInt")]
    pub value_unsigned_int: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUri")]
    pub value_uri: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUrl")]
    pub value_url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUuid")]
    pub value_uuid: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(rename = "type")]
    pub type_: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAddress")]
    pub value_address: Option<Address>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAge")]
    pub value_age: Option<Age>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAnnotation")]
    pub value_annotation: Option<Annotation>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueAttachment")]
    pub value_attachment: Option<Attachment>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBase64Binary")]
    pub value_base_64_binary: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCanonical")]
    pub value_canonical: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCode")]
    pub value_code: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCoding")]
    pub value_coding: Option<Coding>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueContactDetail")]
    pub value_contact_detail: Option<ContactDetail>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueContactPoint")]
    pub value_contact_point: Option<ContactPoint>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueContributor")]
    pub value_contributor: Option<Contributor>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCount")]
    pub value_count: Option<Count>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDataRequirement")]
    pub value_data_requirement: Option<DataRequirement>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDate")]
    pub value_date: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDateTime")]
    pub value_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDecimal")]
    pub value_decimal: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDistance")]
    pub value_distance: Option<Distance>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDosage")]
    pub value_dosage: Option<Dosage>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDuration")]
    pub value_duration: Option<Duration>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueExpression")]
    pub value_expression: Option<Expression>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueHumanName")]
    pub value_human_name: Option<HumanName>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueId")]
    pub value_id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueIdentifier")]
    pub value_identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueInstant")]
    pub value_instant: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueInteger")]
    pub value_integer: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueMarkdown")]
    pub value_markdown: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueMeta")]
    pub value_meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueMoney")]
    pub value_money: Option<Money>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueOid")]
    pub value_oid: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueParameterDefinition")]
    pub value_parameter_definition: Option<ParameterDefinition>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valuePeriod")]
    pub value_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valuePositiveInt")]
    pub value_positive_int: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRange")]
    pub value_range: Option<Range>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRatio")]
    pub value_ratio: Option<Ratio>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueReference")]
    pub value_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRelatedArtifact")]
    pub value_related_artifact: Option<RelatedArtifact>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueSampledData")]
    pub value_sampled_data: Option<SampledData>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueSignature")]
    pub value_signature: Option<Signature>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueString")]
    pub value_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTime")]
    pub value_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTiming")]
    pub value_timing: Option<Timing>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueTriggerDefinition")]
    pub value_trigger_definition: Option<TriggerDefinition>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUnsignedInt")]
    pub value_unsigned_int: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUri")]
    pub value_uri: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUrl")]
    pub value_url: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUsageContext")]
    pub value_usage_context: Option<UsageContext>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUuid")]
    pub value_uuid: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Task_Restriction")]
#[serde(deny_unknown_fields)]
pub struct TaskRestriction {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_repetitions")]
    pub repetitions: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub recipient: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub repetitions: Option<PositiveInt>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct TerminologyCapabilities {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_codeSearch")]
    pub code_search: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_copyright")]
    pub copyright: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_experimental")]
    pub experimental: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_kind")]
    pub kind: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lockedDate")]
    pub locked_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_publisher")]
    pub publisher: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_purpose")]
    pub purpose: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub closure: Option<TerminologyCapabilitiesClosure>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "codeSearch")]
    pub code_search: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "codeSystem")]
    pub code_system: Option<Vec<TerminologyCapabilitiesCodeSystem>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub expansion: Option<TerminologyCapabilitiesExpansion>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub implementation: Option<TerminologyCapabilitiesImplementation>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lockedDate")]
    pub locked_date: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub software: Option<TerminologyCapabilitiesSoftware>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub translation: Option<TerminologyCapabilitiesTranslation>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "validateCode")]
    pub validate_code: Option<TerminologyCapabilitiesValidateCode>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TerminologyCapabilities_Closure")]
#[serde(deny_unknown_fields)]
pub struct TerminologyCapabilitiesClosure {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_translation")]
    pub translation: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub translation: Option<Boolean>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TerminologyCapabilities_CodeSystem")]
#[serde(deny_unknown_fields)]
pub struct TerminologyCapabilitiesCodeSystem {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_subsumption")]
    pub subsumption: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub subsumption: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub uri: Option<Canonical>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<Vec<TerminologyCapabilitiesVersion>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TerminologyCapabilities_Expansion")]
#[serde(deny_unknown_fields)]
pub struct TerminologyCapabilitiesExpansion {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_hierarchical")]
    pub hierarchical: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_incomplete")]
    pub incomplete: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_paging")]
    pub paging: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_textFilter")]
    pub text_filter: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub hierarchical: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub incomplete: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub paging: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub parameter: Option<Vec<TerminologyCapabilitiesParameter>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "textFilter")]
    pub text_filter: Option<Markdown>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TerminologyCapabilities_Filter")]
#[serde(deny_unknown_fields)]
pub struct TerminologyCapabilitiesFilter {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_code")]
    pub code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_op")]
    pub op: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub op: Option<Vec<Code>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TerminologyCapabilities_Implementation")]
#[serde(deny_unknown_fields)]
pub struct TerminologyCapabilitiesImplementation {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Url>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TerminologyCapabilities_Parameter")]
#[serde(deny_unknown_fields)]
pub struct TerminologyCapabilitiesParameter {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_documentation")]
    pub documentation: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub documentation: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TerminologyCapabilities_Software")]
#[serde(deny_unknown_fields)]
pub struct TerminologyCapabilitiesSoftware {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TerminologyCapabilities_Translation")]
#[serde(deny_unknown_fields)]
pub struct TerminologyCapabilitiesTranslation {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_needsMap")]
    pub needs_map: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "needsMap")]
    pub needs_map: Option<Boolean>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TerminologyCapabilities_ValidateCode")]
#[serde(deny_unknown_fields)]
pub struct TerminologyCapabilitiesValidateCode {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_translations")]
    pub translations: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub translations: Option<Boolean>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TerminologyCapabilities_Version")]
#[serde(deny_unknown_fields)]
pub struct TerminologyCapabilitiesVersion {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_code")]
    pub code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_compositional")]
    pub compositional: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_isDefault")]
    pub is_default: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_property")]
    pub property: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub compositional: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub filter: Option<Vec<TerminologyCapabilitiesFilter>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "isDefault")]
    pub is_default: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Vec<Code>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub property: Option<Vec<Code>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct TestReport {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_issued")]
    pub issued: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_result")]
    pub result: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_score")]
    pub score: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_tester")]
    pub tester: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub issued: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub participant: Option<Vec<TestReportParticipant>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub result: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub score: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub setup: Option<TestReportSetup>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub teardown: Option<TestReportTeardown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub test: Option<Vec<TestReportTest>>,

    #[serde(rename = "testScript")]
    pub test_script: Reference,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub tester: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TestReport_Action")]
#[serde(deny_unknown_fields)]
pub struct TestReportAction {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub assert: Option<TestReportAssert>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub operation: Option<TestReportOperation>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TestReport_Action1")]
#[serde(deny_unknown_fields)]
pub struct TestReportAction1 {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub assert: Option<TestReportAssert>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub operation: Option<TestReportOperation>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "TestReport_Action2")]
#[serde(deny_unknown_fields)]
pub struct TestReportAction2 {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub operation: TestReportOperation,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TestReport_Assert")]
#[serde(deny_unknown_fields)]
pub struct TestReportAssert {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_detail")]
    pub detail: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_message")]
    pub message: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_result")]
    pub result: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub detail: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub message: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub result: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TestReport_Operation")]
#[serde(deny_unknown_fields)]
pub struct TestReportOperation {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_detail")]
    pub detail: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_message")]
    pub message: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_result")]
    pub result: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub detail: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub message: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub result: Option<Code>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TestReport_Participant")]
#[serde(deny_unknown_fields)]
pub struct TestReportParticipant {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_display")]
    pub display: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_uri")]
    pub uri: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub uri: Option<Uri>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "TestReport_Setup")]
#[serde(deny_unknown_fields)]
pub struct TestReportSetup {
    pub action: Vec<TestReportAction>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "TestReport_Teardown")]
#[serde(deny_unknown_fields)]
pub struct TestReportTeardown {
    pub action: Vec<TestReportAction2>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "TestReport_Test")]
#[serde(deny_unknown_fields)]
pub struct TestReportTest {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    pub action: Vec<TestReportAction1>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct TestScript {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_copyright")]
    pub copyright: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_experimental")]
    pub experimental: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_publisher")]
    pub publisher: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_purpose")]
    pub purpose: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub destination: Option<Vec<TestScriptDestination>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub fixture: Option<Vec<TestScriptFixture>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Identifier>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub metadata: Option<TestScriptMetadata>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub origin: Option<Vec<TestScriptOrigin>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub profile: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub setup: Option<TestScriptSetup>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub teardown: Option<TestScriptTeardown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub test: Option<Vec<TestScriptTest>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub variable: Option<Vec<TestScriptVariable>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TestScript_Action")]
#[serde(deny_unknown_fields)]
pub struct TestScriptAction {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub assert: Option<TestScriptAssert>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub operation: Option<TestScriptOperation>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TestScript_Action1")]
#[serde(deny_unknown_fields)]
pub struct TestScriptAction1 {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub assert: Option<TestScriptAssert>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub operation: Option<TestScriptOperation>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "TestScript_Action2")]
#[serde(deny_unknown_fields)]
pub struct TestScriptAction2 {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub operation: TestScriptOperation,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TestScript_Assert")]
#[serde(deny_unknown_fields)]
pub struct TestScriptAssert {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_compareToSourceExpression")]
    pub compare_to_source_expression: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_compareToSourceId")]
    pub compare_to_source_id: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_compareToSourcePath")]
    pub compare_to_source_path: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_contentType")]
    pub content_type: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_direction")]
    pub direction: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_expression")]
    pub expression: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_headerField")]
    pub header_field: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_label")]
    pub label: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_minimumId")]
    pub minimum_id: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_navigationLinks")]
    pub navigation_links: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_operator")]
    pub operator: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_path")]
    pub path: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_requestMethod")]
    pub request_method: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_requestURL")]
    pub request_url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_resource")]
    pub resource: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_response")]
    pub response: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_responseCode")]
    pub response_code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sourceId")]
    pub source_id: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_validateProfileId")]
    pub validate_profile_id: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_value")]
    pub value: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_warningOnly")]
    pub warning_only: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "compareToSourceExpression")]
    pub compare_to_source_expression: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "compareToSourceId")]
    pub compare_to_source_id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "compareToSourcePath")]
    pub compare_to_source_path: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contentType")]
    pub content_type: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub direction: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "headerField")]
    pub header_field: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "minimumId")]
    pub minimum_id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "navigationLinks")]
    pub navigation_links: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub operator: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "requestMethod")]
    pub request_method: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "requestURL")]
    pub request_url: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub response: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "responseCode")]
    pub response_code: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "sourceId")]
    pub source_id: Option<Id>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "validateProfileId")]
    pub validate_profile_id: Option<Id>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "warningOnly")]
    pub warning_only: Option<Boolean>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "TestScript_Capability")]
#[serde(deny_unknown_fields)]
pub struct TestScriptCapability {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_destination")]
    pub destination: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_link")]
    pub link: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_origin")]
    pub origin: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_required")]
    pub required: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_validated")]
    pub validated: Option<Element>,

    pub capabilities: Canonical,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub destination: Option<Integer>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub link: Option<Vec<Uri>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub origin: Option<Vec<Integer>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub required: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub validated: Option<Boolean>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "TestScript_Destination")]
#[serde(deny_unknown_fields)]
pub struct TestScriptDestination {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_index")]
    pub index: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub index: Option<Integer>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub profile: Coding,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TestScript_Fixture")]
#[serde(deny_unknown_fields)]
pub struct TestScriptFixture {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_autocreate")]
    pub autocreate: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_autodelete")]
    pub autodelete: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub autocreate: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub autodelete: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource: Option<Reference>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TestScript_Link")]
#[serde(deny_unknown_fields)]
pub struct TestScriptLink {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "TestScript_Metadata")]
#[serde(deny_unknown_fields)]
pub struct TestScriptMetadata {
    pub capability: Vec<TestScriptCapability>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub link: Option<Vec<TestScriptLink>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TestScript_Operation")]
#[serde(deny_unknown_fields)]
pub struct TestScriptOperation {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_accept")]
    pub accept: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_contentType")]
    pub content_type: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_destination")]
    pub destination: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_encodeRequestUrl")]
    pub encode_request_url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_label")]
    pub label: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_method")]
    pub method: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_origin")]
    pub origin: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_params")]
    pub params: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_requestId")]
    pub request_id: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_resource")]
    pub resource: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_responseId")]
    pub response_id: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sourceId")]
    pub source_id: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_targetId")]
    pub target_id: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub accept: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "contentType")]
    pub content_type: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub destination: Option<Integer>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "encodeRequestUrl")]
    pub encode_request_url: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub method: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub origin: Option<Integer>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub params: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "requestHeader")]
    pub request_header: Option<Vec<TestScriptRequestHeader>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "requestId")]
    pub request_id: Option<Id>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "responseId")]
    pub response_id: Option<Id>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "sourceId")]
    pub source_id: Option<Id>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetId")]
    pub target_id: Option<Id>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Coding>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "TestScript_Origin")]
#[serde(deny_unknown_fields)]
pub struct TestScriptOrigin {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_index")]
    pub index: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub index: Option<Integer>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub profile: Coding,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TestScript_RequestHeader")]
#[serde(deny_unknown_fields)]
pub struct TestScriptRequestHeader {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_field")]
    pub field: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_value")]
    pub value: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub field: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "TestScript_Setup")]
#[serde(deny_unknown_fields)]
pub struct TestScriptSetup {
    pub action: Vec<TestScriptAction>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "TestScript_Teardown")]
#[serde(deny_unknown_fields)]
pub struct TestScriptTeardown {
    pub action: Vec<TestScriptAction2>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "TestScript_Test")]
#[serde(deny_unknown_fields)]
pub struct TestScriptTest {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    pub action: Vec<TestScriptAction1>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "TestScript_Variable")]
#[serde(deny_unknown_fields)]
pub struct TestScriptVariable {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_defaultValue")]
    pub default_value: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_expression")]
    pub expression: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_headerField")]
    pub header_field: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_hint")]
    pub hint: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_path")]
    pub path: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sourceId")]
    pub source_id: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "defaultValue")]
    pub default_value: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "headerField")]
    pub header_field: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub hint: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "sourceId")]
    pub source_id: Option<Id>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct Timing {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_event")]
    pub event: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub event: Option<Vec<DateTime>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub repeat: Option<TimingRepeat>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "Timing_Repeat")]
#[serde(deny_unknown_fields)]
pub struct TimingRepeat {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_count")]
    pub count: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_countMax")]
    pub count_max: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_dayOfWeek")]
    pub day_of_week: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_duration")]
    pub duration: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_durationMax")]
    pub duration_max: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_durationUnit")]
    pub duration_unit: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_frequency")]
    pub frequency: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_frequencyMax")]
    pub frequency_max: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_offset")]
    pub offset: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_period")]
    pub period: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_periodMax")]
    pub period_max: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_periodUnit")]
    pub period_unit: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_timeOfDay")]
    pub time_of_day: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_when")]
    pub when: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "boundsDuration")]
    pub bounds_duration: Option<Duration>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "boundsPeriod")]
    pub bounds_period: Option<Period>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "boundsRange")]
    pub bounds_range: Option<Range>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub count: Option<PositiveInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "countMax")]
    pub count_max: Option<PositiveInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dayOfWeek")]
    pub day_of_week: Option<Vec<Code>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub duration: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "durationMax")]
    pub duration_max: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "durationUnit")]
    pub duration_unit: Option<serde_json::Value>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub frequency: Option<PositiveInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "frequencyMax")]
    pub frequency_max: Option<PositiveInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub offset: Option<UnsignedInt>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub period: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "periodMax")]
    pub period_max: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "periodUnit")]
    pub period_unit: Option<serde_json::Value>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timeOfDay")]
    pub time_of_day: Option<Vec<Time>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub when: Option<Vec<serde_json::Value>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct TriggerDefinition {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_timingDate")]
    pub timing_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_timingDateTime")]
    pub timing_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_type")]
    pub type_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub condition: Option<Expression>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub data: Option<Vec<DataRequirement>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingDate")]
    pub timing_date: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingDateTime")]
    pub timing_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingReference")]
    pub timing_reference: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "timingTiming")]
    pub timing_timing: Option<Timing>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<serde_json::Value>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct UsageContext {
    pub code: Coding,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCodeableConcept")]
    pub value_codeable_concept: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueQuantity")]
    pub value_quantity: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueRange")]
    pub value_range: Option<Range>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueReference")]
    pub value_reference: Option<Reference>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ValueSet {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_copyright")]
    pub copyright: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_description")]
    pub description: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_experimental")]
    pub experimental: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_immutable")]
    pub immutable: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_publisher")]
    pub publisher: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_purpose")]
    pub purpose: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_title")]
    pub title: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_url")]
    pub url: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub compose: Option<ValueSetCompose>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact: Option<Vec<ContactDetail>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<Markdown>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub expansion: Option<ValueSetExpansion>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub immutable: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Markdown>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "useContext")]
    pub use_context: Option<Vec<UsageContext>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "ValueSet_Compose")]
#[serde(deny_unknown_fields)]
pub struct ValueSetCompose {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_inactive")]
    pub inactive: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lockedDate")]
    pub locked_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub exclude: Option<Vec<ValueSetInclude>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub inactive: Option<Boolean>,

    pub include: Vec<ValueSetInclude>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lockedDate")]
    pub locked_date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ValueSet_Concept")]
#[serde(deny_unknown_fields)]
pub struct ValueSetConcept {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_code")]
    pub code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_display")]
    pub display: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub designation: Option<Vec<ValueSetDesignation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ValueSet_Contains")]
#[serde(deny_unknown_fields)]
pub struct ValueSetContains {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_abstract")]
    pub abstract_: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_code")]
    pub code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_display")]
    pub display: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_inactive")]
    pub inactive: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_system")]
    pub system: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "abstract")]
    pub abstract_: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contains: Option<Vec<ValueSetContains>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub designation: Option<Vec<ValueSetDesignation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub inactive: Option<Boolean>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub system: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ValueSet_Designation")]
#[serde(deny_unknown_fields)]
pub struct ValueSetDesignation {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_value")]
    pub value: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "use")]
    pub use_: Option<Coding>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ValueSet_Expansion")]
#[serde(deny_unknown_fields)]
pub struct ValueSetExpansion {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_identifier")]
    pub identifier: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_offset")]
    pub offset: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_timestamp")]
    pub timestamp: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_total")]
    pub total: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contains: Option<Vec<ValueSetContains>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub offset: Option<Integer>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub parameter: Option<Vec<ValueSetParameter>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub total: Option<Integer>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ValueSet_Filter")]
#[serde(deny_unknown_fields)]
pub struct ValueSetFilter {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_op")]
    pub op: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_property")]
    pub property: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_value")]
    pub value: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub op: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub property: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ValueSet_Include")]
#[serde(deny_unknown_fields)]
pub struct ValueSetInclude {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_system")]
    pub system: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_version")]
    pub version: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub concept: Option<Vec<ValueSetConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub filter: Option<Vec<ValueSetFilter>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub system: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueSet")]
    pub value_set: Option<Vec<Canonical>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "ValueSet_Parameter")]
#[serde(deny_unknown_fields)]
pub struct ValueSetParameter {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_name")]
    pub name: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueBoolean")]
    pub value_boolean: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueCode")]
    pub value_code: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDateTime")]
    pub value_date_time: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueDecimal")]
    pub value_decimal: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueInteger")]
    pub value_integer: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueString")]
    pub value_string: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_valueUri")]
    pub value_uri: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueBoolean")]
    pub value_boolean: Option<bool>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueCode")]
    pub value_code: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDateTime")]
    pub value_date_time: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueDecimal")]
    pub value_decimal: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueInteger")]
    pub value_integer: Option<f64>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueString")]
    pub value_string: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "valueUri")]
    pub value_uri: Option<String>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct VerificationResult {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_lastPerformed")]
    pub last_performed: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_nextScheduled")]
    pub next_scheduled: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_statusDate")]
    pub status_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_targetLocation")]
    pub target_location: Option<Vec<Element>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub attestation: Option<VerificationResultAttestation>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "failureAction")]
    pub failure_action: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub frequency: Option<Timing>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "lastPerformed")]
    pub last_performed: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub need: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "nextScheduled")]
    pub next_scheduled: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "primarySource")]
    pub primary_source: Option<Vec<VerificationResultPrimarySource>>,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "statusDate")]
    pub status_date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub target: Option<Vec<Reference>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "targetLocation")]
    pub target_location: Option<Vec<String>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "validationProcess")]
    pub validation_process: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "validationType")]
    pub validation_type: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub validator: Option<Vec<VerificationResultValidator>>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "VerificationResult_Attestation")]
#[serde(deny_unknown_fields)]
pub struct VerificationResultAttestation {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_date")]
    pub date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_proxyIdentityCertificate")]
    pub proxy_identity_certificate: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sourceIdentityCertificate")]
    pub source_identity_certificate: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "communicationMethod")]
    pub communication_method: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub date: Option<Date>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "onBehalfOf")]
    pub on_behalf_of: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "proxyIdentityCertificate")]
    pub proxy_identity_certificate: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "proxySignature")]
    pub proxy_signature: Option<Signature>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "sourceIdentityCertificate")]
    pub source_identity_certificate: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "sourceSignature")]
    pub source_signature: Option<Signature>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub who: Option<Reference>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "VerificationResult_PrimarySource")]
#[serde(deny_unknown_fields)]
pub struct VerificationResultPrimarySource {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_validationDate")]
    pub validation_date: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "canPushUpdates")]
    pub can_push_updates: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "communicationMethod")]
    pub communication_method: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "pushTypeAvailable")]
    pub push_type_available: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "type")]
    pub type_: Option<Vec<CodeableConcept>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "validationDate")]
    pub validation_date: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "validationStatus")]
    pub validation_status: Option<CodeableConcept>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub who: Option<Reference>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "VerificationResult_Validator")]
#[serde(deny_unknown_fields)]
pub struct VerificationResultValidator {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_identityCertificate")]
    pub identity_certificate: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "attestationSignature")]
    pub attestation_signature: Option<Signature>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "identityCertificate")]
    pub identity_certificate: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub organization: Reference,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct VisionPrescription {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_created")]
    pub created: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_dateWritten")]
    pub date_written: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_implicitRules")]
    pub implicit_rules: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_language")]
    pub language: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_status")]
    pub status: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub contained: Option<Vec<ResourceList>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub created: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "dateWritten")]
    pub date_written: Option<DateTime>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub encounter: Option<Reference>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub identifier: Option<Vec<Identifier>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "implicitRules")]
    pub implicit_rules: Option<Uri>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<Code>,

    #[serde(rename = "lensSpecification")]
    pub lens_specification: Vec<VisionPrescriptionLensSpecification>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub meta: Option<Meta>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    pub patient: Reference,

    pub prescriber: Reference,

    #[serde(rename = "resourceType")]
    pub resource_type: serde_json::Value,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub text: Option<Narrative>,
}

#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(rename = "VisionPrescription_LensSpecification")]
#[serde(deny_unknown_fields)]
pub struct VisionPrescriptionLensSpecification {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_add")]
    pub add: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_axis")]
    pub axis: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_backCurve")]
    pub back_curve: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_brand")]
    pub brand: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_color")]
    pub color: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_cylinder")]
    pub cylinder: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_diameter")]
    pub diameter: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_eye")]
    pub eye: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_power")]
    pub power: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_sphere")]
    pub sphere: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub add: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub axis: Option<Integer>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "backCurve")]
    pub back_curve: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub brand: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub color: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub cylinder: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub diameter: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub duration: Option<Quantity>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub eye: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<Vec<Annotation>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub power: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub prism: Option<Vec<VisionPrescriptionPrism>>,

    pub product: CodeableConcept,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub sphere: Option<Decimal>,
}

#[derive(Clone, PartialEq, Debug, Default, Deserialize, Serialize)]
#[serde(rename = "VisionPrescription_Prism")]
#[serde(deny_unknown_fields)]
pub struct VisionPrescriptionPrism {
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_amount")]
    pub amount: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "_base")]
    pub base: Option<Element>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub amount: Option<Decimal>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub base: Option<Code>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<Extension>>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "modifierExtension")]
    pub modifier_extension: Option<Vec<Extension>>,
}

pub type Base64Binary = String;

pub type Boolean = bool;

pub type Canonical = String;

pub type Code = String;

pub type Date = String;

pub type DateTime = String;

pub type Decimal = f64;

pub type Id = String;

pub type Instant = String;

pub type Integer = f64;

pub type Markdown = String;

pub type Oid = String;

pub type PositiveInt = f64;

pub type Time = String;

pub type UnsignedInt = f64;

pub type Uri = String;

pub type Url = String;

pub type Uuid = String;

pub type Xhtml = serde_json::Value;
#[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]
#[serde(untagged)]
pub enum SchemaModifierExtension {
    Variant0(Account),
    Variant1(ActivityDefinition),
    Variant2(AdministrableProductDefinition),
    Variant3(AdverseEvent),
    Variant4(AllergyIntolerance),
    Variant5(Appointment),
    Variant6(AppointmentResponse),
    Variant7(AuditEvent),
    Variant8(Basic),
    Variant9(Binary),
    Variant10(BiologicallyDerivedProduct),
    Variant11(BodyStructure),
    Variant12(Bundle),
    Variant13(CapabilityStatement),
    Variant14(CarePlan),
    Variant15(CareTeam),
    Variant16(CatalogEntry),
    Variant17(ChargeItem),
    Variant18(ChargeItemDefinition),
    Variant19(Citation),
    Variant20(Claim),
    Variant21(ClaimResponse),
    Variant22(ClinicalImpression),
    Variant23(ClinicalUseDefinition),
    Variant24(CodeSystem),
    Variant25(Communication),
    Variant26(CommunicationRequest),
    Variant27(CompartmentDefinition),
    Variant28(Composition),
    Variant29(ConceptMap),
    Variant30(Condition),
    Variant31(Consent),
    Variant32(Contract),
    Variant33(Coverage),
    Variant34(CoverageEligibilityRequest),
    Variant35(CoverageEligibilityResponse),
    Variant36(DetectedIssue),
    Variant37(Device),
    Variant38(DeviceDefinition),
    Variant39(DeviceMetric),
    Variant40(DeviceRequest),
    Variant41(DeviceUseStatement),
    Variant42(DiagnosticReport),
    Variant43(DocumentManifest),
    Variant44(DocumentReference),
    Variant45(Encounter),
    Variant46(Endpoint),
    Variant47(EnrollmentRequest),
    Variant48(EnrollmentResponse),
    Variant49(EpisodeOfCare),
    Variant50(EventDefinition),
    Variant51(Evidence),
    Variant52(EvidenceReport),
    Variant53(EvidenceVariable),
    Variant54(ExampleScenario),
    Variant55(ExplanationOfBenefit),
    Variant56(FamilyMemberHistory),
    Variant57(Flag),
    Variant58(Goal),
    Variant59(GraphDefinition),
    Variant60(Group),
    Variant61(GuidanceResponse),
    Variant62(HealthcareService),
    Variant63(ImagingStudy),
    Variant64(Immunization),
    Variant65(ImmunizationEvaluation),
    Variant66(ImmunizationRecommendation),
    Variant67(ImplementationGuide),
    Variant68(Ingredient),
    Variant69(InsurancePlan),
    Variant70(Invoice),
    Variant71(Library),
    Variant72(Linkage),
    Variant73(List),
    Variant74(Location),
    Variant75(ManufacturedItemDefinition),
    Variant76(Measure),
    Variant77(MeasureReport),
    Variant78(Media),
    Variant79(Medication),
    Variant80(MedicationAdministration),
    Variant81(MedicationDispense),
    Variant82(MedicationKnowledge),
    Variant83(MedicationRequest),
    Variant84(MedicationStatement),
    Variant85(MedicinalProductDefinition),
    Variant86(MessageDefinition),
    Variant87(MessageHeader),
    Variant88(MolecularSequence),
    Variant89(NamingSystem),
    Variant90(NutritionOrder),
    Variant91(NutritionProduct),
    Variant92(Observation),
    Variant93(ObservationDefinition),
    Variant94(OperationDefinition),
    Variant95(OperationOutcome),
    Variant96(Organization),
    Variant97(OrganizationAffiliation),
    Variant98(PackagedProductDefinition),
    Variant99(Parameters),
    Variant100(Patient),
    Variant101(PaymentNotice),
    Variant102(PaymentReconciliation),
    Variant103(Person),
    Variant104(PlanDefinition),
    Variant105(Practitioner),
    Variant106(PractitionerRole),
    Variant107(Procedure),
    Variant108(Provenance),
    Variant109(Questionnaire),
    Variant110(QuestionnaireResponse),
    Variant111(RegulatedAuthorization),
    Variant112(RelatedPerson),
    Variant113(RequestGroup),
    Variant114(ResearchDefinition),
    Variant115(ResearchElementDefinition),
    Variant116(ResearchStudy),
    Variant117(ResearchSubject),
    Variant118(RiskAssessment),
    Variant119(Schedule),
    Variant120(SearchParameter),
    Variant121(ServiceRequest),
    Variant122(Slot),
    Variant123(Specimen),
    Variant124(SpecimenDefinition),
    Variant125(StructureDefinition),
    Variant126(StructureMap),
    Variant127(Subscription),
    Variant128(SubscriptionStatus),
    Variant129(SubscriptionTopic),
    Variant130(Substance),
    Variant131(SubstanceDefinition),
    Variant132(SupplyDelivery),
    Variant133(SupplyRequest),
    Variant134(Task),
    Variant135(TerminologyCapabilities),
    Variant136(TestReport),
    Variant137(TestScript),
    Variant138(ValueSet),
    Variant139(VerificationResult),
    Variant140(VisionPrescription),
}
pub type Schema = SchemaModifierExtension;